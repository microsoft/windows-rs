#![allow(unused_variables, non_upper_case_globals, non_snake_case, unused_unsafe, non_camel_case_types, dead_code, clippy::all)]
pub const AACMFTEncoder: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2477722705, 8821, 17874, [163, 91, 242, 186, 33, 202, 237, 0]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct AEC_INPUT_STREAM(pub i32);
pub const AEC_CAPTURE_STREAM: AEC_INPUT_STREAM = AEC_INPUT_STREAM(0i32);
pub const AEC_REFERENCE_STREAM: AEC_INPUT_STREAM = AEC_INPUT_STREAM(1i32);
impl ::core::convert::From<i32> for AEC_INPUT_STREAM {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for AEC_INPUT_STREAM {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const AEC_MAX_SYSTEM_MODES: u32 = 6u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct AEC_SYSTEM_MODE(pub i32);
pub const SINGLE_CHANNEL_AEC: AEC_SYSTEM_MODE = AEC_SYSTEM_MODE(0i32);
pub const ADAPTIVE_ARRAY_ONLY: AEC_SYSTEM_MODE = AEC_SYSTEM_MODE(1i32);
pub const OPTIBEAM_ARRAY_ONLY: AEC_SYSTEM_MODE = AEC_SYSTEM_MODE(2i32);
pub const ADAPTIVE_ARRAY_AND_AEC: AEC_SYSTEM_MODE = AEC_SYSTEM_MODE(3i32);
pub const OPTIBEAM_ARRAY_AND_AEC: AEC_SYSTEM_MODE = AEC_SYSTEM_MODE(4i32);
pub const SINGLE_CHANNEL_NSAGC: AEC_SYSTEM_MODE = AEC_SYSTEM_MODE(5i32);
pub const MODE_NOT_SET: AEC_SYSTEM_MODE = AEC_SYSTEM_MODE(6i32);
impl ::core::convert::From<i32> for AEC_SYSTEM_MODE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for AEC_SYSTEM_MODE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct AEC_VAD_MODE(pub i32);
pub const AEC_VAD_DISABLED: AEC_VAD_MODE = AEC_VAD_MODE(0i32);
pub const AEC_VAD_NORMAL: AEC_VAD_MODE = AEC_VAD_MODE(1i32);
pub const AEC_VAD_FOR_AGC: AEC_VAD_MODE = AEC_VAD_MODE(2i32);
pub const AEC_VAD_FOR_SILENCE_SUPPRESSION: AEC_VAD_MODE = AEC_VAD_MODE(3i32);
impl ::core::convert::From<i32> for AEC_VAD_MODE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for AEC_VAD_MODE {
    type Abi = Self;
}
pub const ALawCodecWrapper: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(919301644, 30913, 17074, [153, 67, 132, 98, 98, 243, 23, 134]);
pub const AM_MEDIA_TYPE_REPRESENTATION: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3806603986, 4908, 18718, [162, 104, 60, 124, 45, 202, 24, 31]);
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct ASF_FLAT_PICTURE {
    pub bPictureType: u8,
    pub dwDataLen: u32,
}
impl ASF_FLAT_PICTURE {}
impl ::core::default::Default for ASF_FLAT_PICTURE {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for ASF_FLAT_PICTURE {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for ASF_FLAT_PICTURE {}
unsafe impl ::windows::runtime::Abi for ASF_FLAT_PICTURE {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct ASF_FLAT_SYNCHRONISED_LYRICS {
    pub bTimeStampFormat: u8,
    pub bContentType: u8,
    pub dwLyricsLen: u32,
}
impl ASF_FLAT_SYNCHRONISED_LYRICS {}
impl ::core::default::Default for ASF_FLAT_SYNCHRONISED_LYRICS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for ASF_FLAT_SYNCHRONISED_LYRICS {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for ASF_FLAT_SYNCHRONISED_LYRICS {}
unsafe impl ::windows::runtime::Abi for ASF_FLAT_SYNCHRONISED_LYRICS {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct ASF_INDEX_DESCRIPTOR {
    pub Identifier: ASF_INDEX_IDENTIFIER,
    pub cPerEntryBytes: u16,
    pub szDescription: [u16; 32],
    pub dwInterval: u32,
}
impl ASF_INDEX_DESCRIPTOR {}
impl ::core::default::Default for ASF_INDEX_DESCRIPTOR {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for ASF_INDEX_DESCRIPTOR {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("ASF_INDEX_DESCRIPTOR").field("Identifier", &self.Identifier).field("cPerEntryBytes", &self.cPerEntryBytes).field("szDescription", &self.szDescription).field("dwInterval", &self.dwInterval).finish()
    }
}
impl ::core::cmp::PartialEq for ASF_INDEX_DESCRIPTOR {
    fn eq(&self, other: &Self) -> bool {
        self.Identifier == other.Identifier && self.cPerEntryBytes == other.cPerEntryBytes && self.szDescription == other.szDescription && self.dwInterval == other.dwInterval
    }
}
impl ::core::cmp::Eq for ASF_INDEX_DESCRIPTOR {}
unsafe impl ::windows::runtime::Abi for ASF_INDEX_DESCRIPTOR {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct ASF_INDEX_IDENTIFIER {
    pub guidIndexType: ::windows::runtime::GUID,
    pub wStreamNumber: u16,
}
impl ASF_INDEX_IDENTIFIER {}
impl ::core::default::Default for ASF_INDEX_IDENTIFIER {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for ASF_INDEX_IDENTIFIER {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("ASF_INDEX_IDENTIFIER").field("guidIndexType", &self.guidIndexType).field("wStreamNumber", &self.wStreamNumber).finish()
    }
}
impl ::core::cmp::PartialEq for ASF_INDEX_IDENTIFIER {
    fn eq(&self, other: &Self) -> bool {
        self.guidIndexType == other.guidIndexType && self.wStreamNumber == other.wStreamNumber
    }
}
impl ::core::cmp::Eq for ASF_INDEX_IDENTIFIER {}
unsafe impl ::windows::runtime::Abi for ASF_INDEX_IDENTIFIER {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct ASF_MUX_STATISTICS {
    pub cFramesWritten: u32,
    pub cFramesDropped: u32,
}
impl ASF_MUX_STATISTICS {}
impl ::core::default::Default for ASF_MUX_STATISTICS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for ASF_MUX_STATISTICS {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("ASF_MUX_STATISTICS").field("cFramesWritten", &self.cFramesWritten).field("cFramesDropped", &self.cFramesDropped).finish()
    }
}
impl ::core::cmp::PartialEq for ASF_MUX_STATISTICS {
    fn eq(&self, other: &Self) -> bool {
        self.cFramesWritten == other.cFramesWritten && self.cFramesDropped == other.cFramesDropped
    }
}
impl ::core::cmp::Eq for ASF_MUX_STATISTICS {}
unsafe impl ::windows::runtime::Abi for ASF_MUX_STATISTICS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct ASF_SELECTION_STATUS(pub i32);
pub const ASF_STATUS_NOTSELECTED: ASF_SELECTION_STATUS = ASF_SELECTION_STATUS(0i32);
pub const ASF_STATUS_CLEANPOINTSONLY: ASF_SELECTION_STATUS = ASF_SELECTION_STATUS(1i32);
pub const ASF_STATUS_ALLDATAUNITS: ASF_SELECTION_STATUS = ASF_SELECTION_STATUS(2i32);
impl ::core::convert::From<i32> for ASF_SELECTION_STATUS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for ASF_SELECTION_STATUS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct ASF_STATUSFLAGS(pub i32);
pub const ASF_STATUSFLAGS_INCOMPLETE: ASF_STATUSFLAGS = ASF_STATUSFLAGS(1i32);
pub const ASF_STATUSFLAGS_NONFATAL_ERROR: ASF_STATUSFLAGS = ASF_STATUSFLAGS(2i32);
impl ::core::convert::From<i32> for ASF_STATUSFLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for ASF_STATUSFLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const AVENC_H263V_LEVELCOUNT: u32 = 8u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const AVENC_H264V_LEVELCOUNT: u32 = 16u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const AVENC_H264V_MAX_MBBITS: u32 = 3200u32;
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct AecQualityMetrics_Struct {
    pub i64Timestamp: i64,
    pub ConvergenceFlag: u8,
    pub MicClippedFlag: u8,
    pub MicSilenceFlag: u8,
    pub PstvFeadbackFlag: u8,
    pub SpkClippedFlag: u8,
    pub SpkMuteFlag: u8,
    pub GlitchFlag: u8,
    pub DoubleTalkFlag: u8,
    pub uGlitchCount: u32,
    pub uMicClipCount: u32,
    pub fDuration: f32,
    pub fTSVariance: f32,
    pub fTSDriftRate: f32,
    pub fVoiceLevel: f32,
    pub fNoiseLevel: f32,
    pub fERLE: f32,
    pub fAvgERLE: f32,
    pub dwReserved: u32,
}
impl AecQualityMetrics_Struct {}
impl ::core::default::Default for AecQualityMetrics_Struct {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for AecQualityMetrics_Struct {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("AecQualityMetrics_Struct")
            .field("i64Timestamp", &self.i64Timestamp)
            .field("ConvergenceFlag", &self.ConvergenceFlag)
            .field("MicClippedFlag", &self.MicClippedFlag)
            .field("MicSilenceFlag", &self.MicSilenceFlag)
            .field("PstvFeadbackFlag", &self.PstvFeadbackFlag)
            .field("SpkClippedFlag", &self.SpkClippedFlag)
            .field("SpkMuteFlag", &self.SpkMuteFlag)
            .field("GlitchFlag", &self.GlitchFlag)
            .field("DoubleTalkFlag", &self.DoubleTalkFlag)
            .field("uGlitchCount", &self.uGlitchCount)
            .field("uMicClipCount", &self.uMicClipCount)
            .field("fDuration", &self.fDuration)
            .field("fTSVariance", &self.fTSVariance)
            .field("fTSDriftRate", &self.fTSDriftRate)
            .field("fVoiceLevel", &self.fVoiceLevel)
            .field("fNoiseLevel", &self.fNoiseLevel)
            .field("fERLE", &self.fERLE)
            .field("fAvgERLE", &self.fAvgERLE)
            .field("dwReserved", &self.dwReserved)
            .finish()
    }
}
impl ::core::cmp::PartialEq for AecQualityMetrics_Struct {
    fn eq(&self, other: &Self) -> bool {
        self.i64Timestamp == other.i64Timestamp
            && self.ConvergenceFlag == other.ConvergenceFlag
            && self.MicClippedFlag == other.MicClippedFlag
            && self.MicSilenceFlag == other.MicSilenceFlag
            && self.PstvFeadbackFlag == other.PstvFeadbackFlag
            && self.SpkClippedFlag == other.SpkClippedFlag
            && self.SpkMuteFlag == other.SpkMuteFlag
            && self.GlitchFlag == other.GlitchFlag
            && self.DoubleTalkFlag == other.DoubleTalkFlag
            && self.uGlitchCount == other.uGlitchCount
            && self.uMicClipCount == other.uMicClipCount
            && self.fDuration == other.fDuration
            && self.fTSVariance == other.fTSVariance
            && self.fTSDriftRate == other.fTSDriftRate
            && self.fVoiceLevel == other.fVoiceLevel
            && self.fNoiseLevel == other.fNoiseLevel
            && self.fERLE == other.fERLE
            && self.fAvgERLE == other.fAvgERLE
            && self.dwReserved == other.dwReserved
    }
}
impl ::core::cmp::Eq for AecQualityMetrics_Struct {}
unsafe impl ::windows::runtime::Abi for AecQualityMetrics_Struct {
    type Abi = Self;
}
pub const CAC3DecMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(64473090, 60666, 18393, [178, 104, 95, 179, 227, 16, 222, 228]);
pub const CClusterDetectorDmo: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(921182404, 5722, 17697, [134, 60, 97, 158, 17, 96, 212, 212]);
pub const CColorControlDmo: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2038454768, 35274, 16736, [179, 37, 174, 180, 142, 254, 79, 154]);
pub const CColorConvertDMO: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2552431985, 135, 16900, [176, 32, 50, 130, 83, 142, 87, 211]);
pub const CColorLegalizerDmo: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4261062483, 58510, 20019, [156, 116, 152, 162, 127, 198, 114, 106]);
pub const CDTVAudDecoderDS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2384891954, 65027, 18259, [155, 23, 24, 37, 60, 33, 114, 46]);
pub const CDTVVidDecoderDS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1685552584, 20004, 19435, [157, 25, 96, 163, 91, 225, 218, 175]);
pub const CDVDecoderMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3846638021, 7703, 19597, [148, 231, 71, 137, 64, 67, 53, 132]);
pub const CDVEncoderMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3358254889, 49959, 19662, [145, 77, 129, 113, 254, 254, 190, 251]);
pub const CDeColorConvMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1224952837, 62524, 16399, [132, 193, 144, 166, 131, 25, 90, 58]);
pub const CFrameInterpDMO: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(175963675, 27317, 17204, [158, 216, 63, 151, 203, 55, 218, 161]);
pub const CFrameRateConvertDmo: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(32730338, 2311, 19851, [151, 157, 241, 81, 190, 145, 200, 131]);
pub const CInterlaceMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3047726208, 18689, 16507, [154, 188, 144, 217, 166, 68, 187, 70]);
pub const CLSID_AudioResamplerMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4098340510, 6276, 19070, [128, 85, 52, 111, 116, 214, 237, 179]);
pub const CLSID_CAsfTocParser: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2608316658, 34613, 18117, [185, 15, 95, 11, 48, 62, 246, 171]);
pub const CLSID_CAviTocParser: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(987555276, 5064, 17779, [179, 40, 237, 67, 142, 182, 148, 249]);
pub const CLSID_CClusterDetectorEx: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1194673298, 33406, 19338, [179, 24, 200, 14, 186, 19, 129, 240]);
pub const CLSID_CFileClient: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3217871253, 4676, 18496, [171, 68, 72, 9, 117, 196, 255, 228]);
pub const CLSID_CFileIo: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(295252373, 4676, 18496, [171, 68, 72, 9, 117, 196, 255, 228]);
pub const CLSID_CToc: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1340228757, 10446, 18720, [164, 196, 229, 86, 225, 240, 223, 42]);
pub const CLSID_CTocCollection: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1347954989, 41540, 18496, [171, 68, 72, 9, 117, 196, 255, 228]);
pub const CLSID_CTocEntry: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4063190533, 22620, 19951, [133, 35, 101, 85, 207, 188, 12, 179]);
pub const CLSID_CTocEntryList: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(982305980, 3837, 17315, [184, 56, 243, 138, 85, 43, 162, 55]);
pub const CLSID_CTocParser: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1235136234, 10039, 18505, [139, 182, 71, 241, 7, 234, 243, 88]);
pub const CLSID_CreateMediaExtensionObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4016416077, 1928, 17848, [139, 20, 188, 15, 106, 107, 81, 55]);
pub const CLSID_FrameServerNetworkCameraSource: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2048998055, 34415, 16714, [140, 26, 39, 92, 114, 131, 163, 149]);
pub const CLSID_HttpSchemePlugin: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1154171947, 40361, 18911, [179, 253, 2, 55, 119, 177, 110, 80]);
pub const CLSID_MFByteStreamProxyClassFactory: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1997442679, 18710, 17436, [169, 167, 179, 66, 208, 238, 188, 113]);
pub const CLSID_MFCaptureEngine: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4023269587, 35092, 18036, [167, 223, 174, 27, 61, 101, 75, 138]);
pub const CLSID_MFCaptureEngineClassFactory: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4023269587, 35092, 18036, [167, 223, 174, 27, 61, 101, 75, 138]);
pub const CLSID_MFImageSharingEngineClassFactory: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2989241145, 34803, 16473, [160, 197, 3, 122, 169, 112, 126, 175]);
pub const CLSID_MFMediaEngineClassFactory: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3024327386, 18843, 17515, [164, 203, 0, 95, 234, 208, 230, 213]);
pub const CLSID_MFMediaSharingEngineClassFactory: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4175628283, 27973, 19155, [153, 147, 102, 205, 90, 82, 150, 89]);
pub const CLSID_MFReadWriteClassFactory: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1222831375, 39106, 18999, [190, 213, 22, 99, 18, 221, 216, 63]);
pub const CLSID_MFSinkWriter: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2747005719, 33395, 20050, [158, 14, 151, 57, 220, 136, 121, 144]);
pub const CLSID_MFSourceReader: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(393679676, 2177, 16667, [165, 119, 173, 84, 95, 7, 20, 196]);
pub const CLSID_MFSourceResolver: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2431301135, 58426, 16776, [188, 196, 228, 127, 223, 4, 134, 140]);
pub const CLSID_MP3DecMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3152980033, 2659, 20306, [167, 171, 169, 179, 168, 78, 211, 138]);
pub const CLSID_MPEG2ByteStreamPlugin: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1082596441, 43840, 18207, [141, 195, 31, 37, 157, 134, 36, 121]);
pub const CLSID_MPEG2DLNASink: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4200589253, 27165, 19217, [180, 31, 249, 89, 214, 199, 101, 0]);
pub const CLSID_MSAACDecMFT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(852592295, 8591, 19573, [136, 118, 221, 119, 39, 58, 137, 153]);
pub const CLSID_MSDDPlusDecMFT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(394005246, 36875, 18644, [158, 76, 87, 173, 210, 80, 179, 212]);
pub const CLSID_MSH264DecoderMFT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1657699954, 19569, 19744, [177, 93, 69, 40, 49, 168, 125, 157]);
pub const CLSID_MSH264EncoderMFT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1822753604, 1306, 19949, [151, 121, 164, 51, 5, 22, 94, 53]);
pub const CLSID_MSH265DecoderMFT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1107972515, 54789, 17164, [180, 252, 69, 39, 79, 166, 197, 98]);
pub const CLSID_MSMPEGAudDecMFT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1886419769, 45770, 16405, [171, 234, 248, 68, 125, 34, 216, 139]);
pub const CLSID_MSMPEGDecoderMFT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(762355282, 4671, 18869, [156, 188, 154, 245, 205, 226, 143, 185]);
pub const CLSID_MSOpusDecoder: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1675721744, 11587, 19522, [143, 227, 141, 139, 99, 228, 106, 106]);
pub const CLSID_MSVPxDecoder: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3819631944, 51620, 19566, [35, 77, 90, 218, 55, 75, 0, 0]);
pub const CLSID_NetSchemePlugin: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3925142443, 55675, 17982, [162, 177, 197, 78, 227, 249, 65, 77]);
pub const CLSID_PlayToSourceClassFactory: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3658961818, 15811, 17089, [167, 73, 161, 131, 181, 31, 8, 94]);
pub const CLSID_UrlmonSchemePlugin: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2663691513, 12329, 17837, [148, 123, 52, 77, 226, 162, 73, 226]);
pub const CLSID_VideoProcessorMFT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2289384230, 23332, 18877, [178, 231, 12, 68, 92, 120, 201, 130]);
pub const CLSID_WMADecMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(787172063, 17784, 19728, [188, 167, 187, 149, 95, 86, 50, 10]);
pub const CLSID_WMDRMSystemID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2303245090, 4541, 18326, [147, 227, 151, 77, 27, 87, 86, 120]);
pub const CLSID_WMVDecoderMFT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2194887647, 37053, 17282, [139, 194, 63, 97, 146, 183, 110, 52]);
pub const CMP3DecMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3152980033, 2659, 20306, [167, 171, 169, 179, 168, 78, 211, 138]);
pub const CMPEG2AudDecoderDS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3790708920, 48878, 18701, [186, 124, 6, 108, 64, 181, 226, 185]);
pub const CMPEG2AudioEncoderMFT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1185209692, 29688, 17156, [148, 223, 48, 143, 118, 9, 116, 244]);
pub const CMPEG2EncoderAudioDS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2899596220, 50570, 17617, [187, 245, 191, 179, 37, 190, 45, 120]);
pub const CMPEG2EncoderDS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1599799114, 12159, 17017, [136, 194, 205, 136, 235, 57, 209, 68]);
pub const CMPEG2EncoderVideoDS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1108675801, 51866, 20133, [153, 57, 48, 238, 3, 127, 110, 116]);
pub const CMPEG2VidDecoderDS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(556175611, 33765, 17702, [143, 215, 116, 71, 139, 121, 57, 205]);
pub const CMPEG2VideoEncoderMFT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3862126338, 32951, 19908, [173, 250, 223, 231, 33, 13, 32, 213]);
pub const CMPEGAACDecMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2380142450, 60845, 16835, [180, 190, 31, 48, 251, 78, 224, 214]);
pub const CMSAACDecMFT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(852592295, 8591, 19573, [136, 118, 221, 119, 39, 58, 137, 153]);
pub const CMSAC3Enc: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3333685474, 8359, 20056, [162, 254, 36, 97, 150, 130, 206, 108]);
pub const CMSALACDecMFT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3234692370, 12796, 19388, [179, 99, 115, 34, 238, 62, 24, 121]);
pub const CMSALACEncMFT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2595660428, 29838, 19306, [191, 255, 204, 68, 59, 142, 143, 180]);
pub const CMSDDPlusDecMFT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(394005246, 36875, 18644, [158, 76, 87, 173, 210, 80, 179, 212]);
pub const CMSDolbyDigitalEncMFT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2889029065, 62593, 17879, [130, 108, 11, 64, 108, 31, 100, 184]);
pub const CMSFLACDecMFT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1795898987, 41669, 17684, [128, 85, 175, 232, 169, 82, 66, 217]);
pub const CMSFLACEncMFT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(310708713, 50254, 17884, [149, 233, 194, 85, 184, 244, 102, 166]);
pub const CMSH263EncoderMFT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3158834430, 39072, 20263, [187, 7, 105, 138, 242, 79, 43, 56]);
pub const CMSH264DecoderMFT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1657699954, 19569, 19744, [177, 93, 69, 40, 49, 168, 125, 157]);
pub const CMSH264EncoderMFT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1822753604, 1306, 19949, [151, 121, 164, 51, 5, 22, 94, 53]);
pub const CMSH264RemuxMFT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(94666427, 35824, 19647, [173, 47, 59, 113, 215, 88, 102, 245]);
pub const CMSH265EncoderMFT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4076355700, 35786, 16573, [145, 89, 232, 128, 246, 115, 221, 59]);
pub const CMSMPEGAudDecMFT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1886419769, 45770, 16405, [171, 234, 248, 68, 125, 34, 216, 139]);
pub const CMSMPEGDecoderMFT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(762355282, 4671, 18869, [156, 188, 154, 245, 205, 226, 143, 185]);
pub const CMSOpusDecMFT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1675721744, 11587, 19522, [143, 227, 141, 139, 99, 228, 106, 106]);
pub const CMSSCDecMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2075112369, 55540, 17017, [146, 83, 39, 218, 66, 49, 8, 222]);
pub const CMSSCEncMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2360986630, 53561, 19174, [139, 180, 65, 230, 18, 225, 65, 213]);
pub const CMSSCEncMediaObject2: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4160741536, 42229, 17589, [148, 158, 21, 237, 43, 198, 111, 157]);
pub const CMSVPXEncoderMFT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2931214165, 9542, 18561, [130, 204, 225, 90, 229, 235, 255, 61]);
pub const CMSVideoDSPMFT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1364662084, 32740, 20466, [164, 152, 45, 195, 79, 247, 79, 27]);
pub const CMpeg2DecMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2252170957, 52686, 17943, [180, 127, 200, 146, 156, 252, 40, 166]);
pub const CMpeg43DecMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3416909707, 18851, 18922, [147, 212, 107, 203, 168, 196, 222, 7]);
pub const CMpeg4DecMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4084298378, 24658, 19783, [130, 124, 208, 57, 51, 93, 254, 10]);
pub const CMpeg4EncMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(619862232, 50769, 16450, [147, 228, 202, 101, 74, 187, 104, 44]);
pub const CMpeg4sDecMFT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1451663577, 65081, 16543, [157, 255, 63, 219, 200, 73, 249, 245]);
pub const CMpeg4sDecMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(705805026, 65134, 16969, [134, 75, 158, 158, 214, 232, 219, 194]);
pub const CMpeg4sEncMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1858447294, 55326, 20382, [173, 163, 205, 27, 242, 98, 182, 216]);
pub const CNokiaAACCCDecMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3938417263, 52410, 19808, [134, 32, 177, 82, 204, 151, 114, 99]);
pub const CNokiaAACDecMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018346980, 20009, 19524, [167, 62, 45, 124, 44, 70, 214, 236]);
pub const CODECAPI_AVAudioChannelConfig: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(402169011, 50061, 17256, [158, 222, 99, 185, 77, 23, 127, 159]);
pub const CODECAPI_AVAudioChannelCount: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(490046404, 5507, 18254, [183, 26, 94, 228, 99, 193, 152, 228]);
pub const CODECAPI_AVAudioSampleRate: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2535270179, 6859, 17127, [133, 92, 82, 10, 75, 112, 165, 242]);
pub const CODECAPI_AVDDSurroundMode: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2582836102, 39121, 17490, [161, 99, 171, 199, 138, 110, 183, 112]);
pub const CODECAPI_AVDSPLoudnessEqualization: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2331843093, 6162, 19647, [147, 25, 67, 58, 91, 42, 59, 39]);
pub const CODECAPI_AVDSPSpeakerFill: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1444068513, 22234, 17794, [141, 161, 202, 128, 144, 249, 39, 104]);
pub const CODECAPI_AVDecAACDownmixMode: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(19350645, 63163, 16407, [176, 132, 129, 167, 99, 201, 66, 212]);
pub const CODECAPI_AVDecAudioDualMono: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1246940584, 12536, 16918, [190, 15, 186, 11, 32, 37, 146, 29]);
pub const CODECAPI_AVDecAudioDualMonoReproMode: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2769314182, 52372, 19401, [140, 217, 170, 47, 97, 246, 128, 126]);
pub const CODECAPI_AVDecCommonInputFormat: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3842003513, 48521, 19427, [156, 15, 93, 222, 49, 121, 136, 204]);
pub const CODECAPI_AVDecCommonMeanBitRate: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1497924119, 122, 20346, [142, 65, 92, 72, 177, 234, 197, 198]);
pub const CODECAPI_AVDecCommonMeanBitRateInterval: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(249837510, 14503, 19548, [148, 76, 104, 171, 66, 17, 107, 133]);
pub const CODECAPI_AVDecCommonOutputFormat: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1014562856, 49358, 16982, [177, 162, 27, 15, 200, 177, 220, 220]);
pub const CODECAPI_AVDecDDDynamicRangeScaleHigh: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1343843361, 7987, 19189, [178, 150, 17, 66, 109, 108, 135, 137]);
pub const CODECAPI_AVDecDDDynamicRangeScaleLow: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(72245988, 4517, 17109, [163, 178, 59, 178, 199, 194, 215, 207]);
pub const CODECAPI_AVDecDDMatrixDecodingMode: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3720876453, 1261, 19443, [160, 202, 208, 4, 73, 249, 53, 95]);
pub const CODECAPI_AVDecDDOperationalMode: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3604399825, 1614, 20445, [164, 14, 62, 203, 252, 183, 235, 208]);
pub const CODECAPI_AVDecDDStereoDownMixMode: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1826886188, 16105, 16770, [180, 174, 193, 15, 192, 136, 100, 157]);
pub const CODECAPI_AVDecDisableVideoPostProcessing: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4168389011, 26234, 20268, [169, 232, 93, 74, 249, 36, 240, 143]);
pub const CODECAPI_AVDecHEAACDynamicRangeControl: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(679250622, 27044, 19769, [128, 128, 211, 217, 113, 33, 120, 160]);
pub const CODECAPI_AVDecNumWorkerThreads: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2506212328, 60062, 17461, [155, 30, 169, 62, 105, 24, 148, 216]);
pub const CODECAPI_AVDecSoftwareDynamicFormatChange: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2251173642, 20603, 18431, [175, 71, 1, 226, 98, 66, 152, 183]);
pub const CODECAPI_AVDecVideoAcceleration_H264: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4158360111, 20296, 20200, [174, 49, 139, 110, 190, 85, 138, 226]);
pub const CODECAPI_AVDecVideoAcceleration_MPEG2: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4158360110, 20296, 20200, [174, 49, 139, 110, 190, 85, 138, 226]);
pub const CODECAPI_AVDecVideoAcceleration_VC1: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4158360112, 20296, 20200, [174, 49, 139, 110, 190, 85, 138, 226]);
pub const CODECAPI_AVDecVideoCodecType: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1128605925, 8688, 18102, [182, 44, 155, 27, 107, 101, 140, 209]);
pub const CODECAPI_AVDecVideoDXVABusEncryption: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1108688011, 64779, 18277, [164, 98, 221, 217, 232, 188, 195, 136]);
pub const CODECAPI_AVDecVideoDXVAMode: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4149801118, 29495, 19175, [131, 135, 115, 220, 45, 84, 230, 125]);
pub const CODECAPI_AVDecVideoDropPicWithMissingRef: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4163003267, 5314, 17767, [151, 52, 80, 4, 233, 111, 248, 135]);
pub const CODECAPI_AVDecVideoFastDecodeMode: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1800576893, 54193, 18886, [169, 153, 158, 198, 145, 27, 237, 191]);
pub const CODECAPI_AVDecVideoH264ErrorConcealment: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3974933736, 13366, 17964, [146, 148, 205, 123, 172, 215, 88, 169]);
pub const CODECAPI_AVDecVideoImageSize: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1592095868, 26625, 19627, [170, 241, 98, 72, 250, 132, 27, 164]);
pub const CODECAPI_AVDecVideoInputScanType: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(944209439, 3751, 17101, [140, 209, 19, 12, 237, 87, 197, 128]);
pub const CODECAPI_AVDecVideoMPEG2ErrorConcealment: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2636906008, 29325, 18642, [179, 88, 188, 126, 67, 108, 102, 116]);
pub const CODECAPI_AVDecVideoMaxCodedHeight: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1919066474, 53980, 20085, [155, 168, 101, 192, 198, 211, 43, 19]);
pub const CODECAPI_AVDecVideoMaxCodedWidth: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1524979640, 30639, 16885, [159, 166, 77, 178, 254, 29, 75, 202]);
pub const CODECAPI_AVDecVideoPixelAspectRatio: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2966389317, 62253, 16863, [176, 44, 135, 189, 48, 77, 18, 171]);
pub const CODECAPI_AVDecVideoProcDeinterlaceCSC: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4158360113, 20296, 20200, [174, 49, 139, 110, 190, 85, 138, 226]);
pub const CODECAPI_AVDecVideoSWPowerLevel: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4217185095, 19928, 17673, [174, 208, 219, 95, 169, 170, 147, 244]);
pub const CODECAPI_AVDecVideoSoftwareDeinterlaceMode: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(201904590, 40173, 17728, [186, 227, 206, 179, 128, 20, 17, 9]);
pub const CODECAPI_AVDecVideoThumbnailGenerationMode: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(788369134, 4432, 17192, [156, 245, 102, 220, 233, 51, 252, 244]);
pub const CODECAPI_AVEnableInLoopDeblockFilter: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3538477977, 1571, 19443, [146, 168, 77, 24, 24, 82, 157, 237]);
pub const CODECAPI_AVEncAdaptiveMode: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1142534533, 55839, 20307, [188, 118, 9, 125, 12, 30, 251, 30]);
pub const CODECAPI_AVEncAudioDualMono: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(910692971, 41960, 17193, [155, 58, 92, 229, 102, 164, 59, 211]);
pub const CODECAPI_AVEncAudioInputContent: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1042443307, 24761, 19001, [176, 11, 167, 180, 15, 112, 213, 102]);
pub const CODECAPI_AVEncAudioIntervalToEncode: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2255375181, 29274, 18044, [187, 1, 180, 150, 178, 59, 37, 249]);
pub const CODECAPI_AVEncAudioIntervalToSkip: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2294374292, 50060, 18326, [169, 232, 150, 233, 103, 152, 63, 38]);
pub const CODECAPI_AVEncAudioMapDestChannel0: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3160214368, 57194, 19990, [152, 3, 184, 32, 7, 163, 12, 141]);
pub const CODECAPI_AVEncAudioMapDestChannel1: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3160214369, 57194, 19990, [152, 3, 184, 32, 7, 163, 12, 141]);
pub const CODECAPI_AVEncAudioMapDestChannel10: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3160214378, 57194, 19990, [152, 3, 184, 32, 7, 163, 12, 141]);
pub const CODECAPI_AVEncAudioMapDestChannel11: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3160214379, 57194, 19990, [152, 3, 184, 32, 7, 163, 12, 141]);
pub const CODECAPI_AVEncAudioMapDestChannel12: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3160214380, 57194, 19990, [152, 3, 184, 32, 7, 163, 12, 141]);
pub const CODECAPI_AVEncAudioMapDestChannel13: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3160214381, 57194, 19990, [152, 3, 184, 32, 7, 163, 12, 141]);
pub const CODECAPI_AVEncAudioMapDestChannel14: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3160214382, 57194, 19990, [152, 3, 184, 32, 7, 163, 12, 141]);
pub const CODECAPI_AVEncAudioMapDestChannel15: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3160214383, 57194, 19990, [152, 3, 184, 32, 7, 163, 12, 141]);
pub const CODECAPI_AVEncAudioMapDestChannel2: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3160214370, 57194, 19990, [152, 3, 184, 32, 7, 163, 12, 141]);
pub const CODECAPI_AVEncAudioMapDestChannel3: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3160214371, 57194, 19990, [152, 3, 184, 32, 7, 163, 12, 141]);
pub const CODECAPI_AVEncAudioMapDestChannel4: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3160214372, 57194, 19990, [152, 3, 184, 32, 7, 163, 12, 141]);
pub const CODECAPI_AVEncAudioMapDestChannel5: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3160214373, 57194, 19990, [152, 3, 184, 32, 7, 163, 12, 141]);
pub const CODECAPI_AVEncAudioMapDestChannel6: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3160214374, 57194, 19990, [152, 3, 184, 32, 7, 163, 12, 141]);
pub const CODECAPI_AVEncAudioMapDestChannel7: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3160214375, 57194, 19990, [152, 3, 184, 32, 7, 163, 12, 141]);
pub const CODECAPI_AVEncAudioMapDestChannel8: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3160214376, 57194, 19990, [152, 3, 184, 32, 7, 163, 12, 141]);
pub const CODECAPI_AVEncAudioMapDestChannel9: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3160214377, 57194, 19990, [152, 3, 184, 32, 7, 163, 12, 141]);
pub const CODECAPI_AVEncAudioMeanBitRate: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2450691515, 20426, 18041, [170, 184, 158, 42, 29, 117, 51, 132]);
pub const CODECAPI_AVEncChromaEncodeMode: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2319952730, 18328, 19603, [181, 165, 85, 79, 154, 59, 159, 80]);
pub const CODECAPI_AVEncChromaUpdateTime: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1263524248, 17012, 16571, [142, 228, 7, 85, 62, 126, 45, 58]);
pub const CODECAPI_AVEncCodecType: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(145705665, 62450, 19572, [157, 207, 55, 242, 236, 121, 248, 38]);
pub const CODECAPI_AVEncCommonAllowFrameDrops: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3628563915, 38296, 18659, [141, 12, 117, 43, 242, 6, 9, 62]);
pub const CODECAPI_AVEncCommonBufferInLevel: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3653617883, 64628, 16484, [148, 233, 205, 25, 249, 71, 237, 69]);
pub const CODECAPI_AVEncCommonBufferOutLevel: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3433987913, 53436, 20029, [165, 126, 251, 87, 64, 20, 0, 105]);
pub const CODECAPI_AVEncCommonBufferSize: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(230253940, 46756, 19595, [129, 6, 55, 115, 222, 3, 16, 205]);
pub const CODECAPI_AVEncCommonFormatConstraint: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1472969144, 4463, 18769, [180, 12, 194, 160, 53, 237, 143, 23]);
pub const CODECAPI_AVEncCommonLowLatency: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2638138709, 35304, 18698, [151, 10, 12, 149, 72, 213, 165, 110]);
pub const CODECAPI_AVEncCommonMaxBitRate: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2521950948, 14777, 20159, [133, 239, 215, 244, 68, 236, 116, 101]);
pub const CODECAPI_AVEncCommonMeanBitRate: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4146209652, 8516, 18453, [181, 80, 163, 127, 142, 18, 238, 82]);
pub const CODECAPI_AVEncCommonMeanBitRateInterval: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3215601420, 52098, 19392, [132, 116, 240, 106, 138, 13, 2, 88]);
pub const CODECAPI_AVEncCommonMinBitRate: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(269747634, 8323, 16436, [168, 6, 239, 190, 221, 215, 201, 255]);
pub const CODECAPI_AVEncCommonMultipassMode: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(575880524, 18401, 16821, [147, 82, 162, 183, 120, 14, 122, 196]);
pub const CODECAPI_AVEncCommonPassEnd: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(238879164, 51292, 18045, [139, 96, 196, 16, 18, 238, 59, 246]);
pub const CODECAPI_AVEncCommonPassStart: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1785164703, 20149, 17285, [153, 40, 242, 118, 169, 57, 239, 149]);
pub const CODECAPI_AVEncCommonQuality: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4240398243, 32421, 19212, [150, 68, 105, 180, 12, 57, 195, 145]);
pub const CODECAPI_AVEncCommonQualityVsSpeed: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2553490936, 973, 18283, [137, 250, 63, 158, 68, 45, 236, 159]);
pub const CODECAPI_AVEncCommonRateControlMode: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(470157545, 14092, 18192, [138, 88, 203, 97, 129, 196, 36, 35]);
pub const CODECAPI_AVEncCommonRealTime: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(339349494, 41265, 17370, [184, 30, 152, 251, 184, 236, 55, 142]);
pub const CODECAPI_AVEncCommonStreamEndHandling: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1789735087, 27560, 19660, [143, 202, 24, 209, 155, 234, 235, 28]);
pub const CODECAPI_AVEncCommonTranscodeEncodingProfile: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1766291580, 62728, 20137, [177, 233, 161, 254, 58, 73, 251, 201]);
pub const CODECAPI_AVEncDDAtoDConverterType: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1906284050, 33185, 18400, [154, 5, 217, 74, 213, 252, 169, 72]);
pub const CODECAPI_AVEncDDCentreDownMixLevel: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3800368940, 51544, 19073, [175, 210, 229, 224, 218, 241, 177, 72]);
pub const CODECAPI_AVEncDDChannelBWLowPassFilter: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3784802845, 53991, 17378, [173, 44, 0, 88, 47, 81, 133, 69]);
pub const CODECAPI_AVEncDDCopyright: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2257907830, 52597, 18461, [165, 198, 169, 4, 220, 200, 40, 240]);
pub const CODECAPI_AVEncDDDCHighPassFilter: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2506433439, 34332, 19144, [191, 218, 224, 12, 180, 219, 133, 72]);
pub const CODECAPI_AVEncDDDialogNormalization: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3607452367, 61733, 17277, [167, 4, 121, 199, 159, 4, 4, 168]);
pub const CODECAPI_AVEncDDDigitalDeemphasis: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3760497346, 38012, 17836, [135, 216, 241, 3, 12, 92, 0, 130]);
pub const CODECAPI_AVEncDDDynamicRangeCompressionControl: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3485663085, 31160, 19341, [168, 170, 160, 201, 189, 28, 41, 64]);
pub const CODECAPI_AVEncDDHeadphoneMode: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1079172076, 21237, 17141, [155, 0, 209, 52, 177, 52, 27, 157]);
pub const CODECAPI_AVEncDDLFELowPassFilter: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3552055151, 40213, 17893, [145, 190, 1, 156, 63, 171, 31, 1]);
pub const CODECAPI_AVEncDDLoRoCenterMixLvl_x10: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(486253090, 9651, 19444, [155, 253, 231, 17, 18, 103, 133, 140]);
pub const CODECAPI_AVEncDDLoRoSurroundMixLvl_x10: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3878014966, 60246, 16583, [132, 80, 43, 147, 103, 233, 21, 85]);
pub const CODECAPI_AVEncDDLtRtCenterMixLvl_x10: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3701549218, 18719, 17920, [178, 218, 118, 227, 52, 75, 65, 151]);
pub const CODECAPI_AVEncDDLtRtSurroundMixLvl_x10: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(555894471, 15660, 19962, [188, 33, 101, 42, 144, 152, 105, 13]);
pub const CODECAPI_AVEncDDOriginalBitstream: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2523588608, 23507, 20473, [149, 185, 211, 5, 102, 39, 56, 86]);
pub const CODECAPI_AVEncDDPreferredStereoDownMixMode: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2135845681, 37253, 16445, [176, 162, 118, 55, 67, 230, 240, 99]);
pub const CODECAPI_AVEncDDProductionInfoExists: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2964848223, 46763, 20288, [150, 77, 141, 145, 241, 124, 25, 232]);
pub const CODECAPI_AVEncDDProductionMixLevel: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(807211066, 52217, 18294, [136, 153, 124, 21, 180, 97, 171, 38]);
pub const CODECAPI_AVEncDDProductionRoomType: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3671567712, 9176, 19127, [162, 132, 85, 105, 134, 216, 166, 254]);
pub const CODECAPI_AVEncDDRFPreEmphasisFilter: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(565134528, 9294, 20285, [162, 204, 61, 48, 104, 178, 231, 63]);
pub const CODECAPI_AVEncDDService: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3538009799, 20850, 19754, [165, 14, 47, 59, 130, 177, 221, 248]);
pub const CODECAPI_AVEncDDSurround3dBAttenuation: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1296284061, 12770, 18617, [191, 46, 92, 191, 26, 87, 39, 132]);
pub const CODECAPI_AVEncDDSurround90DegreeePhaseShift: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(636284061, 13651, 17088, [187, 86, 210, 87, 146, 16, 79, 128]);
pub const CODECAPI_AVEncDDSurroundDownMixLevel: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2065749733, 3023, 17011, [164, 135, 80, 107, 4, 121, 151, 233]);
pub const CODECAPI_AVEncDDSurroundExMode: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2439019758, 56285, 20150, [188, 162, 170, 223, 175, 163, 221, 104]);
pub const CODECAPI_AVEncEnableVideoProcessing: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(7293942, 3747, 19778, [135, 2, 181, 216, 190, 15, 122, 146]);
pub const CODECAPI_AVEncH264CABACEnable: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4000099682, 54021, 16968, [165, 14, 225, 178, 85, 247, 202, 248]);
pub const CODECAPI_AVEncH264PPSID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3219300034, 1388, 19816, [163, 141, 174, 89, 68, 200, 88, 46]);
pub const CODECAPI_AVEncH264SPSID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1358139217, 11129, 16611, [179, 156, 126, 159, 160, 119, 5, 1]);
pub const CODECAPI_AVEncInputVideoSystem: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3202225261, 46614, 19911, [146, 178, 245, 217, 250, 146, 152, 247]);
pub const CODECAPI_AVEncLowPowerEncoder: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3060323714, 35757, 20330, [145, 65, 55, 90, 149, 53, 139, 109]);
pub const CODECAPI_AVEncMP12MuxDVDNavPacks: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3344989421, 36081, 19097, [131, 161, 238, 84, 97, 190, 53, 116]);
pub const CODECAPI_AVEncMP12MuxEarliestPTS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(359805622, 63497, 18254, [148, 100, 167, 249, 48, 20, 168, 23]);
pub const CODECAPI_AVEncMP12MuxInitialSCR: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(875801889, 7057, 18955, [177, 144, 43, 119, 6, 59, 99, 164]);
pub const CODECAPI_AVEncMP12MuxLargestPacketSize: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(902739729, 62561, 19346, [164, 239, 23, 182, 132, 30, 210, 84]);
pub const CODECAPI_AVEncMP12MuxMuxRate: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3993271410, 19419, 19101, [142, 33, 65, 146, 108, 130, 61, 167]);
pub const CODECAPI_AVEncMP12MuxNumStreams: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4145433153, 56557, 18009, [168, 242, 251, 105, 63, 42, 76, 208]);
pub const CODECAPI_AVEncMP12MuxPackSize: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4178969914, 7400, 20399, [170, 11, 186, 49, 200, 0, 52, 184]);
pub const CODECAPI_AVEncMP12MuxPacketOverhead: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3825981216, 14677, 17491, [172, 249, 183, 145, 50, 163, 143, 160]);
pub const CODECAPI_AVEncMP12MuxSysAudioLock: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(263935826, 7491, 18367, [189, 121, 242, 41, 61, 140, 227, 55]);
pub const CODECAPI_AVEncMP12MuxSysCSPS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2035482437, 39949, 18466, [188, 130, 138, 215, 114, 224, 41, 147]);
pub const CODECAPI_AVEncMP12MuxSysFixed: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3472595070, 35151, 17710, [143, 137, 164, 239, 140, 236, 6, 58]);
pub const CODECAPI_AVEncMP12MuxSysRateBound: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(99631754, 60976, 18589, [174, 40, 32, 92, 114, 68, 103, 16]);
pub const CODECAPI_AVEncMP12MuxSysSTDBufferBound: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(896821507, 46405, 17383, [187, 53, 197, 224, 167, 213, 9, 60]);
pub const CODECAPI_AVEncMP12MuxSysVideoLock: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3089720328, 9264, 19767, [162, 161, 149, 179, 228, 53, 169, 29]);
pub const CODECAPI_AVEncMP12MuxTargetPacketizer: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3630309674, 8213, 17885, [154, 50, 27, 58, 168, 130, 5, 160]);
pub const CODECAPI_AVEncMP12PktzCopyright: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3371479233, 2380, 17351, [142, 104, 165, 149, 64, 90, 110, 248]);
pub const CODECAPI_AVEncMP12PktzInitialPTS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(709828709, 39523, 19744, [174, 34, 10, 27, 200, 150, 163, 21]);
pub const CODECAPI_AVEncMP12PktzOriginal: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1796703254, 12729, 18788, [148, 203, 107, 255, 134, 108, 223, 131]);
pub const CODECAPI_AVEncMP12PktzPacketSize: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2876322938, 4914, 19934, [160, 229, 204, 247, 218, 138, 15, 34]);
pub const CODECAPI_AVEncMP12PktzSTDBuffer: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(192224208, 33182, 18316, [148, 53, 117, 32, 137, 38, 179, 119]);
pub const CODECAPI_AVEncMP12PktzStreamID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3358904376, 62952, 17416, [155, 96, 136, 243, 100, 147, 254, 223]);
pub const CODECAPI_AVEncMPACodingMode: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2976570883, 19347, 17367, [165, 80, 144, 180, 254, 34, 69, 55]);
pub const CODECAPI_AVEncMPACopyright: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2796451370, 53417, 17492, [184, 239, 242, 219, 238, 253, 211, 189]);
pub const CODECAPI_AVEncMPAEmphasisType: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(760872154, 48974, 20182, [181, 223, 91, 3, 179, 107, 10, 31]);
pub const CODECAPI_AVEncMPAEnableRedundancyProtection: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1582608542, 45799, 18803, [168, 155, 11, 54, 80, 163, 190, 218]);
pub const CODECAPI_AVEncMPALayer: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2637656624, 63771, 17725, [156, 224, 120, 68, 84, 20, 194, 45]);
pub const CODECAPI_AVEncMPAOriginalBitstream: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1023113301, 40137, 18431, [184, 41, 179, 103, 134, 201, 35, 70]);
pub const CODECAPI_AVEncMPAPrivateUserBit: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2946827726, 49635, 20029, [133, 27, 97, 183, 0, 229, 230, 204]);
pub const CODECAPI_AVEncMPVAddSeqEndCode: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2820872079, 22495, 19578, [184, 253, 229, 236, 136, 135, 112, 141]);
pub const CODECAPI_AVEncMPVDefaultBPictureCount: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2369325740, 56412, 16896, [181, 127, 129, 77, 4, 186, 186, 178]);
pub const CODECAPI_AVEncMPVFrameFieldMode: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2897600150, 31635, 19503, [136, 37, 176, 41, 95, 169, 59, 244]);
pub const CODECAPI_AVEncMPVGOPOpen: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2983580838, 13056, 18865, [174, 97, 160, 153, 55, 171, 14, 73]);
pub const CODECAPI_AVEncMPVGOPSInSeq: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2570326228, 9873, 16786, [153, 120, 152, 220, 38, 3, 102, 159]);
pub const CODECAPI_AVEncMPVGOPSize: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2515737382, 38308, 16810, [147, 3, 36, 106, 127, 198, 238, 241]);
pub const CODECAPI_AVEncMPVGOPSizeMax: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4269663428, 6454, 20450, [189, 247, 31, 24, 202, 29, 0, 31]);
pub const CODECAPI_AVEncMPVGOPSizeMin: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1901448992, 54336, 18514, [173, 15, 156, 74, 191, 227, 122, 106]);
pub const CODECAPI_AVEncMPVGenerateHeaderPicDispExt: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3326160772, 49215, 20288, [160, 12, 66, 147, 223, 131, 149, 187]);
pub const CODECAPI_AVEncMPVGenerateHeaderPicExt: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(461661355, 37967, 17904, [183, 78, 58, 88, 218, 209, 31, 55]);
pub const CODECAPI_AVEncMPVGenerateHeaderSeqDispExt: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1681369711, 23100, 19945, [138, 22, 83, 217, 196, 173, 50, 111]);
pub const CODECAPI_AVEncMPVGenerateHeaderSeqExt: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3588720145, 2093, 20075, [152, 175, 15, 81, 171, 19, 146, 34]);
pub const CODECAPI_AVEncMPVGenerateHeaderSeqScaleExt: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(119723567, 56665, 19078, [156, 213, 100, 79, 142, 38, 83, 216]);
pub const CODECAPI_AVEncMPVIntraDCPrecision: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2685493585, 52168, 19187, [151, 220, 208, 12, 206, 184, 45, 121]);
pub const CODECAPI_AVEncMPVIntraVLCTable: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2729983989, 6809, 16474, [175, 149, 197, 153, 125, 85, 141, 58]);
pub const CODECAPI_AVEncMPVLevel: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1860439104, 42508, 16879, [143, 80, 55, 194, 36, 158, 44, 179]);
pub const CODECAPI_AVEncMPVProfile: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3669709642, 7577, 17028, [151, 90, 217, 14, 34, 57, 186, 161]);
pub const CODECAPI_AVEncMPVQScaleType: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(729410487, 62596, 19191, [187, 88, 162, 161, 136, 197, 203, 190]);
pub const CODECAPI_AVEncMPVQuantMatrixChromaIntra: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2662984916, 397, 20477, [143, 45, 57, 228, 159, 7, 177, 122]);
pub const CODECAPI_AVEncMPVQuantMatrixChromaNonIntra: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(336967345, 13866, 17208, [186, 154, 30, 245, 135, 3, 192, 91]);
pub const CODECAPI_AVEncMPVQuantMatrixIntra: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2615805171, 26145, 17452, [139, 161, 58, 195, 120, 151, 150, 152]);
pub const CODECAPI_AVEncMPVQuantMatrixNonIntra: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2280931800, 2455, 19435, [160, 142, 133, 115, 212, 9, 207, 117]);
pub const CODECAPI_AVEncMPVScanPattern: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2139768718, 31675, 19170, [178, 252, 150, 209, 127, 196, 162, 214]);
pub const CODECAPI_AVEncMPVSceneDetection: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1428658673, 56140, 16475, [138, 58, 201, 63, 45, 6, 116, 220]);
pub const CODECAPI_AVEncMPVUseConcealmentMotionVectors: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3967225075, 26888, 19275, [170, 48, 127, 185, 134, 33, 79, 234]);
pub const CODECAPI_AVEncMaxFrameRate: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3113098033, 6650, 19791, [153, 49, 214, 165, 184, 170, 185, 60]);
pub const CODECAPI_AVEncMuxOutputStreamType: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3470630543, 13523, 17627, [161, 216, 248, 21, 32, 37, 79, 62]);
pub const CODECAPI_AVEncNoInputCopy: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3535039018, 59630, 20165, [134, 158, 68, 155, 108, 98, 200, 26]);
pub const CODECAPI_AVEncNumWorkerThreads: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2965946208, 5879, 18769, [163, 11, 29, 177, 96, 146, 147, 214]);
pub const CODECAPI_AVEncProgressiveUpdateTime: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1688186726, 44998, 18472, [143, 220, 7, 113, 205, 154, 177, 125]);
pub const CODECAPI_AVEncSliceControlMode: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3924263663, 24344, 17609, [169, 11, 233, 195, 194, 193, 123, 11]);
pub const CODECAPI_AVEncSliceControlSize: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2465537523, 1957, 16754, [174, 254, 198, 156, 163, 182, 14, 53]);
pub const CODECAPI_AVEncSliceGenerationMode: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2322318975, 38039, 17030, [180, 107, 2, 219, 141, 96, 237, 188]);
pub const CODECAPI_AVEncStatAudioAverageBPS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3395757275, 28761, 17233, [139, 67, 248, 33, 152, 130, 106, 20]);
pub const CODECAPI_AVEncStatAudioAveragePCMValue: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2542957304, 53631, 20018, [187, 115, 78, 115, 28, 104, 186, 45]);
pub const CODECAPI_AVEncStatAudioPeakPCMValue: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3706191156, 56320, 19478, [130, 27, 53, 217, 235, 0, 251, 26]);
pub const CODECAPI_AVEncStatAverageBPS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3395757275, 28761, 17233, [139, 67, 248, 33, 152, 130, 106, 20]);
pub const CODECAPI_AVEncStatCommonCompletedPasses: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1046340915, 40439, 17292, [133, 79, 159, 125, 211, 104, 61, 52]);
pub const CODECAPI_AVEncStatHardwareBandwidthUtilitization: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(19184283, 56385, 18470, [180, 95, 24, 172, 1, 179, 213, 168]);
pub const CODECAPI_AVEncStatHardwareProcessorUtilitization: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2573058087, 52117, 18918, [185, 27, 89, 103, 117, 60, 220, 184]);
pub const CODECAPI_AVEncStatMPVSkippedEmptyFrames: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(840523731, 22797, 18450, [167, 237, 109, 99, 154, 31, 151, 17]);
pub const CODECAPI_AVEncStatVideoCodedFrames: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3565129057, 28506, 18982, [187, 159, 205, 149, 24, 70, 43, 205]);
pub const CODECAPI_AVEncStatVideoOutputFrameRate: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3195304009, 39604, 19043, [152, 254, 241, 67, 240, 79, 142, 233]);
pub const CODECAPI_AVEncStatVideoTotalFrames: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4255815958, 4506, 16930, [154, 214, 63, 124, 171, 153, 204, 139]);
pub const CODECAPI_AVEncStatWMVCBAvg: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1789272735, 54786, 19357, [182, 140, 193, 173, 120, 136, 75, 239]);
pub const CODECAPI_AVEncStatWMVCBMax: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3916873464, 254, 17588, [182, 37, 143, 35, 139, 192, 52, 153]);
pub const CODECAPI_AVEncStatWMVDecoderComplexityProfile: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2313592771, 3995, 17260, [151, 74, 223, 130, 18, 39, 201, 13]);
pub const CODECAPI_AVEncVideoCBRMotionTradeoff: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(222905630, 6357, 17255, [164, 239, 50, 64, 223, 22, 147, 196]);
pub const CODECAPI_AVEncVideoCTBSize: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3565009074, 59195, 19641, [140, 62, 189, 135, 125, 6, 215, 123]);
pub const CODECAPI_AVEncVideoCodedVideoAccessUnitSize: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3031501845, 5287, 19688, [177, 115, 220, 144, 160, 180, 252, 219]);
pub const CODECAPI_AVEncVideoContentType: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1712421578, 60279, 17821, [147, 12, 164, 141, 157, 6, 131, 252]);
pub const CODECAPI_AVEncVideoDefaultUpperFieldDominant: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2164352964, 3009, 18378, [143, 194, 87, 5, 90, 20, 116, 165]);
pub const CODECAPI_AVEncVideoDirtyRectEnabled: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2328596445, 24076, 19558, [135, 41, 184, 246, 41, 171, 4, 251]);
pub const CODECAPI_AVEncVideoDisplayDimension: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3724883560, 62700, 18345, [134, 208, 131, 103, 112, 240, 193, 213]);
pub const CODECAPI_AVEncVideoEncodeDimension: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(276094760, 32271, 18340, [164, 83, 205, 215, 56, 112, 245, 206]);
pub const CODECAPI_AVEncVideoEncodeFrameTypeQP: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2859513360, 57407, 17676, [173, 7, 7, 49, 78, 99, 156, 231]);
pub const CODECAPI_AVEncVideoEncodeOffsetOrigin: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1807784190, 42778, 17492, [133, 46, 77, 45, 222, 178, 205, 36]);
pub const CODECAPI_AVEncVideoEncodeQP: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(750086507, 9211, 19681, [160, 249, 239, 91, 144, 253, 85, 202]);
pub const CODECAPI_AVEncVideoFieldSwap: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4278023529, 19978, 18930, [159, 43, 54, 14, 164, 140, 25, 162]);
pub const CODECAPI_AVEncVideoForceKeyFrame: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(965483416, 33619, 18266, [158, 242, 143, 38, 93, 38, 3, 69]);
pub const CODECAPI_AVEncVideoForceSourceScanType: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(519177823, 1418, 18277, [164, 252, 138, 134, 76, 16, 48, 18]);
pub const CODECAPI_AVEncVideoGradualIntraRefresh: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2402581998, 51981, 18874, [180, 98, 219, 105, 39, 238, 33, 1]);
pub const CODECAPI_AVEncVideoHeaderDropFrame: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1859772708, 31013, 17406, [151, 27, 224, 25, 246, 34, 34, 180]);
pub const CODECAPI_AVEncVideoHeaderFrames: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2950034791, 23579, 19164, [189, 175, 115, 86, 16, 56, 20, 54]);
pub const CODECAPI_AVEncVideoHeaderHours: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(718042882, 58074, 16728, [191, 155, 136, 136, 1, 41, 215, 64]);
pub const CODECAPI_AVEncVideoHeaderMinutes: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3692730830, 775, 16523, [136, 11, 184, 52, 142, 232, 202, 127]);
pub const CODECAPI_AVEncVideoHeaderSeconds: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1244535301, 42880, 20312, [129, 32, 154, 68, 157, 105, 101, 107]);
pub const CODECAPI_AVEncVideoInputChromaResolution: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3138186291, 5873, 18352, [138, 136, 55, 129, 91, 238, 23, 57]);
pub const CODECAPI_AVEncVideoInputChromaSubsampling: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2833726009, 17461, 20163, [166, 234, 152, 48, 15, 75, 54, 247]);
pub const CODECAPI_AVEncVideoInputColorLighting: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1185518921, 21, 19013, [156, 48, 29, 92, 250, 37, 131, 22]);
pub const CODECAPI_AVEncVideoInputColorNominalRange: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(382674374, 41638, 18665, [174, 128, 33, 174, 196, 29, 66, 126]);
pub const CODECAPI_AVEncVideoInputColorPrimaries: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3259856959, 31974, 17016, [144, 171, 40, 164, 241, 229, 248, 108]);
pub const CODECAPI_AVEncVideoInputColorTransferFunction: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2349162769, 43459, 19208, [160, 160, 206, 19, 248, 162, 124, 117]);
pub const CODECAPI_AVEncVideoInputColorTransferMatrix: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1391290553, 29397, 16521, [149, 141, 245, 64, 93, 85, 8, 28]);
pub const CODECAPI_AVEncVideoInstantTemporalUpSwitching: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2737865479, 3478, 19364, [177, 240, 185, 26, 94, 73, 223, 16]);
pub const CODECAPI_AVEncVideoIntraLayerPrediction: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3551479480, 48967, 17595, [162, 131, 105, 240, 176, 34, 143, 249]);
pub const CODECAPI_AVEncVideoInverseTelecineEnable: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(782829963, 59245, 19661, [160, 48, 211, 184, 137, 193, 182, 76]);
pub const CODECAPI_AVEncVideoInverseTelecineThreshold: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1076133252, 59541, 18815, [180, 76, 183, 69, 96, 172, 254, 39]);
pub const CODECAPI_AVEncVideoLTRBufferControl: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2762008893, 19644, 17484, [137, 244, 130, 109, 49, 14, 146, 167]);
pub const CODECAPI_AVEncVideoMarkLTRFrame: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3828303688, 41069, 20217, [140, 234, 61, 5, 253, 227, 189, 59]);
pub const CODECAPI_AVEncVideoMaxCTBSize: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2183357439, 52936, 17381, [146, 253, 224, 151, 72, 132, 133, 233]);
pub const CODECAPI_AVEncVideoMaxKeyframeDistance: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(696717882, 47763, 18180, [180, 137, 236, 30, 95, 37, 41, 44]);
pub const CODECAPI_AVEncVideoMaxNumRefFrame: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2521311725, 38137, 17332, [183, 77, 239, 64, 148, 75, 105, 160]);
pub const CODECAPI_AVEncVideoMaxQP: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1034907494, 42663, 17888, [168, 229, 242, 116, 63, 70, 163, 162]);
pub const CODECAPI_AVEncVideoMaxTemporalLayers: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2623966462, 2273, 16970, [147, 78, 183, 100, 176, 100, 128, 42]);
pub const CODECAPI_AVEncVideoMeanAbsoluteDifference: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3854614799, 33188, 16941, [140, 63, 180, 116, 164, 88, 19, 54]);
pub const CODECAPI_AVEncVideoMinQP: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(249703530, 41852, 17768, [181, 241, 157, 76, 43, 58, 184, 134]);
pub const CODECAPI_AVEncVideoNoOfFieldsToEncode: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1642380258, 20192, 16615, [128, 171, 81, 221, 238, 190, 98, 145]);
pub const CODECAPI_AVEncVideoNoOfFieldsToSkip: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2843611712, 5159, 19478, [167, 247, 61, 207, 216, 186, 76, 197]);
pub const CODECAPI_AVEncVideoNumGOPsPerIDR: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2210159579, 23433, 17697, [143, 102, 51, 21, 28, 55, 49, 118]);
pub const CODECAPI_AVEncVideoOutputChromaResolution: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1620554953, 31773, 20068, [191, 204, 158, 151, 101, 49, 138, 231]);
pub const CODECAPI_AVEncVideoOutputChromaSubsampling: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4199947372, 32023, 17648, [131, 201, 50, 237, 18, 233, 99, 67]);
pub const CODECAPI_AVEncVideoOutputColorLighting: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(240822982, 44262, 19548, [153, 142, 26, 140, 156, 108, 15, 137]);
pub const CODECAPI_AVEncVideoOutputColorNominalRange: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2535994861, 34741, 20117, [149, 0, 199, 57, 88, 86, 110, 84]);
pub const CODECAPI_AVEncVideoOutputColorPrimaries: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3197472892, 40196, 18721, [137, 133, 166, 214, 216, 125, 26, 108]);
pub const CODECAPI_AVEncVideoOutputColorTransferFunction: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1249871946, 59921, 17933, [191, 87, 184, 139, 199, 89, 0, 222]);
pub const CODECAPI_AVEncVideoOutputColorTransferMatrix: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2847474756, 44864, 17168, [143, 190, 237, 109, 147, 63, 137, 43]);
pub const CODECAPI_AVEncVideoOutputFrameRate: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3934644163, 38247, 19865, [135, 196, 2, 193, 194, 120, 202, 124]);
pub const CODECAPI_AVEncVideoOutputFrameRateConversion: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2349239284, 13978, 19363, [130, 253, 178, 81, 143, 179, 57, 110]);
pub const CODECAPI_AVEncVideoOutputScanType: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1175147894, 33838, 18859, [166, 45, 179, 111, 115, 18, 201, 219]);
pub const CODECAPI_AVEncVideoPixelAspectRatio: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1021079951, 46057, 20150, [165, 127, 207, 31, 27, 50, 27, 135]);
pub const CODECAPI_AVEncVideoROIEnabled: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3612311320, 17629, 19333, [171, 163, 5, 217, 244, 42, 130, 128]);
pub const CODECAPI_AVEncVideoRateControlParams: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2278831975, 30277, 17644, [180, 56, 211, 50, 47, 188, 162, 159]);
pub const CODECAPI_AVEncVideoSelectLayer: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3943728373, 27306, 18708, [187, 47, 97, 71, 34, 127, 18, 231]);
pub const CODECAPI_AVEncVideoSourceFilmContent: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(395429451, 52476, 18471, [160, 237, 37, 87, 121, 59, 43, 28]);
pub const CODECAPI_AVEncVideoSourceIsBW: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1124058267, 6162, 20444, [141, 36, 112, 84, 197, 33, 230, 235]);
pub const CODECAPI_AVEncVideoSupportedControls: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3555987421, 30649, 18237, [129, 150, 6, 18, 89, 230, 156, 255]);
pub const CODECAPI_AVEncVideoTemporalLayerCount: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(432729087, 46925, 19709, [140, 39, 194, 249, 217, 125, 95, 82]);
pub const CODECAPI_AVEncVideoUsage: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(526608457, 24001, 18929, [177, 216, 206, 60, 246, 46, 163, 133]);
pub const CODECAPI_AVEncVideoUseLTRFrame: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(7679416, 22007, 20352, [137, 91, 39, 99, 145, 149, 242, 173]);
pub const CODECAPI_AVEncWMVDecoderComplexity: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4079750571, 62411, 16919, [183, 159, 135, 98, 118, 139, 95, 103]);
pub const CODECAPI_AVEncWMVInterlacedEncoding: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3822063498, 50933, 19988, [165, 136, 14, 200, 122, 114, 111, 155]);
pub const CODECAPI_AVEncWMVKeyFrameBufferLevelMarker: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1375670549, 13228, 17004, [161, 177, 9, 50, 27, 223, 150, 180]);
pub const CODECAPI_AVEncWMVKeyFrameDistance: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1432946014, 57960, 18289, [184, 62, 149, 85, 234, 40, 174, 211]);
pub const CODECAPI_AVEncWMVProduceDummyFrames: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3597258753, 6204, 17123, [163, 202, 47, 69, 134, 210, 57, 108]);
pub const CODECAPI_AVLowLatencyMode: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2619836698, 60794, 16609, [136, 232, 178, 39, 39, 160, 36, 238]);
pub const CODECAPI_AVPriorityControl: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1421491656, 48606, 17193, [177, 135, 32, 24, 188, 92, 43, 161]);
pub const CODECAPI_AVRealtimeControl: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1866729010, 50349, 19447, [158, 82, 69, 105, 66, 180, 84, 176]);
pub const CODECAPI_AVScenarioInfo: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2995416676, 16377, 17514, [138, 75, 13, 122, 83, 65, 50, 54]);
pub const CODECAPI_GUID_AVDecAudioInputAAC: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2548004904, 47434, 18402, [164, 188, 81, 25, 77, 178, 42, 77]);
pub const CODECAPI_GUID_AVDecAudioInputDTS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1611382986, 27167, 20113, [178, 65, 27, 190, 177, 203, 25, 224]);
pub const CODECAPI_GUID_AVDecAudioInputDolby: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2386700448, 61440, 19979, [143, 84, 171, 141, 36, 173, 97, 162]);
pub const CODECAPI_GUID_AVDecAudioInputDolbyDigitalPlus: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(134472069, 36701, 18421, [153, 8, 25, 165, 187, 201, 254, 52]);
pub const CODECAPI_GUID_AVDecAudioInputHEAAC: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(384808106, 13070, 20316, [152, 168, 207, 106, 197, 92, 190, 96]);
pub const CODECAPI_GUID_AVDecAudioInputMPEG: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2433773366, 709, 20341, [151, 25, 59, 122, 191, 117, 225, 246]);
pub const CODECAPI_GUID_AVDecAudioInputPCM: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4064419237, 48052, 19669, [169, 150, 147, 60, 107, 93, 19, 71]);
pub const CODECAPI_GUID_AVDecAudioInputWMA: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3378417103, 16472, 16900, [140, 66, 203, 36, 217, 30, 75, 155]);
pub const CODECAPI_GUID_AVDecAudioInputWMAPro: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(19445703, 55922, 20451, [190, 248, 92, 82, 227, 85, 119, 4]);
pub const CODECAPI_GUID_AVDecAudioOutputFormat_PCM: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1768824113, 21647, 16438, [130, 95, 112, 38, 198, 0, 17, 189]);
pub const CODECAPI_GUID_AVDecAudioOutputFormat_PCM_Headphones: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1768824116, 21647, 16438, [130, 95, 112, 38, 198, 0, 17, 189]);
pub const CODECAPI_GUID_AVDecAudioOutputFormat_PCM_Stereo_Auto: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1768824117, 21647, 16438, [130, 95, 112, 38, 198, 0, 17, 189]);
pub const CODECAPI_GUID_AVDecAudioOutputFormat_PCM_Stereo_MatrixEncoded: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1768824112, 21647, 16438, [130, 95, 112, 38, 198, 0, 17, 189]);
pub const CODECAPI_GUID_AVDecAudioOutputFormat_SPDIF_Bitstream: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1768824115, 21647, 16438, [130, 95, 112, 38, 198, 0, 17, 189]);
pub const CODECAPI_GUID_AVDecAudioOutputFormat_SPDIF_PCM: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1768824114, 21647, 16438, [130, 95, 112, 38, 198, 0, 17, 189]);
pub const CODECAPI_GUID_AVEncCommonFormatATSC: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2373683580, 40985, 18032, [170, 118, 46, 220, 172, 122, 194, 150]);
pub const CODECAPI_GUID_AVEncCommonFormatDVB: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1904414095, 27699, 17165, [132, 75, 194, 112, 91, 170, 230, 219]);
pub const CODECAPI_GUID_AVEncCommonFormatDVD_DashVR: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3847330262, 1100, 19886, [164, 136, 83, 30, 211, 6, 35, 91]);
pub const CODECAPI_GUID_AVEncCommonFormatDVD_PlusVR: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3880546094, 60471, 18317, [154, 244, 165, 225, 53, 182, 39, 28]);
pub const CODECAPI_GUID_AVEncCommonFormatDVD_V: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3432356036, 59390, 17693, [177, 202, 118, 27, 200, 64, 183, 243]);
pub const CODECAPI_GUID_AVEncCommonFormatHighMAT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(514582368, 64299, 18728, [144, 209, 120, 219, 136, 238, 232, 137]);
pub const CODECAPI_GUID_AVEncCommonFormatHighMPV: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2731695544, 47353, 17090, [139, 199, 11, 147, 207, 96, 71, 136]);
pub const CODECAPI_GUID_AVEncCommonFormatMP3: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(882324429, 60168, 19906, [129, 151, 228, 152, 53, 239, 130, 139]);
pub const CODECAPI_GUID_AVEncCommonFormatSVCD: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1373132824, 33312, 17548, [128, 102, 214, 155, 237, 22, 201, 173]);
pub const CODECAPI_GUID_AVEncCommonFormatUnSpecified: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2940642138, 24612, 17701, [164, 138, 9, 75, 151, 245, 179, 194]);
pub const CODECAPI_GUID_AVEncCommonFormatVCD: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2500025335, 40336, 16639, [173, 92, 92, 248, 207, 113, 202, 29]);
pub const CODECAPI_GUID_AVEncDTS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1174129314, 24174, 19120, [136, 147, 89, 3, 190, 233, 58, 207]);
pub const CODECAPI_GUID_AVEncDTSHD: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(542303792, 18077, 19451, [128, 202, 29, 101, 110, 126, 145, 143]);
pub const CODECAPI_GUID_AVEncDV: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(163015111, 13097, 17659, [137, 84, 250, 48, 147, 125, 61, 90]);
pub const CODECAPI_GUID_AVEncDolbyDigitalConsumer: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3248996204, 89, 19450, [148, 239, 239, 116, 122, 118, 141, 82]);
pub const CODECAPI_GUID_AVEncDolbyDigitalPlus: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1770855296, 63453, 16732, [151, 28, 66, 73, 42, 32, 86, 198]);
pub const CODECAPI_GUID_AVEncDolbyDigitalPro: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4122900172, 4088, 16619, [156, 177, 187, 169, 64, 4, 212, 79]);
pub const CODECAPI_GUID_AVEncH264Video: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2500087467, 12723, 18398, [142, 117, 56, 164, 43, 176, 62, 40]);
pub const CODECAPI_GUID_AVEncMLP: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(100089385, 61649, 17182, [164, 28, 164, 116, 50, 236, 90, 102]);
pub const CODECAPI_GUID_AVEncMPEG1Audio: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3571258210, 52554, 19670, [129, 56, 185, 77, 180, 84, 43, 4]);
pub const CODECAPI_GUID_AVEncMPEG1Video: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3369795326, 55838, 18292, [178, 125, 17, 131, 12, 22, 177, 254]);
pub const CODECAPI_GUID_AVEncMPEG2Audio: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3998006047, 39999, 18288, [146, 181, 252, 183, 194, 168, 211, 129]);
pub const CODECAPI_GUID_AVEncMPEG2Video: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(74301850, 26231, 19114, [163, 29, 193, 171, 113, 111, 69, 96]);
pub const CODECAPI_GUID_AVEncPCM: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2219567092, 9935, 18297, [179, 134, 204, 5, 209, 135, 153, 12]);
pub const CODECAPI_GUID_AVEncSDDS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(499234863, 4552, 19569, [183, 182, 238, 62, 185, 188, 43, 148]);
pub const CODECAPI_GUID_AVEncWMALossless: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1439330917, 9176, 18273, [144, 49, 183, 79, 190, 18, 244, 193]);
pub const CODECAPI_GUID_AVEncWMAPro: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(425064716, 13303, 19048, [171, 129, 83, 245, 101, 113, 37, 196]);
pub const CODECAPI_GUID_AVEncWMAVoice: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(334305483, 20712, 17014, [162, 136, 166, 170, 34, 131, 130, 217]);
pub const CODECAPI_GUID_AVEncWMV: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1309667227, 7491, 16829, [184, 189, 77, 123, 247, 69, 122, 42]);
pub const CODECAPI_GUID_AVEndMPEG4Video: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3711414570, 38147, 20363, [184, 208, 50, 74, 0, 192, 161, 207]);
pub const CODECAPI_GetOPMContext: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(788753413, 19476, 18057, [136, 57, 41, 76, 109, 115, 224, 83]);
pub const CODECAPI_SetHDCPManagerContext: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1831673800, 15817, 18411, [161, 162, 71, 28, 128, 205, 96, 208]);
pub const CODECAPI_VideoEncoderDisplayContentType: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2042170151, 62641, 17116, [157, 215, 205, 175, 129, 53, 196, 0]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const COPP_ProtectionType_ACP: i32 = 2i32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const COPP_ProtectionType_CGMSA: i32 = 4i32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const COPP_ProtectionType_HDCP: i32 = 1i32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const COPP_ProtectionType_Mask: i32 = -2147483641i32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const COPP_ProtectionType_None: i32 = 0i32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const COPP_ProtectionType_Reserved: i32 = 2147483640i32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const COPP_ProtectionType_Unknown: i32 = -2147483648i32;
pub const CPK_DS_AC3Decoder: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1822190038, 4092, 17537, [175, 219, 205, 241, 199, 156, 111, 62]);
pub const CPK_DS_MPEG2Decoder: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2568013261, 38345, 19974, [134, 90, 239, 161, 200, 1, 107, 244]);
pub const CResamplerMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4098340510, 6276, 19070, [128, 85, 52, 111, 116, 214, 237, 179]);
pub const CResizerDMO: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(513927700, 18676, 16468, [173, 26, 232, 174, 225, 10, 200, 5]);
pub const CResizerMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3555494795, 30504, 20440, [159, 224, 123, 103, 209, 159, 115, 163]);
pub const CShotDetectorDmo: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1454308045, 4364, 17303, [146, 146, 176, 160, 198, 27, 103, 80]);
pub const CSmpteTransformsDmo: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3185981579, 55845, 18525, [186, 127, 250, 188, 40, 178, 3, 24]);
pub const CThumbnailGeneratorDmo: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1436314541, 7848, 18787, [160, 135, 138, 104, 16, 249, 33, 139]);
pub const CTocGeneratorDmo: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1306138945, 30624, 20401, [165, 24, 226, 24, 80, 65, 215, 12]);
pub const CVodafoneAACCCDecMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2121711487, 51603, 20006, [143, 171, 71, 10, 112, 192, 213, 156]);
pub const CVodafoneAACDecMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2134309186, 56563, 19842, [146, 137, 91, 24, 32, 39, 143, 124]);
pub const CWMADecMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(787172063, 17784, 19728, [188, 167, 187, 149, 95, 86, 50, 10]);
pub const CWMAEncMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1895143657, 62635, 18778, [153, 226, 167, 196, 211, 216, 154, 191]);
pub const CWMATransMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3989494219, 12583, 16607, [181, 39, 1, 82, 204, 179, 246, 245]);
pub const CWMAudioAEC: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1951422407, 62291, 20269, [167, 238, 88, 67, 68, 119, 115, 14]);
pub const CWMAudioCAPXGFXAPO: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(329989821, 4990, 18691, [157, 137, 96, 190, 130, 119, 253, 23]);
pub const CWMAudioCAPXLFXAPO: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3376758387, 35932, 17507, [153, 132, 175, 139, 171, 47, 84, 71]);
pub const CWMAudioGFXAPO: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1669089549, 61155, 19466, [151, 63, 55, 25, 88, 128, 45, 162]);
pub const CWMAudioLFXAPO: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1658591891, 44580, 17996, [164, 62, 69, 47, 130, 76, 66, 80]);
pub const CWMAudioSpdTxDMO: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1376844004, 45243, 18371, [168, 217, 123, 34, 130, 204, 121, 237]);
pub const CWMSPDecMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2269196747, 20172, 17467, [137, 72, 116, 107, 137, 89, 93, 32]);
pub const CWMSPEncMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1736710915, 50825, 16776, [173, 63, 76, 158, 190, 236, 113, 11]);
pub const CWMSPEncMediaObject2: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(522145306, 8786, 16483, [132, 187, 238, 231, 95, 136, 86, 213]);
pub const CWMTDecMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4191929934, 11728, 17885, [155, 82, 102, 100, 46, 249, 68, 49]);
pub const CWMTEncMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1622570578, 58475, 20036, [134, 9, 247, 75, 255, 220, 8, 60]);
pub const CWMV9EncMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3527119056, 5199, 18109, [132, 29, 89, 228, 235, 25, 220, 89]);
pub const CWMVDecMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2194887647, 37053, 17282, [139, 194, 63, 97, 146, 183, 110, 52]);
pub const CWMVEncMediaObject2: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2528476381, 35174, 16652, [187, 31, 201, 126, 234, 118, 92, 4]);
pub const CWMVXEncMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2117206162, 22890, 16818, [187, 235, 23, 93, 16, 80, 78, 182]);
pub const CWVC1DecMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3384786127, 58894, 17800, [163, 223, 90, 3, 177, 253, 149, 133]);
pub const CWVC1EncMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1147485453, 36042, 16871, [186, 202, 136, 67, 55, 183, 71, 172]);
pub const CZuneAACCCDecMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2806946034, 21206, 19278, [136, 91, 224, 166, 202, 79, 24, 122]);
pub const CZuneM4S2DecMediaObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3312435804, 4038, 16458, [149, 3, 177, 11, 245, 26, 138, 185]);
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct CodecAPIEventData {
    pub guid: ::windows::runtime::GUID,
    pub dataLength: u32,
    pub reserved: [u32; 3],
}
impl CodecAPIEventData {}
impl ::core::default::Default for CodecAPIEventData {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for CodecAPIEventData {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("CodecAPIEventData").field("guid", &self.guid).field("dataLength", &self.dataLength).field("reserved", &self.reserved).finish()
    }
}
impl ::core::cmp::PartialEq for CodecAPIEventData {
    fn eq(&self, other: &Self) -> bool {
        self.guid == other.guid && self.dataLength == other.dataLength && self.reserved == other.reserved
    }
}
impl ::core::cmp::Eq for CodecAPIEventData {}
unsafe impl ::windows::runtime::Abi for CodecAPIEventData {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_System_PropertiesSystem`*"]
#[cfg(feature = "Win32_System_PropertiesSystem")]
#[inline]
pub unsafe fn CreateNamedPropertyStore() -> ::windows::runtime::Result<super::super::System::PropertiesSystem::INamedPropertyStore> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn CreateNamedPropertyStore(ppstore: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <super::super::System::PropertiesSystem::INamedPropertyStore as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        CreateNamedPropertyStore(&mut result__).from_abi::<super::super::System::PropertiesSystem::INamedPropertyStore>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_System_PropertiesSystem`*"]
#[cfg(feature = "Win32_System_PropertiesSystem")]
#[inline]
pub unsafe fn CreatePropertyStore() -> ::windows::runtime::Result<super::super::System::PropertiesSystem::IPropertyStore> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn CreatePropertyStore(ppstore: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <super::super::System::PropertiesSystem::IPropertyStore as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        CreatePropertyStore(&mut result__).from_abi::<super::super::System::PropertiesSystem::IPropertyStore>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_BITSTREAM_ENCRYPTION_TYPE(pub i32);
pub const D3D12_BITSTREAM_ENCRYPTION_TYPE_NONE: D3D12_BITSTREAM_ENCRYPTION_TYPE = D3D12_BITSTREAM_ENCRYPTION_TYPE(0i32);
impl ::core::convert::From<i32> for D3D12_BITSTREAM_ENCRYPTION_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_BITSTREAM_ENCRYPTION_TYPE {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE {
    pub IOCoherent: super::super::Foundation::BOOL,
}
#[cfg(feature = "Win32_Foundation")]
impl D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE").field("IOCoherent", &self.IOCoherent).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE {
    fn eq(&self, other: &Self) -> bool {
        self.IOCoherent == other.IOCoherent
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Dxgi")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Dxgi`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE {
    pub VideoDecoderHeapDesc: D3D12_VIDEO_DECODER_HEAP_DESC,
    pub MemoryPoolL0Size: u64,
    pub MemoryPoolL1Size: u64,
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE {}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::fmt::Debug for D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE").field("VideoDecoderHeapDesc", &self.VideoDecoderHeapDesc).field("MemoryPoolL0Size", &self.MemoryPoolL0Size).field("MemoryPoolL1Size", &self.MemoryPoolL1Size).finish()
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE {
    fn eq(&self, other: &Self) -> bool {
        self.VideoDecoderHeapDesc == other.VideoDecoderHeapDesc && self.MemoryPoolL0Size == other.MemoryPoolL0Size && self.MemoryPoolL1Size == other.MemoryPoolL1Size
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE {}
#[cfg(feature = "Win32_Graphics_Dxgi")]
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Dxgi`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1 {
    pub VideoDecoderHeapDesc: D3D12_VIDEO_DECODER_HEAP_DESC,
    pub Protected: super::super::Foundation::BOOL,
    pub MemoryPoolL0Size: u64,
    pub MemoryPoolL1Size: u64,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1 {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl ::core::fmt::Debug for D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1 {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1").field("VideoDecoderHeapDesc", &self.VideoDecoderHeapDesc).field("Protected", &self.Protected).field("MemoryPoolL0Size", &self.MemoryPoolL0Size).field("MemoryPoolL1Size", &self.MemoryPoolL1Size).finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1 {
    fn eq(&self, other: &Self) -> bool {
        self.VideoDecoderHeapDesc == other.VideoDecoderHeapDesc && self.Protected == other.Protected && self.MemoryPoolL0Size == other.MemoryPoolL0Size && self.MemoryPoolL1Size == other.MemoryPoolL1Size
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1 {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1 {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Dxgi")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Dxgi`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT {
    pub NodeIndex: u32,
    pub Configuration: D3D12_VIDEO_DECODE_CONFIGURATION,
    pub DecodeSample: D3D12_VIDEO_SAMPLE,
    pub OutputFormat: D3D12_VIDEO_FORMAT,
    pub FrameRate: super::super::Graphics::Dxgi::DXGI_RATIONAL,
    pub BitRate: u32,
    pub SupportFlags: D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS,
    pub ScaleSupport: D3D12_VIDEO_SCALE_SUPPORT,
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT {}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::fmt::Debug for D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT")
            .field("NodeIndex", &self.NodeIndex)
            .field("Configuration", &self.Configuration)
            .field("DecodeSample", &self.DecodeSample)
            .field("OutputFormat", &self.OutputFormat)
            .field("FrameRate", &self.FrameRate)
            .field("BitRate", &self.BitRate)
            .field("SupportFlags", &self.SupportFlags)
            .field("ScaleSupport", &self.ScaleSupport)
            .finish()
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT {
    fn eq(&self, other: &Self) -> bool {
        self.NodeIndex == other.NodeIndex && self.Configuration == other.Configuration && self.DecodeSample == other.DecodeSample && self.OutputFormat == other.OutputFormat && self.FrameRate == other.FrameRate && self.BitRate == other.BitRate && self.SupportFlags == other.SupportFlags && self.ScaleSupport == other.ScaleSupport
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT {}
#[cfg(feature = "Win32_Graphics_Dxgi")]
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Dxgi")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Dxgi`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS {
    pub NodeIndex: u32,
    pub Configuration: D3D12_VIDEO_DECODE_CONFIGURATION,
    pub FormatCount: u32,
    pub pOutputFormats: *mut super::super::Graphics::Dxgi::DXGI_FORMAT,
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS {}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::fmt::Debug for D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS").field("NodeIndex", &self.NodeIndex).field("Configuration", &self.Configuration).field("FormatCount", &self.FormatCount).field("pOutputFormats", &self.pOutputFormats).finish()
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS {
    fn eq(&self, other: &Self) -> bool {
        self.NodeIndex == other.NodeIndex && self.Configuration == other.Configuration && self.FormatCount == other.FormatCount && self.pOutputFormats == other.pOutputFormats
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS {}
#[cfg(feature = "Win32_Graphics_Dxgi")]
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT {
    pub NodeIndex: u32,
    pub Configuration: D3D12_VIDEO_DECODE_CONFIGURATION,
    pub FormatCount: u32,
}
impl D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT {}
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT").field("NodeIndex", &self.NodeIndex).field("Configuration", &self.Configuration).field("FormatCount", &self.FormatCount).finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT {
    fn eq(&self, other: &Self) -> bool {
        self.NodeIndex == other.NodeIndex && self.Configuration == other.Configuration && self.FormatCount == other.FormatCount
    }
}
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT {}
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Dxgi")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Dxgi`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM {
    pub NodeIndex: u32,
    pub DecodeProfile: ::windows::runtime::GUID,
    pub Width: u32,
    pub Height: u32,
    pub DecodeFormat: super::super::Graphics::Dxgi::DXGI_FORMAT,
    pub Components: D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS,
    pub BinCount: u32,
    pub CounterBitDepth: u32,
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM {}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::fmt::Debug for D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM")
            .field("NodeIndex", &self.NodeIndex)
            .field("DecodeProfile", &self.DecodeProfile)
            .field("Width", &self.Width)
            .field("Height", &self.Height)
            .field("DecodeFormat", &self.DecodeFormat)
            .field("Components", &self.Components)
            .field("BinCount", &self.BinCount)
            .field("CounterBitDepth", &self.CounterBitDepth)
            .finish()
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM {
    fn eq(&self, other: &Self) -> bool {
        self.NodeIndex == other.NodeIndex && self.DecodeProfile == other.DecodeProfile && self.Width == other.Width && self.Height == other.Height && self.DecodeFormat == other.DecodeFormat && self.Components == other.Components && self.BinCount == other.BinCount && self.CounterBitDepth == other.CounterBitDepth
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM {}
#[cfg(feature = "Win32_Graphics_Dxgi")]
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES {
    pub NodeIndex: u32,
    pub ProfileCount: u32,
    pub pProfiles: *mut ::windows::runtime::GUID,
}
impl D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES {}
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES").field("NodeIndex", &self.NodeIndex).field("ProfileCount", &self.ProfileCount).field("pProfiles", &self.pProfiles).finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES {
    fn eq(&self, other: &Self) -> bool {
        self.NodeIndex == other.NodeIndex && self.ProfileCount == other.ProfileCount && self.pProfiles == other.pProfiles
    }
}
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES {}
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT {
    pub NodeIndex: u32,
    pub ProfileCount: u32,
}
impl D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT {}
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT").field("NodeIndex", &self.NodeIndex).field("ProfileCount", &self.ProfileCount).finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT {
    fn eq(&self, other: &Self) -> bool {
        self.NodeIndex == other.NodeIndex && self.ProfileCount == other.ProfileCount
    }
}
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT {}
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES {
    pub NodeIndex: u32,
    pub Configuration: D3D12_VIDEO_DECODE_CONFIGURATION,
    pub SupportFlags: D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS,
}
impl D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES {}
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES").field("NodeIndex", &self.NodeIndex).field("Configuration", &self.Configuration).field("SupportFlags", &self.SupportFlags).finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES {
    fn eq(&self, other: &Self) -> bool {
        self.NodeIndex == other.NodeIndex && self.Configuration == other.Configuration && self.SupportFlags == other.SupportFlags
    }
}
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES {}
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Dxgi")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Dxgi`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT {
    pub NodeIndex: u32,
    pub Configuration: D3D12_VIDEO_DECODE_CONFIGURATION,
    pub Width: u32,
    pub Height: u32,
    pub DecodeFormat: super::super::Graphics::Dxgi::DXGI_FORMAT,
    pub FrameRate: super::super::Graphics::Dxgi::DXGI_RATIONAL,
    pub BitRate: u32,
    pub SupportFlags: D3D12_VIDEO_DECODE_SUPPORT_FLAGS,
    pub ConfigurationFlags: D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS,
    pub DecodeTier: D3D12_VIDEO_DECODE_TIER,
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT {}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::fmt::Debug for D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT")
            .field("NodeIndex", &self.NodeIndex)
            .field("Configuration", &self.Configuration)
            .field("Width", &self.Width)
            .field("Height", &self.Height)
            .field("DecodeFormat", &self.DecodeFormat)
            .field("FrameRate", &self.FrameRate)
            .field("BitRate", &self.BitRate)
            .field("SupportFlags", &self.SupportFlags)
            .field("ConfigurationFlags", &self.ConfigurationFlags)
            .field("DecodeTier", &self.DecodeTier)
            .finish()
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT {
    fn eq(&self, other: &Self) -> bool {
        self.NodeIndex == other.NodeIndex && self.Configuration == other.Configuration && self.Width == other.Width && self.Height == other.Height && self.DecodeFormat == other.DecodeFormat && self.FrameRate == other.FrameRate && self.BitRate == other.BitRate && self.SupportFlags == other.SupportFlags && self.ConfigurationFlags == other.ConfigurationFlags && self.DecodeTier == other.DecodeTier
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT {}
#[cfg(feature = "Win32_Graphics_Dxgi")]
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC {
    pub NodeIndex: u32,
    pub Codec: D3D12_VIDEO_ENCODER_CODEC,
    pub IsSupported: super::super::Foundation::BOOL,
}
#[cfg(feature = "Win32_Foundation")]
impl D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC").field("NodeIndex", &self.NodeIndex).field("Codec", &self.Codec).field("IsSupported", &self.IsSupported).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC {
    fn eq(&self, other: &Self) -> bool {
        self.NodeIndex == other.NodeIndex && self.Codec == other.Codec && self.IsSupported == other.IsSupported
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT {
    pub NodeIndex: u32,
    pub Codec: D3D12_VIDEO_ENCODER_CODEC,
    pub Profile: D3D12_VIDEO_ENCODER_PROFILE_DESC,
    pub IsSupported: super::super::Foundation::BOOL,
    pub CodecSupportLimits: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT,
}
#[cfg(feature = "Win32_Foundation")]
impl D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT {
    pub NodeIndex: u32,
    pub Codec: D3D12_VIDEO_ENCODER_CODEC,
    pub Profile: D3D12_VIDEO_ENCODER_PROFILE_DESC,
    pub IsSupported: super::super::Foundation::BOOL,
    pub PictureSupport: D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT,
}
#[cfg(feature = "Win32_Foundation")]
impl D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE {
    pub NodeIndex: u32,
    pub Codec: D3D12_VIDEO_ENCODER_CODEC,
    pub Profile: D3D12_VIDEO_ENCODER_PROFILE_DESC,
    pub Level: D3D12_VIDEO_ENCODER_LEVEL_SETTING,
    pub SubregionMode: D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE,
    pub IsSupported: super::super::Foundation::BOOL,
}
#[cfg(feature = "Win32_Foundation")]
impl D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE {
    pub HeapDesc: D3D12_VIDEO_ENCODER_HEAP_DESC,
    pub IsSupported: super::super::Foundation::BOOL,
    pub MemoryPoolL0Size: u64,
    pub MemoryPoolL1Size: u64,
}
#[cfg(feature = "Win32_Foundation")]
impl D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Dxgi`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT {
    pub NodeIndex: u32,
    pub Codec: D3D12_VIDEO_ENCODER_CODEC,
    pub Profile: D3D12_VIDEO_ENCODER_PROFILE_DESC,
    pub Format: super::super::Graphics::Dxgi::DXGI_FORMAT,
    pub IsSupported: super::super::Foundation::BOOL,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE {
    pub NodeIndex: u32,
    pub Codec: D3D12_VIDEO_ENCODER_CODEC,
    pub Profile: D3D12_VIDEO_ENCODER_PROFILE_DESC,
    pub Level: D3D12_VIDEO_ENCODER_LEVEL_SETTING,
    pub IntraRefreshMode: D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE,
    pub IsSupported: super::super::Foundation::BOOL,
}
#[cfg(feature = "Win32_Foundation")]
impl D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION {
    pub NodeIndex: u32,
    pub Codec: D3D12_VIDEO_ENCODER_CODEC,
    pub ResolutionRatiosCount: u32,
    pub IsSupported: super::super::Foundation::BOOL,
    pub MinResolutionSupported: D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC,
    pub MaxResolutionSupported: D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC,
    pub ResolutionWidthMultipleRequirement: u32,
    pub ResolutionHeightMultipleRequirement: u32,
    pub pResolutionRatios: *mut D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC,
}
#[cfg(feature = "Win32_Foundation")]
impl D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION")
            .field("NodeIndex", &self.NodeIndex)
            .field("Codec", &self.Codec)
            .field("ResolutionRatiosCount", &self.ResolutionRatiosCount)
            .field("IsSupported", &self.IsSupported)
            .field("MinResolutionSupported", &self.MinResolutionSupported)
            .field("MaxResolutionSupported", &self.MaxResolutionSupported)
            .field("ResolutionWidthMultipleRequirement", &self.ResolutionWidthMultipleRequirement)
            .field("ResolutionHeightMultipleRequirement", &self.ResolutionHeightMultipleRequirement)
            .field("pResolutionRatios", &self.pResolutionRatios)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION {
    fn eq(&self, other: &Self) -> bool {
        self.NodeIndex == other.NodeIndex
            && self.Codec == other.Codec
            && self.ResolutionRatiosCount == other.ResolutionRatiosCount
            && self.IsSupported == other.IsSupported
            && self.MinResolutionSupported == other.MinResolutionSupported
            && self.MaxResolutionSupported == other.MaxResolutionSupported
            && self.ResolutionWidthMultipleRequirement == other.ResolutionWidthMultipleRequirement
            && self.ResolutionHeightMultipleRequirement == other.ResolutionHeightMultipleRequirement
            && self.pResolutionRatios == other.pResolutionRatios
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT {
    pub NodeIndex: u32,
    pub Codec: D3D12_VIDEO_ENCODER_CODEC,
    pub ResolutionRatiosCount: u32,
}
impl D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT {}
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT").field("NodeIndex", &self.NodeIndex).field("Codec", &self.Codec).field("ResolutionRatiosCount", &self.ResolutionRatiosCount).finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT {
    fn eq(&self, other: &Self) -> bool {
        self.NodeIndex == other.NodeIndex && self.Codec == other.Codec && self.ResolutionRatiosCount == other.ResolutionRatiosCount
    }
}
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT {}
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL {
    pub NodeIndex: u32,
    pub Codec: D3D12_VIDEO_ENCODER_CODEC,
    pub Profile: D3D12_VIDEO_ENCODER_PROFILE_DESC,
    pub IsSupported: super::super::Foundation::BOOL,
    pub MinSupportedLevel: D3D12_VIDEO_ENCODER_LEVEL_SETTING,
    pub MaxSupportedLevel: D3D12_VIDEO_ENCODER_LEVEL_SETTING,
}
#[cfg(feature = "Win32_Foundation")]
impl D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE {
    pub NodeIndex: u32,
    pub Codec: D3D12_VIDEO_ENCODER_CODEC,
    pub RateControlMode: D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE,
    pub IsSupported: super::super::Foundation::BOOL,
}
#[cfg(feature = "Win32_Foundation")]
impl D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE").field("NodeIndex", &self.NodeIndex).field("Codec", &self.Codec).field("RateControlMode", &self.RateControlMode).field("IsSupported", &self.IsSupported).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE {
    fn eq(&self, other: &Self) -> bool {
        self.NodeIndex == other.NodeIndex && self.Codec == other.Codec && self.RateControlMode == other.RateControlMode && self.IsSupported == other.IsSupported
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS {
    pub MaxSubregionsNumber: u32,
    pub MaxIntraRefreshFrameDuration: u32,
    pub SubregionBlockPixelsSize: u32,
    pub QPMapRegionPixelsSize: u32,
}
impl D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS {}
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS")
            .field("MaxSubregionsNumber", &self.MaxSubregionsNumber)
            .field("MaxIntraRefreshFrameDuration", &self.MaxIntraRefreshFrameDuration)
            .field("SubregionBlockPixelsSize", &self.SubregionBlockPixelsSize)
            .field("QPMapRegionPixelsSize", &self.QPMapRegionPixelsSize)
            .finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS {
    fn eq(&self, other: &Self) -> bool {
        self.MaxSubregionsNumber == other.MaxSubregionsNumber && self.MaxIntraRefreshFrameDuration == other.MaxIntraRefreshFrameDuration && self.SubregionBlockPixelsSize == other.SubregionBlockPixelsSize && self.QPMapRegionPixelsSize == other.QPMapRegionPixelsSize
    }
}
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS {}
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Dxgi`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS {
    pub NodeIndex: u32,
    pub Codec: D3D12_VIDEO_ENCODER_CODEC,
    pub Profile: D3D12_VIDEO_ENCODER_PROFILE_DESC,
    pub InputFormat: super::super::Graphics::Dxgi::DXGI_FORMAT,
    pub PictureTargetResolution: D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC,
    pub IsSupported: super::super::Foundation::BOOL,
    pub CompressedBitstreamBufferAccessAlignment: u32,
    pub EncoderMetadataBufferAccessAlignment: u32,
    pub MaxEncoderOutputMetadataBufferSize: u32,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Dxgi")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Dxgi`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT {
    pub NodeIndex: u32,
    pub Codec: D3D12_VIDEO_ENCODER_CODEC,
    pub InputFormat: super::super::Graphics::Dxgi::DXGI_FORMAT,
    pub CodecConfiguration: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION,
    pub CodecGopSequence: D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE,
    pub RateControl: D3D12_VIDEO_ENCODER_RATE_CONTROL,
    pub IntraRefresh: D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE,
    pub SubregionFrameEncoding: D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE,
    pub ResolutionsListCount: u32,
    pub pResolutionList: *mut D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC,
    pub MaxReferenceFramesInDPB: u32,
    pub ValidationFlags: D3D12_VIDEO_ENCODER_VALIDATION_FLAGS,
    pub SupportFlags: D3D12_VIDEO_ENCODER_SUPPORT_FLAGS,
    pub SuggestedProfile: D3D12_VIDEO_ENCODER_PROFILE_DESC,
    pub SuggestedLevel: D3D12_VIDEO_ENCODER_LEVEL_SETTING,
    pub pResolutionDependentSupport: *mut D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS,
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT {}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT {}
#[cfg(feature = "Win32_Graphics_Dxgi")]
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D12`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS {
    pub NodeIndex: u32,
    pub CommandCount: u32,
    pub pCommandInfos: *mut D3D12_VIDEO_EXTENSION_COMMAND_INFO,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl ::core::fmt::Debug for D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS").field("NodeIndex", &self.NodeIndex).field("CommandCount", &self.CommandCount).field("pCommandInfos", &self.pCommandInfos).finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS {
    fn eq(&self, other: &Self) -> bool {
        self.NodeIndex == other.NodeIndex && self.CommandCount == other.CommandCount && self.pCommandInfos == other.pCommandInfos
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT {
    pub NodeIndex: u32,
    pub CommandCount: u32,
}
impl D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT {}
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT").field("NodeIndex", &self.NodeIndex).field("CommandCount", &self.CommandCount).finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT {
    fn eq(&self, other: &Self) -> bool {
        self.NodeIndex == other.NodeIndex && self.CommandCount == other.CommandCount
    }
}
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT {}
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS {
    pub CommandId: ::windows::runtime::GUID,
    pub Stage: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE,
    pub ParameterCount: u32,
    pub pParameterInfos: *mut D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO,
}
#[cfg(feature = "Win32_Foundation")]
impl D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS").field("CommandId", &self.CommandId).field("Stage", &self.Stage).field("ParameterCount", &self.ParameterCount).field("pParameterInfos", &self.pParameterInfos).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS {
    fn eq(&self, other: &Self) -> bool {
        self.CommandId == other.CommandId && self.Stage == other.Stage && self.ParameterCount == other.ParameterCount && self.pParameterInfos == other.pParameterInfos
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT {
    pub CommandId: ::windows::runtime::GUID,
    pub Stage: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE,
    pub ParameterCount: u32,
    pub ParameterPacking: u32,
}
impl D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT {}
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT").field("CommandId", &self.CommandId).field("Stage", &self.Stage).field("ParameterCount", &self.ParameterCount).field("ParameterPacking", &self.ParameterPacking).finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT {
    fn eq(&self, other: &Self) -> bool {
        self.CommandId == other.CommandId && self.Stage == other.Stage && self.ParameterCount == other.ParameterCount && self.ParameterPacking == other.ParameterPacking
    }
}
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT {}
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE {
    pub NodeIndex: u32,
    pub CommandId: ::windows::runtime::GUID,
    pub pCreationParameters: *mut ::core::ffi::c_void,
    pub CreationParametersSizeInBytes: usize,
    pub MemoryPoolL0Size: u64,
    pub MemoryPoolL1Size: u64,
}
impl D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE {}
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE")
            .field("NodeIndex", &self.NodeIndex)
            .field("CommandId", &self.CommandId)
            .field("pCreationParameters", &self.pCreationParameters)
            .field("CreationParametersSizeInBytes", &self.CreationParametersSizeInBytes)
            .field("MemoryPoolL0Size", &self.MemoryPoolL0Size)
            .field("MemoryPoolL1Size", &self.MemoryPoolL1Size)
            .finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE {
    fn eq(&self, other: &Self) -> bool {
        self.NodeIndex == other.NodeIndex && self.CommandId == other.CommandId && self.pCreationParameters == other.pCreationParameters && self.CreationParametersSizeInBytes == other.CreationParametersSizeInBytes && self.MemoryPoolL0Size == other.MemoryPoolL0Size && self.MemoryPoolL1Size == other.MemoryPoolL1Size
    }
}
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE {}
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT {
    pub NodeIndex: u32,
    pub CommandId: ::windows::runtime::GUID,
    pub pInputData: *mut ::core::ffi::c_void,
    pub InputDataSizeInBytes: usize,
    pub pOutputData: *mut ::core::ffi::c_void,
    pub OutputDataSizeInBytes: usize,
}
impl D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT {}
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT")
            .field("NodeIndex", &self.NodeIndex)
            .field("CommandId", &self.CommandId)
            .field("pInputData", &self.pInputData)
            .field("InputDataSizeInBytes", &self.InputDataSizeInBytes)
            .field("pOutputData", &self.pOutputData)
            .field("OutputDataSizeInBytes", &self.OutputDataSizeInBytes)
            .finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT {
    fn eq(&self, other: &Self) -> bool {
        self.NodeIndex == other.NodeIndex && self.CommandId == other.CommandId && self.pInputData == other.pInputData && self.InputDataSizeInBytes == other.InputDataSizeInBytes && self.pOutputData == other.pOutputData && self.OutputDataSizeInBytes == other.OutputDataSizeInBytes
    }
}
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT {}
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT {
    pub NodeIndex: u32,
    pub VideoDecodeSupport: super::super::Foundation::BOOL,
    pub VideoProcessSupport: super::super::Foundation::BOOL,
    pub VideoEncodeSupport: super::super::Foundation::BOOL,
}
#[cfg(feature = "Win32_Foundation")]
impl D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT").field("NodeIndex", &self.NodeIndex).field("VideoDecodeSupport", &self.VideoDecodeSupport).field("VideoProcessSupport", &self.VideoProcessSupport).field("VideoEncodeSupport", &self.VideoEncodeSupport).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT {
    fn eq(&self, other: &Self) -> bool {
        self.NodeIndex == other.NodeIndex && self.VideoDecodeSupport == other.VideoDecodeSupport && self.VideoProcessSupport == other.VideoProcessSupport && self.VideoEncodeSupport == other.VideoEncodeSupport
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Dxgi")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Dxgi`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR {
    pub NodeIndex: u32,
    pub InputFormat: super::super::Graphics::Dxgi::DXGI_FORMAT,
    pub BlockSizeFlags: D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS,
    pub PrecisionFlags: D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS,
    pub SizeRange: D3D12_VIDEO_SIZE_RANGE,
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR {}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::fmt::Debug for D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR").field("NodeIndex", &self.NodeIndex).field("InputFormat", &self.InputFormat).field("BlockSizeFlags", &self.BlockSizeFlags).field("PrecisionFlags", &self.PrecisionFlags).field("SizeRange", &self.SizeRange).finish()
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR {
    fn eq(&self, other: &Self) -> bool {
        self.NodeIndex == other.NodeIndex && self.InputFormat == other.InputFormat && self.BlockSizeFlags == other.BlockSizeFlags && self.PrecisionFlags == other.PrecisionFlags && self.SizeRange == other.SizeRange
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR {}
#[cfg(feature = "Win32_Graphics_Dxgi")]
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES {
    pub NodeIndex: u32,
    pub SupportFlags: D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS,
}
impl D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES {}
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES").field("NodeIndex", &self.NodeIndex).field("SupportFlags", &self.SupportFlags).finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES {
    fn eq(&self, other: &Self) -> bool {
        self.NodeIndex == other.NodeIndex && self.SupportFlags == other.SupportFlags
    }
}
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES {}
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Dxgi`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE {
    pub NodeIndex: u32,
    pub InputFormat: super::super::Graphics::Dxgi::DXGI_FORMAT,
    pub BlockSize: D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE,
    pub Precision: D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION,
    pub SizeRange: D3D12_VIDEO_SIZE_RANGE,
    pub Protected: super::super::Foundation::BOOL,
    pub MotionVectorHeapMemoryPoolL0Size: u64,
    pub MotionVectorHeapMemoryPoolL1Size: u64,
    pub MotionEstimatorMemoryPoolL0Size: u64,
    pub MotionEstimatorMemoryPoolL1Size: u64,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl ::core::fmt::Debug for D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE")
            .field("NodeIndex", &self.NodeIndex)
            .field("InputFormat", &self.InputFormat)
            .field("BlockSize", &self.BlockSize)
            .field("Precision", &self.Precision)
            .field("SizeRange", &self.SizeRange)
            .field("Protected", &self.Protected)
            .field("MotionVectorHeapMemoryPoolL0Size", &self.MotionVectorHeapMemoryPoolL0Size)
            .field("MotionVectorHeapMemoryPoolL1Size", &self.MotionVectorHeapMemoryPoolL1Size)
            .field("MotionEstimatorMemoryPoolL0Size", &self.MotionEstimatorMemoryPoolL0Size)
            .field("MotionEstimatorMemoryPoolL1Size", &self.MotionEstimatorMemoryPoolL1Size)
            .finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE {
    fn eq(&self, other: &Self) -> bool {
        self.NodeIndex == other.NodeIndex
            && self.InputFormat == other.InputFormat
            && self.BlockSize == other.BlockSize
            && self.Precision == other.Precision
            && self.SizeRange == other.SizeRange
            && self.Protected == other.Protected
            && self.MotionVectorHeapMemoryPoolL0Size == other.MotionVectorHeapMemoryPoolL0Size
            && self.MotionVectorHeapMemoryPoolL1Size == other.MotionVectorHeapMemoryPoolL1Size
            && self.MotionEstimatorMemoryPoolL0Size == other.MotionEstimatorMemoryPoolL0Size
            && self.MotionEstimatorMemoryPoolL1Size == other.MotionEstimatorMemoryPoolL1Size
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Dxgi`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE {
    pub NodeMask: u32,
    pub pOutputStreamDesc: *mut D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC,
    pub NumInputStreamDescs: u32,
    pub pInputStreamDescs: *mut D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC,
    pub MemoryPoolL0Size: u64,
    pub MemoryPoolL1Size: u64,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl ::core::fmt::Debug for D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE")
            .field("NodeMask", &self.NodeMask)
            .field("pOutputStreamDesc", &self.pOutputStreamDesc)
            .field("NumInputStreamDescs", &self.NumInputStreamDescs)
            .field("pInputStreamDescs", &self.pInputStreamDescs)
            .field("MemoryPoolL0Size", &self.MemoryPoolL0Size)
            .field("MemoryPoolL1Size", &self.MemoryPoolL1Size)
            .finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE {
    fn eq(&self, other: &Self) -> bool {
        self.NodeMask == other.NodeMask && self.pOutputStreamDesc == other.pOutputStreamDesc && self.NumInputStreamDescs == other.NumInputStreamDescs && self.pInputStreamDescs == other.pInputStreamDescs && self.MemoryPoolL0Size == other.MemoryPoolL0Size && self.MemoryPoolL1Size == other.MemoryPoolL1Size
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Dxgi`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1 {
    pub NodeMask: u32,
    pub pOutputStreamDesc: *mut D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC,
    pub NumInputStreamDescs: u32,
    pub pInputStreamDescs: *mut D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC,
    pub Protected: super::super::Foundation::BOOL,
    pub MemoryPoolL0Size: u64,
    pub MemoryPoolL1Size: u64,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1 {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl ::core::fmt::Debug for D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1 {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1")
            .field("NodeMask", &self.NodeMask)
            .field("pOutputStreamDesc", &self.pOutputStreamDesc)
            .field("NumInputStreamDescs", &self.NumInputStreamDescs)
            .field("pInputStreamDescs", &self.pInputStreamDescs)
            .field("Protected", &self.Protected)
            .field("MemoryPoolL0Size", &self.MemoryPoolL0Size)
            .field("MemoryPoolL1Size", &self.MemoryPoolL1Size)
            .finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1 {
    fn eq(&self, other: &Self) -> bool {
        self.NodeMask == other.NodeMask && self.pOutputStreamDesc == other.pOutputStreamDesc && self.NumInputStreamDescs == other.NumInputStreamDescs && self.pInputStreamDescs == other.pInputStreamDescs && self.Protected == other.Protected && self.MemoryPoolL0Size == other.MemoryPoolL0Size && self.MemoryPoolL1Size == other.MemoryPoolL1Size
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1 {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1 {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS {
    pub NodeIndex: u32,
    pub MaxInputStreams: u32,
}
impl D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS {}
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS").field("NodeIndex", &self.NodeIndex).field("MaxInputStreams", &self.MaxInputStreams).finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS {
    fn eq(&self, other: &Self) -> bool {
        self.NodeIndex == other.NodeIndex && self.MaxInputStreams == other.MaxInputStreams
    }
}
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS {}
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES {
    pub NodeIndex: u32,
    pub SupportFlags: D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS,
}
impl D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES {}
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES").field("NodeIndex", &self.NodeIndex).field("SupportFlags", &self.SupportFlags).finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES {
    fn eq(&self, other: &Self) -> bool {
        self.NodeIndex == other.NodeIndex && self.SupportFlags == other.SupportFlags
    }
}
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES {}
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Dxgi`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO {
    pub NodeIndex: u32,
    pub DeinterlaceMode: D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS,
    pub Filters: D3D12_VIDEO_PROCESS_FILTER_FLAGS,
    pub FeatureSupport: D3D12_VIDEO_PROCESS_FEATURE_FLAGS,
    pub InputFrameRate: super::super::Graphics::Dxgi::DXGI_RATIONAL,
    pub OutputFrameRate: super::super::Graphics::Dxgi::DXGI_RATIONAL,
    pub EnableAutoProcessing: super::super::Foundation::BOOL,
    pub PastFrames: u32,
    pub FutureFrames: u32,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl ::core::fmt::Debug for D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO")
            .field("NodeIndex", &self.NodeIndex)
            .field("DeinterlaceMode", &self.DeinterlaceMode)
            .field("Filters", &self.Filters)
            .field("FeatureSupport", &self.FeatureSupport)
            .field("InputFrameRate", &self.InputFrameRate)
            .field("OutputFrameRate", &self.OutputFrameRate)
            .field("EnableAutoProcessing", &self.EnableAutoProcessing)
            .field("PastFrames", &self.PastFrames)
            .field("FutureFrames", &self.FutureFrames)
            .finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.NodeIndex == other.NodeIndex && self.DeinterlaceMode == other.DeinterlaceMode && self.Filters == other.Filters && self.FeatureSupport == other.FeatureSupport && self.InputFrameRate == other.InputFrameRate && self.OutputFrameRate == other.OutputFrameRate && self.EnableAutoProcessing == other.EnableAutoProcessing && self.PastFrames == other.PastFrames && self.FutureFrames == other.FutureFrames
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Dxgi")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Dxgi`*"]
pub struct D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT {
    pub NodeIndex: u32,
    pub InputSample: D3D12_VIDEO_SAMPLE,
    pub InputFieldType: D3D12_VIDEO_FIELD_TYPE,
    pub InputStereoFormat: D3D12_VIDEO_FRAME_STEREO_FORMAT,
    pub InputFrameRate: super::super::Graphics::Dxgi::DXGI_RATIONAL,
    pub OutputFormat: D3D12_VIDEO_FORMAT,
    pub OutputStereoFormat: D3D12_VIDEO_FRAME_STEREO_FORMAT,
    pub OutputFrameRate: super::super::Graphics::Dxgi::DXGI_RATIONAL,
    pub SupportFlags: D3D12_VIDEO_PROCESS_SUPPORT_FLAGS,
    pub ScaleSupport: D3D12_VIDEO_SCALE_SUPPORT,
    pub FeatureSupport: D3D12_VIDEO_PROCESS_FEATURE_FLAGS,
    pub DeinterlaceSupport: D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS,
    pub AutoProcessingSupport: D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS,
    pub FilterSupport: D3D12_VIDEO_PROCESS_FILTER_FLAGS,
    pub FilterRangeSupport: [D3D12_VIDEO_PROCESS_FILTER_RANGE; 32],
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT {}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::default::Default for D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::fmt::Debug for D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT")
            .field("NodeIndex", &self.NodeIndex)
            .field("InputSample", &self.InputSample)
            .field("InputFieldType", &self.InputFieldType)
            .field("InputStereoFormat", &self.InputStereoFormat)
            .field("InputFrameRate", &self.InputFrameRate)
            .field("OutputFormat", &self.OutputFormat)
            .field("OutputStereoFormat", &self.OutputStereoFormat)
            .field("OutputFrameRate", &self.OutputFrameRate)
            .field("SupportFlags", &self.SupportFlags)
            .field("ScaleSupport", &self.ScaleSupport)
            .field("FeatureSupport", &self.FeatureSupport)
            .field("DeinterlaceSupport", &self.DeinterlaceSupport)
            .field("AutoProcessingSupport", &self.AutoProcessingSupport)
            .field("FilterSupport", &self.FilterSupport)
            .field("FilterRangeSupport", &self.FilterRangeSupport)
            .finish()
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::cmp::PartialEq for D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT {
    fn eq(&self, other: &Self) -> bool {
        self.NodeIndex == other.NodeIndex
            && self.InputSample == other.InputSample
            && self.InputFieldType == other.InputFieldType
            && self.InputStereoFormat == other.InputStereoFormat
            && self.InputFrameRate == other.InputFrameRate
            && self.OutputFormat == other.OutputFormat
            && self.OutputStereoFormat == other.OutputStereoFormat
            && self.OutputFrameRate == other.OutputFrameRate
            && self.SupportFlags == other.SupportFlags
            && self.ScaleSupport == other.ScaleSupport
            && self.FeatureSupport == other.FeatureSupport
            && self.DeinterlaceSupport == other.DeinterlaceSupport
            && self.AutoProcessingSupport == other.AutoProcessingSupport
            && self.FilterSupport == other.FilterSupport
            && self.FilterRangeSupport == other.FilterRangeSupport
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::cmp::Eq for D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT {}
#[cfg(feature = "Win32_Graphics_Dxgi")]
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_FEATURE_VIDEO(pub i32);
pub const D3D12_FEATURE_VIDEO_DECODE_SUPPORT: D3D12_FEATURE_VIDEO = D3D12_FEATURE_VIDEO(0i32);
pub const D3D12_FEATURE_VIDEO_DECODE_PROFILES: D3D12_FEATURE_VIDEO = D3D12_FEATURE_VIDEO(1i32);
pub const D3D12_FEATURE_VIDEO_DECODE_FORMATS: D3D12_FEATURE_VIDEO = D3D12_FEATURE_VIDEO(2i32);
pub const D3D12_FEATURE_VIDEO_DECODE_CONVERSION_SUPPORT: D3D12_FEATURE_VIDEO = D3D12_FEATURE_VIDEO(3i32);
pub const D3D12_FEATURE_VIDEO_PROCESS_SUPPORT: D3D12_FEATURE_VIDEO = D3D12_FEATURE_VIDEO(5i32);
pub const D3D12_FEATURE_VIDEO_PROCESS_MAX_INPUT_STREAMS: D3D12_FEATURE_VIDEO = D3D12_FEATURE_VIDEO(6i32);
pub const D3D12_FEATURE_VIDEO_PROCESS_REFERENCE_INFO: D3D12_FEATURE_VIDEO = D3D12_FEATURE_VIDEO(7i32);
pub const D3D12_FEATURE_VIDEO_DECODER_HEAP_SIZE: D3D12_FEATURE_VIDEO = D3D12_FEATURE_VIDEO(8i32);
pub const D3D12_FEATURE_VIDEO_PROCESSOR_SIZE: D3D12_FEATURE_VIDEO = D3D12_FEATURE_VIDEO(9i32);
pub const D3D12_FEATURE_VIDEO_DECODE_PROFILE_COUNT: D3D12_FEATURE_VIDEO = D3D12_FEATURE_VIDEO(10i32);
pub const D3D12_FEATURE_VIDEO_DECODE_FORMAT_COUNT: D3D12_FEATURE_VIDEO = D3D12_FEATURE_VIDEO(11i32);
pub const D3D12_FEATURE_VIDEO_ARCHITECTURE: D3D12_FEATURE_VIDEO = D3D12_FEATURE_VIDEO(17i32);
pub const D3D12_FEATURE_VIDEO_DECODE_HISTOGRAM: D3D12_FEATURE_VIDEO = D3D12_FEATURE_VIDEO(18i32);
pub const D3D12_FEATURE_VIDEO_FEATURE_AREA_SUPPORT: D3D12_FEATURE_VIDEO = D3D12_FEATURE_VIDEO(19i32);
pub const D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR: D3D12_FEATURE_VIDEO = D3D12_FEATURE_VIDEO(20i32);
pub const D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR_SIZE: D3D12_FEATURE_VIDEO = D3D12_FEATURE_VIDEO(21i32);
pub const D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_COUNT: D3D12_FEATURE_VIDEO = D3D12_FEATURE_VIDEO(22i32);
pub const D3D12_FEATURE_VIDEO_EXTENSION_COMMANDS: D3D12_FEATURE_VIDEO = D3D12_FEATURE_VIDEO(23i32);
pub const D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT: D3D12_FEATURE_VIDEO = D3D12_FEATURE_VIDEO(24i32);
pub const D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_PARAMETERS: D3D12_FEATURE_VIDEO = D3D12_FEATURE_VIDEO(25i32);
pub const D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_SUPPORT: D3D12_FEATURE_VIDEO = D3D12_FEATURE_VIDEO(26i32);
pub const D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_SIZE: D3D12_FEATURE_VIDEO = D3D12_FEATURE_VIDEO(27i32);
pub const D3D12_FEATURE_VIDEO_DECODE_PROTECTED_RESOURCES: D3D12_FEATURE_VIDEO = D3D12_FEATURE_VIDEO(28i32);
pub const D3D12_FEATURE_VIDEO_PROCESS_PROTECTED_RESOURCES: D3D12_FEATURE_VIDEO = D3D12_FEATURE_VIDEO(29i32);
pub const D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES: D3D12_FEATURE_VIDEO = D3D12_FEATURE_VIDEO(30i32);
pub const D3D12_FEATURE_VIDEO_DECODER_HEAP_SIZE1: D3D12_FEATURE_VIDEO = D3D12_FEATURE_VIDEO(31i32);
pub const D3D12_FEATURE_VIDEO_PROCESSOR_SIZE1: D3D12_FEATURE_VIDEO = D3D12_FEATURE_VIDEO(32i32);
impl ::core::convert::From<i32> for D3D12_FEATURE_VIDEO {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_FEATURE_VIDEO {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Dxgi")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Dxgi`*"]
pub struct D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS {
    pub Status: u64,
    pub NumMacroblocksAffected: u64,
    pub FrameRate: super::super::Graphics::Dxgi::DXGI_RATIONAL,
    pub BitRate: u32,
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS {}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::default::Default for D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::fmt::Debug for D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS").field("Status", &self.Status).field("NumMacroblocksAffected", &self.NumMacroblocksAffected).field("FrameRate", &self.FrameRate).field("BitRate", &self.BitRate).finish()
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::cmp::PartialEq for D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS {
    fn eq(&self, other: &Self) -> bool {
        self.Status == other.Status && self.NumMacroblocksAffected == other.NumMacroblocksAffected && self.FrameRate == other.FrameRate && self.BitRate == other.BitRate
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::cmp::Eq for D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS {}
#[cfg(feature = "Win32_Graphics_Dxgi")]
unsafe impl ::windows::runtime::Abi for D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT {
    pub pMotionVectorHeap: ::core::option::Option<ID3D12VideoMotionVectorHeap>,
    pub PixelWidth: u32,
    pub PixelHeight: u32,
}
impl D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT {}
impl ::core::default::Default for D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT").field("pMotionVectorHeap", &self.pMotionVectorHeap).field("PixelWidth", &self.PixelWidth).field("PixelHeight", &self.PixelHeight).finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT {
    fn eq(&self, other: &Self) -> bool {
        self.pMotionVectorHeap == other.pMotionVectorHeap && self.PixelWidth == other.PixelWidth && self.PixelHeight == other.PixelHeight
    }
}
impl ::core::cmp::Eq for D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT {}
unsafe impl ::windows::runtime::Abi for D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Direct3D12")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
pub struct D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT {
    pub pMotionVectorTexture2D: ::core::option::Option<super::super::Graphics::Direct3D12::ID3D12Resource>,
    pub MotionVectorCoordinate: D3D12_RESOURCE_COORDINATE,
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT {}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::default::Default for D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::fmt::Debug for D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT").field("pMotionVectorTexture2D", &self.pMotionVectorTexture2D).field("MotionVectorCoordinate", &self.MotionVectorCoordinate).finish()
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::cmp::PartialEq for D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT {
    fn eq(&self, other: &Self) -> bool {
        self.pMotionVectorTexture2D == other.pMotionVectorTexture2D && self.MotionVectorCoordinate == other.MotionVectorCoordinate
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::cmp::Eq for D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT {}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
unsafe impl ::windows::runtime::Abi for D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_RESOURCE_COORDINATE {
    pub X: u64,
    pub Y: u32,
    pub Z: u32,
    pub SubresourceIndex: u32,
}
impl D3D12_RESOURCE_COORDINATE {}
impl ::core::default::Default for D3D12_RESOURCE_COORDINATE {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_RESOURCE_COORDINATE {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_RESOURCE_COORDINATE").field("X", &self.X).field("Y", &self.Y).field("Z", &self.Z).field("SubresourceIndex", &self.SubresourceIndex).finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_RESOURCE_COORDINATE {
    fn eq(&self, other: &Self) -> bool {
        self.X == other.X && self.Y == other.Y && self.Z == other.Z && self.SubresourceIndex == other.SubresourceIndex
    }
}
impl ::core::cmp::Eq for D3D12_RESOURCE_COORDINATE {}
unsafe impl ::windows::runtime::Abi for D3D12_RESOURCE_COORDINATE {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_DECODER_DESC {
    pub NodeMask: u32,
    pub Configuration: D3D12_VIDEO_DECODE_CONFIGURATION,
}
impl D3D12_VIDEO_DECODER_DESC {}
impl ::core::default::Default for D3D12_VIDEO_DECODER_DESC {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_VIDEO_DECODER_DESC {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_DECODER_DESC").field("NodeMask", &self.NodeMask).field("Configuration", &self.Configuration).finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_DECODER_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.NodeMask == other.NodeMask && self.Configuration == other.Configuration
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_DECODER_DESC {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_DECODER_DESC {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Dxgi")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Dxgi`*"]
pub struct D3D12_VIDEO_DECODER_HEAP_DESC {
    pub NodeMask: u32,
    pub Configuration: D3D12_VIDEO_DECODE_CONFIGURATION,
    pub DecodeWidth: u32,
    pub DecodeHeight: u32,
    pub Format: super::super::Graphics::Dxgi::DXGI_FORMAT,
    pub FrameRate: super::super::Graphics::Dxgi::DXGI_RATIONAL,
    pub BitRate: u32,
    pub MaxDecodePictureBufferCount: u32,
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl D3D12_VIDEO_DECODER_HEAP_DESC {}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::default::Default for D3D12_VIDEO_DECODER_HEAP_DESC {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::fmt::Debug for D3D12_VIDEO_DECODER_HEAP_DESC {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_DECODER_HEAP_DESC")
            .field("NodeMask", &self.NodeMask)
            .field("Configuration", &self.Configuration)
            .field("DecodeWidth", &self.DecodeWidth)
            .field("DecodeHeight", &self.DecodeHeight)
            .field("Format", &self.Format)
            .field("FrameRate", &self.FrameRate)
            .field("BitRate", &self.BitRate)
            .field("MaxDecodePictureBufferCount", &self.MaxDecodePictureBufferCount)
            .finish()
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::cmp::PartialEq for D3D12_VIDEO_DECODER_HEAP_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.NodeMask == other.NodeMask && self.Configuration == other.Configuration && self.DecodeWidth == other.DecodeWidth && self.DecodeHeight == other.DecodeHeight && self.Format == other.Format && self.FrameRate == other.FrameRate && self.BitRate == other.BitRate && self.MaxDecodePictureBufferCount == other.MaxDecodePictureBufferCount
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::cmp::Eq for D3D12_VIDEO_DECODER_HEAP_DESC {}
#[cfg(feature = "Win32_Graphics_Dxgi")]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_DECODER_HEAP_DESC {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_DECODE_ARGUMENT_TYPE(pub i32);
pub const D3D12_VIDEO_DECODE_ARGUMENT_TYPE_PICTURE_PARAMETERS: D3D12_VIDEO_DECODE_ARGUMENT_TYPE = D3D12_VIDEO_DECODE_ARGUMENT_TYPE(0i32);
pub const D3D12_VIDEO_DECODE_ARGUMENT_TYPE_INVERSE_QUANTIZATION_MATRIX: D3D12_VIDEO_DECODE_ARGUMENT_TYPE = D3D12_VIDEO_DECODE_ARGUMENT_TYPE(1i32);
pub const D3D12_VIDEO_DECODE_ARGUMENT_TYPE_SLICE_CONTROL: D3D12_VIDEO_DECODE_ARGUMENT_TYPE = D3D12_VIDEO_DECODE_ARGUMENT_TYPE(2i32);
pub const D3D12_VIDEO_DECODE_ARGUMENT_TYPE_MAX_VALID: D3D12_VIDEO_DECODE_ARGUMENT_TYPE = D3D12_VIDEO_DECODE_ARGUMENT_TYPE(3i32);
impl ::core::convert::From<i32> for D3D12_VIDEO_DECODE_ARGUMENT_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_DECODE_ARGUMENT_TYPE {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Direct3D12")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
pub struct D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM {
    pub pBuffer: ::core::option::Option<super::super::Graphics::Direct3D12::ID3D12Resource>,
    pub Offset: u64,
    pub Size: u64,
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM {}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::default::Default for D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::fmt::Debug for D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM").field("pBuffer", &self.pBuffer).field("Offset", &self.Offset).field("Size", &self.Size).finish()
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::cmp::PartialEq for D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM {
    fn eq(&self, other: &Self) -> bool {
        self.pBuffer == other.pBuffer && self.Offset == other.Offset && self.Size == other.Size
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::cmp::Eq for D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM {}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_DECODE_CONFIGURATION {
    pub DecodeProfile: ::windows::runtime::GUID,
    pub BitstreamEncryption: D3D12_BITSTREAM_ENCRYPTION_TYPE,
    pub InterlaceType: D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE,
}
impl D3D12_VIDEO_DECODE_CONFIGURATION {}
impl ::core::default::Default for D3D12_VIDEO_DECODE_CONFIGURATION {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_VIDEO_DECODE_CONFIGURATION {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_DECODE_CONFIGURATION").field("DecodeProfile", &self.DecodeProfile).field("BitstreamEncryption", &self.BitstreamEncryption).field("InterlaceType", &self.InterlaceType).finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_DECODE_CONFIGURATION {
    fn eq(&self, other: &Self) -> bool {
        self.DecodeProfile == other.DecodeProfile && self.BitstreamEncryption == other.BitstreamEncryption && self.InterlaceType == other.InterlaceType
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_DECODE_CONFIGURATION {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_DECODE_CONFIGURATION {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS(pub u32);
pub const D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_NONE: D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS = D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS(0u32);
pub const D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_HEIGHT_ALIGNMENT_MULTIPLE_32_REQUIRED: D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS = D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS(1u32);
pub const D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_POST_PROCESSING_SUPPORTED: D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS = D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS(2u32);
pub const D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_REFERENCE_ONLY_ALLOCATIONS_REQUIRED: D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS = D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS(4u32);
pub const D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_ALLOW_RESOLUTION_CHANGE_ON_NON_KEY_FRAME: D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS = D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS(8u32);
impl ::core::convert::From<u32> for D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS {
    type Abi = Self;
}
impl ::core::ops::BitOr for D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::core::ops::BitAnd for D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::core::ops::BitOrAssign for D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::core::ops::BitAndAssign for D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::core::ops::Not for D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D12`, `Win32_Graphics_Dxgi`*"]
pub struct D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS {
    pub Enable: super::super::Foundation::BOOL,
    pub pReferenceTexture2D: ::core::option::Option<super::super::Graphics::Direct3D12::ID3D12Resource>,
    pub ReferenceSubresource: u32,
    pub OutputColorSpace: super::super::Graphics::Dxgi::DXGI_COLOR_SPACE_TYPE,
    pub DecodeColorSpace: super::super::Graphics::Dxgi::DXGI_COLOR_SPACE_TYPE,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
impl D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
impl ::core::default::Default for D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
impl ::core::fmt::Debug for D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS")
            .field("Enable", &self.Enable)
            .field("pReferenceTexture2D", &self.pReferenceTexture2D)
            .field("ReferenceSubresource", &self.ReferenceSubresource)
            .field("OutputColorSpace", &self.OutputColorSpace)
            .field("DecodeColorSpace", &self.DecodeColorSpace)
            .finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
impl ::core::cmp::PartialEq for D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS {
    fn eq(&self, other: &Self) -> bool {
        self.Enable == other.Enable && self.pReferenceTexture2D == other.pReferenceTexture2D && self.ReferenceSubresource == other.ReferenceSubresource && self.OutputColorSpace == other.OutputColorSpace && self.DecodeColorSpace == other.DecodeColorSpace
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
impl ::core::cmp::Eq for D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D12`, `Win32_Graphics_Dxgi`*"]
pub struct D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1 {
    pub Enable: super::super::Foundation::BOOL,
    pub pReferenceTexture2D: ::core::option::Option<super::super::Graphics::Direct3D12::ID3D12Resource>,
    pub ReferenceSubresource: u32,
    pub OutputColorSpace: super::super::Graphics::Dxgi::DXGI_COLOR_SPACE_TYPE,
    pub DecodeColorSpace: super::super::Graphics::Dxgi::DXGI_COLOR_SPACE_TYPE,
    pub OutputWidth: u32,
    pub OutputHeight: u32,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
impl D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1 {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
impl ::core::default::Default for D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
impl ::core::fmt::Debug for D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1 {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1")
            .field("Enable", &self.Enable)
            .field("pReferenceTexture2D", &self.pReferenceTexture2D)
            .field("ReferenceSubresource", &self.ReferenceSubresource)
            .field("OutputColorSpace", &self.OutputColorSpace)
            .field("DecodeColorSpace", &self.DecodeColorSpace)
            .field("OutputWidth", &self.OutputWidth)
            .field("OutputHeight", &self.OutputHeight)
            .finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
impl ::core::cmp::PartialEq for D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1 {
    fn eq(&self, other: &Self) -> bool {
        self.Enable == other.Enable && self.pReferenceTexture2D == other.pReferenceTexture2D && self.ReferenceSubresource == other.ReferenceSubresource && self.OutputColorSpace == other.OutputColorSpace && self.DecodeColorSpace == other.DecodeColorSpace && self.OutputWidth == other.OutputWidth && self.OutputHeight == other.OutputHeight
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
impl ::core::cmp::Eq for D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1 {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1 {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS(pub u32);
pub const D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAG_NONE: D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS = D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS(0u32);
pub const D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAG_SUPPORTED: D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS = D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS(1u32);
impl ::core::convert::From<u32> for D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS {
    type Abi = Self;
}
impl ::core::ops::BitOr for D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::core::ops::BitAnd for D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::core::ops::BitOrAssign for D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::core::ops::BitAndAssign for D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::core::ops::Not for D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_DECODE_FRAME_ARGUMENT {
    pub Type: D3D12_VIDEO_DECODE_ARGUMENT_TYPE,
    pub Size: u32,
    pub pData: *mut ::core::ffi::c_void,
}
impl D3D12_VIDEO_DECODE_FRAME_ARGUMENT {}
impl ::core::default::Default for D3D12_VIDEO_DECODE_FRAME_ARGUMENT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_VIDEO_DECODE_FRAME_ARGUMENT {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_DECODE_FRAME_ARGUMENT").field("Type", &self.Type).field("Size", &self.Size).field("pData", &self.pData).finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_DECODE_FRAME_ARGUMENT {
    fn eq(&self, other: &Self) -> bool {
        self.Type == other.Type && self.Size == other.Size && self.pData == other.pData
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_DECODE_FRAME_ARGUMENT {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_DECODE_FRAME_ARGUMENT {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT(pub i32);
pub const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_Y: D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT = D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT(0i32);
pub const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_U: D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT = D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT(1i32);
pub const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_V: D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT = D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT(2i32);
pub const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_R: D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT = D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT(0i32);
pub const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_G: D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT = D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT(1i32);
pub const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_B: D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT = D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT(2i32);
pub const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_A: D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT = D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT(3i32);
impl ::core::convert::From<i32> for D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS(pub u32);
pub const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_NONE: D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS = D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS(0u32);
pub const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_Y: D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS = D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS(1u32);
pub const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_U: D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS = D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS(2u32);
pub const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_V: D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS = D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS(4u32);
pub const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_R: D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS = D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS(1u32);
pub const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_G: D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS = D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS(2u32);
pub const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_B: D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS = D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS(4u32);
pub const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_A: D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS = D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS(8u32);
impl ::core::convert::From<u32> for D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS {
    type Abi = Self;
}
impl ::core::ops::BitOr for D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::core::ops::BitAnd for D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::core::ops::BitOrAssign for D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::core::ops::BitAndAssign for D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::core::ops::Not for D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Direct3D12")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
pub struct D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS {
    pub NumFrameArguments: u32,
    pub FrameArguments: [D3D12_VIDEO_DECODE_FRAME_ARGUMENT; 10],
    pub ReferenceFrames: D3D12_VIDEO_DECODE_REFERENCE_FRAMES,
    pub CompressedBitstream: D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM,
    pub pHeap: ::core::option::Option<ID3D12VideoDecoderHeap>,
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS {}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::default::Default for D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::fmt::Debug for D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS").field("NumFrameArguments", &self.NumFrameArguments).field("FrameArguments", &self.FrameArguments).field("ReferenceFrames", &self.ReferenceFrames).field("CompressedBitstream", &self.CompressedBitstream).field("pHeap", &self.pHeap).finish()
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::cmp::PartialEq for D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS {
    fn eq(&self, other: &Self) -> bool {
        self.NumFrameArguments == other.NumFrameArguments && self.FrameArguments == other.FrameArguments && self.ReferenceFrames == other.ReferenceFrames && self.CompressedBitstream == other.CompressedBitstream && self.pHeap == other.pHeap
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::cmp::Eq for D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS {}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Direct3D12")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
pub struct D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM {
    pub Offset: u64,
    pub pBuffer: ::core::option::Option<super::super::Graphics::Direct3D12::ID3D12Resource>,
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM {}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::default::Default for D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::fmt::Debug for D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM").field("Offset", &self.Offset).field("pBuffer", &self.pBuffer).finish()
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::cmp::PartialEq for D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM {
    fn eq(&self, other: &Self) -> bool {
        self.Offset == other.Offset && self.pBuffer == other.pBuffer
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::cmp::Eq for D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM {}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D12`, `Win32_Graphics_Dxgi`*"]
pub struct D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS {
    pub pOutputTexture2D: ::core::option::Option<super::super::Graphics::Direct3D12::ID3D12Resource>,
    pub OutputSubresource: u32,
    pub ConversionArguments: D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
impl D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
impl ::core::default::Default for D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
impl ::core::fmt::Debug for D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS").field("pOutputTexture2D", &self.pOutputTexture2D).field("OutputSubresource", &self.OutputSubresource).field("ConversionArguments", &self.ConversionArguments).finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
impl ::core::cmp::PartialEq for D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS {
    fn eq(&self, other: &Self) -> bool {
        self.pOutputTexture2D == other.pOutputTexture2D && self.OutputSubresource == other.OutputSubresource && self.ConversionArguments == other.ConversionArguments
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
impl ::core::cmp::Eq for D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D12`, `Win32_Graphics_Dxgi`*"]
pub struct D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1 {
    pub pOutputTexture2D: ::core::option::Option<super::super::Graphics::Direct3D12::ID3D12Resource>,
    pub OutputSubresource: u32,
    pub ConversionArguments: D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1,
    pub Histograms: [D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM; 4],
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
impl D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1 {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
impl ::core::default::Default for D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
impl ::core::cmp::PartialEq for D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
impl ::core::cmp::Eq for D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1 {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1 {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
pub const D3D12_VIDEO_DECODE_PROFILE_AV1_12BIT_PROFILE2: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(387084297, 40975, 19681, [153, 78, 191, 64, 129, 246, 243, 240]);
pub const D3D12_VIDEO_DECODE_PROFILE_AV1_12BIT_PROFILE2_420: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(763412182, 40108, 18485, [158, 145, 50, 123, 188, 79, 158, 232]);
pub const D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE0: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3099479243, 53075, 18106, [141, 89, 214, 184, 166, 218, 93, 42]);
pub const D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE1: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1765211919, 17841, 16739, [156, 193, 100, 110, 246, 148, 97, 8]);
pub const D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE2: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(207563425, 58689, 16521, [187, 123, 152, 17, 10, 25, 215, 200]);
pub const D3D12_VIDEO_DECODE_PROFILE_H264: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(461487720, 41159, 4563, [185, 132, 0, 192, 79, 46, 115, 197]);
pub const D3D12_VIDEO_DECODE_PROFILE_H264_MULTIVIEW: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1885052290, 30415, 18902, [183, 230, 172, 136, 114, 219, 1, 60]);
pub const D3D12_VIDEO_DECODE_PROFILE_H264_STEREO: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4188720315, 49846, 19708, [135, 121, 87, 7, 177, 118, 5, 82]);
pub const D3D12_VIDEO_DECODE_PROFILE_H264_STEREO_PROGRESSIVE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3617319130, 3313, 19585, [184, 42, 105, 164, 226, 54, 244, 61]);
pub const D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1527895323, 12108, 17490, [188, 195, 9, 242, 161, 22, 12, 192]);
pub const D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN10: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(276492512, 61210, 19737, [171, 168, 103, 161, 99, 7, 61, 19]);
pub const D3D12_VIDEO_DECODE_PROFILE_MPEG1_AND_MPEG2: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2255052562, 13326, 20228, [159, 211, 146, 83, 221, 50, 116, 96]);
pub const D3D12_VIDEO_DECODE_PROFILE_MPEG2: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3995550079, 24104, 20069, [190, 234, 29, 38, 181, 8, 173, 201]);
pub const D3D12_VIDEO_DECODE_PROFILE_MPEG4PT2_ADVSIMPLE_NOGMC: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3980495519, 269, 20186, [154, 227, 154, 101, 53, 141, 141, 46]);
pub const D3D12_VIDEO_DECODE_PROFILE_MPEG4PT2_SIMPLE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4023799156, 51688, 16855, [165, 233, 233, 176, 227, 159, 163, 25]);
pub const D3D12_VIDEO_DECODE_PROFILE_VC1: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(461487779, 41159, 4563, [185, 132, 0, 192, 79, 46, 115, 197]);
pub const D3D12_VIDEO_DECODE_PROFILE_VC1_D2010: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(461487780, 41159, 4563, [185, 132, 0, 192, 79, 46, 115, 197]);
pub const D3D12_VIDEO_DECODE_PROFILE_VP8: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2428017130, 14946, 18181, [136, 179, 141, 240, 75, 39, 68, 231]);
pub const D3D12_VIDEO_DECODE_PROFILE_VP9: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1178011640, 41424, 17797, [135, 109, 131, 170, 109, 96, 184, 158]);
pub const D3D12_VIDEO_DECODE_PROFILE_VP9_10BIT_PROFILE2: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2764524015, 28367, 18602, [132, 72, 80, 167, 161, 22, 95, 247]);
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Direct3D12")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
pub struct D3D12_VIDEO_DECODE_REFERENCE_FRAMES {
    pub NumTexture2Ds: u32,
    pub ppTexture2Ds: *mut ::core::option::Option<super::super::Graphics::Direct3D12::ID3D12Resource>,
    pub pSubresources: *mut u32,
    pub ppHeaps: *mut ::core::option::Option<ID3D12VideoDecoderHeap>,
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl D3D12_VIDEO_DECODE_REFERENCE_FRAMES {}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::default::Default for D3D12_VIDEO_DECODE_REFERENCE_FRAMES {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::fmt::Debug for D3D12_VIDEO_DECODE_REFERENCE_FRAMES {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_DECODE_REFERENCE_FRAMES").field("NumTexture2Ds", &self.NumTexture2Ds).field("ppTexture2Ds", &self.ppTexture2Ds).field("pSubresources", &self.pSubresources).field("ppHeaps", &self.ppHeaps).finish()
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::cmp::PartialEq for D3D12_VIDEO_DECODE_REFERENCE_FRAMES {
    fn eq(&self, other: &Self) -> bool {
        self.NumTexture2Ds == other.NumTexture2Ds && self.ppTexture2Ds == other.ppTexture2Ds && self.pSubresources == other.pSubresources && self.ppHeaps == other.ppHeaps
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::cmp::Eq for D3D12_VIDEO_DECODE_REFERENCE_FRAMES {}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_DECODE_REFERENCE_FRAMES {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_DECODE_STATUS(pub i32);
pub const D3D12_VIDEO_DECODE_STATUS_OK: D3D12_VIDEO_DECODE_STATUS = D3D12_VIDEO_DECODE_STATUS(0i32);
pub const D3D12_VIDEO_DECODE_STATUS_CONTINUE: D3D12_VIDEO_DECODE_STATUS = D3D12_VIDEO_DECODE_STATUS(1i32);
pub const D3D12_VIDEO_DECODE_STATUS_CONTINUE_SKIP_DISPLAY: D3D12_VIDEO_DECODE_STATUS = D3D12_VIDEO_DECODE_STATUS(2i32);
pub const D3D12_VIDEO_DECODE_STATUS_RESTART: D3D12_VIDEO_DECODE_STATUS = D3D12_VIDEO_DECODE_STATUS(3i32);
pub const D3D12_VIDEO_DECODE_STATUS_RATE_EXCEEDED: D3D12_VIDEO_DECODE_STATUS = D3D12_VIDEO_DECODE_STATUS(4i32);
impl ::core::convert::From<i32> for D3D12_VIDEO_DECODE_STATUS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_DECODE_STATUS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_DECODE_SUPPORT_FLAGS(pub u32);
pub const D3D12_VIDEO_DECODE_SUPPORT_FLAG_NONE: D3D12_VIDEO_DECODE_SUPPORT_FLAGS = D3D12_VIDEO_DECODE_SUPPORT_FLAGS(0u32);
pub const D3D12_VIDEO_DECODE_SUPPORT_FLAG_SUPPORTED: D3D12_VIDEO_DECODE_SUPPORT_FLAGS = D3D12_VIDEO_DECODE_SUPPORT_FLAGS(1u32);
impl ::core::convert::From<u32> for D3D12_VIDEO_DECODE_SUPPORT_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_DECODE_SUPPORT_FLAGS {
    type Abi = Self;
}
impl ::core::ops::BitOr for D3D12_VIDEO_DECODE_SUPPORT_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::core::ops::BitAnd for D3D12_VIDEO_DECODE_SUPPORT_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::core::ops::BitOrAssign for D3D12_VIDEO_DECODE_SUPPORT_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::core::ops::BitAndAssign for D3D12_VIDEO_DECODE_SUPPORT_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::core::ops::Not for D3D12_VIDEO_DECODE_SUPPORT_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_DECODE_TIER(pub i32);
pub const D3D12_VIDEO_DECODE_TIER_NOT_SUPPORTED: D3D12_VIDEO_DECODE_TIER = D3D12_VIDEO_DECODE_TIER(0i32);
pub const D3D12_VIDEO_DECODE_TIER_1: D3D12_VIDEO_DECODE_TIER = D3D12_VIDEO_DECODE_TIER(1i32);
pub const D3D12_VIDEO_DECODE_TIER_2: D3D12_VIDEO_DECODE_TIER = D3D12_VIDEO_DECODE_TIER(2i32);
pub const D3D12_VIDEO_DECODE_TIER_3: D3D12_VIDEO_DECODE_TIER = D3D12_VIDEO_DECODE_TIER(3i32);
impl ::core::convert::From<i32> for D3D12_VIDEO_DECODE_TIER {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_DECODE_TIER {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_ENCODER_CODEC(pub i32);
pub const D3D12_VIDEO_ENCODER_CODEC_H264: D3D12_VIDEO_ENCODER_CODEC = D3D12_VIDEO_ENCODER_CODEC(0i32);
pub const D3D12_VIDEO_ENCODER_CODEC_HEVC: D3D12_VIDEO_ENCODER_CODEC = D3D12_VIDEO_ENCODER_CODEC(1i32);
impl ::core::convert::From<i32> for D3D12_VIDEO_ENCODER_CODEC {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_CODEC {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION {
    pub DataSize: u32,
    pub Anonymous: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_0,
}
impl D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub union D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_0 {
    pub pH264Config: *mut D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264,
    pub pHEVCConfig: *mut D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC,
}
impl D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_0 {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_0 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_0 {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_0 {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264 {
    pub ConfigurationFlags: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS,
    pub DirectModeConfig: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES,
    pub DisableDeblockingFilterConfig: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES,
}
impl D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264 {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264 {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264").field("ConfigurationFlags", &self.ConfigurationFlags).field("DirectModeConfig", &self.DirectModeConfig).field("DisableDeblockingFilterConfig", &self.DisableDeblockingFilterConfig).finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264 {
    fn eq(&self, other: &Self) -> bool {
        self.ConfigurationFlags == other.ConfigurationFlags && self.DirectModeConfig == other.DirectModeConfig && self.DisableDeblockingFilterConfig == other.DisableDeblockingFilterConfig
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264 {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264 {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES(pub i32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_DISABLED: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES(0i32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_TEMPORAL: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES(1i32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_SPATIAL: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES(2i32);
impl ::core::convert::From<i32> for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS(pub u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_NONE: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS(0u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_USE_CONSTRAINED_INTRAPREDICTION: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS(1u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_USE_ADAPTIVE_8x8_TRANSFORM: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS(2u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_ENABLE_CABAC_ENCODING: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS(4u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_ALLOW_REQUEST_INTRA_CONSTRAINED_SLICES: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS(8u32);
impl ::core::convert::From<u32> for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS {
    type Abi = Self;
}
impl ::core::ops::BitOr for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::core::ops::BitAnd for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::core::ops::BitOrAssign for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::core::ops::BitAndAssign for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::core::ops::Not for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES(pub i32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_0_ALL_LUMA_CHROMA_SLICE_BLOCK_EDGES_ALWAYS_FILTERED: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES(0i32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_1_DISABLE_ALL_SLICE_BLOCK_EDGES: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES(1i32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_2_DISABLE_SLICE_BOUNDARIES_BLOCKS: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES(2i32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_3_USE_TWO_STAGE_DEBLOCKING: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES(3i32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_4_DISABLE_CHROMA_BLOCK_EDGES: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES(4i32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_5_DISABLE_CHROMA_BLOCK_EDGES_AND_LUMA_BOUNDARIES: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES(5i32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_6_DISABLE_CHROMA_BLOCK_EDGES_AND_USE_LUMA_TWO_STAGE_DEBLOCKING: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES(6i32);
impl ::core::convert::From<i32> for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS(pub u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_NONE: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS(0u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_0_ALL_LUMA_CHROMA_SLICE_BLOCK_EDGES_ALWAYS_FILTERED: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS(1u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_1_DISABLE_ALL_SLICE_BLOCK_EDGES: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS(2u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_2_DISABLE_SLICE_BOUNDARIES_BLOCKS: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS(4u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_3_USE_TWO_STAGE_DEBLOCKING: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS(8u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_4_DISABLE_CHROMA_BLOCK_EDGES: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS(16u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_5_DISABLE_CHROMA_BLOCK_EDGES_AND_LUMA_BOUNDARIES: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS(32u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_6_DISABLE_CHROMA_BLOCK_EDGES_AND_USE_LUMA_TWO_STAGE_DEBLOCKING: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS(64u32);
impl ::core::convert::From<u32> for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS {
    type Abi = Self;
}
impl ::core::ops::BitOr for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::core::ops::BitAnd for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::core::ops::BitOrAssign for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::core::ops::BitAndAssign for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::core::ops::Not for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC {
    pub ConfigurationFlags: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS,
    pub MinLumaCodingUnitSize: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE,
    pub MaxLumaCodingUnitSize: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE,
    pub MinLumaTransformUnitSize: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE,
    pub MaxLumaTransformUnitSize: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE,
    pub max_transform_hierarchy_depth_inter: u8,
    pub max_transform_hierarchy_depth_intra: u8,
}
impl D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC")
            .field("ConfigurationFlags", &self.ConfigurationFlags)
            .field("MinLumaCodingUnitSize", &self.MinLumaCodingUnitSize)
            .field("MaxLumaCodingUnitSize", &self.MaxLumaCodingUnitSize)
            .field("MinLumaTransformUnitSize", &self.MinLumaTransformUnitSize)
            .field("MaxLumaTransformUnitSize", &self.MaxLumaTransformUnitSize)
            .field("max_transform_hierarchy_depth_inter", &self.max_transform_hierarchy_depth_inter)
            .field("max_transform_hierarchy_depth_intra", &self.max_transform_hierarchy_depth_intra)
            .finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC {
    fn eq(&self, other: &Self) -> bool {
        self.ConfigurationFlags == other.ConfigurationFlags && self.MinLumaCodingUnitSize == other.MinLumaCodingUnitSize && self.MaxLumaCodingUnitSize == other.MaxLumaCodingUnitSize && self.MinLumaTransformUnitSize == other.MinLumaTransformUnitSize && self.MaxLumaTransformUnitSize == other.MaxLumaTransformUnitSize && self.max_transform_hierarchy_depth_inter == other.max_transform_hierarchy_depth_inter && self.max_transform_hierarchy_depth_intra == other.max_transform_hierarchy_depth_intra
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE(pub i32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_8x8: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE(0i32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_16x16: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE(1i32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_32x32: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE(2i32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_64x64: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE(3i32);
impl ::core::convert::From<i32> for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS(pub u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_NONE: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS(0u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_DISABLE_LOOP_FILTER_ACROSS_SLICES: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS(1u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ALLOW_REQUEST_INTRA_CONSTRAINED_SLICES: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS(2u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_SAO_FILTER: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS(4u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_LONG_TERM_REFERENCES: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS(8u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_USE_ASYMETRIC_MOTION_PARTITION: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS(16u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_TRANSFORM_SKIPPING: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS(32u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_USE_CONSTRAINED_INTRAPREDICTION: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS(64u32);
impl ::core::convert::From<u32> for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS {
    type Abi = Self;
}
impl ::core::ops::BitOr for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::core::ops::BitAnd for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::core::ops::BitOrAssign for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::core::ops::BitAndAssign for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::core::ops::Not for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE(pub i32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_4x4: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE(0i32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_8x8: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE(1i32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_16x16: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE(2i32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_32x32: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE(3i32);
impl ::core::convert::From<i32> for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT {
    pub DataSize: u32,
    pub Anonymous: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_0,
}
impl D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub union D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_0 {
    pub pH264Support: *mut D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264,
    pub pHEVCSupport: *mut D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC,
}
impl D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_0 {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_0 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_0 {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_0 {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264 {
    pub SupportFlags: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS,
    pub DisableDeblockingFilterSupportedModes: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS,
}
impl D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264 {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264 {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264").field("SupportFlags", &self.SupportFlags).field("DisableDeblockingFilterSupportedModes", &self.DisableDeblockingFilterSupportedModes).finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264 {
    fn eq(&self, other: &Self) -> bool {
        self.SupportFlags == other.SupportFlags && self.DisableDeblockingFilterSupportedModes == other.DisableDeblockingFilterSupportedModes
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264 {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264 {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS(pub u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_NONE: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS(0u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_CABAC_ENCODING_SUPPORT: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS(1u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_INTRA_SLICE_CONSTRAINED_ENCODING_SUPPORT: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS(2u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_BFRAME_LTR_COMBINED_SUPPORT: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS(4u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_ADAPTIVE_8x8_TRANSFORM_ENCODING_SUPPORT: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS(8u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_DIRECT_SPATIAL_ENCODING_SUPPORT: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS(16u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_DIRECT_TEMPORAL_ENCODING_SUPPORT: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS(32u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_CONSTRAINED_INTRAPREDICTION_SUPPORT: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS(64u32);
impl ::core::convert::From<u32> for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS {
    type Abi = Self;
}
impl ::core::ops::BitOr for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::core::ops::BitAnd for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::core::ops::BitOrAssign for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::core::ops::BitAndAssign for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::core::ops::Not for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC {
    pub SupportFlags: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS,
    pub MinLumaCodingUnitSize: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE,
    pub MaxLumaCodingUnitSize: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE,
    pub MinLumaTransformUnitSize: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE,
    pub MaxLumaTransformUnitSize: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE,
    pub max_transform_hierarchy_depth_inter: u8,
    pub max_transform_hierarchy_depth_intra: u8,
}
impl D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC")
            .field("SupportFlags", &self.SupportFlags)
            .field("MinLumaCodingUnitSize", &self.MinLumaCodingUnitSize)
            .field("MaxLumaCodingUnitSize", &self.MaxLumaCodingUnitSize)
            .field("MinLumaTransformUnitSize", &self.MinLumaTransformUnitSize)
            .field("MaxLumaTransformUnitSize", &self.MaxLumaTransformUnitSize)
            .field("max_transform_hierarchy_depth_inter", &self.max_transform_hierarchy_depth_inter)
            .field("max_transform_hierarchy_depth_intra", &self.max_transform_hierarchy_depth_intra)
            .finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC {
    fn eq(&self, other: &Self) -> bool {
        self.SupportFlags == other.SupportFlags && self.MinLumaCodingUnitSize == other.MinLumaCodingUnitSize && self.MaxLumaCodingUnitSize == other.MaxLumaCodingUnitSize && self.MinLumaTransformUnitSize == other.MinLumaTransformUnitSize && self.MaxLumaTransformUnitSize == other.MaxLumaTransformUnitSize && self.max_transform_hierarchy_depth_inter == other.max_transform_hierarchy_depth_inter && self.max_transform_hierarchy_depth_intra == other.max_transform_hierarchy_depth_intra
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS(pub u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_NONE: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS(0u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_BFRAME_LTR_COMBINED_SUPPORT: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS(1u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_INTRA_SLICE_CONSTRAINED_ENCODING_SUPPORT: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS(2u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_CONSTRAINED_INTRAPREDICTION_SUPPORT: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS(4u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_SAO_FILTER_SUPPORT: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS(8u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_ASYMETRIC_MOTION_PARTITION_SUPPORT: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS(16u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_ASYMETRIC_MOTION_PARTITION_REQUIRED: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS(32u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_TRANSFORM_SKIP_SUPPORT: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS(64u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_DISABLING_LOOP_FILTER_ACROSS_SLICES_SUPPORT: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS(128u32);
pub const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_P_FRAMES_IMPLEMENTED_AS_LOW_DELAY_B_FRAMES: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS(256u32);
impl ::core::convert::From<u32> for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS {
    type Abi = Self;
}
impl ::core::ops::BitOr for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::core::ops::BitAnd for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::core::ops::BitOrAssign for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::core::ops::BitAndAssign for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::core::ops::Not for D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT {
    pub DataSize: u32,
    pub Anonymous: D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_0,
}
impl D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub union D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_0 {
    pub pH264Support: *mut D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264,
    pub pHEVCSupport: *mut D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC,
}
impl D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_0 {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_0 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_0 {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_0 {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264 {
    pub MaxL0ReferencesForP: u32,
    pub MaxL0ReferencesForB: u32,
    pub MaxL1ReferencesForB: u32,
    pub MaxLongTermReferences: u32,
    pub MaxDPBCapacity: u32,
}
impl D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264 {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264 {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264")
            .field("MaxL0ReferencesForP", &self.MaxL0ReferencesForP)
            .field("MaxL0ReferencesForB", &self.MaxL0ReferencesForB)
            .field("MaxL1ReferencesForB", &self.MaxL1ReferencesForB)
            .field("MaxLongTermReferences", &self.MaxLongTermReferences)
            .field("MaxDPBCapacity", &self.MaxDPBCapacity)
            .finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264 {
    fn eq(&self, other: &Self) -> bool {
        self.MaxL0ReferencesForP == other.MaxL0ReferencesForP && self.MaxL0ReferencesForB == other.MaxL0ReferencesForB && self.MaxL1ReferencesForB == other.MaxL1ReferencesForB && self.MaxLongTermReferences == other.MaxLongTermReferences && self.MaxDPBCapacity == other.MaxDPBCapacity
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264 {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264 {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC {
    pub MaxL0ReferencesForP: u32,
    pub MaxL0ReferencesForB: u32,
    pub MaxL1ReferencesForB: u32,
    pub MaxLongTermReferences: u32,
    pub MaxDPBCapacity: u32,
}
impl D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC")
            .field("MaxL0ReferencesForP", &self.MaxL0ReferencesForP)
            .field("MaxL0ReferencesForB", &self.MaxL0ReferencesForB)
            .field("MaxL1ReferencesForB", &self.MaxL1ReferencesForB)
            .field("MaxLongTermReferences", &self.MaxLongTermReferences)
            .field("MaxDPBCapacity", &self.MaxDPBCapacity)
            .finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC {
    fn eq(&self, other: &Self) -> bool {
        self.MaxL0ReferencesForP == other.MaxL0ReferencesForP && self.MaxL0ReferencesForB == other.MaxL0ReferencesForB && self.MaxL1ReferencesForB == other.MaxL1ReferencesForB && self.MaxLongTermReferences == other.MaxLongTermReferences && self.MaxDPBCapacity == other.MaxDPBCapacity
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Direct3D12")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
pub struct D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM {
    pub pBuffer: ::core::option::Option<super::super::Graphics::Direct3D12::ID3D12Resource>,
    pub FrameStartOffset: u64,
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM {}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::default::Default for D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::fmt::Debug for D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM").field("pBuffer", &self.pBuffer).field("FrameStartOffset", &self.FrameStartOffset).finish()
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM {
    fn eq(&self, other: &Self) -> bool {
        self.pBuffer == other.pBuffer && self.FrameStartOffset == other.FrameStartOffset
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM {}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Dxgi")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Dxgi`*"]
pub struct D3D12_VIDEO_ENCODER_DESC {
    pub NodeMask: u32,
    pub Flags: D3D12_VIDEO_ENCODER_FLAGS,
    pub EncodeCodec: D3D12_VIDEO_ENCODER_CODEC,
    pub EncodeProfile: D3D12_VIDEO_ENCODER_PROFILE_DESC,
    pub InputFormat: super::super::Graphics::Dxgi::DXGI_FORMAT,
    pub CodecConfiguration: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION,
    pub MaxMotionEstimationPrecision: D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE,
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl D3D12_VIDEO_ENCODER_DESC {}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::default::Default for D3D12_VIDEO_ENCODER_DESC {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_DESC {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_DESC {}
#[cfg(feature = "Win32_Graphics_Dxgi")]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_DESC {
    type Abi = Self;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
impl ::core::clone::Clone for D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS {
    fn clone(&self) -> Self {
        unimplemented!()
    }
}
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D12`, `Win32_Graphics_Dxgi`*"]
pub struct D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS {
    pub SequenceControlDesc: D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC,
    pub PictureControlDesc: D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC,
    pub pInputFrame: ::core::option::Option<super::super::Graphics::Direct3D12::ID3D12Resource>,
    pub InputFrameSubresource: u32,
    pub CurrentFrameBitstreamMetadataSize: u32,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
impl D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
impl ::core::default::Default for D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Direct3D12")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
pub struct D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS {
    pub Bitstream: D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM,
    pub ReconstructedPicture: D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE,
    pub EncoderOutputMetadata: D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER,
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS {}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::default::Default for D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::fmt::Debug for D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS").field("Bitstream", &self.Bitstream).field("ReconstructedPicture", &self.ReconstructedPicture).field("EncoderOutputMetadata", &self.EncoderOutputMetadata).finish()
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS {
    fn eq(&self, other: &Self) -> bool {
        self.Bitstream == other.Bitstream && self.ReconstructedPicture == other.ReconstructedPicture && self.EncoderOutputMetadata == other.EncoderOutputMetadata
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS {}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS(pub u32);
pub const D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_NO_ERROR: D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS = D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS(0u32);
pub const D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_CODEC_PICTURE_CONTROL_NOT_SUPPORTED: D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS = D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS(1u32);
pub const D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_SUBREGION_LAYOUT_CONFIGURATION_NOT_SUPPORTED: D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS = D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS(2u32);
pub const D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_INVALID_REFERENCE_PICTURES: D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS = D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS(4u32);
pub const D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_RECONFIGURATION_REQUEST_NOT_SUPPORTED: D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS = D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS(8u32);
pub const D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_INVALID_METADATA_BUFFER_SOURCE: D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS = D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS(16u32);
impl ::core::convert::From<u32> for D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS {
    type Abi = Self;
}
impl ::core::ops::BitOr for D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::core::ops::BitAnd for D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::core::ops::BitOrAssign for D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::core::ops::BitAndAssign for D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::core::ops::Not for D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Direct3D12")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
pub struct D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER {
    pub pBuffer: ::core::option::Option<super::super::Graphics::Direct3D12::ID3D12Resource>,
    pub Offset: u64,
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER {}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::default::Default for D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::fmt::Debug for D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER").field("pBuffer", &self.pBuffer).field("Offset", &self.Offset).finish()
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER {
    fn eq(&self, other: &Self) -> bool {
        self.pBuffer == other.pBuffer && self.Offset == other.Offset
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER {}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_ENCODER_FLAGS(pub u32);
pub const D3D12_VIDEO_ENCODER_FLAG_NONE: D3D12_VIDEO_ENCODER_FLAGS = D3D12_VIDEO_ENCODER_FLAGS(0u32);
impl ::core::convert::From<u32> for D3D12_VIDEO_ENCODER_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_FLAGS {
    type Abi = Self;
}
impl ::core::ops::BitOr for D3D12_VIDEO_ENCODER_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::core::ops::BitAnd for D3D12_VIDEO_ENCODER_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::core::ops::BitOrAssign for D3D12_VIDEO_ENCODER_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::core::ops::BitAndAssign for D3D12_VIDEO_ENCODER_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::core::ops::Not for D3D12_VIDEO_ENCODER_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE(pub i32);
pub const D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_FULL_FRAME: D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE = D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE(0i32);
pub const D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_BYTES_PER_SUBREGION: D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE = D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE(1i32);
pub const D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_SQUARE_UNITS_PER_SUBREGION_ROW_UNALIGNED: D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE = D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE(2i32);
pub const D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_UNIFORM_PARTITIONING_ROWS_PER_SUBREGION: D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE = D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE(3i32);
pub const D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_UNIFORM_PARTITIONING_SUBREGIONS_PER_FRAME: D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE = D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE(4i32);
impl ::core::convert::From<i32> for D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA {
    pub bSize: u64,
    pub bStartOffset: u64,
    pub bHeaderSize: u64,
}
impl D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA").field("bSize", &self.bSize).field("bStartOffset", &self.bStartOffset).field("bHeaderSize", &self.bHeaderSize).finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA {
    fn eq(&self, other: &Self) -> bool {
        self.bSize == other.bSize && self.bStartOffset == other.bStartOffset && self.bHeaderSize == other.bHeaderSize
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_ENCODER_FRAME_TYPE_H264(pub i32);
pub const D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_I_FRAME: D3D12_VIDEO_ENCODER_FRAME_TYPE_H264 = D3D12_VIDEO_ENCODER_FRAME_TYPE_H264(0i32);
pub const D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_P_FRAME: D3D12_VIDEO_ENCODER_FRAME_TYPE_H264 = D3D12_VIDEO_ENCODER_FRAME_TYPE_H264(1i32);
pub const D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_B_FRAME: D3D12_VIDEO_ENCODER_FRAME_TYPE_H264 = D3D12_VIDEO_ENCODER_FRAME_TYPE_H264(2i32);
pub const D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_IDR_FRAME: D3D12_VIDEO_ENCODER_FRAME_TYPE_H264 = D3D12_VIDEO_ENCODER_FRAME_TYPE_H264(3i32);
impl ::core::convert::From<i32> for D3D12_VIDEO_ENCODER_FRAME_TYPE_H264 {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_FRAME_TYPE_H264 {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC(pub i32);
pub const D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_I_FRAME: D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC = D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC(0i32);
pub const D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_P_FRAME: D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC = D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC(1i32);
pub const D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_B_FRAME: D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC = D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC(2i32);
pub const D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_IDR_FRAME: D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC = D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC(3i32);
impl ::core::convert::From<i32> for D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_ENCODER_HEAP_DESC {
    pub NodeMask: u32,
    pub Flags: D3D12_VIDEO_ENCODER_HEAP_FLAGS,
    pub EncodeCodec: D3D12_VIDEO_ENCODER_CODEC,
    pub EncodeProfile: D3D12_VIDEO_ENCODER_PROFILE_DESC,
    pub EncodeLevel: D3D12_VIDEO_ENCODER_LEVEL_SETTING,
    pub ResolutionsListCount: u32,
    pub pResolutionList: *mut D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC,
}
impl D3D12_VIDEO_ENCODER_HEAP_DESC {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_HEAP_DESC {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_HEAP_DESC {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_HEAP_DESC {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_HEAP_DESC {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_ENCODER_HEAP_FLAGS(pub u32);
pub const D3D12_VIDEO_ENCODER_HEAP_FLAG_NONE: D3D12_VIDEO_ENCODER_HEAP_FLAGS = D3D12_VIDEO_ENCODER_HEAP_FLAGS(0u32);
impl ::core::convert::From<u32> for D3D12_VIDEO_ENCODER_HEAP_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_HEAP_FLAGS {
    type Abi = Self;
}
impl ::core::ops::BitOr for D3D12_VIDEO_ENCODER_HEAP_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::core::ops::BitAnd for D3D12_VIDEO_ENCODER_HEAP_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::core::ops::BitOrAssign for D3D12_VIDEO_ENCODER_HEAP_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::core::ops::BitAndAssign for D3D12_VIDEO_ENCODER_HEAP_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::core::ops::Not for D3D12_VIDEO_ENCODER_HEAP_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_ENCODER_INTRA_REFRESH {
    pub Mode: D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE,
    pub IntraRefreshDuration: u32,
}
impl D3D12_VIDEO_ENCODER_INTRA_REFRESH {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_INTRA_REFRESH {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_VIDEO_ENCODER_INTRA_REFRESH {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_ENCODER_INTRA_REFRESH").field("Mode", &self.Mode).field("IntraRefreshDuration", &self.IntraRefreshDuration).finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_INTRA_REFRESH {
    fn eq(&self, other: &Self) -> bool {
        self.Mode == other.Mode && self.IntraRefreshDuration == other.IntraRefreshDuration
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_INTRA_REFRESH {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_INTRA_REFRESH {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE(pub i32);
pub const D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE_NONE: D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE = D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE(0i32);
pub const D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE_ROW_BASED: D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE = D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE(1i32);
impl ::core::convert::From<i32> for D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_ENCODER_LEVELS_H264(pub i32);
pub const D3D12_VIDEO_ENCODER_LEVELS_H264_1: D3D12_VIDEO_ENCODER_LEVELS_H264 = D3D12_VIDEO_ENCODER_LEVELS_H264(0i32);
pub const D3D12_VIDEO_ENCODER_LEVELS_H264_1b: D3D12_VIDEO_ENCODER_LEVELS_H264 = D3D12_VIDEO_ENCODER_LEVELS_H264(1i32);
pub const D3D12_VIDEO_ENCODER_LEVELS_H264_11: D3D12_VIDEO_ENCODER_LEVELS_H264 = D3D12_VIDEO_ENCODER_LEVELS_H264(2i32);
pub const D3D12_VIDEO_ENCODER_LEVELS_H264_12: D3D12_VIDEO_ENCODER_LEVELS_H264 = D3D12_VIDEO_ENCODER_LEVELS_H264(3i32);
pub const D3D12_VIDEO_ENCODER_LEVELS_H264_13: D3D12_VIDEO_ENCODER_LEVELS_H264 = D3D12_VIDEO_ENCODER_LEVELS_H264(4i32);
pub const D3D12_VIDEO_ENCODER_LEVELS_H264_2: D3D12_VIDEO_ENCODER_LEVELS_H264 = D3D12_VIDEO_ENCODER_LEVELS_H264(5i32);
pub const D3D12_VIDEO_ENCODER_LEVELS_H264_21: D3D12_VIDEO_ENCODER_LEVELS_H264 = D3D12_VIDEO_ENCODER_LEVELS_H264(6i32);
pub const D3D12_VIDEO_ENCODER_LEVELS_H264_22: D3D12_VIDEO_ENCODER_LEVELS_H264 = D3D12_VIDEO_ENCODER_LEVELS_H264(7i32);
pub const D3D12_VIDEO_ENCODER_LEVELS_H264_3: D3D12_VIDEO_ENCODER_LEVELS_H264 = D3D12_VIDEO_ENCODER_LEVELS_H264(8i32);
pub const D3D12_VIDEO_ENCODER_LEVELS_H264_31: D3D12_VIDEO_ENCODER_LEVELS_H264 = D3D12_VIDEO_ENCODER_LEVELS_H264(9i32);
pub const D3D12_VIDEO_ENCODER_LEVELS_H264_32: D3D12_VIDEO_ENCODER_LEVELS_H264 = D3D12_VIDEO_ENCODER_LEVELS_H264(10i32);
pub const D3D12_VIDEO_ENCODER_LEVELS_H264_4: D3D12_VIDEO_ENCODER_LEVELS_H264 = D3D12_VIDEO_ENCODER_LEVELS_H264(11i32);
pub const D3D12_VIDEO_ENCODER_LEVELS_H264_41: D3D12_VIDEO_ENCODER_LEVELS_H264 = D3D12_VIDEO_ENCODER_LEVELS_H264(12i32);
pub const D3D12_VIDEO_ENCODER_LEVELS_H264_42: D3D12_VIDEO_ENCODER_LEVELS_H264 = D3D12_VIDEO_ENCODER_LEVELS_H264(13i32);
pub const D3D12_VIDEO_ENCODER_LEVELS_H264_5: D3D12_VIDEO_ENCODER_LEVELS_H264 = D3D12_VIDEO_ENCODER_LEVELS_H264(14i32);
pub const D3D12_VIDEO_ENCODER_LEVELS_H264_51: D3D12_VIDEO_ENCODER_LEVELS_H264 = D3D12_VIDEO_ENCODER_LEVELS_H264(15i32);
pub const D3D12_VIDEO_ENCODER_LEVELS_H264_52: D3D12_VIDEO_ENCODER_LEVELS_H264 = D3D12_VIDEO_ENCODER_LEVELS_H264(16i32);
pub const D3D12_VIDEO_ENCODER_LEVELS_H264_6: D3D12_VIDEO_ENCODER_LEVELS_H264 = D3D12_VIDEO_ENCODER_LEVELS_H264(17i32);
pub const D3D12_VIDEO_ENCODER_LEVELS_H264_61: D3D12_VIDEO_ENCODER_LEVELS_H264 = D3D12_VIDEO_ENCODER_LEVELS_H264(18i32);
pub const D3D12_VIDEO_ENCODER_LEVELS_H264_62: D3D12_VIDEO_ENCODER_LEVELS_H264 = D3D12_VIDEO_ENCODER_LEVELS_H264(19i32);
impl ::core::convert::From<i32> for D3D12_VIDEO_ENCODER_LEVELS_H264 {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_LEVELS_H264 {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_ENCODER_LEVELS_HEVC(pub i32);
pub const D3D12_VIDEO_ENCODER_LEVELS_HEVC_1: D3D12_VIDEO_ENCODER_LEVELS_HEVC = D3D12_VIDEO_ENCODER_LEVELS_HEVC(0i32);
pub const D3D12_VIDEO_ENCODER_LEVELS_HEVC_2: D3D12_VIDEO_ENCODER_LEVELS_HEVC = D3D12_VIDEO_ENCODER_LEVELS_HEVC(1i32);
pub const D3D12_VIDEO_ENCODER_LEVELS_HEVC_21: D3D12_VIDEO_ENCODER_LEVELS_HEVC = D3D12_VIDEO_ENCODER_LEVELS_HEVC(2i32);
pub const D3D12_VIDEO_ENCODER_LEVELS_HEVC_3: D3D12_VIDEO_ENCODER_LEVELS_HEVC = D3D12_VIDEO_ENCODER_LEVELS_HEVC(3i32);
pub const D3D12_VIDEO_ENCODER_LEVELS_HEVC_31: D3D12_VIDEO_ENCODER_LEVELS_HEVC = D3D12_VIDEO_ENCODER_LEVELS_HEVC(4i32);
pub const D3D12_VIDEO_ENCODER_LEVELS_HEVC_4: D3D12_VIDEO_ENCODER_LEVELS_HEVC = D3D12_VIDEO_ENCODER_LEVELS_HEVC(5i32);
pub const D3D12_VIDEO_ENCODER_LEVELS_HEVC_41: D3D12_VIDEO_ENCODER_LEVELS_HEVC = D3D12_VIDEO_ENCODER_LEVELS_HEVC(6i32);
pub const D3D12_VIDEO_ENCODER_LEVELS_HEVC_5: D3D12_VIDEO_ENCODER_LEVELS_HEVC = D3D12_VIDEO_ENCODER_LEVELS_HEVC(7i32);
pub const D3D12_VIDEO_ENCODER_LEVELS_HEVC_51: D3D12_VIDEO_ENCODER_LEVELS_HEVC = D3D12_VIDEO_ENCODER_LEVELS_HEVC(8i32);
pub const D3D12_VIDEO_ENCODER_LEVELS_HEVC_52: D3D12_VIDEO_ENCODER_LEVELS_HEVC = D3D12_VIDEO_ENCODER_LEVELS_HEVC(9i32);
pub const D3D12_VIDEO_ENCODER_LEVELS_HEVC_6: D3D12_VIDEO_ENCODER_LEVELS_HEVC = D3D12_VIDEO_ENCODER_LEVELS_HEVC(10i32);
pub const D3D12_VIDEO_ENCODER_LEVELS_HEVC_61: D3D12_VIDEO_ENCODER_LEVELS_HEVC = D3D12_VIDEO_ENCODER_LEVELS_HEVC(11i32);
pub const D3D12_VIDEO_ENCODER_LEVELS_HEVC_62: D3D12_VIDEO_ENCODER_LEVELS_HEVC = D3D12_VIDEO_ENCODER_LEVELS_HEVC(12i32);
impl ::core::convert::From<i32> for D3D12_VIDEO_ENCODER_LEVELS_HEVC {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_LEVELS_HEVC {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_ENCODER_LEVEL_SETTING {
    pub DataSize: u32,
    pub Anonymous: D3D12_VIDEO_ENCODER_LEVEL_SETTING_0,
}
impl D3D12_VIDEO_ENCODER_LEVEL_SETTING {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_LEVEL_SETTING {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_LEVEL_SETTING {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_LEVEL_SETTING {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_LEVEL_SETTING {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub union D3D12_VIDEO_ENCODER_LEVEL_SETTING_0 {
    pub pH264LevelSetting: *mut D3D12_VIDEO_ENCODER_LEVELS_H264,
    pub pHEVCLevelSetting: *mut D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC,
}
impl D3D12_VIDEO_ENCODER_LEVEL_SETTING_0 {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_LEVEL_SETTING_0 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_LEVEL_SETTING_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_LEVEL_SETTING_0 {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_LEVEL_SETTING_0 {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC {
    pub Level: D3D12_VIDEO_ENCODER_LEVELS_HEVC,
    pub Tier: D3D12_VIDEO_ENCODER_TIER_HEVC,
}
impl D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC").field("Level", &self.Level).field("Tier", &self.Tier).finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC {
    fn eq(&self, other: &Self) -> bool {
        self.Level == other.Level && self.Tier == other.Tier
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE(pub i32);
pub const D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_MAXIMUM: D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE = D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE(0i32);
pub const D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_FULL_PIXEL: D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE = D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE(1i32);
pub const D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_HALF_PIXEL: D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE = D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE(2i32);
pub const D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_QUARTER_PIXEL: D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE = D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE(3i32);
impl ::core::convert::From<i32> for D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_ENCODER_OUTPUT_METADATA {
    pub EncodeErrorFlags: u64,
    pub EncodeStats: D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS,
    pub EncodedBitstreamWrittenBytesCount: u64,
    pub WrittenSubregionsCount: u64,
}
impl D3D12_VIDEO_ENCODER_OUTPUT_METADATA {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_OUTPUT_METADATA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_VIDEO_ENCODER_OUTPUT_METADATA {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_ENCODER_OUTPUT_METADATA").field("EncodeErrorFlags", &self.EncodeErrorFlags).field("EncodeStats", &self.EncodeStats).field("EncodedBitstreamWrittenBytesCount", &self.EncodedBitstreamWrittenBytesCount).field("WrittenSubregionsCount", &self.WrittenSubregionsCount).finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_OUTPUT_METADATA {
    fn eq(&self, other: &Self) -> bool {
        self.EncodeErrorFlags == other.EncodeErrorFlags && self.EncodeStats == other.EncodeStats && self.EncodedBitstreamWrittenBytesCount == other.EncodedBitstreamWrittenBytesCount && self.WrittenSubregionsCount == other.WrittenSubregionsCount
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_OUTPUT_METADATA {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_OUTPUT_METADATA {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS {
    pub AverageQP: u64,
    pub IntraCodingUnitsCount: u64,
    pub InterCodingUnitsCount: u64,
    pub SkipCodingUnitsCount: u64,
    pub AverageMotionEstimationXDirection: u64,
    pub AverageMotionEstimationYDirection: u64,
}
impl D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS")
            .field("AverageQP", &self.AverageQP)
            .field("IntraCodingUnitsCount", &self.IntraCodingUnitsCount)
            .field("InterCodingUnitsCount", &self.InterCodingUnitsCount)
            .field("SkipCodingUnitsCount", &self.SkipCodingUnitsCount)
            .field("AverageMotionEstimationXDirection", &self.AverageMotionEstimationXDirection)
            .field("AverageMotionEstimationYDirection", &self.AverageMotionEstimationYDirection)
            .finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS {
    fn eq(&self, other: &Self) -> bool {
        self.AverageQP == other.AverageQP && self.IntraCodingUnitsCount == other.IntraCodingUnitsCount && self.InterCodingUnitsCount == other.InterCodingUnitsCount && self.SkipCodingUnitsCount == other.SkipCodingUnitsCount && self.AverageMotionEstimationXDirection == other.AverageMotionEstimationXDirection && self.AverageMotionEstimationYDirection == other.AverageMotionEstimationYDirection
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA {
    pub DataSize: u32,
    pub Anonymous: D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_0,
}
#[cfg(feature = "Win32_Foundation")]
impl D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub union D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_0 {
    pub pH264PicData: *mut D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264,
    pub pHEVCPicData: *mut D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC,
}
#[cfg(feature = "Win32_Foundation")]
impl D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_0 {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_0 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_0 {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_0 {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264 {
    pub Flags: D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS,
    pub FrameType: D3D12_VIDEO_ENCODER_FRAME_TYPE_H264,
    pub pic_parameter_set_id: u32,
    pub idr_pic_id: u32,
    pub PictureOrderCountNumber: u32,
    pub FrameDecodingOrderNumber: u32,
    pub TemporalLayerIndex: u32,
    pub List0ReferenceFramesCount: u32,
    pub pList0ReferenceFrames: *mut u32,
    pub List1ReferenceFramesCount: u32,
    pub pList1ReferenceFrames: *mut u32,
    pub ReferenceFramesReconPictureDescriptorsCount: u32,
    pub pReferenceFramesReconPictureDescriptors: *mut D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264,
    pub adaptive_ref_pic_marking_mode_flag: u8,
    pub RefPicMarkingOperationsCommandsCount: u32,
    pub pRefPicMarkingOperationsCommands: *mut D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION,
    pub List0RefPicModificationsCount: u32,
    pub pList0RefPicModifications: *mut D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION,
    pub List1RefPicModificationsCount: u32,
    pub pList1RefPicModifications: *mut D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION,
    pub QPMapValuesCount: u32,
    pub pRateControlQPMap: *mut i8,
}
#[cfg(feature = "Win32_Foundation")]
impl D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264 {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264 {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264")
            .field("Flags", &self.Flags)
            .field("FrameType", &self.FrameType)
            .field("pic_parameter_set_id", &self.pic_parameter_set_id)
            .field("idr_pic_id", &self.idr_pic_id)
            .field("PictureOrderCountNumber", &self.PictureOrderCountNumber)
            .field("FrameDecodingOrderNumber", &self.FrameDecodingOrderNumber)
            .field("TemporalLayerIndex", &self.TemporalLayerIndex)
            .field("List0ReferenceFramesCount", &self.List0ReferenceFramesCount)
            .field("pList0ReferenceFrames", &self.pList0ReferenceFrames)
            .field("List1ReferenceFramesCount", &self.List1ReferenceFramesCount)
            .field("pList1ReferenceFrames", &self.pList1ReferenceFrames)
            .field("ReferenceFramesReconPictureDescriptorsCount", &self.ReferenceFramesReconPictureDescriptorsCount)
            .field("pReferenceFramesReconPictureDescriptors", &self.pReferenceFramesReconPictureDescriptors)
            .field("adaptive_ref_pic_marking_mode_flag", &self.adaptive_ref_pic_marking_mode_flag)
            .field("RefPicMarkingOperationsCommandsCount", &self.RefPicMarkingOperationsCommandsCount)
            .field("pRefPicMarkingOperationsCommands", &self.pRefPicMarkingOperationsCommands)
            .field("List0RefPicModificationsCount", &self.List0RefPicModificationsCount)
            .field("pList0RefPicModifications", &self.pList0RefPicModifications)
            .field("List1RefPicModificationsCount", &self.List1RefPicModificationsCount)
            .field("pList1RefPicModifications", &self.pList1RefPicModifications)
            .field("QPMapValuesCount", &self.QPMapValuesCount)
            .field("pRateControlQPMap", &self.pRateControlQPMap)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264 {
    fn eq(&self, other: &Self) -> bool {
        self.Flags == other.Flags
            && self.FrameType == other.FrameType
            && self.pic_parameter_set_id == other.pic_parameter_set_id
            && self.idr_pic_id == other.idr_pic_id
            && self.PictureOrderCountNumber == other.PictureOrderCountNumber
            && self.FrameDecodingOrderNumber == other.FrameDecodingOrderNumber
            && self.TemporalLayerIndex == other.TemporalLayerIndex
            && self.List0ReferenceFramesCount == other.List0ReferenceFramesCount
            && self.pList0ReferenceFrames == other.pList0ReferenceFrames
            && self.List1ReferenceFramesCount == other.List1ReferenceFramesCount
            && self.pList1ReferenceFrames == other.pList1ReferenceFrames
            && self.ReferenceFramesReconPictureDescriptorsCount == other.ReferenceFramesReconPictureDescriptorsCount
            && self.pReferenceFramesReconPictureDescriptors == other.pReferenceFramesReconPictureDescriptors
            && self.adaptive_ref_pic_marking_mode_flag == other.adaptive_ref_pic_marking_mode_flag
            && self.RefPicMarkingOperationsCommandsCount == other.RefPicMarkingOperationsCommandsCount
            && self.pRefPicMarkingOperationsCommands == other.pRefPicMarkingOperationsCommands
            && self.List0RefPicModificationsCount == other.List0RefPicModificationsCount
            && self.pList0RefPicModifications == other.pList0RefPicModifications
            && self.List1RefPicModificationsCount == other.List1RefPicModificationsCount
            && self.pList1RefPicModifications == other.pList1RefPicModifications
            && self.QPMapValuesCount == other.QPMapValuesCount
            && self.pRateControlQPMap == other.pRateControlQPMap
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264 {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264 {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS(pub u32);
pub const D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAG_NONE: D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS = D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS(0u32);
pub const D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAG_REQUEST_INTRA_CONSTRAINED_SLICES: D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS = D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS(1u32);
impl ::core::convert::From<u32> for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS {
    type Abi = Self;
}
impl ::core::ops::BitOr for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::core::ops::BitAnd for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::core::ops::BitOrAssign for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::core::ops::BitAndAssign for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::core::ops::Not for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION {
    pub modification_of_pic_nums_idc: u8,
    pub abs_diff_pic_num_minus1: u32,
    pub long_term_pic_num: u32,
}
impl D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION")
            .field("modification_of_pic_nums_idc", &self.modification_of_pic_nums_idc)
            .field("abs_diff_pic_num_minus1", &self.abs_diff_pic_num_minus1)
            .field("long_term_pic_num", &self.long_term_pic_num)
            .finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION {
    fn eq(&self, other: &Self) -> bool {
        self.modification_of_pic_nums_idc == other.modification_of_pic_nums_idc && self.abs_diff_pic_num_minus1 == other.abs_diff_pic_num_minus1 && self.long_term_pic_num == other.long_term_pic_num
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION {
    pub memory_management_control_operation: u8,
    pub difference_of_pic_nums_minus1: u32,
    pub long_term_pic_num: u32,
    pub long_term_frame_idx: u32,
    pub max_long_term_frame_idx_plus1: u32,
}
impl D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION")
            .field("memory_management_control_operation", &self.memory_management_control_operation)
            .field("difference_of_pic_nums_minus1", &self.difference_of_pic_nums_minus1)
            .field("long_term_pic_num", &self.long_term_pic_num)
            .field("long_term_frame_idx", &self.long_term_frame_idx)
            .field("max_long_term_frame_idx_plus1", &self.max_long_term_frame_idx_plus1)
            .finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION {
    fn eq(&self, other: &Self) -> bool {
        self.memory_management_control_operation == other.memory_management_control_operation && self.difference_of_pic_nums_minus1 == other.difference_of_pic_nums_minus1 && self.long_term_pic_num == other.long_term_pic_num && self.long_term_frame_idx == other.long_term_frame_idx && self.max_long_term_frame_idx_plus1 == other.max_long_term_frame_idx_plus1
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC {
    pub Flags: D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS,
    pub FrameType: D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC,
    pub slice_pic_parameter_set_id: u32,
    pub PictureOrderCountNumber: u32,
    pub TemporalLayerIndex: u32,
    pub List0ReferenceFramesCount: u32,
    pub pList0ReferenceFrames: *mut u32,
    pub List1ReferenceFramesCount: u32,
    pub pList1ReferenceFrames: *mut u32,
    pub ReferenceFramesReconPictureDescriptorsCount: u32,
    pub pReferenceFramesReconPictureDescriptors: *mut D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC,
    pub List0RefPicModificationsCount: u32,
    pub pList0RefPicModifications: *mut u32,
    pub List1RefPicModificationsCount: u32,
    pub pList1RefPicModifications: *mut u32,
    pub QPMapValuesCount: u32,
    pub pRateControlQPMap: *mut i8,
}
#[cfg(feature = "Win32_Foundation")]
impl D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC")
            .field("Flags", &self.Flags)
            .field("FrameType", &self.FrameType)
            .field("slice_pic_parameter_set_id", &self.slice_pic_parameter_set_id)
            .field("PictureOrderCountNumber", &self.PictureOrderCountNumber)
            .field("TemporalLayerIndex", &self.TemporalLayerIndex)
            .field("List0ReferenceFramesCount", &self.List0ReferenceFramesCount)
            .field("pList0ReferenceFrames", &self.pList0ReferenceFrames)
            .field("List1ReferenceFramesCount", &self.List1ReferenceFramesCount)
            .field("pList1ReferenceFrames", &self.pList1ReferenceFrames)
            .field("ReferenceFramesReconPictureDescriptorsCount", &self.ReferenceFramesReconPictureDescriptorsCount)
            .field("pReferenceFramesReconPictureDescriptors", &self.pReferenceFramesReconPictureDescriptors)
            .field("List0RefPicModificationsCount", &self.List0RefPicModificationsCount)
            .field("pList0RefPicModifications", &self.pList0RefPicModifications)
            .field("List1RefPicModificationsCount", &self.List1RefPicModificationsCount)
            .field("pList1RefPicModifications", &self.pList1RefPicModifications)
            .field("QPMapValuesCount", &self.QPMapValuesCount)
            .field("pRateControlQPMap", &self.pRateControlQPMap)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC {
    fn eq(&self, other: &Self) -> bool {
        self.Flags == other.Flags
            && self.FrameType == other.FrameType
            && self.slice_pic_parameter_set_id == other.slice_pic_parameter_set_id
            && self.PictureOrderCountNumber == other.PictureOrderCountNumber
            && self.TemporalLayerIndex == other.TemporalLayerIndex
            && self.List0ReferenceFramesCount == other.List0ReferenceFramesCount
            && self.pList0ReferenceFrames == other.pList0ReferenceFrames
            && self.List1ReferenceFramesCount == other.List1ReferenceFramesCount
            && self.pList1ReferenceFrames == other.pList1ReferenceFrames
            && self.ReferenceFramesReconPictureDescriptorsCount == other.ReferenceFramesReconPictureDescriptorsCount
            && self.pReferenceFramesReconPictureDescriptors == other.pReferenceFramesReconPictureDescriptors
            && self.List0RefPicModificationsCount == other.List0RefPicModificationsCount
            && self.pList0RefPicModifications == other.pList0RefPicModifications
            && self.List1RefPicModificationsCount == other.List1RefPicModificationsCount
            && self.pList1RefPicModifications == other.pList1RefPicModifications
            && self.QPMapValuesCount == other.QPMapValuesCount
            && self.pRateControlQPMap == other.pRateControlQPMap
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS(pub u32);
pub const D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAG_NONE: D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS = D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS(0u32);
pub const D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAG_REQUEST_INTRA_CONSTRAINED_SLICES: D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS = D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS(1u32);
impl ::core::convert::From<u32> for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS {
    type Abi = Self;
}
impl ::core::ops::BitOr for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::core::ops::BitAnd for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::core::ops::BitOrAssign for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::core::ops::BitAndAssign for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::core::ops::Not for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D12`*"]
pub struct D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC {
    pub IntraRefreshFrameIndex: u32,
    pub Flags: D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS,
    pub PictureControlCodecData: D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA,
    pub ReferenceFrames: D3D12_VIDEO_ENCODE_REFERENCE_FRAMES,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl ::core::default::Default for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS(pub u32);
pub const D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAG_NONE: D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS = D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS(0u32);
pub const D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAG_USED_AS_REFERENCE_PICTURE: D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS = D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS(1u32);
impl ::core::convert::From<u32> for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS {
    type Abi = Self;
}
impl ::core::ops::BitOr for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::core::ops::BitAnd for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::core::ops::BitOrAssign for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::core::ops::BitAndAssign for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::core::ops::Not for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA {
    pub DataSize: u32,
    pub Anonymous: D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_0,
}
impl D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub union D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_0 {
    pub pSlicesPartition_H264: *mut D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES,
    pub pSlicesPartition_HEVC: *mut D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES,
}
impl D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_0 {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_0 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_0 {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_0 {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES {
    pub Anonymous: D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES_0,
}
impl D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub union D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES_0 {
    pub MaxBytesPerSlice: u32,
    pub NumberOfCodingUnitsPerSlice: u32,
    pub NumberOfRowsPerSlice: u32,
    pub NumberOfSlicesPerFrame: u32,
}
impl D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES_0 {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES_0 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES_0 {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES_0 {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC {
    pub Width: u32,
    pub Height: u32,
}
impl D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC").field("Width", &self.Width).field("Height", &self.Height).finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.Width == other.Width && self.Height == other.Height
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC {
    pub WidthRatio: u32,
    pub HeightRatio: u32,
}
impl D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC").field("WidthRatio", &self.WidthRatio).field("HeightRatio", &self.HeightRatio).finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.WidthRatio == other.WidthRatio && self.HeightRatio == other.HeightRatio
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_ENCODER_PROFILE_DESC {
    pub DataSize: u32,
    pub Anonymous: D3D12_VIDEO_ENCODER_PROFILE_DESC_0,
}
impl D3D12_VIDEO_ENCODER_PROFILE_DESC {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_PROFILE_DESC {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_PROFILE_DESC {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_PROFILE_DESC {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_PROFILE_DESC {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub union D3D12_VIDEO_ENCODER_PROFILE_DESC_0 {
    pub pH264Profile: *mut D3D12_VIDEO_ENCODER_PROFILE_H264,
    pub pHEVCProfile: *mut D3D12_VIDEO_ENCODER_PROFILE_HEVC,
}
impl D3D12_VIDEO_ENCODER_PROFILE_DESC_0 {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_PROFILE_DESC_0 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_PROFILE_DESC_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_PROFILE_DESC_0 {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_PROFILE_DESC_0 {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_ENCODER_PROFILE_H264(pub i32);
pub const D3D12_VIDEO_ENCODER_PROFILE_H264_MAIN: D3D12_VIDEO_ENCODER_PROFILE_H264 = D3D12_VIDEO_ENCODER_PROFILE_H264(0i32);
pub const D3D12_VIDEO_ENCODER_PROFILE_H264_HIGH: D3D12_VIDEO_ENCODER_PROFILE_H264 = D3D12_VIDEO_ENCODER_PROFILE_H264(1i32);
pub const D3D12_VIDEO_ENCODER_PROFILE_H264_HIGH_10: D3D12_VIDEO_ENCODER_PROFILE_H264 = D3D12_VIDEO_ENCODER_PROFILE_H264(2i32);
impl ::core::convert::From<i32> for D3D12_VIDEO_ENCODER_PROFILE_H264 {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_PROFILE_H264 {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_ENCODER_PROFILE_HEVC(pub i32);
pub const D3D12_VIDEO_ENCODER_PROFILE_HEVC_MAIN: D3D12_VIDEO_ENCODER_PROFILE_HEVC = D3D12_VIDEO_ENCODER_PROFILE_HEVC(0i32);
pub const D3D12_VIDEO_ENCODER_PROFILE_HEVC_MAIN10: D3D12_VIDEO_ENCODER_PROFILE_HEVC = D3D12_VIDEO_ENCODER_PROFILE_HEVC(1i32);
impl ::core::convert::From<i32> for D3D12_VIDEO_ENCODER_PROFILE_HEVC {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_PROFILE_HEVC {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Dxgi")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Dxgi`*"]
pub struct D3D12_VIDEO_ENCODER_RATE_CONTROL {
    pub Mode: D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE,
    pub Flags: D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS,
    pub ConfigParams: D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS,
    pub TargetFrameRate: super::super::Graphics::Dxgi::DXGI_RATIONAL,
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl D3D12_VIDEO_ENCODER_RATE_CONTROL {}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::default::Default for D3D12_VIDEO_ENCODER_RATE_CONTROL {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_RATE_CONTROL {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_RATE_CONTROL {}
#[cfg(feature = "Win32_Graphics_Dxgi")]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_RATE_CONTROL {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR {
    pub InitialQP: u32,
    pub MinQP: u32,
    pub MaxQP: u32,
    pub MaxFrameBitSize: u64,
    pub TargetBitRate: u64,
    pub VBVCapacity: u64,
    pub InitialVBVFullness: u64,
}
impl D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR")
            .field("InitialQP", &self.InitialQP)
            .field("MinQP", &self.MinQP)
            .field("MaxQP", &self.MaxQP)
            .field("MaxFrameBitSize", &self.MaxFrameBitSize)
            .field("TargetBitRate", &self.TargetBitRate)
            .field("VBVCapacity", &self.VBVCapacity)
            .field("InitialVBVFullness", &self.InitialVBVFullness)
            .finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR {
    fn eq(&self, other: &Self) -> bool {
        self.InitialQP == other.InitialQP && self.MinQP == other.MinQP && self.MaxQP == other.MaxQP && self.MaxFrameBitSize == other.MaxFrameBitSize && self.TargetBitRate == other.TargetBitRate && self.VBVCapacity == other.VBVCapacity && self.InitialVBVFullness == other.InitialVBVFullness
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS {
    pub DataSize: u32,
    pub Anonymous: D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS_0,
}
impl D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub union D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS_0 {
    pub pConfiguration_CQP: *mut D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP,
    pub pConfiguration_CBR: *mut D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR,
    pub pConfiguration_VBR: *mut D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR,
    pub pConfiguration_QVBR: *mut D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR,
}
impl D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS_0 {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS_0 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS_0 {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS_0 {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP {
    pub ConstantQP_FullIntracodedFrame: u32,
    pub ConstantQP_InterPredictedFrame_PrevRefOnly: u32,
    pub ConstantQP_InterPredictedFrame_BiDirectionalRef: u32,
}
impl D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP")
            .field("ConstantQP_FullIntracodedFrame", &self.ConstantQP_FullIntracodedFrame)
            .field("ConstantQP_InterPredictedFrame_PrevRefOnly", &self.ConstantQP_InterPredictedFrame_PrevRefOnly)
            .field("ConstantQP_InterPredictedFrame_BiDirectionalRef", &self.ConstantQP_InterPredictedFrame_BiDirectionalRef)
            .finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP {
    fn eq(&self, other: &Self) -> bool {
        self.ConstantQP_FullIntracodedFrame == other.ConstantQP_FullIntracodedFrame && self.ConstantQP_InterPredictedFrame_PrevRefOnly == other.ConstantQP_InterPredictedFrame_PrevRefOnly && self.ConstantQP_InterPredictedFrame_BiDirectionalRef == other.ConstantQP_InterPredictedFrame_BiDirectionalRef
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS(pub u32);
pub const D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_NONE: D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS = D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS(0u32);
pub const D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_DELTA_QP: D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS = D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS(1u32);
pub const D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_FRAME_ANALYSIS: D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS = D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS(2u32);
pub const D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_QP_RANGE: D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS = D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS(4u32);
pub const D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_INITIAL_QP: D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS = D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS(8u32);
pub const D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_MAX_FRAME_SIZE: D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS = D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS(16u32);
pub const D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_VBV_SIZES: D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS = D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS(32u32);
impl ::core::convert::From<u32> for D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS {
    type Abi = Self;
}
impl ::core::ops::BitOr for D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::core::ops::BitAnd for D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::core::ops::BitOrAssign for D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::core::ops::BitAndAssign for D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::core::ops::Not for D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE(pub i32);
pub const D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_ABSOLUTE_QP_MAP: D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE = D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE(0i32);
pub const D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_CQP: D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE = D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE(1i32);
pub const D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_CBR: D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE = D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE(2i32);
pub const D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_VBR: D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE = D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE(3i32);
pub const D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_QVBR: D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE = D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE(4i32);
impl ::core::convert::From<i32> for D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR {
    pub InitialQP: u32,
    pub MinQP: u32,
    pub MaxQP: u32,
    pub MaxFrameBitSize: u64,
    pub TargetAvgBitRate: u64,
    pub PeakBitRate: u64,
    pub ConstantQualityTarget: u32,
}
impl D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR")
            .field("InitialQP", &self.InitialQP)
            .field("MinQP", &self.MinQP)
            .field("MaxQP", &self.MaxQP)
            .field("MaxFrameBitSize", &self.MaxFrameBitSize)
            .field("TargetAvgBitRate", &self.TargetAvgBitRate)
            .field("PeakBitRate", &self.PeakBitRate)
            .field("ConstantQualityTarget", &self.ConstantQualityTarget)
            .finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR {
    fn eq(&self, other: &Self) -> bool {
        self.InitialQP == other.InitialQP && self.MinQP == other.MinQP && self.MaxQP == other.MaxQP && self.MaxFrameBitSize == other.MaxFrameBitSize && self.TargetAvgBitRate == other.TargetAvgBitRate && self.PeakBitRate == other.PeakBitRate && self.ConstantQualityTarget == other.ConstantQualityTarget
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR {
    pub InitialQP: u32,
    pub MinQP: u32,
    pub MaxQP: u32,
    pub MaxFrameBitSize: u64,
    pub TargetAvgBitRate: u64,
    pub PeakBitRate: u64,
    pub VBVCapacity: u64,
    pub InitialVBVFullness: u64,
}
impl D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR")
            .field("InitialQP", &self.InitialQP)
            .field("MinQP", &self.MinQP)
            .field("MaxQP", &self.MaxQP)
            .field("MaxFrameBitSize", &self.MaxFrameBitSize)
            .field("TargetAvgBitRate", &self.TargetAvgBitRate)
            .field("PeakBitRate", &self.PeakBitRate)
            .field("VBVCapacity", &self.VBVCapacity)
            .field("InitialVBVFullness", &self.InitialVBVFullness)
            .finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR {
    fn eq(&self, other: &Self) -> bool {
        self.InitialQP == other.InitialQP && self.MinQP == other.MinQP && self.MaxQP == other.MaxQP && self.MaxFrameBitSize == other.MaxFrameBitSize && self.TargetAvgBitRate == other.TargetAvgBitRate && self.PeakBitRate == other.PeakBitRate && self.VBVCapacity == other.VBVCapacity && self.InitialVBVFullness == other.InitialVBVFullness
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Direct3D12")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
pub struct D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE {
    pub pReconstructedPicture: ::core::option::Option<super::super::Graphics::Direct3D12::ID3D12Resource>,
    pub ReconstructedPictureSubresource: u32,
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE {}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::default::Default for D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::fmt::Debug for D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE").field("pReconstructedPicture", &self.pReconstructedPicture).field("ReconstructedPictureSubresource", &self.ReconstructedPictureSubresource).finish()
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE {
    fn eq(&self, other: &Self) -> bool {
        self.pReconstructedPicture == other.pReconstructedPicture && self.ReconstructedPictureSubresource == other.ReconstructedPictureSubresource
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE {}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264 {
    pub ReconstructedPictureResourceIndex: u32,
    pub IsLongTermReference: super::super::Foundation::BOOL,
    pub LongTermPictureIdx: u32,
    pub PictureOrderCountNumber: u32,
    pub FrameDecodingOrderNumber: u32,
    pub TemporalLayerIndex: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264 {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264 {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264")
            .field("ReconstructedPictureResourceIndex", &self.ReconstructedPictureResourceIndex)
            .field("IsLongTermReference", &self.IsLongTermReference)
            .field("LongTermPictureIdx", &self.LongTermPictureIdx)
            .field("PictureOrderCountNumber", &self.PictureOrderCountNumber)
            .field("FrameDecodingOrderNumber", &self.FrameDecodingOrderNumber)
            .field("TemporalLayerIndex", &self.TemporalLayerIndex)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264 {
    fn eq(&self, other: &Self) -> bool {
        self.ReconstructedPictureResourceIndex == other.ReconstructedPictureResourceIndex && self.IsLongTermReference == other.IsLongTermReference && self.LongTermPictureIdx == other.LongTermPictureIdx && self.PictureOrderCountNumber == other.PictureOrderCountNumber && self.FrameDecodingOrderNumber == other.FrameDecodingOrderNumber && self.TemporalLayerIndex == other.TemporalLayerIndex
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264 {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264 {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC {
    pub ReconstructedPictureResourceIndex: u32,
    pub IsRefUsedByCurrentPic: super::super::Foundation::BOOL,
    pub IsLongTermReference: super::super::Foundation::BOOL,
    pub PictureOrderCountNumber: u32,
    pub TemporalLayerIndex: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC")
            .field("ReconstructedPictureResourceIndex", &self.ReconstructedPictureResourceIndex)
            .field("IsRefUsedByCurrentPic", &self.IsRefUsedByCurrentPic)
            .field("IsLongTermReference", &self.IsLongTermReference)
            .field("PictureOrderCountNumber", &self.PictureOrderCountNumber)
            .field("TemporalLayerIndex", &self.TemporalLayerIndex)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC {
    fn eq(&self, other: &Self) -> bool {
        self.ReconstructedPictureResourceIndex == other.ReconstructedPictureResourceIndex && self.IsRefUsedByCurrentPic == other.IsRefUsedByCurrentPic && self.IsLongTermReference == other.IsLongTermReference && self.PictureOrderCountNumber == other.PictureOrderCountNumber && self.TemporalLayerIndex == other.TemporalLayerIndex
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC {
    type Abi = Self;
}
#[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
impl ::core::clone::Clone for D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS {
    fn clone(&self) -> Self {
        unimplemented!()
    }
}
#[repr(C)]
#[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`, `Win32_Graphics_Dxgi`*"]
pub struct D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS {
    pub EncoderCodec: D3D12_VIDEO_ENCODER_CODEC,
    pub EncoderProfile: D3D12_VIDEO_ENCODER_PROFILE_DESC,
    pub EncoderInputFormat: super::super::Graphics::Dxgi::DXGI_FORMAT,
    pub EncodedPictureEffectiveResolution: D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC,
    pub HWLayoutMetadata: D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER,
}
#[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
impl D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS {}
#[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
impl ::core::default::Default for D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS {}
#[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Direct3D12")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
pub struct D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS {
    pub ResolvedLayoutMetadata: D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER,
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS {}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::default::Default for D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::fmt::Debug for D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS").field("ResolvedLayoutMetadata", &self.ResolvedLayoutMetadata).finish()
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS {
    fn eq(&self, other: &Self) -> bool {
        self.ResolvedLayoutMetadata == other.ResolvedLayoutMetadata
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS {}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Dxgi")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Dxgi`*"]
pub struct D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC {
    pub Flags: D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS,
    pub IntraRefreshConfig: D3D12_VIDEO_ENCODER_INTRA_REFRESH,
    pub RateControl: D3D12_VIDEO_ENCODER_RATE_CONTROL,
    pub PictureTargetResolution: D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC,
    pub SelectedLayoutMode: D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE,
    pub FrameSubregionsLayoutData: D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA,
    pub CodecGopSequence: D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE,
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC {}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::default::Default for D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC {}
#[cfg(feature = "Win32_Graphics_Dxgi")]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS(pub u32);
pub const D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_NONE: D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS = D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS(0u32);
pub const D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_RESOLUTION_CHANGE: D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS = D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS(1u32);
pub const D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_RATE_CONTROL_CHANGE: D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS = D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS(2u32);
pub const D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_SUBREGION_LAYOUT_CHANGE: D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS = D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS(4u32);
pub const D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_REQUEST_INTRA_REFRESH: D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS = D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS(8u32);
pub const D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_GOP_SEQUENCE_CHANGE: D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS = D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS(16u32);
impl ::core::convert::From<u32> for D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS {
    type Abi = Self;
}
impl ::core::ops::BitOr for D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::core::ops::BitAnd for D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::core::ops::BitOrAssign for D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::core::ops::BitAndAssign for D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::core::ops::Not for D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE {
    pub DataSize: u32,
    pub Anonymous: D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_0,
}
impl D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub union D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_0 {
    pub pH264GroupOfPictures: *mut D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264,
    pub pHEVCGroupOfPictures: *mut D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC,
}
impl D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_0 {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_0 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_0 {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_0 {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264 {
    pub GOPLength: u32,
    pub PPicturePeriod: u32,
    pub pic_order_cnt_type: u8,
    pub log2_max_frame_num_minus4: u8,
    pub log2_max_pic_order_cnt_lsb_minus4: u8,
}
impl D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264 {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264 {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264")
            .field("GOPLength", &self.GOPLength)
            .field("PPicturePeriod", &self.PPicturePeriod)
            .field("pic_order_cnt_type", &self.pic_order_cnt_type)
            .field("log2_max_frame_num_minus4", &self.log2_max_frame_num_minus4)
            .field("log2_max_pic_order_cnt_lsb_minus4", &self.log2_max_pic_order_cnt_lsb_minus4)
            .finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264 {
    fn eq(&self, other: &Self) -> bool {
        self.GOPLength == other.GOPLength && self.PPicturePeriod == other.PPicturePeriod && self.pic_order_cnt_type == other.pic_order_cnt_type && self.log2_max_frame_num_minus4 == other.log2_max_frame_num_minus4 && self.log2_max_pic_order_cnt_lsb_minus4 == other.log2_max_pic_order_cnt_lsb_minus4
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264 {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264 {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC {
    pub GOPLength: u32,
    pub PPicturePeriod: u32,
    pub log2_max_pic_order_cnt_lsb_minus4: u8,
}
impl D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC {}
impl ::core::default::Default for D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC").field("GOPLength", &self.GOPLength).field("PPicturePeriod", &self.PPicturePeriod).field("log2_max_pic_order_cnt_lsb_minus4", &self.log2_max_pic_order_cnt_lsb_minus4).finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC {
    fn eq(&self, other: &Self) -> bool {
        self.GOPLength == other.GOPLength && self.PPicturePeriod == other.PPicturePeriod && self.log2_max_pic_order_cnt_lsb_minus4 == other.log2_max_pic_order_cnt_lsb_minus4
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_ENCODER_SUPPORT_FLAGS(pub u32);
pub const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_NONE: D3D12_VIDEO_ENCODER_SUPPORT_FLAGS = D3D12_VIDEO_ENCODER_SUPPORT_FLAGS(0u32);
pub const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_GENERAL_SUPPORT_OK: D3D12_VIDEO_ENCODER_SUPPORT_FLAGS = D3D12_VIDEO_ENCODER_SUPPORT_FLAGS(1u32);
pub const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_RECONFIGURATION_AVAILABLE: D3D12_VIDEO_ENCODER_SUPPORT_FLAGS = D3D12_VIDEO_ENCODER_SUPPORT_FLAGS(2u32);
pub const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RESOLUTION_RECONFIGURATION_AVAILABLE: D3D12_VIDEO_ENCODER_SUPPORT_FLAGS = D3D12_VIDEO_ENCODER_SUPPORT_FLAGS(4u32);
pub const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_VBV_SIZE_CONFIG_AVAILABLE: D3D12_VIDEO_ENCODER_SUPPORT_FLAGS = D3D12_VIDEO_ENCODER_SUPPORT_FLAGS(8u32);
pub const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_FRAME_ANALYSIS_AVAILABLE: D3D12_VIDEO_ENCODER_SUPPORT_FLAGS = D3D12_VIDEO_ENCODER_SUPPORT_FLAGS(16u32);
pub const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RECONSTRUCTED_FRAMES_REQUIRE_TEXTURE_ARRAYS: D3D12_VIDEO_ENCODER_SUPPORT_FLAGS = D3D12_VIDEO_ENCODER_SUPPORT_FLAGS(32u32);
pub const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_DELTA_QP_AVAILABLE: D3D12_VIDEO_ENCODER_SUPPORT_FLAGS = D3D12_VIDEO_ENCODER_SUPPORT_FLAGS(64u32);
pub const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_SUBREGION_LAYOUT_RECONFIGURATION_AVAILABLE: D3D12_VIDEO_ENCODER_SUPPORT_FLAGS = D3D12_VIDEO_ENCODER_SUPPORT_FLAGS(128u32);
pub const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_ADJUSTABLE_QP_RANGE_AVAILABLE: D3D12_VIDEO_ENCODER_SUPPORT_FLAGS = D3D12_VIDEO_ENCODER_SUPPORT_FLAGS(256u32);
pub const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_INITIAL_QP_AVAILABLE: D3D12_VIDEO_ENCODER_SUPPORT_FLAGS = D3D12_VIDEO_ENCODER_SUPPORT_FLAGS(512u32);
pub const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_MAX_FRAME_SIZE_AVAILABLE: D3D12_VIDEO_ENCODER_SUPPORT_FLAGS = D3D12_VIDEO_ENCODER_SUPPORT_FLAGS(1024u32);
pub const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_SEQUENCE_GOP_RECONFIGURATION_AVAILABLE: D3D12_VIDEO_ENCODER_SUPPORT_FLAGS = D3D12_VIDEO_ENCODER_SUPPORT_FLAGS(2048u32);
pub const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_MOTION_ESTIMATION_PRECISION_MODE_LIMIT_AVAILABLE: D3D12_VIDEO_ENCODER_SUPPORT_FLAGS = D3D12_VIDEO_ENCODER_SUPPORT_FLAGS(4096u32);
impl ::core::convert::From<u32> for D3D12_VIDEO_ENCODER_SUPPORT_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_SUPPORT_FLAGS {
    type Abi = Self;
}
impl ::core::ops::BitOr for D3D12_VIDEO_ENCODER_SUPPORT_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::core::ops::BitAnd for D3D12_VIDEO_ENCODER_SUPPORT_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::core::ops::BitOrAssign for D3D12_VIDEO_ENCODER_SUPPORT_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::core::ops::BitAndAssign for D3D12_VIDEO_ENCODER_SUPPORT_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::core::ops::Not for D3D12_VIDEO_ENCODER_SUPPORT_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_ENCODER_TIER_HEVC(pub i32);
pub const D3D12_VIDEO_ENCODER_TIER_HEVC_MAIN: D3D12_VIDEO_ENCODER_TIER_HEVC = D3D12_VIDEO_ENCODER_TIER_HEVC(0i32);
pub const D3D12_VIDEO_ENCODER_TIER_HEVC_HIGH: D3D12_VIDEO_ENCODER_TIER_HEVC = D3D12_VIDEO_ENCODER_TIER_HEVC(1i32);
impl ::core::convert::From<i32> for D3D12_VIDEO_ENCODER_TIER_HEVC {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_TIER_HEVC {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_ENCODER_VALIDATION_FLAGS(pub u32);
pub const D3D12_VIDEO_ENCODER_VALIDATION_FLAG_NONE: D3D12_VIDEO_ENCODER_VALIDATION_FLAGS = D3D12_VIDEO_ENCODER_VALIDATION_FLAGS(0u32);
pub const D3D12_VIDEO_ENCODER_VALIDATION_FLAG_CODEC_NOT_SUPPORTED: D3D12_VIDEO_ENCODER_VALIDATION_FLAGS = D3D12_VIDEO_ENCODER_VALIDATION_FLAGS(1u32);
pub const D3D12_VIDEO_ENCODER_VALIDATION_FLAG_INPUT_FORMAT_NOT_SUPPORTED: D3D12_VIDEO_ENCODER_VALIDATION_FLAGS = D3D12_VIDEO_ENCODER_VALIDATION_FLAGS(8u32);
pub const D3D12_VIDEO_ENCODER_VALIDATION_FLAG_CODEC_CONFIGURATION_NOT_SUPPORTED: D3D12_VIDEO_ENCODER_VALIDATION_FLAGS = D3D12_VIDEO_ENCODER_VALIDATION_FLAGS(16u32);
pub const D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RATE_CONTROL_MODE_NOT_SUPPORTED: D3D12_VIDEO_ENCODER_VALIDATION_FLAGS = D3D12_VIDEO_ENCODER_VALIDATION_FLAGS(32u32);
pub const D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RATE_CONTROL_CONFIGURATION_NOT_SUPPORTED: D3D12_VIDEO_ENCODER_VALIDATION_FLAGS = D3D12_VIDEO_ENCODER_VALIDATION_FLAGS(64u32);
pub const D3D12_VIDEO_ENCODER_VALIDATION_FLAG_INTRA_REFRESH_MODE_NOT_SUPPORTED: D3D12_VIDEO_ENCODER_VALIDATION_FLAGS = D3D12_VIDEO_ENCODER_VALIDATION_FLAGS(128u32);
pub const D3D12_VIDEO_ENCODER_VALIDATION_FLAG_SUBREGION_LAYOUT_MODE_NOT_SUPPORTED: D3D12_VIDEO_ENCODER_VALIDATION_FLAGS = D3D12_VIDEO_ENCODER_VALIDATION_FLAGS(256u32);
pub const D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RESOLUTION_NOT_SUPPORTED_IN_LIST: D3D12_VIDEO_ENCODER_VALIDATION_FLAGS = D3D12_VIDEO_ENCODER_VALIDATION_FLAGS(512u32);
pub const D3D12_VIDEO_ENCODER_VALIDATION_FLAG_GOP_STRUCTURE_NOT_SUPPORTED: D3D12_VIDEO_ENCODER_VALIDATION_FLAGS = D3D12_VIDEO_ENCODER_VALIDATION_FLAGS(2048u32);
impl ::core::convert::From<u32> for D3D12_VIDEO_ENCODER_VALIDATION_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODER_VALIDATION_FLAGS {
    type Abi = Self;
}
impl ::core::ops::BitOr for D3D12_VIDEO_ENCODER_VALIDATION_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::core::ops::BitAnd for D3D12_VIDEO_ENCODER_VALIDATION_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::core::ops::BitOrAssign for D3D12_VIDEO_ENCODER_VALIDATION_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::core::ops::BitAndAssign for D3D12_VIDEO_ENCODER_VALIDATION_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::core::ops::Not for D3D12_VIDEO_ENCODER_VALIDATION_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Direct3D12")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
pub struct D3D12_VIDEO_ENCODE_REFERENCE_FRAMES {
    pub NumTexture2Ds: u32,
    pub ppTexture2Ds: *mut ::core::option::Option<super::super::Graphics::Direct3D12::ID3D12Resource>,
    pub pSubresources: *mut u32,
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl D3D12_VIDEO_ENCODE_REFERENCE_FRAMES {}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::default::Default for D3D12_VIDEO_ENCODE_REFERENCE_FRAMES {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::fmt::Debug for D3D12_VIDEO_ENCODE_REFERENCE_FRAMES {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_ENCODE_REFERENCE_FRAMES").field("NumTexture2Ds", &self.NumTexture2Ds).field("ppTexture2Ds", &self.ppTexture2Ds).field("pSubresources", &self.pSubresources).finish()
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::cmp::PartialEq for D3D12_VIDEO_ENCODE_REFERENCE_FRAMES {
    fn eq(&self, other: &Self) -> bool {
        self.NumTexture2Ds == other.NumTexture2Ds && self.ppTexture2Ds == other.ppTexture2Ds && self.pSubresources == other.pSubresources
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::cmp::Eq for D3D12_VIDEO_ENCODE_REFERENCE_FRAMES {}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_ENCODE_REFERENCE_FRAMES {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_EXTENSION_COMMAND_DESC {
    pub NodeMask: u32,
    pub CommandId: ::windows::runtime::GUID,
}
impl D3D12_VIDEO_EXTENSION_COMMAND_DESC {}
impl ::core::default::Default for D3D12_VIDEO_EXTENSION_COMMAND_DESC {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_VIDEO_EXTENSION_COMMAND_DESC {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_EXTENSION_COMMAND_DESC").field("NodeMask", &self.NodeMask).field("CommandId", &self.CommandId).finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_EXTENSION_COMMAND_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.NodeMask == other.NodeMask && self.CommandId == other.CommandId
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_EXTENSION_COMMAND_DESC {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_EXTENSION_COMMAND_DESC {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D12`*"]
pub struct D3D12_VIDEO_EXTENSION_COMMAND_INFO {
    pub CommandId: ::windows::runtime::GUID,
    pub Name: super::super::Foundation::PWSTR,
    pub CommandListSupportFlags: super::super::Graphics::Direct3D12::D3D12_COMMAND_LIST_SUPPORT_FLAGS,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl D3D12_VIDEO_EXTENSION_COMMAND_INFO {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl ::core::default::Default for D3D12_VIDEO_EXTENSION_COMMAND_INFO {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl ::core::fmt::Debug for D3D12_VIDEO_EXTENSION_COMMAND_INFO {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_EXTENSION_COMMAND_INFO").field("CommandId", &self.CommandId).field("Name", &self.Name).field("CommandListSupportFlags", &self.CommandListSupportFlags).finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl ::core::cmp::PartialEq for D3D12_VIDEO_EXTENSION_COMMAND_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.CommandId == other.CommandId && self.Name == other.Name && self.CommandListSupportFlags == other.CommandListSupportFlags
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl ::core::cmp::Eq for D3D12_VIDEO_EXTENSION_COMMAND_INFO {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_EXTENSION_COMMAND_INFO {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS(pub u32);
pub const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_NONE: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS = D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS(0u32);
pub const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_READ: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS = D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS(1u32);
pub const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_WRITE: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS = D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS(2u32);
impl ::core::convert::From<u32> for D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS {
    type Abi = Self;
}
impl ::core::ops::BitOr for D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::core::ops::BitAnd for D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::core::ops::BitOrAssign for D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::core::ops::BitAndAssign for D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::core::ops::Not for D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO {
    pub Name: super::super::Foundation::PWSTR,
    pub Type: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE,
    pub Flags: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS,
}
#[cfg(feature = "Win32_Foundation")]
impl D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO").field("Name", &self.Name).field("Type", &self.Type).field("Flags", &self.Flags).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.Name == other.Name && self.Type == other.Type && self.Flags == other.Flags
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE(pub i32);
pub const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CREATION: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE = D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE(0i32);
pub const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_INITIALIZATION: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE = D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE(1i32);
pub const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_EXECUTION: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE = D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE(2i32);
pub const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CAPS_INPUT: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE = D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE(3i32);
pub const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CAPS_OUTPUT: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE = D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE(4i32);
pub const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_DEVICE_EXECUTE_INPUT: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE = D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE(5i32);
pub const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_DEVICE_EXECUTE_OUTPUT: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE = D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE(6i32);
impl ::core::convert::From<i32> for D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE(pub i32);
pub const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT8: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE = D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE(0i32);
pub const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT16: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE = D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE(1i32);
pub const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT32: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE = D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE(2i32);
pub const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT64: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE = D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE(3i32);
pub const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT8: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE = D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE(4i32);
pub const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT16: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE = D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE(5i32);
pub const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT32: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE = D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE(6i32);
pub const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT64: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE = D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE(7i32);
pub const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_FLOAT: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE = D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE(8i32);
pub const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_DOUBLE: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE = D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE(9i32);
pub const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_RESOURCE: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE = D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE(10i32);
impl ::core::convert::From<i32> for D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_FIELD_TYPE(pub i32);
pub const D3D12_VIDEO_FIELD_TYPE_NONE: D3D12_VIDEO_FIELD_TYPE = D3D12_VIDEO_FIELD_TYPE(0i32);
pub const D3D12_VIDEO_FIELD_TYPE_INTERLACED_TOP_FIELD_FIRST: D3D12_VIDEO_FIELD_TYPE = D3D12_VIDEO_FIELD_TYPE(1i32);
pub const D3D12_VIDEO_FIELD_TYPE_INTERLACED_BOTTOM_FIELD_FIRST: D3D12_VIDEO_FIELD_TYPE = D3D12_VIDEO_FIELD_TYPE(2i32);
impl ::core::convert::From<i32> for D3D12_VIDEO_FIELD_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_FIELD_TYPE {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Dxgi")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Dxgi`*"]
pub struct D3D12_VIDEO_FORMAT {
    pub Format: super::super::Graphics::Dxgi::DXGI_FORMAT,
    pub ColorSpace: super::super::Graphics::Dxgi::DXGI_COLOR_SPACE_TYPE,
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl D3D12_VIDEO_FORMAT {}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::default::Default for D3D12_VIDEO_FORMAT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::fmt::Debug for D3D12_VIDEO_FORMAT {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_FORMAT").field("Format", &self.Format).field("ColorSpace", &self.ColorSpace).finish()
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::cmp::PartialEq for D3D12_VIDEO_FORMAT {
    fn eq(&self, other: &Self) -> bool {
        self.Format == other.Format && self.ColorSpace == other.ColorSpace
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::cmp::Eq for D3D12_VIDEO_FORMAT {}
#[cfg(feature = "Win32_Graphics_Dxgi")]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_FORMAT {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE(pub i32);
pub const D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE_NONE: D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE = D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE(0i32);
pub const D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE_FIELD_BASED: D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE = D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE(1i32);
impl ::core::convert::From<i32> for D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_FRAME_STEREO_FORMAT(pub i32);
pub const D3D12_VIDEO_FRAME_STEREO_FORMAT_NONE: D3D12_VIDEO_FRAME_STEREO_FORMAT = D3D12_VIDEO_FRAME_STEREO_FORMAT(0i32);
pub const D3D12_VIDEO_FRAME_STEREO_FORMAT_MONO: D3D12_VIDEO_FRAME_STEREO_FORMAT = D3D12_VIDEO_FRAME_STEREO_FORMAT(1i32);
pub const D3D12_VIDEO_FRAME_STEREO_FORMAT_HORIZONTAL: D3D12_VIDEO_FRAME_STEREO_FORMAT = D3D12_VIDEO_FRAME_STEREO_FORMAT(2i32);
pub const D3D12_VIDEO_FRAME_STEREO_FORMAT_VERTICAL: D3D12_VIDEO_FRAME_STEREO_FORMAT = D3D12_VIDEO_FRAME_STEREO_FORMAT(3i32);
pub const D3D12_VIDEO_FRAME_STEREO_FORMAT_SEPARATE: D3D12_VIDEO_FRAME_STEREO_FORMAT = D3D12_VIDEO_FRAME_STEREO_FORMAT(4i32);
impl ::core::convert::From<i32> for D3D12_VIDEO_FRAME_STEREO_FORMAT {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_FRAME_STEREO_FORMAT {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Dxgi")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Dxgi`*"]
pub struct D3D12_VIDEO_MOTION_ESTIMATOR_DESC {
    pub NodeMask: u32,
    pub InputFormat: super::super::Graphics::Dxgi::DXGI_FORMAT,
    pub BlockSize: D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE,
    pub Precision: D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION,
    pub SizeRange: D3D12_VIDEO_SIZE_RANGE,
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl D3D12_VIDEO_MOTION_ESTIMATOR_DESC {}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::default::Default for D3D12_VIDEO_MOTION_ESTIMATOR_DESC {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::fmt::Debug for D3D12_VIDEO_MOTION_ESTIMATOR_DESC {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_MOTION_ESTIMATOR_DESC").field("NodeMask", &self.NodeMask).field("InputFormat", &self.InputFormat).field("BlockSize", &self.BlockSize).field("Precision", &self.Precision).field("SizeRange", &self.SizeRange).finish()
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::cmp::PartialEq for D3D12_VIDEO_MOTION_ESTIMATOR_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.NodeMask == other.NodeMask && self.InputFormat == other.InputFormat && self.BlockSize == other.BlockSize && self.Precision == other.Precision && self.SizeRange == other.SizeRange
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::cmp::Eq for D3D12_VIDEO_MOTION_ESTIMATOR_DESC {}
#[cfg(feature = "Win32_Graphics_Dxgi")]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_MOTION_ESTIMATOR_DESC {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Direct3D12")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
pub struct D3D12_VIDEO_MOTION_ESTIMATOR_INPUT {
    pub pInputTexture2D: ::core::option::Option<super::super::Graphics::Direct3D12::ID3D12Resource>,
    pub InputSubresourceIndex: u32,
    pub pReferenceTexture2D: ::core::option::Option<super::super::Graphics::Direct3D12::ID3D12Resource>,
    pub ReferenceSubresourceIndex: u32,
    pub pHintMotionVectorHeap: ::core::option::Option<ID3D12VideoMotionVectorHeap>,
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl D3D12_VIDEO_MOTION_ESTIMATOR_INPUT {}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::default::Default for D3D12_VIDEO_MOTION_ESTIMATOR_INPUT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::fmt::Debug for D3D12_VIDEO_MOTION_ESTIMATOR_INPUT {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_MOTION_ESTIMATOR_INPUT")
            .field("pInputTexture2D", &self.pInputTexture2D)
            .field("InputSubresourceIndex", &self.InputSubresourceIndex)
            .field("pReferenceTexture2D", &self.pReferenceTexture2D)
            .field("ReferenceSubresourceIndex", &self.ReferenceSubresourceIndex)
            .field("pHintMotionVectorHeap", &self.pHintMotionVectorHeap)
            .finish()
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::cmp::PartialEq for D3D12_VIDEO_MOTION_ESTIMATOR_INPUT {
    fn eq(&self, other: &Self) -> bool {
        self.pInputTexture2D == other.pInputTexture2D && self.InputSubresourceIndex == other.InputSubresourceIndex && self.pReferenceTexture2D == other.pReferenceTexture2D && self.ReferenceSubresourceIndex == other.ReferenceSubresourceIndex && self.pHintMotionVectorHeap == other.pHintMotionVectorHeap
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::cmp::Eq for D3D12_VIDEO_MOTION_ESTIMATOR_INPUT {}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_MOTION_ESTIMATOR_INPUT {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT {
    pub pMotionVectorHeap: ::core::option::Option<ID3D12VideoMotionVectorHeap>,
}
impl D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT {}
impl ::core::default::Default for D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT").field("pMotionVectorHeap", &self.pMotionVectorHeap).finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT {
    fn eq(&self, other: &Self) -> bool {
        self.pMotionVectorHeap == other.pMotionVectorHeap
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE(pub i32);
pub const D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_8X8: D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE = D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE(0i32);
pub const D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_16X16: D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE = D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE(1i32);
impl ::core::convert::From<i32> for D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS(pub u32);
pub const D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_NONE: D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS = D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS(0u32);
pub const D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_8X8: D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS = D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS(1u32);
pub const D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_16X16: D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS = D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS(2u32);
impl ::core::convert::From<u32> for D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS {
    type Abi = Self;
}
impl ::core::ops::BitOr for D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::core::ops::BitAnd for D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::core::ops::BitOrAssign for D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::core::ops::BitAndAssign for D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::core::ops::Not for D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION(pub i32);
pub const D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_QUARTER_PEL: D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION = D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION(0i32);
impl ::core::convert::From<i32> for D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS(pub u32);
pub const D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAG_NONE: D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS = D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS(0u32);
pub const D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAG_QUARTER_PEL: D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS = D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS(1u32);
impl ::core::convert::From<u32> for D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS {
    type Abi = Self;
}
impl ::core::ops::BitOr for D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::core::ops::BitAnd for D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::core::ops::BitOrAssign for D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::core::ops::BitAndAssign for D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::core::ops::Not for D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Dxgi")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Dxgi`*"]
pub struct D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC {
    pub NodeMask: u32,
    pub InputFormat: super::super::Graphics::Dxgi::DXGI_FORMAT,
    pub BlockSize: D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE,
    pub Precision: D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION,
    pub SizeRange: D3D12_VIDEO_SIZE_RANGE,
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC {}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::default::Default for D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::fmt::Debug for D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC").field("NodeMask", &self.NodeMask).field("InputFormat", &self.InputFormat).field("BlockSize", &self.BlockSize).field("Precision", &self.Precision).field("SizeRange", &self.SizeRange).finish()
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::cmp::PartialEq for D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.NodeMask == other.NodeMask && self.InputFormat == other.InputFormat && self.BlockSize == other.BlockSize && self.Precision == other.Precision && self.SizeRange == other.SizeRange
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::cmp::Eq for D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC {}
#[cfg(feature = "Win32_Graphics_Dxgi")]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct D3D12_VIDEO_PROCESS_ALPHA_BLENDING {
    pub Enable: super::super::Foundation::BOOL,
    pub Alpha: f32,
}
#[cfg(feature = "Win32_Foundation")]
impl D3D12_VIDEO_PROCESS_ALPHA_BLENDING {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for D3D12_VIDEO_PROCESS_ALPHA_BLENDING {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for D3D12_VIDEO_PROCESS_ALPHA_BLENDING {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_PROCESS_ALPHA_BLENDING").field("Enable", &self.Enable).field("Alpha", &self.Alpha).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for D3D12_VIDEO_PROCESS_ALPHA_BLENDING {
    fn eq(&self, other: &Self) -> bool {
        self.Enable == other.Enable && self.Alpha == other.Alpha
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for D3D12_VIDEO_PROCESS_ALPHA_BLENDING {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_PROCESS_ALPHA_BLENDING {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE(pub i32);
pub const D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_OPAQUE: D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE = D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE(0i32);
pub const D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_BACKGROUND: D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE = D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE(1i32);
pub const D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_DESTINATION: D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE = D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE(2i32);
pub const D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_SOURCE_STREAM: D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE = D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE(3i32);
impl ::core::convert::From<i32> for D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS(pub u32);
pub const D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_NONE: D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS = D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS(0u32);
pub const D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_DENOISE: D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS = D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS(1u32);
pub const D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_DERINGING: D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS = D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS(2u32);
pub const D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_EDGE_ENHANCEMENT: D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS = D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS(4u32);
pub const D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_COLOR_CORRECTION: D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS = D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS(8u32);
pub const D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_FLESH_TONE_MAPPING: D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS = D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS(16u32);
pub const D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_IMAGE_STABILIZATION: D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS = D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS(32u32);
pub const D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_SUPER_RESOLUTION: D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS = D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS(64u32);
pub const D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_ANAMORPHIC_SCALING: D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS = D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS(128u32);
pub const D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_CUSTOM: D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS = D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS(2147483648u32);
impl ::core::convert::From<u32> for D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS {
    type Abi = Self;
}
impl ::core::ops::BitOr for D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::core::ops::BitAnd for D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::core::ops::BitOrAssign for D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::core::ops::BitAndAssign for D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::core::ops::Not for D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS(pub u32);
pub const D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_NONE: D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS = D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS(0u32);
pub const D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_BOB: D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS = D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS(1u32);
pub const D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_CUSTOM: D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS = D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS(2147483648u32);
impl ::core::convert::From<u32> for D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS {
    type Abi = Self;
}
impl ::core::ops::BitOr for D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::core::ops::BitAnd for D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::core::ops::BitOrAssign for D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::core::ops::BitAndAssign for D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::core::ops::Not for D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_PROCESS_FEATURE_FLAGS(pub u32);
pub const D3D12_VIDEO_PROCESS_FEATURE_FLAG_NONE: D3D12_VIDEO_PROCESS_FEATURE_FLAGS = D3D12_VIDEO_PROCESS_FEATURE_FLAGS(0u32);
pub const D3D12_VIDEO_PROCESS_FEATURE_FLAG_ALPHA_FILL: D3D12_VIDEO_PROCESS_FEATURE_FLAGS = D3D12_VIDEO_PROCESS_FEATURE_FLAGS(1u32);
pub const D3D12_VIDEO_PROCESS_FEATURE_FLAG_LUMA_KEY: D3D12_VIDEO_PROCESS_FEATURE_FLAGS = D3D12_VIDEO_PROCESS_FEATURE_FLAGS(2u32);
pub const D3D12_VIDEO_PROCESS_FEATURE_FLAG_STEREO: D3D12_VIDEO_PROCESS_FEATURE_FLAGS = D3D12_VIDEO_PROCESS_FEATURE_FLAGS(4u32);
pub const D3D12_VIDEO_PROCESS_FEATURE_FLAG_ROTATION: D3D12_VIDEO_PROCESS_FEATURE_FLAGS = D3D12_VIDEO_PROCESS_FEATURE_FLAGS(8u32);
pub const D3D12_VIDEO_PROCESS_FEATURE_FLAG_FLIP: D3D12_VIDEO_PROCESS_FEATURE_FLAGS = D3D12_VIDEO_PROCESS_FEATURE_FLAGS(16u32);
pub const D3D12_VIDEO_PROCESS_FEATURE_FLAG_ALPHA_BLENDING: D3D12_VIDEO_PROCESS_FEATURE_FLAGS = D3D12_VIDEO_PROCESS_FEATURE_FLAGS(32u32);
pub const D3D12_VIDEO_PROCESS_FEATURE_FLAG_PIXEL_ASPECT_RATIO: D3D12_VIDEO_PROCESS_FEATURE_FLAGS = D3D12_VIDEO_PROCESS_FEATURE_FLAGS(64u32);
impl ::core::convert::From<u32> for D3D12_VIDEO_PROCESS_FEATURE_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_PROCESS_FEATURE_FLAGS {
    type Abi = Self;
}
impl ::core::ops::BitOr for D3D12_VIDEO_PROCESS_FEATURE_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::core::ops::BitAnd for D3D12_VIDEO_PROCESS_FEATURE_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::core::ops::BitOrAssign for D3D12_VIDEO_PROCESS_FEATURE_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::core::ops::BitAndAssign for D3D12_VIDEO_PROCESS_FEATURE_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::core::ops::Not for D3D12_VIDEO_PROCESS_FEATURE_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_PROCESS_FILTER(pub i32);
pub const D3D12_VIDEO_PROCESS_FILTER_BRIGHTNESS: D3D12_VIDEO_PROCESS_FILTER = D3D12_VIDEO_PROCESS_FILTER(0i32);
pub const D3D12_VIDEO_PROCESS_FILTER_CONTRAST: D3D12_VIDEO_PROCESS_FILTER = D3D12_VIDEO_PROCESS_FILTER(1i32);
pub const D3D12_VIDEO_PROCESS_FILTER_HUE: D3D12_VIDEO_PROCESS_FILTER = D3D12_VIDEO_PROCESS_FILTER(2i32);
pub const D3D12_VIDEO_PROCESS_FILTER_SATURATION: D3D12_VIDEO_PROCESS_FILTER = D3D12_VIDEO_PROCESS_FILTER(3i32);
pub const D3D12_VIDEO_PROCESS_FILTER_NOISE_REDUCTION: D3D12_VIDEO_PROCESS_FILTER = D3D12_VIDEO_PROCESS_FILTER(4i32);
pub const D3D12_VIDEO_PROCESS_FILTER_EDGE_ENHANCEMENT: D3D12_VIDEO_PROCESS_FILTER = D3D12_VIDEO_PROCESS_FILTER(5i32);
pub const D3D12_VIDEO_PROCESS_FILTER_ANAMORPHIC_SCALING: D3D12_VIDEO_PROCESS_FILTER = D3D12_VIDEO_PROCESS_FILTER(6i32);
pub const D3D12_VIDEO_PROCESS_FILTER_STEREO_ADJUSTMENT: D3D12_VIDEO_PROCESS_FILTER = D3D12_VIDEO_PROCESS_FILTER(7i32);
impl ::core::convert::From<i32> for D3D12_VIDEO_PROCESS_FILTER {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_PROCESS_FILTER {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_PROCESS_FILTER_FLAGS(pub u32);
pub const D3D12_VIDEO_PROCESS_FILTER_FLAG_NONE: D3D12_VIDEO_PROCESS_FILTER_FLAGS = D3D12_VIDEO_PROCESS_FILTER_FLAGS(0u32);
pub const D3D12_VIDEO_PROCESS_FILTER_FLAG_BRIGHTNESS: D3D12_VIDEO_PROCESS_FILTER_FLAGS = D3D12_VIDEO_PROCESS_FILTER_FLAGS(1u32);
pub const D3D12_VIDEO_PROCESS_FILTER_FLAG_CONTRAST: D3D12_VIDEO_PROCESS_FILTER_FLAGS = D3D12_VIDEO_PROCESS_FILTER_FLAGS(2u32);
pub const D3D12_VIDEO_PROCESS_FILTER_FLAG_HUE: D3D12_VIDEO_PROCESS_FILTER_FLAGS = D3D12_VIDEO_PROCESS_FILTER_FLAGS(4u32);
pub const D3D12_VIDEO_PROCESS_FILTER_FLAG_SATURATION: D3D12_VIDEO_PROCESS_FILTER_FLAGS = D3D12_VIDEO_PROCESS_FILTER_FLAGS(8u32);
pub const D3D12_VIDEO_PROCESS_FILTER_FLAG_NOISE_REDUCTION: D3D12_VIDEO_PROCESS_FILTER_FLAGS = D3D12_VIDEO_PROCESS_FILTER_FLAGS(16u32);
pub const D3D12_VIDEO_PROCESS_FILTER_FLAG_EDGE_ENHANCEMENT: D3D12_VIDEO_PROCESS_FILTER_FLAGS = D3D12_VIDEO_PROCESS_FILTER_FLAGS(32u32);
pub const D3D12_VIDEO_PROCESS_FILTER_FLAG_ANAMORPHIC_SCALING: D3D12_VIDEO_PROCESS_FILTER_FLAGS = D3D12_VIDEO_PROCESS_FILTER_FLAGS(64u32);
pub const D3D12_VIDEO_PROCESS_FILTER_FLAG_STEREO_ADJUSTMENT: D3D12_VIDEO_PROCESS_FILTER_FLAGS = D3D12_VIDEO_PROCESS_FILTER_FLAGS(128u32);
impl ::core::convert::From<u32> for D3D12_VIDEO_PROCESS_FILTER_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_PROCESS_FILTER_FLAGS {
    type Abi = Self;
}
impl ::core::ops::BitOr for D3D12_VIDEO_PROCESS_FILTER_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::core::ops::BitAnd for D3D12_VIDEO_PROCESS_FILTER_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::core::ops::BitOrAssign for D3D12_VIDEO_PROCESS_FILTER_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::core::ops::BitAndAssign for D3D12_VIDEO_PROCESS_FILTER_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::core::ops::Not for D3D12_VIDEO_PROCESS_FILTER_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_PROCESS_FILTER_RANGE {
    pub Minimum: i32,
    pub Maximum: i32,
    pub Default: i32,
    pub Multiplier: f32,
}
impl D3D12_VIDEO_PROCESS_FILTER_RANGE {}
impl ::core::default::Default for D3D12_VIDEO_PROCESS_FILTER_RANGE {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_VIDEO_PROCESS_FILTER_RANGE {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_PROCESS_FILTER_RANGE").field("Minimum", &self.Minimum).field("Maximum", &self.Maximum).field("Default", &self.Default).field("Multiplier", &self.Multiplier).finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_PROCESS_FILTER_RANGE {
    fn eq(&self, other: &Self) -> bool {
        self.Minimum == other.Minimum && self.Maximum == other.Maximum && self.Default == other.Default && self.Multiplier == other.Multiplier
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_PROCESS_FILTER_RANGE {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_PROCESS_FILTER_RANGE {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Direct3D12")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
pub struct D3D12_VIDEO_PROCESS_INPUT_STREAM {
    pub pTexture2D: ::core::option::Option<super::super::Graphics::Direct3D12::ID3D12Resource>,
    pub Subresource: u32,
    pub ReferenceSet: D3D12_VIDEO_PROCESS_REFERENCE_SET,
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl D3D12_VIDEO_PROCESS_INPUT_STREAM {}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::default::Default for D3D12_VIDEO_PROCESS_INPUT_STREAM {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::fmt::Debug for D3D12_VIDEO_PROCESS_INPUT_STREAM {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_PROCESS_INPUT_STREAM").field("pTexture2D", &self.pTexture2D).field("Subresource", &self.Subresource).field("ReferenceSet", &self.ReferenceSet).finish()
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::cmp::PartialEq for D3D12_VIDEO_PROCESS_INPUT_STREAM {
    fn eq(&self, other: &Self) -> bool {
        self.pTexture2D == other.pTexture2D && self.Subresource == other.Subresource && self.ReferenceSet == other.ReferenceSet
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::cmp::Eq for D3D12_VIDEO_PROCESS_INPUT_STREAM {}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_PROCESS_INPUT_STREAM {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D12`*"]
pub struct D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS {
    pub InputStream: [D3D12_VIDEO_PROCESS_INPUT_STREAM; 2],
    pub Transform: D3D12_VIDEO_PROCESS_TRANSFORM,
    pub Flags: D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS,
    pub RateInfo: D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE,
    pub FilterLevels: [i32; 32],
    pub AlphaBlending: D3D12_VIDEO_PROCESS_ALPHA_BLENDING,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl ::core::default::Default for D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl ::core::cmp::PartialEq for D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl ::core::cmp::Eq for D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D12`*"]
pub struct D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1 {
    pub InputStream: [D3D12_VIDEO_PROCESS_INPUT_STREAM; 2],
    pub Transform: D3D12_VIDEO_PROCESS_TRANSFORM,
    pub Flags: D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS,
    pub RateInfo: D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE,
    pub FilterLevels: [i32; 32],
    pub AlphaBlending: D3D12_VIDEO_PROCESS_ALPHA_BLENDING,
    pub FieldType: D3D12_VIDEO_FIELD_TYPE,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1 {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl ::core::default::Default for D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl ::core::cmp::PartialEq for D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl ::core::cmp::Eq for D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1 {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1 {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Dxgi`*"]
pub struct D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC {
    pub Format: super::super::Graphics::Dxgi::DXGI_FORMAT,
    pub ColorSpace: super::super::Graphics::Dxgi::DXGI_COLOR_SPACE_TYPE,
    pub SourceAspectRatio: super::super::Graphics::Dxgi::DXGI_RATIONAL,
    pub DestinationAspectRatio: super::super::Graphics::Dxgi::DXGI_RATIONAL,
    pub FrameRate: super::super::Graphics::Dxgi::DXGI_RATIONAL,
    pub SourceSizeRange: D3D12_VIDEO_SIZE_RANGE,
    pub DestinationSizeRange: D3D12_VIDEO_SIZE_RANGE,
    pub EnableOrientation: super::super::Foundation::BOOL,
    pub FilterFlags: D3D12_VIDEO_PROCESS_FILTER_FLAGS,
    pub StereoFormat: D3D12_VIDEO_FRAME_STEREO_FORMAT,
    pub FieldType: D3D12_VIDEO_FIELD_TYPE,
    pub DeinterlaceMode: D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS,
    pub EnableAlphaBlending: super::super::Foundation::BOOL,
    pub LumaKey: D3D12_VIDEO_PROCESS_LUMA_KEY,
    pub NumPastFrames: u32,
    pub NumFutureFrames: u32,
    pub EnableAutoProcessing: super::super::Foundation::BOOL,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl ::core::default::Default for D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl ::core::fmt::Debug for D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC")
            .field("Format", &self.Format)
            .field("ColorSpace", &self.ColorSpace)
            .field("SourceAspectRatio", &self.SourceAspectRatio)
            .field("DestinationAspectRatio", &self.DestinationAspectRatio)
            .field("FrameRate", &self.FrameRate)
            .field("SourceSizeRange", &self.SourceSizeRange)
            .field("DestinationSizeRange", &self.DestinationSizeRange)
            .field("EnableOrientation", &self.EnableOrientation)
            .field("FilterFlags", &self.FilterFlags)
            .field("StereoFormat", &self.StereoFormat)
            .field("FieldType", &self.FieldType)
            .field("DeinterlaceMode", &self.DeinterlaceMode)
            .field("EnableAlphaBlending", &self.EnableAlphaBlending)
            .field("LumaKey", &self.LumaKey)
            .field("NumPastFrames", &self.NumPastFrames)
            .field("NumFutureFrames", &self.NumFutureFrames)
            .field("EnableAutoProcessing", &self.EnableAutoProcessing)
            .finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl ::core::cmp::PartialEq for D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.Format == other.Format
            && self.ColorSpace == other.ColorSpace
            && self.SourceAspectRatio == other.SourceAspectRatio
            && self.DestinationAspectRatio == other.DestinationAspectRatio
            && self.FrameRate == other.FrameRate
            && self.SourceSizeRange == other.SourceSizeRange
            && self.DestinationSizeRange == other.DestinationSizeRange
            && self.EnableOrientation == other.EnableOrientation
            && self.FilterFlags == other.FilterFlags
            && self.StereoFormat == other.StereoFormat
            && self.FieldType == other.FieldType
            && self.DeinterlaceMode == other.DeinterlaceMode
            && self.EnableAlphaBlending == other.EnableAlphaBlending
            && self.LumaKey == other.LumaKey
            && self.NumPastFrames == other.NumPastFrames
            && self.NumFutureFrames == other.NumFutureFrames
            && self.EnableAutoProcessing == other.EnableAutoProcessing
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl ::core::cmp::Eq for D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS(pub u32);
pub const D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_NONE: D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS = D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS(0u32);
pub const D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_FRAME_DISCONTINUITY: D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS = D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS(1u32);
pub const D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_FRAME_REPEAT: D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS = D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS(2u32);
impl ::core::convert::From<u32> for D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS {
    type Abi = Self;
}
impl ::core::ops::BitOr for D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::core::ops::BitAnd for D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::core::ops::BitOrAssign for D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::core::ops::BitAndAssign for D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::core::ops::Not for D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE {
    pub OutputIndex: u32,
    pub InputFrameOrField: u32,
}
impl D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE {}
impl ::core::default::Default for D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE").field("OutputIndex", &self.OutputIndex).field("InputFrameOrField", &self.InputFrameOrField).finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE {
    fn eq(&self, other: &Self) -> bool {
        self.OutputIndex == other.OutputIndex && self.InputFrameOrField == other.InputFrameOrField
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct D3D12_VIDEO_PROCESS_LUMA_KEY {
    pub Enable: super::super::Foundation::BOOL,
    pub Lower: f32,
    pub Upper: f32,
}
#[cfg(feature = "Win32_Foundation")]
impl D3D12_VIDEO_PROCESS_LUMA_KEY {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for D3D12_VIDEO_PROCESS_LUMA_KEY {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for D3D12_VIDEO_PROCESS_LUMA_KEY {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_PROCESS_LUMA_KEY").field("Enable", &self.Enable).field("Lower", &self.Lower).field("Upper", &self.Upper).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for D3D12_VIDEO_PROCESS_LUMA_KEY {
    fn eq(&self, other: &Self) -> bool {
        self.Enable == other.Enable && self.Lower == other.Lower && self.Upper == other.Upper
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for D3D12_VIDEO_PROCESS_LUMA_KEY {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_PROCESS_LUMA_KEY {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_PROCESS_ORIENTATION(pub i32);
pub const D3D12_VIDEO_PROCESS_ORIENTATION_DEFAULT: D3D12_VIDEO_PROCESS_ORIENTATION = D3D12_VIDEO_PROCESS_ORIENTATION(0i32);
pub const D3D12_VIDEO_PROCESS_ORIENTATION_FLIP_HORIZONTAL: D3D12_VIDEO_PROCESS_ORIENTATION = D3D12_VIDEO_PROCESS_ORIENTATION(1i32);
pub const D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_90: D3D12_VIDEO_PROCESS_ORIENTATION = D3D12_VIDEO_PROCESS_ORIENTATION(2i32);
pub const D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_90_FLIP_HORIZONTAL: D3D12_VIDEO_PROCESS_ORIENTATION = D3D12_VIDEO_PROCESS_ORIENTATION(3i32);
pub const D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_180: D3D12_VIDEO_PROCESS_ORIENTATION = D3D12_VIDEO_PROCESS_ORIENTATION(4i32);
pub const D3D12_VIDEO_PROCESS_ORIENTATION_FLIP_VERTICAL: D3D12_VIDEO_PROCESS_ORIENTATION = D3D12_VIDEO_PROCESS_ORIENTATION(5i32);
pub const D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_270: D3D12_VIDEO_PROCESS_ORIENTATION = D3D12_VIDEO_PROCESS_ORIENTATION(6i32);
pub const D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_270_FLIP_HORIZONTAL: D3D12_VIDEO_PROCESS_ORIENTATION = D3D12_VIDEO_PROCESS_ORIENTATION(7i32);
impl ::core::convert::From<i32> for D3D12_VIDEO_PROCESS_ORIENTATION {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_PROCESS_ORIENTATION {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Direct3D12")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
pub struct D3D12_VIDEO_PROCESS_OUTPUT_STREAM {
    pub pTexture2D: ::core::option::Option<super::super::Graphics::Direct3D12::ID3D12Resource>,
    pub Subresource: u32,
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl D3D12_VIDEO_PROCESS_OUTPUT_STREAM {}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::default::Default for D3D12_VIDEO_PROCESS_OUTPUT_STREAM {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::fmt::Debug for D3D12_VIDEO_PROCESS_OUTPUT_STREAM {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_PROCESS_OUTPUT_STREAM").field("pTexture2D", &self.pTexture2D).field("Subresource", &self.Subresource).finish()
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::cmp::PartialEq for D3D12_VIDEO_PROCESS_OUTPUT_STREAM {
    fn eq(&self, other: &Self) -> bool {
        self.pTexture2D == other.pTexture2D && self.Subresource == other.Subresource
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::cmp::Eq for D3D12_VIDEO_PROCESS_OUTPUT_STREAM {}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_PROCESS_OUTPUT_STREAM {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D12`*"]
pub struct D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS {
    pub OutputStream: [D3D12_VIDEO_PROCESS_OUTPUT_STREAM; 2],
    pub TargetRectangle: super::super::Foundation::RECT,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl ::core::default::Default for D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl ::core::cmp::PartialEq for D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl ::core::cmp::Eq for D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Dxgi`*"]
pub struct D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC {
    pub Format: super::super::Graphics::Dxgi::DXGI_FORMAT,
    pub ColorSpace: super::super::Graphics::Dxgi::DXGI_COLOR_SPACE_TYPE,
    pub AlphaFillMode: D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE,
    pub AlphaFillModeSourceStreamIndex: u32,
    pub BackgroundColor: [f32; 4],
    pub FrameRate: super::super::Graphics::Dxgi::DXGI_RATIONAL,
    pub EnableStereo: super::super::Foundation::BOOL,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl ::core::default::Default for D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl ::core::fmt::Debug for D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC")
            .field("Format", &self.Format)
            .field("ColorSpace", &self.ColorSpace)
            .field("AlphaFillMode", &self.AlphaFillMode)
            .field("AlphaFillModeSourceStreamIndex", &self.AlphaFillModeSourceStreamIndex)
            .field("BackgroundColor", &self.BackgroundColor)
            .field("FrameRate", &self.FrameRate)
            .field("EnableStereo", &self.EnableStereo)
            .finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl ::core::cmp::PartialEq for D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.Format == other.Format && self.ColorSpace == other.ColorSpace && self.AlphaFillMode == other.AlphaFillMode && self.AlphaFillModeSourceStreamIndex == other.AlphaFillModeSourceStreamIndex && self.BackgroundColor == other.BackgroundColor && self.FrameRate == other.FrameRate && self.EnableStereo == other.EnableStereo
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
impl ::core::cmp::Eq for D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Direct3D12")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
pub struct D3D12_VIDEO_PROCESS_REFERENCE_SET {
    pub NumPastFrames: u32,
    pub ppPastFrames: *mut ::core::option::Option<super::super::Graphics::Direct3D12::ID3D12Resource>,
    pub pPastSubresources: *mut u32,
    pub NumFutureFrames: u32,
    pub ppFutureFrames: *mut ::core::option::Option<super::super::Graphics::Direct3D12::ID3D12Resource>,
    pub pFutureSubresources: *mut u32,
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl D3D12_VIDEO_PROCESS_REFERENCE_SET {}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::default::Default for D3D12_VIDEO_PROCESS_REFERENCE_SET {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::fmt::Debug for D3D12_VIDEO_PROCESS_REFERENCE_SET {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_PROCESS_REFERENCE_SET")
            .field("NumPastFrames", &self.NumPastFrames)
            .field("ppPastFrames", &self.ppPastFrames)
            .field("pPastSubresources", &self.pPastSubresources)
            .field("NumFutureFrames", &self.NumFutureFrames)
            .field("ppFutureFrames", &self.ppFutureFrames)
            .field("pFutureSubresources", &self.pFutureSubresources)
            .finish()
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::cmp::PartialEq for D3D12_VIDEO_PROCESS_REFERENCE_SET {
    fn eq(&self, other: &Self) -> bool {
        self.NumPastFrames == other.NumPastFrames && self.ppPastFrames == other.ppPastFrames && self.pPastSubresources == other.pPastSubresources && self.NumFutureFrames == other.NumFutureFrames && self.ppFutureFrames == other.ppFutureFrames && self.pFutureSubresources == other.pFutureSubresources
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::cmp::Eq for D3D12_VIDEO_PROCESS_REFERENCE_SET {}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_PROCESS_REFERENCE_SET {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_PROCESS_SUPPORT_FLAGS(pub u32);
pub const D3D12_VIDEO_PROCESS_SUPPORT_FLAG_NONE: D3D12_VIDEO_PROCESS_SUPPORT_FLAGS = D3D12_VIDEO_PROCESS_SUPPORT_FLAGS(0u32);
pub const D3D12_VIDEO_PROCESS_SUPPORT_FLAG_SUPPORTED: D3D12_VIDEO_PROCESS_SUPPORT_FLAGS = D3D12_VIDEO_PROCESS_SUPPORT_FLAGS(1u32);
impl ::core::convert::From<u32> for D3D12_VIDEO_PROCESS_SUPPORT_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_PROCESS_SUPPORT_FLAGS {
    type Abi = Self;
}
impl ::core::ops::BitOr for D3D12_VIDEO_PROCESS_SUPPORT_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::core::ops::BitAnd for D3D12_VIDEO_PROCESS_SUPPORT_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::core::ops::BitOrAssign for D3D12_VIDEO_PROCESS_SUPPORT_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::core::ops::BitAndAssign for D3D12_VIDEO_PROCESS_SUPPORT_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::core::ops::Not for D3D12_VIDEO_PROCESS_SUPPORT_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct D3D12_VIDEO_PROCESS_TRANSFORM {
    pub SourceRectangle: super::super::Foundation::RECT,
    pub DestinationRectangle: super::super::Foundation::RECT,
    pub Orientation: D3D12_VIDEO_PROCESS_ORIENTATION,
}
#[cfg(feature = "Win32_Foundation")]
impl D3D12_VIDEO_PROCESS_TRANSFORM {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for D3D12_VIDEO_PROCESS_TRANSFORM {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for D3D12_VIDEO_PROCESS_TRANSFORM {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_PROCESS_TRANSFORM").field("SourceRectangle", &self.SourceRectangle).field("DestinationRectangle", &self.DestinationRectangle).field("Orientation", &self.Orientation).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for D3D12_VIDEO_PROCESS_TRANSFORM {
    fn eq(&self, other: &Self) -> bool {
        self.SourceRectangle == other.SourceRectangle && self.DestinationRectangle == other.DestinationRectangle && self.Orientation == other.Orientation
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for D3D12_VIDEO_PROCESS_TRANSFORM {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_PROCESS_TRANSFORM {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS(pub u32);
pub const D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAG_NONE: D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS = D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS(0u32);
pub const D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAG_SUPPORTED: D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS = D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS(1u32);
impl ::core::convert::From<u32> for D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS {
    type Abi = Self;
}
impl ::core::ops::BitOr for D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::core::ops::BitAnd for D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::core::ops::BitOrAssign for D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::core::ops::BitAndAssign for D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::core::ops::Not for D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Dxgi")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Dxgi`*"]
pub struct D3D12_VIDEO_SAMPLE {
    pub Width: u32,
    pub Height: u32,
    pub Format: D3D12_VIDEO_FORMAT,
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl D3D12_VIDEO_SAMPLE {}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::default::Default for D3D12_VIDEO_SAMPLE {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::fmt::Debug for D3D12_VIDEO_SAMPLE {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_SAMPLE").field("Width", &self.Width).field("Height", &self.Height).field("Format", &self.Format).finish()
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::cmp::PartialEq for D3D12_VIDEO_SAMPLE {
    fn eq(&self, other: &Self) -> bool {
        self.Width == other.Width && self.Height == other.Height && self.Format == other.Format
    }
}
#[cfg(feature = "Win32_Graphics_Dxgi")]
impl ::core::cmp::Eq for D3D12_VIDEO_SAMPLE {}
#[cfg(feature = "Win32_Graphics_Dxgi")]
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_SAMPLE {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_SCALE_SUPPORT {
    pub OutputSizeRange: D3D12_VIDEO_SIZE_RANGE,
    pub Flags: D3D12_VIDEO_SCALE_SUPPORT_FLAGS,
}
impl D3D12_VIDEO_SCALE_SUPPORT {}
impl ::core::default::Default for D3D12_VIDEO_SCALE_SUPPORT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_VIDEO_SCALE_SUPPORT {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_SCALE_SUPPORT").field("OutputSizeRange", &self.OutputSizeRange).field("Flags", &self.Flags).finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_SCALE_SUPPORT {
    fn eq(&self, other: &Self) -> bool {
        self.OutputSizeRange == other.OutputSizeRange && self.Flags == other.Flags
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_SCALE_SUPPORT {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_SCALE_SUPPORT {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct D3D12_VIDEO_SCALE_SUPPORT_FLAGS(pub u32);
pub const D3D12_VIDEO_SCALE_SUPPORT_FLAG_NONE: D3D12_VIDEO_SCALE_SUPPORT_FLAGS = D3D12_VIDEO_SCALE_SUPPORT_FLAGS(0u32);
pub const D3D12_VIDEO_SCALE_SUPPORT_FLAG_POW2_ONLY: D3D12_VIDEO_SCALE_SUPPORT_FLAGS = D3D12_VIDEO_SCALE_SUPPORT_FLAGS(1u32);
pub const D3D12_VIDEO_SCALE_SUPPORT_FLAG_EVEN_DIMENSIONS_ONLY: D3D12_VIDEO_SCALE_SUPPORT_FLAGS = D3D12_VIDEO_SCALE_SUPPORT_FLAGS(2u32);
impl ::core::convert::From<u32> for D3D12_VIDEO_SCALE_SUPPORT_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_SCALE_SUPPORT_FLAGS {
    type Abi = Self;
}
impl ::core::ops::BitOr for D3D12_VIDEO_SCALE_SUPPORT_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::core::ops::BitAnd for D3D12_VIDEO_SCALE_SUPPORT_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::core::ops::BitOrAssign for D3D12_VIDEO_SCALE_SUPPORT_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::core::ops::BitAndAssign for D3D12_VIDEO_SCALE_SUPPORT_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::core::ops::Not for D3D12_VIDEO_SCALE_SUPPORT_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3D12_VIDEO_SIZE_RANGE {
    pub MaxWidth: u32,
    pub MaxHeight: u32,
    pub MinWidth: u32,
    pub MinHeight: u32,
}
impl D3D12_VIDEO_SIZE_RANGE {}
impl ::core::default::Default for D3D12_VIDEO_SIZE_RANGE {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3D12_VIDEO_SIZE_RANGE {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3D12_VIDEO_SIZE_RANGE").field("MaxWidth", &self.MaxWidth).field("MaxHeight", &self.MaxHeight).field("MinWidth", &self.MinWidth).field("MinHeight", &self.MinHeight).finish()
    }
}
impl ::core::cmp::PartialEq for D3D12_VIDEO_SIZE_RANGE {
    fn eq(&self, other: &Self) -> bool {
        self.MaxWidth == other.MaxWidth && self.MaxHeight == other.MaxHeight && self.MinWidth == other.MinWidth && self.MinHeight == other.MinHeight
    }
}
impl ::core::cmp::Eq for D3D12_VIDEO_SIZE_RANGE {}
unsafe impl ::windows::runtime::Abi for D3D12_VIDEO_SIZE_RANGE {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(any(target_arch = "x86_64", target_arch = "aarch64",))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3DCONTENTPROTECTIONCAPS {
    pub Caps: u32,
    pub KeyExchangeType: ::windows::runtime::GUID,
    pub BufferAlignmentStart: u32,
    pub BlockAlignmentSize: u32,
    pub ProtectedMemorySize: u64,
}
#[cfg(any(target_arch = "x86_64", target_arch = "aarch64",))]
impl D3DCONTENTPROTECTIONCAPS {}
#[cfg(any(target_arch = "x86_64", target_arch = "aarch64",))]
impl ::core::default::Default for D3DCONTENTPROTECTIONCAPS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(any(target_arch = "x86_64", target_arch = "aarch64",))]
impl ::core::fmt::Debug for D3DCONTENTPROTECTIONCAPS {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3DCONTENTPROTECTIONCAPS").field("Caps", &self.Caps).field("KeyExchangeType", &self.KeyExchangeType).field("BufferAlignmentStart", &self.BufferAlignmentStart).field("BlockAlignmentSize", &self.BlockAlignmentSize).field("ProtectedMemorySize", &self.ProtectedMemorySize).finish()
    }
}
#[cfg(any(target_arch = "x86_64", target_arch = "aarch64",))]
impl ::core::cmp::PartialEq for D3DCONTENTPROTECTIONCAPS {
    fn eq(&self, other: &Self) -> bool {
        self.Caps == other.Caps && self.KeyExchangeType == other.KeyExchangeType && self.BufferAlignmentStart == other.BufferAlignmentStart && self.BlockAlignmentSize == other.BlockAlignmentSize && self.ProtectedMemorySize == other.ProtectedMemorySize
    }
}
#[cfg(any(target_arch = "x86_64", target_arch = "aarch64",))]
impl ::core::cmp::Eq for D3DCONTENTPROTECTIONCAPS {}
#[cfg(any(target_arch = "x86_64", target_arch = "aarch64",))]
unsafe impl ::windows::runtime::Abi for D3DCONTENTPROTECTIONCAPS {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C, packed(4))]
#[cfg(any(target_arch = "x86",))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3DCONTENTPROTECTIONCAPS {
    pub Caps: u32,
    pub KeyExchangeType: ::windows::runtime::GUID,
    pub BufferAlignmentStart: u32,
    pub BlockAlignmentSize: u32,
    pub ProtectedMemorySize: u64,
}
#[cfg(any(target_arch = "x86",))]
impl D3DCONTENTPROTECTIONCAPS {}
#[cfg(any(target_arch = "x86",))]
impl ::core::default::Default for D3DCONTENTPROTECTIONCAPS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(any(target_arch = "x86",))]
impl ::core::cmp::PartialEq for D3DCONTENTPROTECTIONCAPS {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(any(target_arch = "x86",))]
impl ::core::cmp::Eq for D3DCONTENTPROTECTIONCAPS {}
#[cfg(any(target_arch = "x86",))]
unsafe impl ::windows::runtime::Abi for D3DCONTENTPROTECTIONCAPS {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct D3DOVERLAYCAPS {
    pub Caps: u32,
    pub MaxOverlayDisplayWidth: u32,
    pub MaxOverlayDisplayHeight: u32,
}
impl D3DOVERLAYCAPS {}
impl ::core::default::Default for D3DOVERLAYCAPS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for D3DOVERLAYCAPS {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("D3DOVERLAYCAPS").field("Caps", &self.Caps).field("MaxOverlayDisplayWidth", &self.MaxOverlayDisplayWidth).field("MaxOverlayDisplayHeight", &self.MaxOverlayDisplayHeight).finish()
    }
}
impl ::core::cmp::PartialEq for D3DOVERLAYCAPS {
    fn eq(&self, other: &Self) -> bool {
        self.Caps == other.Caps && self.MaxOverlayDisplayWidth == other.MaxOverlayDisplayWidth && self.MaxOverlayDisplayHeight == other.MaxOverlayDisplayHeight
    }
}
impl ::core::cmp::Eq for D3DOVERLAYCAPS {}
unsafe impl ::windows::runtime::Abi for D3DOVERLAYCAPS {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct DEVICE_INFO {
    pub pFriendlyDeviceName: super::super::Foundation::BSTR,
    pub pUniqueDeviceName: super::super::Foundation::BSTR,
    pub pManufacturerName: super::super::Foundation::BSTR,
    pub pModelName: super::super::Foundation::BSTR,
    pub pIconURL: super::super::Foundation::BSTR,
}
#[cfg(feature = "Win32_Foundation")]
impl DEVICE_INFO {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for DEVICE_INFO {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for DEVICE_INFO {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DEVICE_INFO").field("pFriendlyDeviceName", &self.pFriendlyDeviceName).field("pUniqueDeviceName", &self.pUniqueDeviceName).field("pManufacturerName", &self.pManufacturerName).field("pModelName", &self.pModelName).field("pIconURL", &self.pIconURL).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for DEVICE_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.pFriendlyDeviceName == other.pFriendlyDeviceName && self.pUniqueDeviceName == other.pUniqueDeviceName && self.pManufacturerName == other.pManufacturerName && self.pModelName == other.pModelName && self.pIconURL == other.pIconURL
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for DEVICE_INFO {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DEVICE_INFO {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_System_PropertiesSystem`*"]
pub const DEVPKEY_DeviceInterface_IsVirtualCamera: super::super::System::PropertiesSystem::PROPERTYKEY = super::super::System::PropertiesSystem::PROPERTYKEY {
    fmtid: ::windows::runtime::GUID::from_values(1859937037, 49891, 17335, [178, 209, 32, 82, 90, 26, 241, 32]),
    pid: 3u32,
};
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct DIRTYRECT_INFO {
    pub FrameNumber: u32,
    pub NumDirtyRects: u32,
    pub DirtyRects: [super::super::Foundation::RECT; 1],
}
#[cfg(feature = "Win32_Foundation")]
impl DIRTYRECT_INFO {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for DIRTYRECT_INFO {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for DIRTYRECT_INFO {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DIRTYRECT_INFO").field("FrameNumber", &self.FrameNumber).field("NumDirtyRects", &self.NumDirtyRects).field("DirtyRects", &self.DirtyRects).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for DIRTYRECT_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.FrameNumber == other.FrameNumber && self.NumDirtyRects == other.NumDirtyRects && self.DirtyRects == other.DirtyRects
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for DIRTYRECT_INFO {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DIRTYRECT_INFO {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn DXVA2CreateDirect3DDeviceManager9(presettoken: *mut u32, ppdevicemanager: *mut ::core::option::Option<IDirect3DDeviceManager9>) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn DXVA2CreateDirect3DDeviceManager9(presettoken: *mut u32, ppdevicemanager: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        DXVA2CreateDirect3DDeviceManager9(::core::mem::transmute(presettoken), ::core::mem::transmute(ppdevicemanager)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
#[cfg(feature = "Win32_Graphics_Direct3D9")]
#[inline]
pub unsafe fn DXVA2CreateVideoService<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D9::IDirect3DDevice9>>(pdd: Param0, riid: *const ::windows::runtime::GUID, ppservice: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn DXVA2CreateVideoService(pdd: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppservice: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT;
        }
        DXVA2CreateVideoService(pdd.into_param().abi(), ::core::mem::transmute(riid), ::core::mem::transmute(ppservice)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVA2_AES_CTR_IV {
    pub IV: u64,
    pub Count: u64,
}
impl DXVA2_AES_CTR_IV {}
impl ::core::default::Default for DXVA2_AES_CTR_IV {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for DXVA2_AES_CTR_IV {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVA2_AES_CTR_IV").field("IV", &self.IV).field("Count", &self.Count).finish()
    }
}
impl ::core::cmp::PartialEq for DXVA2_AES_CTR_IV {
    fn eq(&self, other: &Self) -> bool {
        self.IV == other.IV && self.Count == other.Count
    }
}
impl ::core::cmp::Eq for DXVA2_AES_CTR_IV {}
unsafe impl ::windows::runtime::Abi for DXVA2_AES_CTR_IV {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVA2_AYUVSample16 {
    pub Cr: u16,
    pub Cb: u16,
    pub Y: u16,
    pub Alpha: u16,
}
impl DXVA2_AYUVSample16 {}
impl ::core::default::Default for DXVA2_AYUVSample16 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for DXVA2_AYUVSample16 {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVA2_AYUVSample16").field("Cr", &self.Cr).field("Cb", &self.Cb).field("Y", &self.Y).field("Alpha", &self.Alpha).finish()
    }
}
impl ::core::cmp::PartialEq for DXVA2_AYUVSample16 {
    fn eq(&self, other: &Self) -> bool {
        self.Cr == other.Cr && self.Cb == other.Cb && self.Y == other.Y && self.Alpha == other.Alpha
    }
}
impl ::core::cmp::Eq for DXVA2_AYUVSample16 {}
unsafe impl ::windows::runtime::Abi for DXVA2_AYUVSample16 {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVA2_AYUVSample8 {
    pub Cr: u8,
    pub Cb: u8,
    pub Y: u8,
    pub Alpha: u8,
}
impl DXVA2_AYUVSample8 {}
impl ::core::default::Default for DXVA2_AYUVSample8 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for DXVA2_AYUVSample8 {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVA2_AYUVSample8").field("Cr", &self.Cr).field("Cb", &self.Cb).field("Y", &self.Y).field("Alpha", &self.Alpha).finish()
    }
}
impl ::core::cmp::PartialEq for DXVA2_AYUVSample8 {
    fn eq(&self, other: &Self) -> bool {
        self.Cr == other.Cr && self.Cb == other.Cb && self.Y == other.Y && self.Alpha == other.Alpha
    }
}
impl ::core::cmp::Eq for DXVA2_AYUVSample8 {}
unsafe impl ::windows::runtime::Abi for DXVA2_AYUVSample8 {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVA2_BufferfType(pub i32);
pub const DXVA2_PictureParametersBufferType: DXVA2_BufferfType = DXVA2_BufferfType(0i32);
pub const DXVA2_MacroBlockControlBufferType: DXVA2_BufferfType = DXVA2_BufferfType(1i32);
pub const DXVA2_ResidualDifferenceBufferType: DXVA2_BufferfType = DXVA2_BufferfType(2i32);
pub const DXVA2_DeblockingControlBufferType: DXVA2_BufferfType = DXVA2_BufferfType(3i32);
pub const DXVA2_InverseQuantizationMatrixBufferType: DXVA2_BufferfType = DXVA2_BufferfType(4i32);
pub const DXVA2_SliceControlBufferType: DXVA2_BufferfType = DXVA2_BufferfType(5i32);
pub const DXVA2_BitStreamDateBufferType: DXVA2_BufferfType = DXVA2_BufferfType(6i32);
pub const DXVA2_MotionVectorBuffer: DXVA2_BufferfType = DXVA2_BufferfType(7i32);
pub const DXVA2_FilmGrainBuffer: DXVA2_BufferfType = DXVA2_BufferfType(8i32);
impl ::core::convert::From<i32> for DXVA2_BufferfType {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVA2_BufferfType {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVA2_ConfigPictureDecode {
    pub guidConfigBitstreamEncryption: ::windows::runtime::GUID,
    pub guidConfigMBcontrolEncryption: ::windows::runtime::GUID,
    pub guidConfigResidDiffEncryption: ::windows::runtime::GUID,
    pub ConfigBitstreamRaw: u32,
    pub ConfigMBcontrolRasterOrder: u32,
    pub ConfigResidDiffHost: u32,
    pub ConfigSpatialResid8: u32,
    pub ConfigResid8Subtraction: u32,
    pub ConfigSpatialHost8or9Clipping: u32,
    pub ConfigSpatialResidInterleaved: u32,
    pub ConfigIntraResidUnsigned: u32,
    pub ConfigResidDiffAccelerator: u32,
    pub ConfigHostInverseScan: u32,
    pub ConfigSpecificIDCT: u32,
    pub Config4GroupedCoefs: u32,
    pub ConfigMinRenderTargetBuffCount: u16,
    pub ConfigDecoderSpecific: u16,
}
impl DXVA2_ConfigPictureDecode {}
impl ::core::default::Default for DXVA2_ConfigPictureDecode {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for DXVA2_ConfigPictureDecode {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVA2_ConfigPictureDecode")
            .field("guidConfigBitstreamEncryption", &self.guidConfigBitstreamEncryption)
            .field("guidConfigMBcontrolEncryption", &self.guidConfigMBcontrolEncryption)
            .field("guidConfigResidDiffEncryption", &self.guidConfigResidDiffEncryption)
            .field("ConfigBitstreamRaw", &self.ConfigBitstreamRaw)
            .field("ConfigMBcontrolRasterOrder", &self.ConfigMBcontrolRasterOrder)
            .field("ConfigResidDiffHost", &self.ConfigResidDiffHost)
            .field("ConfigSpatialResid8", &self.ConfigSpatialResid8)
            .field("ConfigResid8Subtraction", &self.ConfigResid8Subtraction)
            .field("ConfigSpatialHost8or9Clipping", &self.ConfigSpatialHost8or9Clipping)
            .field("ConfigSpatialResidInterleaved", &self.ConfigSpatialResidInterleaved)
            .field("ConfigIntraResidUnsigned", &self.ConfigIntraResidUnsigned)
            .field("ConfigResidDiffAccelerator", &self.ConfigResidDiffAccelerator)
            .field("ConfigHostInverseScan", &self.ConfigHostInverseScan)
            .field("ConfigSpecificIDCT", &self.ConfigSpecificIDCT)
            .field("Config4GroupedCoefs", &self.Config4GroupedCoefs)
            .field("ConfigMinRenderTargetBuffCount", &self.ConfigMinRenderTargetBuffCount)
            .field("ConfigDecoderSpecific", &self.ConfigDecoderSpecific)
            .finish()
    }
}
impl ::core::cmp::PartialEq for DXVA2_ConfigPictureDecode {
    fn eq(&self, other: &Self) -> bool {
        self.guidConfigBitstreamEncryption == other.guidConfigBitstreamEncryption
            && self.guidConfigMBcontrolEncryption == other.guidConfigMBcontrolEncryption
            && self.guidConfigResidDiffEncryption == other.guidConfigResidDiffEncryption
            && self.ConfigBitstreamRaw == other.ConfigBitstreamRaw
            && self.ConfigMBcontrolRasterOrder == other.ConfigMBcontrolRasterOrder
            && self.ConfigResidDiffHost == other.ConfigResidDiffHost
            && self.ConfigSpatialResid8 == other.ConfigSpatialResid8
            && self.ConfigResid8Subtraction == other.ConfigResid8Subtraction
            && self.ConfigSpatialHost8or9Clipping == other.ConfigSpatialHost8or9Clipping
            && self.ConfigSpatialResidInterleaved == other.ConfigSpatialResidInterleaved
            && self.ConfigIntraResidUnsigned == other.ConfigIntraResidUnsigned
            && self.ConfigResidDiffAccelerator == other.ConfigResidDiffAccelerator
            && self.ConfigHostInverseScan == other.ConfigHostInverseScan
            && self.ConfigSpecificIDCT == other.ConfigSpecificIDCT
            && self.Config4GroupedCoefs == other.Config4GroupedCoefs
            && self.ConfigMinRenderTargetBuffCount == other.ConfigMinRenderTargetBuffCount
            && self.ConfigDecoderSpecific == other.ConfigDecoderSpecific
    }
}
impl ::core::cmp::Eq for DXVA2_ConfigPictureDecode {}
unsafe impl ::windows::runtime::Abi for DXVA2_ConfigPictureDecode {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const DXVA2_DECODE_GET_DRIVER_HANDLE: u32 = 1829u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const DXVA2_DECODE_SPECIFY_ENCRYPTED_BLOCKS: u32 = 1828u32;
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVA2_DecodeBufferDesc {
    pub CompressedBufferType: DXVA2_BufferfType,
    pub BufferIndex: u32,
    pub DataOffset: u32,
    pub DataSize: u32,
    pub FirstMBaddress: u32,
    pub NumMBsInBuffer: u32,
    pub Width: u32,
    pub Height: u32,
    pub Stride: u32,
    pub ReservedBits: u32,
    pub pvPVPState: *mut ::core::ffi::c_void,
}
impl DXVA2_DecodeBufferDesc {}
impl ::core::default::Default for DXVA2_DecodeBufferDesc {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for DXVA2_DecodeBufferDesc {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVA2_DecodeBufferDesc")
            .field("CompressedBufferType", &self.CompressedBufferType)
            .field("BufferIndex", &self.BufferIndex)
            .field("DataOffset", &self.DataOffset)
            .field("DataSize", &self.DataSize)
            .field("FirstMBaddress", &self.FirstMBaddress)
            .field("NumMBsInBuffer", &self.NumMBsInBuffer)
            .field("Width", &self.Width)
            .field("Height", &self.Height)
            .field("Stride", &self.Stride)
            .field("ReservedBits", &self.ReservedBits)
            .field("pvPVPState", &self.pvPVPState)
            .finish()
    }
}
impl ::core::cmp::PartialEq for DXVA2_DecodeBufferDesc {
    fn eq(&self, other: &Self) -> bool {
        self.CompressedBufferType == other.CompressedBufferType && self.BufferIndex == other.BufferIndex && self.DataOffset == other.DataOffset && self.DataSize == other.DataSize && self.FirstMBaddress == other.FirstMBaddress && self.NumMBsInBuffer == other.NumMBsInBuffer && self.Width == other.Width && self.Height == other.Height && self.Stride == other.Stride && self.ReservedBits == other.ReservedBits && self.pvPVPState == other.pvPVPState
    }
}
impl ::core::cmp::Eq for DXVA2_DecodeBufferDesc {}
unsafe impl ::windows::runtime::Abi for DXVA2_DecodeBufferDesc {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVA2_DecodeExecuteParams {
    pub NumCompBuffers: u32,
    pub pCompressedBuffers: *mut DXVA2_DecodeBufferDesc,
    pub pExtensionData: *mut DXVA2_DecodeExtensionData,
}
impl DXVA2_DecodeExecuteParams {}
impl ::core::default::Default for DXVA2_DecodeExecuteParams {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for DXVA2_DecodeExecuteParams {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVA2_DecodeExecuteParams").field("NumCompBuffers", &self.NumCompBuffers).field("pCompressedBuffers", &self.pCompressedBuffers).field("pExtensionData", &self.pExtensionData).finish()
    }
}
impl ::core::cmp::PartialEq for DXVA2_DecodeExecuteParams {
    fn eq(&self, other: &Self) -> bool {
        self.NumCompBuffers == other.NumCompBuffers && self.pCompressedBuffers == other.pCompressedBuffers && self.pExtensionData == other.pExtensionData
    }
}
impl ::core::cmp::Eq for DXVA2_DecodeExecuteParams {}
unsafe impl ::windows::runtime::Abi for DXVA2_DecodeExecuteParams {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVA2_DecodeExtensionData {
    pub Function: u32,
    pub pPrivateInputData: *mut ::core::ffi::c_void,
    pub PrivateInputDataSize: u32,
    pub pPrivateOutputData: *mut ::core::ffi::c_void,
    pub PrivateOutputDataSize: u32,
}
impl DXVA2_DecodeExtensionData {}
impl ::core::default::Default for DXVA2_DecodeExtensionData {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for DXVA2_DecodeExtensionData {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVA2_DecodeExtensionData")
            .field("Function", &self.Function)
            .field("pPrivateInputData", &self.pPrivateInputData)
            .field("PrivateInputDataSize", &self.PrivateInputDataSize)
            .field("pPrivateOutputData", &self.pPrivateOutputData)
            .field("PrivateOutputDataSize", &self.PrivateOutputDataSize)
            .finish()
    }
}
impl ::core::cmp::PartialEq for DXVA2_DecodeExtensionData {
    fn eq(&self, other: &Self) -> bool {
        self.Function == other.Function && self.pPrivateInputData == other.pPrivateInputData && self.PrivateInputDataSize == other.PrivateInputDataSize && self.pPrivateOutputData == other.pPrivateOutputData && self.PrivateOutputDataSize == other.PrivateOutputDataSize
    }
}
impl ::core::cmp::Eq for DXVA2_DecodeExtensionData {}
unsafe impl ::windows::runtime::Abi for DXVA2_DecodeExtensionData {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVA2_DeinterlaceTech(pub i32);
pub const DXVA2_DeinterlaceTech_Unknown: DXVA2_DeinterlaceTech = DXVA2_DeinterlaceTech(0i32);
pub const DXVA2_DeinterlaceTech_BOBLineReplicate: DXVA2_DeinterlaceTech = DXVA2_DeinterlaceTech(1i32);
pub const DXVA2_DeinterlaceTech_BOBVerticalStretch: DXVA2_DeinterlaceTech = DXVA2_DeinterlaceTech(2i32);
pub const DXVA2_DeinterlaceTech_BOBVerticalStretch4Tap: DXVA2_DeinterlaceTech = DXVA2_DeinterlaceTech(4i32);
pub const DXVA2_DeinterlaceTech_MedianFiltering: DXVA2_DeinterlaceTech = DXVA2_DeinterlaceTech(8i32);
pub const DXVA2_DeinterlaceTech_EdgeFiltering: DXVA2_DeinterlaceTech = DXVA2_DeinterlaceTech(16i32);
pub const DXVA2_DeinterlaceTech_FieldAdaptive: DXVA2_DeinterlaceTech = DXVA2_DeinterlaceTech(32i32);
pub const DXVA2_DeinterlaceTech_PixelAdaptive: DXVA2_DeinterlaceTech = DXVA2_DeinterlaceTech(64i32);
pub const DXVA2_DeinterlaceTech_MotionVectorSteered: DXVA2_DeinterlaceTech = DXVA2_DeinterlaceTech(128i32);
pub const DXVA2_DeinterlaceTech_InverseTelecine: DXVA2_DeinterlaceTech = DXVA2_DeinterlaceTech(256i32);
pub const DXVA2_DeinterlaceTech_Mask: DXVA2_DeinterlaceTech = DXVA2_DeinterlaceTech(511i32);
impl ::core::convert::From<i32> for DXVA2_DeinterlaceTech {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVA2_DeinterlaceTech {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVA2_DestData(pub i32);
pub const DXVA2_DestData_RFF: DXVA2_DestData = DXVA2_DestData(1i32);
pub const DXVA2_DestData_TFF: DXVA2_DestData = DXVA2_DestData(2i32);
pub const DXVA2_DestData_RFF_TFF_Present: DXVA2_DestData = DXVA2_DestData(4i32);
pub const DXVA2_DestData_Mask: DXVA2_DestData = DXVA2_DestData(65535i32);
impl ::core::convert::From<i32> for DXVA2_DestData {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVA2_DestData {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVA2_DetailFilterTech(pub i32);
pub const DXVA2_DetailFilterTech_Unsupported: DXVA2_DetailFilterTech = DXVA2_DetailFilterTech(0i32);
pub const DXVA2_DetailFilterTech_Unknown: DXVA2_DetailFilterTech = DXVA2_DetailFilterTech(1i32);
pub const DXVA2_DetailFilterTech_Edge: DXVA2_DetailFilterTech = DXVA2_DetailFilterTech(2i32);
pub const DXVA2_DetailFilterTech_Sharpening: DXVA2_DetailFilterTech = DXVA2_DetailFilterTech(4i32);
pub const DXVA2_DetailFilterTech_Mask: DXVA2_DetailFilterTech = DXVA2_DetailFilterTech(7i32);
impl ::core::convert::From<i32> for DXVA2_DetailFilterTech {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVA2_DetailFilterTech {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const DXVA2_E_NEW_VIDEO_DEVICE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-2147217407i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const DXVA2_E_NOT_AVAILABLE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-2147217405i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const DXVA2_E_NOT_INITIALIZED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-2147217408i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const DXVA2_E_VIDEO_DEVICE_LOCKED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-2147217406i32 as _);
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVA2_ExtendedFormat {
    pub Anonymous: DXVA2_ExtendedFormat_0,
}
impl DXVA2_ExtendedFormat {}
impl ::core::default::Default for DXVA2_ExtendedFormat {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for DXVA2_ExtendedFormat {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for DXVA2_ExtendedFormat {}
unsafe impl ::windows::runtime::Abi for DXVA2_ExtendedFormat {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub union DXVA2_ExtendedFormat_0 {
    pub Anonymous: DXVA2_ExtendedFormat_0_0,
    pub value: u32,
}
impl DXVA2_ExtendedFormat_0 {}
impl ::core::default::Default for DXVA2_ExtendedFormat_0 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for DXVA2_ExtendedFormat_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for DXVA2_ExtendedFormat_0 {}
unsafe impl ::windows::runtime::Abi for DXVA2_ExtendedFormat_0 {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVA2_ExtendedFormat_0_0 {
    pub _bitfield: u32,
}
impl DXVA2_ExtendedFormat_0_0 {}
impl ::core::default::Default for DXVA2_ExtendedFormat_0_0 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for DXVA2_ExtendedFormat_0_0 {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("_Anonymous_e__Struct").field("_bitfield", &self._bitfield).finish()
    }
}
impl ::core::cmp::PartialEq for DXVA2_ExtendedFormat_0_0 {
    fn eq(&self, other: &Self) -> bool {
        self._bitfield == other._bitfield
    }
}
impl ::core::cmp::Eq for DXVA2_ExtendedFormat_0_0 {}
unsafe impl ::windows::runtime::Abi for DXVA2_ExtendedFormat_0_0 {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVA2_FilterType(pub i32);
pub const DXVA2_NoiseFilterLumaLevel: DXVA2_FilterType = DXVA2_FilterType(1i32);
pub const DXVA2_NoiseFilterLumaThreshold: DXVA2_FilterType = DXVA2_FilterType(2i32);
pub const DXVA2_NoiseFilterLumaRadius: DXVA2_FilterType = DXVA2_FilterType(3i32);
pub const DXVA2_NoiseFilterChromaLevel: DXVA2_FilterType = DXVA2_FilterType(4i32);
pub const DXVA2_NoiseFilterChromaThreshold: DXVA2_FilterType = DXVA2_FilterType(5i32);
pub const DXVA2_NoiseFilterChromaRadius: DXVA2_FilterType = DXVA2_FilterType(6i32);
pub const DXVA2_DetailFilterLumaLevel: DXVA2_FilterType = DXVA2_FilterType(7i32);
pub const DXVA2_DetailFilterLumaThreshold: DXVA2_FilterType = DXVA2_FilterType(8i32);
pub const DXVA2_DetailFilterLumaRadius: DXVA2_FilterType = DXVA2_FilterType(9i32);
pub const DXVA2_DetailFilterChromaLevel: DXVA2_FilterType = DXVA2_FilterType(10i32);
pub const DXVA2_DetailFilterChromaThreshold: DXVA2_FilterType = DXVA2_FilterType(11i32);
pub const DXVA2_DetailFilterChromaRadius: DXVA2_FilterType = DXVA2_FilterType(12i32);
impl ::core::convert::From<i32> for DXVA2_FilterType {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVA2_FilterType {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVA2_FilterValues {
    pub Level: DXVA2_Fixed32,
    pub Threshold: DXVA2_Fixed32,
    pub Radius: DXVA2_Fixed32,
}
impl DXVA2_FilterValues {}
impl ::core::default::Default for DXVA2_FilterValues {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for DXVA2_FilterValues {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for DXVA2_FilterValues {}
unsafe impl ::windows::runtime::Abi for DXVA2_FilterValues {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVA2_Fixed32 {
    pub Anonymous: DXVA2_Fixed32_0,
}
impl DXVA2_Fixed32 {}
impl ::core::default::Default for DXVA2_Fixed32 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for DXVA2_Fixed32 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for DXVA2_Fixed32 {}
unsafe impl ::windows::runtime::Abi for DXVA2_Fixed32 {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub union DXVA2_Fixed32_0 {
    pub Anonymous: DXVA2_Fixed32_0_0,
    pub ll: i32,
}
impl DXVA2_Fixed32_0 {}
impl ::core::default::Default for DXVA2_Fixed32_0 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for DXVA2_Fixed32_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for DXVA2_Fixed32_0 {}
unsafe impl ::windows::runtime::Abi for DXVA2_Fixed32_0 {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVA2_Fixed32_0_0 {
    pub Fraction: u16,
    pub Value: i16,
}
impl DXVA2_Fixed32_0_0 {}
impl ::core::default::Default for DXVA2_Fixed32_0_0 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for DXVA2_Fixed32_0_0 {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("_Anonymous_e__Struct").field("Fraction", &self.Fraction).field("Value", &self.Value).finish()
    }
}
impl ::core::cmp::PartialEq for DXVA2_Fixed32_0_0 {
    fn eq(&self, other: &Self) -> bool {
        self.Fraction == other.Fraction && self.Value == other.Value
    }
}
impl ::core::cmp::Eq for DXVA2_Fixed32_0_0 {}
unsafe impl ::windows::runtime::Abi for DXVA2_Fixed32_0_0 {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVA2_Frequency {
    pub Numerator: u32,
    pub Denominator: u32,
}
impl DXVA2_Frequency {}
impl ::core::default::Default for DXVA2_Frequency {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for DXVA2_Frequency {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVA2_Frequency").field("Numerator", &self.Numerator).field("Denominator", &self.Denominator).finish()
    }
}
impl ::core::cmp::PartialEq for DXVA2_Frequency {
    fn eq(&self, other: &Self) -> bool {
        self.Numerator == other.Numerator && self.Denominator == other.Denominator
    }
}
impl ::core::cmp::Eq for DXVA2_Frequency {}
unsafe impl ::windows::runtime::Abi for DXVA2_Frequency {
    type Abi = Self;
}
pub const DXVA2_ModeH264_A: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(461487716, 41159, 4563, [185, 132, 0, 192, 79, 46, 115, 197]);
pub const DXVA2_ModeH264_B: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(461487717, 41159, 4563, [185, 132, 0, 192, 79, 46, 115, 197]);
pub const DXVA2_ModeH264_C: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(461487718, 41159, 4563, [185, 132, 0, 192, 79, 46, 115, 197]);
pub const DXVA2_ModeH264_D: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(461487719, 41159, 4563, [185, 132, 0, 192, 79, 46, 115, 197]);
pub const DXVA2_ModeH264_E: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(461487720, 41159, 4563, [185, 132, 0, 192, 79, 46, 115, 197]);
pub const DXVA2_ModeH264_F: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(461487721, 41159, 4563, [185, 132, 0, 192, 79, 46, 115, 197]);
pub const DXVA2_ModeH264_VLD_Multiview_NoFGT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1885052290, 30415, 18902, [183, 230, 172, 136, 114, 219, 1, 60]);
pub const DXVA2_ModeH264_VLD_Stereo_NoFGT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4188720315, 49846, 19708, [135, 121, 87, 7, 177, 118, 5, 82]);
pub const DXVA2_ModeH264_VLD_Stereo_Progressive_NoFGT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3617319130, 3313, 19585, [184, 42, 105, 164, 226, 54, 244, 61]);
pub const DXVA2_ModeH264_VLD_WithFMOASO_NoFGT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3589296121, 13336, 17880, [149, 97, 50, 167, 106, 174, 45, 221]);
pub const DXVA2_ModeHEVC_VLD_Main: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1527895323, 12108, 17490, [188, 195, 9, 242, 161, 22, 12, 192]);
pub const DXVA2_ModeHEVC_VLD_Main10: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(276492512, 61210, 19737, [171, 168, 103, 161, 99, 7, 61, 19]);
pub const DXVA2_ModeMPEG1_VLD: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1866385177, 14133, 17100, [128, 99, 101, 204, 60, 179, 102, 22]);
pub const DXVA2_ModeMPEG2_IDCT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3206720768, 1002, 18064, [128, 119, 71, 51, 70, 32, 155, 126]);
pub const DXVA2_ModeMPEG2_MoComp: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3869897803, 25008, 17763, [158, 164, 99, 210, 163, 198, 254, 102]);
pub const DXVA2_ModeMPEG2_VLD: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3995550079, 24104, 20069, [190, 234, 29, 38, 181, 8, 173, 201]);
pub const DXVA2_ModeMPEG2and1_VLD: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2255052562, 13326, 20228, [159, 211, 146, 83, 221, 50, 116, 96]);
pub const DXVA2_ModeMPEG4pt2_VLD_AdvSimple_GMC: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2878966619, 16984, 17577, [159, 235, 148, 229, 151, 166, 186, 174]);
pub const DXVA2_ModeMPEG4pt2_VLD_AdvSimple_NoGMC: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3980495519, 269, 20186, [154, 227, 154, 101, 53, 141, 141, 46]);
pub const DXVA2_ModeMPEG4pt2_VLD_Simple: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4023799156, 51688, 16855, [165, 233, 233, 176, 227, 159, 163, 25]);
pub const DXVA2_ModeVC1_A: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(461487776, 41159, 4563, [185, 132, 0, 192, 79, 46, 115, 197]);
pub const DXVA2_ModeVC1_B: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(461487777, 41159, 4563, [185, 132, 0, 192, 79, 46, 115, 197]);
pub const DXVA2_ModeVC1_C: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(461487778, 41159, 4563, [185, 132, 0, 192, 79, 46, 115, 197]);
pub const DXVA2_ModeVC1_D: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(461487779, 41159, 4563, [185, 132, 0, 192, 79, 46, 115, 197]);
pub const DXVA2_ModeVC1_D2010: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(461487780, 41159, 4563, [185, 132, 0, 192, 79, 46, 115, 197]);
pub const DXVA2_ModeVP8_VLD: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2428017130, 14946, 18181, [136, 179, 141, 240, 75, 39, 68, 231]);
pub const DXVA2_ModeVP9_VLD_10bit_Profile2: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2764524015, 28367, 18602, [132, 72, 80, 167, 161, 22, 95, 247]);
pub const DXVA2_ModeVP9_VLD_Profile0: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1178011640, 41424, 17797, [135, 109, 131, 170, 109, 96, 184, 158]);
pub const DXVA2_ModeWMV8_A: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(461487744, 41159, 4563, [185, 132, 0, 192, 79, 46, 115, 197]);
pub const DXVA2_ModeWMV8_B: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(461487745, 41159, 4563, [185, 132, 0, 192, 79, 46, 115, 197]);
pub const DXVA2_ModeWMV9_A: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(461487760, 41159, 4563, [185, 132, 0, 192, 79, 46, 115, 197]);
pub const DXVA2_ModeWMV9_B: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(461487761, 41159, 4563, [185, 132, 0, 192, 79, 46, 115, 197]);
pub const DXVA2_ModeWMV9_C: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(461487764, 41159, 4563, [185, 132, 0, 192, 79, 46, 115, 197]);
pub const DXVA2_NoEncrypt: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(461487824, 41159, 4563, [185, 132, 0, 192, 79, 46, 115, 197]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVA2_NoiseFilterTech(pub i32);
pub const DXVA2_NoiseFilterTech_Unsupported: DXVA2_NoiseFilterTech = DXVA2_NoiseFilterTech(0i32);
pub const DXVA2_NoiseFilterTech_Unknown: DXVA2_NoiseFilterTech = DXVA2_NoiseFilterTech(1i32);
pub const DXVA2_NoiseFilterTech_Median: DXVA2_NoiseFilterTech = DXVA2_NoiseFilterTech(2i32);
pub const DXVA2_NoiseFilterTech_Temporal: DXVA2_NoiseFilterTech = DXVA2_NoiseFilterTech(4i32);
pub const DXVA2_NoiseFilterTech_BlockNoise: DXVA2_NoiseFilterTech = DXVA2_NoiseFilterTech(8i32);
pub const DXVA2_NoiseFilterTech_MosquitoNoise: DXVA2_NoiseFilterTech = DXVA2_NoiseFilterTech(16i32);
pub const DXVA2_NoiseFilterTech_Mask: DXVA2_NoiseFilterTech = DXVA2_NoiseFilterTech(31i32);
impl ::core::convert::From<i32> for DXVA2_NoiseFilterTech {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVA2_NoiseFilterTech {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVA2_NominalRange(pub i32);
pub const DXVA2_NominalRangeMask: DXVA2_NominalRange = DXVA2_NominalRange(7i32);
pub const DXVA2_NominalRange_Unknown: DXVA2_NominalRange = DXVA2_NominalRange(0i32);
pub const DXVA2_NominalRange_Normal: DXVA2_NominalRange = DXVA2_NominalRange(1i32);
pub const DXVA2_NominalRange_Wide: DXVA2_NominalRange = DXVA2_NominalRange(2i32);
pub const DXVA2_NominalRange_0_255: DXVA2_NominalRange = DXVA2_NominalRange(1i32);
pub const DXVA2_NominalRange_16_235: DXVA2_NominalRange = DXVA2_NominalRange(2i32);
pub const DXVA2_NominalRange_48_208: DXVA2_NominalRange = DXVA2_NominalRange(3i32);
impl ::core::convert::From<i32> for DXVA2_NominalRange {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVA2_NominalRange {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVA2_ProcAmp(pub i32);
pub const DXVA2_ProcAmp_None: DXVA2_ProcAmp = DXVA2_ProcAmp(0i32);
pub const DXVA2_ProcAmp_Brightness: DXVA2_ProcAmp = DXVA2_ProcAmp(1i32);
pub const DXVA2_ProcAmp_Contrast: DXVA2_ProcAmp = DXVA2_ProcAmp(2i32);
pub const DXVA2_ProcAmp_Hue: DXVA2_ProcAmp = DXVA2_ProcAmp(4i32);
pub const DXVA2_ProcAmp_Saturation: DXVA2_ProcAmp = DXVA2_ProcAmp(8i32);
pub const DXVA2_ProcAmp_Mask: DXVA2_ProcAmp = DXVA2_ProcAmp(15i32);
impl ::core::convert::From<i32> for DXVA2_ProcAmp {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVA2_ProcAmp {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVA2_ProcAmpValues {
    pub Brightness: DXVA2_Fixed32,
    pub Contrast: DXVA2_Fixed32,
    pub Hue: DXVA2_Fixed32,
    pub Saturation: DXVA2_Fixed32,
}
impl DXVA2_ProcAmpValues {}
impl ::core::default::Default for DXVA2_ProcAmpValues {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for DXVA2_ProcAmpValues {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for DXVA2_ProcAmpValues {}
unsafe impl ::windows::runtime::Abi for DXVA2_ProcAmpValues {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVA2_SampleData(pub i32);
pub const DXVA2_SampleData_RFF: DXVA2_SampleData = DXVA2_SampleData(1i32);
pub const DXVA2_SampleData_TFF: DXVA2_SampleData = DXVA2_SampleData(2i32);
pub const DXVA2_SampleData_RFF_TFF_Present: DXVA2_SampleData = DXVA2_SampleData(4i32);
pub const DXVA2_SampleData_Mask: DXVA2_SampleData = DXVA2_SampleData(65535i32);
impl ::core::convert::From<i32> for DXVA2_SampleData {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVA2_SampleData {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVA2_SampleFormat(pub i32);
pub const DXVA2_SampleFormatMask: DXVA2_SampleFormat = DXVA2_SampleFormat(255i32);
pub const DXVA2_SampleUnknown: DXVA2_SampleFormat = DXVA2_SampleFormat(0i32);
pub const DXVA2_SampleProgressiveFrame: DXVA2_SampleFormat = DXVA2_SampleFormat(2i32);
pub const DXVA2_SampleFieldInterleavedEvenFirst: DXVA2_SampleFormat = DXVA2_SampleFormat(3i32);
pub const DXVA2_SampleFieldInterleavedOddFirst: DXVA2_SampleFormat = DXVA2_SampleFormat(4i32);
pub const DXVA2_SampleFieldSingleEven: DXVA2_SampleFormat = DXVA2_SampleFormat(5i32);
pub const DXVA2_SampleFieldSingleOdd: DXVA2_SampleFormat = DXVA2_SampleFormat(6i32);
pub const DXVA2_SampleSubStream: DXVA2_SampleFormat = DXVA2_SampleFormat(7i32);
impl ::core::convert::From<i32> for DXVA2_SampleFormat {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVA2_SampleFormat {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVA2_SurfaceType(pub i32);
pub const DXVA2_SurfaceType_DecoderRenderTarget: DXVA2_SurfaceType = DXVA2_SurfaceType(0i32);
pub const DXVA2_SurfaceType_ProcessorRenderTarget: DXVA2_SurfaceType = DXVA2_SurfaceType(1i32);
pub const DXVA2_SurfaceType_D3DRenderTargetTexture: DXVA2_SurfaceType = DXVA2_SurfaceType(2i32);
impl ::core::convert::From<i32> for DXVA2_SurfaceType {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVA2_SurfaceType {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVA2_VPDev(pub i32);
pub const DXVA2_VPDev_HardwareDevice: DXVA2_VPDev = DXVA2_VPDev(1i32);
pub const DXVA2_VPDev_EmulatedDXVA1: DXVA2_VPDev = DXVA2_VPDev(2i32);
pub const DXVA2_VPDev_SoftwareDevice: DXVA2_VPDev = DXVA2_VPDev(4i32);
pub const DXVA2_VPDev_Mask: DXVA2_VPDev = DXVA2_VPDev(7i32);
impl ::core::convert::From<i32> for DXVA2_VPDev {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVA2_VPDev {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVA2_ValueRange {
    pub MinValue: DXVA2_Fixed32,
    pub MaxValue: DXVA2_Fixed32,
    pub DefaultValue: DXVA2_Fixed32,
    pub StepSize: DXVA2_Fixed32,
}
impl DXVA2_ValueRange {}
impl ::core::default::Default for DXVA2_ValueRange {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for DXVA2_ValueRange {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for DXVA2_ValueRange {}
unsafe impl ::windows::runtime::Abi for DXVA2_ValueRange {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVA2_VideoChromaSubSampling(pub i32);
pub const DXVA2_VideoChromaSubsamplingMask: DXVA2_VideoChromaSubSampling = DXVA2_VideoChromaSubSampling(15i32);
pub const DXVA2_VideoChromaSubsampling_Unknown: DXVA2_VideoChromaSubSampling = DXVA2_VideoChromaSubSampling(0i32);
pub const DXVA2_VideoChromaSubsampling_ProgressiveChroma: DXVA2_VideoChromaSubSampling = DXVA2_VideoChromaSubSampling(8i32);
pub const DXVA2_VideoChromaSubsampling_Horizontally_Cosited: DXVA2_VideoChromaSubSampling = DXVA2_VideoChromaSubSampling(4i32);
pub const DXVA2_VideoChromaSubsampling_Vertically_Cosited: DXVA2_VideoChromaSubSampling = DXVA2_VideoChromaSubSampling(2i32);
pub const DXVA2_VideoChromaSubsampling_Vertically_AlignedChromaPlanes: DXVA2_VideoChromaSubSampling = DXVA2_VideoChromaSubSampling(1i32);
pub const DXVA2_VideoChromaSubsampling_MPEG2: DXVA2_VideoChromaSubSampling = DXVA2_VideoChromaSubSampling(5i32);
pub const DXVA2_VideoChromaSubsampling_MPEG1: DXVA2_VideoChromaSubSampling = DXVA2_VideoChromaSubSampling(1i32);
pub const DXVA2_VideoChromaSubsampling_DV_PAL: DXVA2_VideoChromaSubSampling = DXVA2_VideoChromaSubSampling(6i32);
pub const DXVA2_VideoChromaSubsampling_Cosited: DXVA2_VideoChromaSubSampling = DXVA2_VideoChromaSubSampling(7i32);
impl ::core::convert::From<i32> for DXVA2_VideoChromaSubSampling {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVA2_VideoChromaSubSampling {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Direct3D9")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
pub struct DXVA2_VideoDesc {
    pub SampleWidth: u32,
    pub SampleHeight: u32,
    pub SampleFormat: DXVA2_ExtendedFormat,
    pub Format: super::super::Graphics::Direct3D9::D3DFORMAT,
    pub InputSampleFreq: DXVA2_Frequency,
    pub OutputFrameFreq: DXVA2_Frequency,
    pub UABProtectionLevel: u32,
    pub Reserved: u32,
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl DXVA2_VideoDesc {}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::default::Default for DXVA2_VideoDesc {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::cmp::PartialEq for DXVA2_VideoDesc {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::cmp::Eq for DXVA2_VideoDesc {}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
unsafe impl ::windows::runtime::Abi for DXVA2_VideoDesc {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVA2_VideoLighting(pub i32);
pub const DXVA2_VideoLightingMask: DXVA2_VideoLighting = DXVA2_VideoLighting(15i32);
pub const DXVA2_VideoLighting_Unknown: DXVA2_VideoLighting = DXVA2_VideoLighting(0i32);
pub const DXVA2_VideoLighting_bright: DXVA2_VideoLighting = DXVA2_VideoLighting(1i32);
pub const DXVA2_VideoLighting_office: DXVA2_VideoLighting = DXVA2_VideoLighting(2i32);
pub const DXVA2_VideoLighting_dim: DXVA2_VideoLighting = DXVA2_VideoLighting(3i32);
pub const DXVA2_VideoLighting_dark: DXVA2_VideoLighting = DXVA2_VideoLighting(4i32);
impl ::core::convert::From<i32> for DXVA2_VideoLighting {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVA2_VideoLighting {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVA2_VideoPrimaries(pub i32);
pub const DXVA2_VideoPrimariesMask: DXVA2_VideoPrimaries = DXVA2_VideoPrimaries(31i32);
pub const DXVA2_VideoPrimaries_Unknown: DXVA2_VideoPrimaries = DXVA2_VideoPrimaries(0i32);
pub const DXVA2_VideoPrimaries_reserved: DXVA2_VideoPrimaries = DXVA2_VideoPrimaries(1i32);
pub const DXVA2_VideoPrimaries_BT709: DXVA2_VideoPrimaries = DXVA2_VideoPrimaries(2i32);
pub const DXVA2_VideoPrimaries_BT470_2_SysM: DXVA2_VideoPrimaries = DXVA2_VideoPrimaries(3i32);
pub const DXVA2_VideoPrimaries_BT470_2_SysBG: DXVA2_VideoPrimaries = DXVA2_VideoPrimaries(4i32);
pub const DXVA2_VideoPrimaries_SMPTE170M: DXVA2_VideoPrimaries = DXVA2_VideoPrimaries(5i32);
pub const DXVA2_VideoPrimaries_SMPTE240M: DXVA2_VideoPrimaries = DXVA2_VideoPrimaries(6i32);
pub const DXVA2_VideoPrimaries_EBU3213: DXVA2_VideoPrimaries = DXVA2_VideoPrimaries(7i32);
pub const DXVA2_VideoPrimaries_SMPTE_C: DXVA2_VideoPrimaries = DXVA2_VideoPrimaries(8i32);
impl ::core::convert::From<i32> for DXVA2_VideoPrimaries {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVA2_VideoPrimaries {
    type Abi = Self;
}
pub const DXVA2_VideoProcBobDevice: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(861578094, 30852, 17316, [156, 145, 127, 135, 250, 243, 227, 126]);
pub const DXVA2_VideoProcProgressiveDevice: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1515495625, 51180, 19417, [142, 222, 243, 199, 93, 196, 57, 59]);
pub const DXVA2_VideoProcSoftwareDevice: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1163121791, 61054, 20031, [148, 117, 219, 241, 55, 108, 72, 16]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVA2_VideoProcess(pub i32);
pub const DXVA2_VideoProcess_None: DXVA2_VideoProcess = DXVA2_VideoProcess(0i32);
pub const DXVA2_VideoProcess_YUV2RGB: DXVA2_VideoProcess = DXVA2_VideoProcess(1i32);
pub const DXVA2_VideoProcess_StretchX: DXVA2_VideoProcess = DXVA2_VideoProcess(2i32);
pub const DXVA2_VideoProcess_StretchY: DXVA2_VideoProcess = DXVA2_VideoProcess(4i32);
pub const DXVA2_VideoProcess_AlphaBlend: DXVA2_VideoProcess = DXVA2_VideoProcess(8i32);
pub const DXVA2_VideoProcess_SubRects: DXVA2_VideoProcess = DXVA2_VideoProcess(16i32);
pub const DXVA2_VideoProcess_SubStreams: DXVA2_VideoProcess = DXVA2_VideoProcess(32i32);
pub const DXVA2_VideoProcess_SubStreamsExtended: DXVA2_VideoProcess = DXVA2_VideoProcess(64i32);
pub const DXVA2_VideoProcess_YUV2RGBExtended: DXVA2_VideoProcess = DXVA2_VideoProcess(128i32);
pub const DXVA2_VideoProcess_AlphaBlendExtended: DXVA2_VideoProcess = DXVA2_VideoProcess(256i32);
pub const DXVA2_VideoProcess_Constriction: DXVA2_VideoProcess = DXVA2_VideoProcess(512i32);
pub const DXVA2_VideoProcess_NoiseFilter: DXVA2_VideoProcess = DXVA2_VideoProcess(1024i32);
pub const DXVA2_VideoProcess_DetailFilter: DXVA2_VideoProcess = DXVA2_VideoProcess(2048i32);
pub const DXVA2_VideoProcess_PlanarAlpha: DXVA2_VideoProcess = DXVA2_VideoProcess(4096i32);
pub const DXVA2_VideoProcess_LinearScaling: DXVA2_VideoProcess = DXVA2_VideoProcess(8192i32);
pub const DXVA2_VideoProcess_GammaCompensated: DXVA2_VideoProcess = DXVA2_VideoProcess(16384i32);
pub const DXVA2_VideoProcess_MaintainsOriginalFieldData: DXVA2_VideoProcess = DXVA2_VideoProcess(32768i32);
pub const DXVA2_VideoProcess_Mask: DXVA2_VideoProcess = DXVA2_VideoProcess(65535i32);
impl ::core::convert::From<i32> for DXVA2_VideoProcess {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVA2_VideoProcess {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct DXVA2_VideoProcessBltParams {
    pub TargetFrame: i64,
    pub TargetRect: super::super::Foundation::RECT,
    pub ConstrictionSize: super::super::Foundation::SIZE,
    pub StreamingFlags: u32,
    pub BackgroundColor: DXVA2_AYUVSample16,
    pub DestFormat: DXVA2_ExtendedFormat,
    pub ProcAmpValues: DXVA2_ProcAmpValues,
    pub Alpha: DXVA2_Fixed32,
    pub NoiseFilterLuma: DXVA2_FilterValues,
    pub NoiseFilterChroma: DXVA2_FilterValues,
    pub DetailFilterLuma: DXVA2_FilterValues,
    pub DetailFilterChroma: DXVA2_FilterValues,
    pub DestData: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl DXVA2_VideoProcessBltParams {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for DXVA2_VideoProcessBltParams {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for DXVA2_VideoProcessBltParams {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for DXVA2_VideoProcessBltParams {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DXVA2_VideoProcessBltParams {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Direct3D9")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
pub struct DXVA2_VideoProcessorCaps {
    pub DeviceCaps: u32,
    pub InputPool: super::super::Graphics::Direct3D9::D3DPOOL,
    pub NumForwardRefSamples: u32,
    pub NumBackwardRefSamples: u32,
    pub Reserved: u32,
    pub DeinterlaceTechnology: u32,
    pub ProcAmpControlCaps: u32,
    pub VideoProcessorOperations: u32,
    pub NoiseFilterTechnology: u32,
    pub DetailFilterTechnology: u32,
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl DXVA2_VideoProcessorCaps {}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::default::Default for DXVA2_VideoProcessorCaps {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::fmt::Debug for DXVA2_VideoProcessorCaps {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVA2_VideoProcessorCaps")
            .field("DeviceCaps", &self.DeviceCaps)
            .field("InputPool", &self.InputPool)
            .field("NumForwardRefSamples", &self.NumForwardRefSamples)
            .field("NumBackwardRefSamples", &self.NumBackwardRefSamples)
            .field("Reserved", &self.Reserved)
            .field("DeinterlaceTechnology", &self.DeinterlaceTechnology)
            .field("ProcAmpControlCaps", &self.ProcAmpControlCaps)
            .field("VideoProcessorOperations", &self.VideoProcessorOperations)
            .field("NoiseFilterTechnology", &self.NoiseFilterTechnology)
            .field("DetailFilterTechnology", &self.DetailFilterTechnology)
            .finish()
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::cmp::PartialEq for DXVA2_VideoProcessorCaps {
    fn eq(&self, other: &Self) -> bool {
        self.DeviceCaps == other.DeviceCaps
            && self.InputPool == other.InputPool
            && self.NumForwardRefSamples == other.NumForwardRefSamples
            && self.NumBackwardRefSamples == other.NumBackwardRefSamples
            && self.Reserved == other.Reserved
            && self.DeinterlaceTechnology == other.DeinterlaceTechnology
            && self.ProcAmpControlCaps == other.ProcAmpControlCaps
            && self.VideoProcessorOperations == other.VideoProcessorOperations
            && self.NoiseFilterTechnology == other.NoiseFilterTechnology
            && self.DetailFilterTechnology == other.DetailFilterTechnology
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::cmp::Eq for DXVA2_VideoProcessorCaps {}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
unsafe impl ::windows::runtime::Abi for DXVA2_VideoProcessorCaps {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVA2_VideoRenderTargetType(pub i32);
pub const DXVA2_VideoDecoderRenderTarget: DXVA2_VideoRenderTargetType = DXVA2_VideoRenderTargetType(0i32);
pub const DXVA2_VideoProcessorRenderTarget: DXVA2_VideoRenderTargetType = DXVA2_VideoRenderTargetType(1i32);
pub const DXVA2_VideoSoftwareRenderTarget: DXVA2_VideoRenderTargetType = DXVA2_VideoRenderTargetType(2i32);
impl ::core::convert::From<i32> for DXVA2_VideoRenderTargetType {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVA2_VideoRenderTargetType {
    type Abi = Self;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl ::core::clone::Clone for DXVA2_VideoSample {
    fn clone(&self) -> Self {
        unimplemented!()
    }
}
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D9`*"]
pub struct DXVA2_VideoSample {
    pub Start: i64,
    pub End: i64,
    pub SampleFormat: DXVA2_ExtendedFormat,
    pub SrcSurface: ::core::option::Option<super::super::Graphics::Direct3D9::IDirect3DSurface9>,
    pub SrcRect: super::super::Foundation::RECT,
    pub DstRect: super::super::Foundation::RECT,
    pub Pal: [DXVA2_AYUVSample8; 16],
    pub PlanarAlpha: DXVA2_Fixed32,
    pub SampleData: u32,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl DXVA2_VideoSample {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl ::core::default::Default for DXVA2_VideoSample {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl ::core::cmp::PartialEq for DXVA2_VideoSample {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl ::core::cmp::Eq for DXVA2_VideoSample {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
unsafe impl ::windows::runtime::Abi for DXVA2_VideoSample {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVA2_VideoTransferFunction(pub i32);
pub const DXVA2_VideoTransFuncMask: DXVA2_VideoTransferFunction = DXVA2_VideoTransferFunction(31i32);
pub const DXVA2_VideoTransFunc_Unknown: DXVA2_VideoTransferFunction = DXVA2_VideoTransferFunction(0i32);
pub const DXVA2_VideoTransFunc_10: DXVA2_VideoTransferFunction = DXVA2_VideoTransferFunction(1i32);
pub const DXVA2_VideoTransFunc_18: DXVA2_VideoTransferFunction = DXVA2_VideoTransferFunction(2i32);
pub const DXVA2_VideoTransFunc_20: DXVA2_VideoTransferFunction = DXVA2_VideoTransferFunction(3i32);
pub const DXVA2_VideoTransFunc_22: DXVA2_VideoTransferFunction = DXVA2_VideoTransferFunction(4i32);
pub const DXVA2_VideoTransFunc_709: DXVA2_VideoTransferFunction = DXVA2_VideoTransferFunction(5i32);
pub const DXVA2_VideoTransFunc_240M: DXVA2_VideoTransferFunction = DXVA2_VideoTransferFunction(6i32);
pub const DXVA2_VideoTransFunc_sRGB: DXVA2_VideoTransferFunction = DXVA2_VideoTransferFunction(7i32);
pub const DXVA2_VideoTransFunc_28: DXVA2_VideoTransferFunction = DXVA2_VideoTransferFunction(8i32);
impl ::core::convert::From<i32> for DXVA2_VideoTransferFunction {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVA2_VideoTransferFunction {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVA2_VideoTransferMatrix(pub i32);
pub const DXVA2_VideoTransferMatrixMask: DXVA2_VideoTransferMatrix = DXVA2_VideoTransferMatrix(7i32);
pub const DXVA2_VideoTransferMatrix_Unknown: DXVA2_VideoTransferMatrix = DXVA2_VideoTransferMatrix(0i32);
pub const DXVA2_VideoTransferMatrix_BT709: DXVA2_VideoTransferMatrix = DXVA2_VideoTransferMatrix(1i32);
pub const DXVA2_VideoTransferMatrix_BT601: DXVA2_VideoTransferMatrix = DXVA2_VideoTransferMatrix(2i32);
pub const DXVA2_VideoTransferMatrix_SMPTE240M: DXVA2_VideoTransferMatrix = DXVA2_VideoTransferMatrix(3i32);
impl ::core::convert::From<i32> for DXVA2_VideoTransferMatrix {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVA2_VideoTransferMatrix {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVABufferInfo {
    pub pCompSurface: *mut ::core::ffi::c_void,
    pub DataOffset: u32,
    pub DataSize: u32,
}
impl DXVABufferInfo {}
impl ::core::default::Default for DXVABufferInfo {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for DXVABufferInfo {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVABufferInfo").field("pCompSurface", &self.pCompSurface).field("DataOffset", &self.DataOffset).field("DataSize", &self.DataSize).finish()
    }
}
impl ::core::cmp::PartialEq for DXVABufferInfo {
    fn eq(&self, other: &Self) -> bool {
        self.pCompSurface == other.pCompSurface && self.DataOffset == other.DataOffset && self.DataSize == other.DataSize
    }
}
impl ::core::cmp::Eq for DXVABufferInfo {}
unsafe impl ::windows::runtime::Abi for DXVABufferInfo {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Direct3D9")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
pub struct DXVACompBufferInfo {
    pub NumCompBuffers: u32,
    pub WidthToCreate: u32,
    pub HeightToCreate: u32,
    pub BytesToAllocate: u32,
    pub Usage: u32,
    pub Pool: super::super::Graphics::Direct3D9::D3DPOOL,
    pub Format: super::super::Graphics::Direct3D9::D3DFORMAT,
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl DXVACompBufferInfo {}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::default::Default for DXVACompBufferInfo {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::fmt::Debug for DXVACompBufferInfo {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVACompBufferInfo")
            .field("NumCompBuffers", &self.NumCompBuffers)
            .field("WidthToCreate", &self.WidthToCreate)
            .field("HeightToCreate", &self.HeightToCreate)
            .field("BytesToAllocate", &self.BytesToAllocate)
            .field("Usage", &self.Usage)
            .field("Pool", &self.Pool)
            .field("Format", &self.Format)
            .finish()
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::cmp::PartialEq for DXVACompBufferInfo {
    fn eq(&self, other: &Self) -> bool {
        self.NumCompBuffers == other.NumCompBuffers && self.WidthToCreate == other.WidthToCreate && self.HeightToCreate == other.HeightToCreate && self.BytesToAllocate == other.BytesToAllocate && self.Usage == other.Usage && self.Pool == other.Pool && self.Format == other.Format
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::cmp::Eq for DXVACompBufferInfo {}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
unsafe impl ::windows::runtime::Abi for DXVACompBufferInfo {
    type Abi = Self;
}
pub const DXVAHDControlGuid: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2688052853, 63244, 17996, [169, 206, 51, 196, 78, 9, 22, 35]);
pub const DXVAHDETWGUID_CREATEVIDEOPROCESSOR: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1746812190, 22132, 20403, [165, 3, 47, 32, 85, 233, 31, 96]);
pub const DXVAHDETWGUID_DESTROYVIDEOPROCESSOR: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4181979296, 16150, 17376, [128, 147, 16, 90, 152, 106, 165, 241]);
pub const DXVAHDETWGUID_VIDEOPROCESSBLTHD: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3203650613, 30919, 19939, [151, 7, 205, 27, 8, 59, 22, 10]);
pub const DXVAHDETWGUID_VIDEOPROCESSBLTHD_STREAM: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(665732926, 42492, 19429, [180, 227, 242, 73, 148, 211, 196, 149]);
pub const DXVAHDETWGUID_VIDEOPROCESSBLTSTATE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1992903514, 6463, 18066, [148, 132, 164, 217, 153, 218, 129, 168]);
pub const DXVAHDETWGUID_VIDEOPROCESSSTREAMSTATE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(640420610, 8349, 18413, [148, 216, 130, 174, 2, 184, 74, 167]);
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVAHDETW_CREATEVIDEOPROCESSOR {
    pub pObject: u64,
    pub pD3D9Ex: u64,
    pub VPGuid: ::windows::runtime::GUID,
}
impl DXVAHDETW_CREATEVIDEOPROCESSOR {}
impl ::core::default::Default for DXVAHDETW_CREATEVIDEOPROCESSOR {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for DXVAHDETW_CREATEVIDEOPROCESSOR {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVAHDETW_CREATEVIDEOPROCESSOR").field("pObject", &self.pObject).field("pD3D9Ex", &self.pD3D9Ex).field("VPGuid", &self.VPGuid).finish()
    }
}
impl ::core::cmp::PartialEq for DXVAHDETW_CREATEVIDEOPROCESSOR {
    fn eq(&self, other: &Self) -> bool {
        self.pObject == other.pObject && self.pD3D9Ex == other.pD3D9Ex && self.VPGuid == other.VPGuid
    }
}
impl ::core::cmp::Eq for DXVAHDETW_CREATEVIDEOPROCESSOR {}
unsafe impl ::windows::runtime::Abi for DXVAHDETW_CREATEVIDEOPROCESSOR {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVAHDETW_DESTROYVIDEOPROCESSOR {
    pub pObject: u64,
}
impl DXVAHDETW_DESTROYVIDEOPROCESSOR {}
impl ::core::default::Default for DXVAHDETW_DESTROYVIDEOPROCESSOR {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for DXVAHDETW_DESTROYVIDEOPROCESSOR {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVAHDETW_DESTROYVIDEOPROCESSOR").field("pObject", &self.pObject).finish()
    }
}
impl ::core::cmp::PartialEq for DXVAHDETW_DESTROYVIDEOPROCESSOR {
    fn eq(&self, other: &Self) -> bool {
        self.pObject == other.pObject
    }
}
impl ::core::cmp::Eq for DXVAHDETW_DESTROYVIDEOPROCESSOR {}
unsafe impl ::windows::runtime::Abi for DXVAHDETW_DESTROYVIDEOPROCESSOR {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D9`*"]
pub struct DXVAHDETW_VIDEOPROCESSBLTHD {
    pub pObject: u64,
    pub pOutputSurface: u64,
    pub TargetRect: super::super::Foundation::RECT,
    pub OutputFormat: super::super::Graphics::Direct3D9::D3DFORMAT,
    pub ColorSpace: u32,
    pub OutputFrame: u32,
    pub StreamCount: u32,
    pub Enter: super::super::Foundation::BOOL,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl DXVAHDETW_VIDEOPROCESSBLTHD {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl ::core::default::Default for DXVAHDETW_VIDEOPROCESSBLTHD {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl ::core::fmt::Debug for DXVAHDETW_VIDEOPROCESSBLTHD {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVAHDETW_VIDEOPROCESSBLTHD")
            .field("pObject", &self.pObject)
            .field("pOutputSurface", &self.pOutputSurface)
            .field("TargetRect", &self.TargetRect)
            .field("OutputFormat", &self.OutputFormat)
            .field("ColorSpace", &self.ColorSpace)
            .field("OutputFrame", &self.OutputFrame)
            .field("StreamCount", &self.StreamCount)
            .field("Enter", &self.Enter)
            .finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl ::core::cmp::PartialEq for DXVAHDETW_VIDEOPROCESSBLTHD {
    fn eq(&self, other: &Self) -> bool {
        self.pObject == other.pObject && self.pOutputSurface == other.pOutputSurface && self.TargetRect == other.TargetRect && self.OutputFormat == other.OutputFormat && self.ColorSpace == other.ColorSpace && self.OutputFrame == other.OutputFrame && self.StreamCount == other.StreamCount && self.Enter == other.Enter
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl ::core::cmp::Eq for DXVAHDETW_VIDEOPROCESSBLTHD {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
unsafe impl ::windows::runtime::Abi for DXVAHDETW_VIDEOPROCESSBLTHD {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D9`*"]
pub struct DXVAHDETW_VIDEOPROCESSBLTHD_STREAM {
    pub pObject: u64,
    pub pInputSurface: u64,
    pub SourceRect: super::super::Foundation::RECT,
    pub DestinationRect: super::super::Foundation::RECT,
    pub InputFormat: super::super::Graphics::Direct3D9::D3DFORMAT,
    pub FrameFormat: DXVAHD_FRAME_FORMAT,
    pub ColorSpace: u32,
    pub StreamNumber: u32,
    pub OutputIndex: u32,
    pub InputFrameOrField: u32,
    pub PastFrames: u32,
    pub FutureFrames: u32,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl DXVAHDETW_VIDEOPROCESSBLTHD_STREAM {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl ::core::default::Default for DXVAHDETW_VIDEOPROCESSBLTHD_STREAM {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl ::core::fmt::Debug for DXVAHDETW_VIDEOPROCESSBLTHD_STREAM {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVAHDETW_VIDEOPROCESSBLTHD_STREAM")
            .field("pObject", &self.pObject)
            .field("pInputSurface", &self.pInputSurface)
            .field("SourceRect", &self.SourceRect)
            .field("DestinationRect", &self.DestinationRect)
            .field("InputFormat", &self.InputFormat)
            .field("FrameFormat", &self.FrameFormat)
            .field("ColorSpace", &self.ColorSpace)
            .field("StreamNumber", &self.StreamNumber)
            .field("OutputIndex", &self.OutputIndex)
            .field("InputFrameOrField", &self.InputFrameOrField)
            .field("PastFrames", &self.PastFrames)
            .field("FutureFrames", &self.FutureFrames)
            .finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl ::core::cmp::PartialEq for DXVAHDETW_VIDEOPROCESSBLTHD_STREAM {
    fn eq(&self, other: &Self) -> bool {
        self.pObject == other.pObject
            && self.pInputSurface == other.pInputSurface
            && self.SourceRect == other.SourceRect
            && self.DestinationRect == other.DestinationRect
            && self.InputFormat == other.InputFormat
            && self.FrameFormat == other.FrameFormat
            && self.ColorSpace == other.ColorSpace
            && self.StreamNumber == other.StreamNumber
            && self.OutputIndex == other.OutputIndex
            && self.InputFrameOrField == other.InputFrameOrField
            && self.PastFrames == other.PastFrames
            && self.FutureFrames == other.FutureFrames
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl ::core::cmp::Eq for DXVAHDETW_VIDEOPROCESSBLTHD_STREAM {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
unsafe impl ::windows::runtime::Abi for DXVAHDETW_VIDEOPROCESSBLTHD_STREAM {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct DXVAHDETW_VIDEOPROCESSBLTSTATE {
    pub pObject: u64,
    pub State: DXVAHD_BLT_STATE,
    pub DataSize: u32,
    pub SetState: super::super::Foundation::BOOL,
}
#[cfg(feature = "Win32_Foundation")]
impl DXVAHDETW_VIDEOPROCESSBLTSTATE {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for DXVAHDETW_VIDEOPROCESSBLTSTATE {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for DXVAHDETW_VIDEOPROCESSBLTSTATE {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVAHDETW_VIDEOPROCESSBLTSTATE").field("pObject", &self.pObject).field("State", &self.State).field("DataSize", &self.DataSize).field("SetState", &self.SetState).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for DXVAHDETW_VIDEOPROCESSBLTSTATE {
    fn eq(&self, other: &Self) -> bool {
        self.pObject == other.pObject && self.State == other.State && self.DataSize == other.DataSize && self.SetState == other.SetState
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for DXVAHDETW_VIDEOPROCESSBLTSTATE {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DXVAHDETW_VIDEOPROCESSBLTSTATE {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct DXVAHDETW_VIDEOPROCESSSTREAMSTATE {
    pub pObject: u64,
    pub StreamNumber: u32,
    pub State: DXVAHD_STREAM_STATE,
    pub DataSize: u32,
    pub SetState: super::super::Foundation::BOOL,
}
#[cfg(feature = "Win32_Foundation")]
impl DXVAHDETW_VIDEOPROCESSSTREAMSTATE {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for DXVAHDETW_VIDEOPROCESSSTREAMSTATE {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for DXVAHDETW_VIDEOPROCESSSTREAMSTATE {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVAHDETW_VIDEOPROCESSSTREAMSTATE").field("pObject", &self.pObject).field("StreamNumber", &self.StreamNumber).field("State", &self.State).field("DataSize", &self.DataSize).field("SetState", &self.SetState).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for DXVAHDETW_VIDEOPROCESSSTREAMSTATE {
    fn eq(&self, other: &Self) -> bool {
        self.pObject == other.pObject && self.StreamNumber == other.StreamNumber && self.State == other.State && self.DataSize == other.DataSize && self.SetState == other.SetState
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for DXVAHDETW_VIDEOPROCESSSTREAMSTATE {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DXVAHDETW_VIDEOPROCESSSTREAMSTATE {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D9`*"]
pub struct DXVAHDSW_CALLBACKS {
    pub CreateDevice: ::core::option::Option<PDXVAHDSW_CreateDevice>,
    pub ProposeVideoPrivateFormat: ::core::option::Option<PDXVAHDSW_ProposeVideoPrivateFormat>,
    pub GetVideoProcessorDeviceCaps: ::core::option::Option<PDXVAHDSW_GetVideoProcessorDeviceCaps>,
    pub GetVideoProcessorOutputFormats: ::core::option::Option<PDXVAHDSW_GetVideoProcessorOutputFormats>,
    pub GetVideoProcessorInputFormats: ::core::option::Option<PDXVAHDSW_GetVideoProcessorInputFormats>,
    pub GetVideoProcessorCaps: ::core::option::Option<PDXVAHDSW_GetVideoProcessorCaps>,
    pub GetVideoProcessorCustomRates: ::core::option::Option<PDXVAHDSW_GetVideoProcessorCustomRates>,
    pub GetVideoProcessorFilterRange: ::core::option::Option<PDXVAHDSW_GetVideoProcessorFilterRange>,
    pub DestroyDevice: ::core::option::Option<PDXVAHDSW_DestroyDevice>,
    pub CreateVideoProcessor: ::core::option::Option<PDXVAHDSW_CreateVideoProcessor>,
    pub SetVideoProcessBltState: ::core::option::Option<PDXVAHDSW_SetVideoProcessBltState>,
    pub GetVideoProcessBltStatePrivate: ::core::option::Option<PDXVAHDSW_GetVideoProcessBltStatePrivate>,
    pub SetVideoProcessStreamState: ::core::option::Option<PDXVAHDSW_SetVideoProcessStreamState>,
    pub GetVideoProcessStreamStatePrivate: ::core::option::Option<PDXVAHDSW_GetVideoProcessStreamStatePrivate>,
    pub VideoProcessBltHD: ::core::option::Option<PDXVAHDSW_VideoProcessBltHD>,
    pub DestroyVideoProcessor: ::core::option::Option<PDXVAHDSW_DestroyVideoProcessor>,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl DXVAHDSW_CALLBACKS {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl ::core::default::Default for DXVAHDSW_CALLBACKS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl ::core::fmt::Debug for DXVAHDSW_CALLBACKS {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVAHDSW_CALLBACKS").finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl ::core::cmp::PartialEq for DXVAHDSW_CALLBACKS {
    fn eq(&self, other: &Self) -> bool {
        self.CreateDevice.map(|f| f as usize) == other.CreateDevice.map(|f| f as usize)
            && self.ProposeVideoPrivateFormat.map(|f| f as usize) == other.ProposeVideoPrivateFormat.map(|f| f as usize)
            && self.GetVideoProcessorDeviceCaps.map(|f| f as usize) == other.GetVideoProcessorDeviceCaps.map(|f| f as usize)
            && self.GetVideoProcessorOutputFormats.map(|f| f as usize) == other.GetVideoProcessorOutputFormats.map(|f| f as usize)
            && self.GetVideoProcessorInputFormats.map(|f| f as usize) == other.GetVideoProcessorInputFormats.map(|f| f as usize)
            && self.GetVideoProcessorCaps.map(|f| f as usize) == other.GetVideoProcessorCaps.map(|f| f as usize)
            && self.GetVideoProcessorCustomRates.map(|f| f as usize) == other.GetVideoProcessorCustomRates.map(|f| f as usize)
            && self.GetVideoProcessorFilterRange.map(|f| f as usize) == other.GetVideoProcessorFilterRange.map(|f| f as usize)
            && self.DestroyDevice.map(|f| f as usize) == other.DestroyDevice.map(|f| f as usize)
            && self.CreateVideoProcessor.map(|f| f as usize) == other.CreateVideoProcessor.map(|f| f as usize)
            && self.SetVideoProcessBltState.map(|f| f as usize) == other.SetVideoProcessBltState.map(|f| f as usize)
            && self.GetVideoProcessBltStatePrivate.map(|f| f as usize) == other.GetVideoProcessBltStatePrivate.map(|f| f as usize)
            && self.SetVideoProcessStreamState.map(|f| f as usize) == other.SetVideoProcessStreamState.map(|f| f as usize)
            && self.GetVideoProcessStreamStatePrivate.map(|f| f as usize) == other.GetVideoProcessStreamStatePrivate.map(|f| f as usize)
            && self.VideoProcessBltHD.map(|f| f as usize) == other.VideoProcessBltHD.map(|f| f as usize)
            && self.DestroyVideoProcessor.map(|f| f as usize) == other.DestroyVideoProcessor.map(|f| f as usize)
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl ::core::cmp::Eq for DXVAHDSW_CALLBACKS {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
unsafe impl ::windows::runtime::Abi for DXVAHDSW_CALLBACKS {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVAHD_ALPHA_FILL_MODE(pub i32);
pub const DXVAHD_ALPHA_FILL_MODE_OPAQUE: DXVAHD_ALPHA_FILL_MODE = DXVAHD_ALPHA_FILL_MODE(0i32);
pub const DXVAHD_ALPHA_FILL_MODE_BACKGROUND: DXVAHD_ALPHA_FILL_MODE = DXVAHD_ALPHA_FILL_MODE(1i32);
pub const DXVAHD_ALPHA_FILL_MODE_DESTINATION: DXVAHD_ALPHA_FILL_MODE = DXVAHD_ALPHA_FILL_MODE(2i32);
pub const DXVAHD_ALPHA_FILL_MODE_SOURCE_STREAM: DXVAHD_ALPHA_FILL_MODE = DXVAHD_ALPHA_FILL_MODE(3i32);
impl ::core::convert::From<i32> for DXVAHD_ALPHA_FILL_MODE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVAHD_ALPHA_FILL_MODE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVAHD_BLT_STATE(pub i32);
pub const DXVAHD_BLT_STATE_TARGET_RECT: DXVAHD_BLT_STATE = DXVAHD_BLT_STATE(0i32);
pub const DXVAHD_BLT_STATE_BACKGROUND_COLOR: DXVAHD_BLT_STATE = DXVAHD_BLT_STATE(1i32);
pub const DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE: DXVAHD_BLT_STATE = DXVAHD_BLT_STATE(2i32);
pub const DXVAHD_BLT_STATE_ALPHA_FILL: DXVAHD_BLT_STATE = DXVAHD_BLT_STATE(3i32);
pub const DXVAHD_BLT_STATE_CONSTRICTION: DXVAHD_BLT_STATE = DXVAHD_BLT_STATE(4i32);
pub const DXVAHD_BLT_STATE_PRIVATE: DXVAHD_BLT_STATE = DXVAHD_BLT_STATE(1000i32);
impl ::core::convert::From<i32> for DXVAHD_BLT_STATE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVAHD_BLT_STATE {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVAHD_BLT_STATE_ALPHA_FILL_DATA {
    pub Mode: DXVAHD_ALPHA_FILL_MODE,
    pub StreamNumber: u32,
}
impl DXVAHD_BLT_STATE_ALPHA_FILL_DATA {}
impl ::core::default::Default for DXVAHD_BLT_STATE_ALPHA_FILL_DATA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for DXVAHD_BLT_STATE_ALPHA_FILL_DATA {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVAHD_BLT_STATE_ALPHA_FILL_DATA").field("Mode", &self.Mode).field("StreamNumber", &self.StreamNumber).finish()
    }
}
impl ::core::cmp::PartialEq for DXVAHD_BLT_STATE_ALPHA_FILL_DATA {
    fn eq(&self, other: &Self) -> bool {
        self.Mode == other.Mode && self.StreamNumber == other.StreamNumber
    }
}
impl ::core::cmp::Eq for DXVAHD_BLT_STATE_ALPHA_FILL_DATA {}
unsafe impl ::windows::runtime::Abi for DXVAHD_BLT_STATE_ALPHA_FILL_DATA {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA {
    pub YCbCr: super::super::Foundation::BOOL,
    pub BackgroundColor: DXVAHD_COLOR,
}
#[cfg(feature = "Win32_Foundation")]
impl DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct DXVAHD_BLT_STATE_CONSTRICTION_DATA {
    pub Enable: super::super::Foundation::BOOL,
    pub Size: super::super::Foundation::SIZE,
}
#[cfg(feature = "Win32_Foundation")]
impl DXVAHD_BLT_STATE_CONSTRICTION_DATA {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for DXVAHD_BLT_STATE_CONSTRICTION_DATA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for DXVAHD_BLT_STATE_CONSTRICTION_DATA {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVAHD_BLT_STATE_CONSTRICTION_DATA").field("Enable", &self.Enable).field("Size", &self.Size).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for DXVAHD_BLT_STATE_CONSTRICTION_DATA {
    fn eq(&self, other: &Self) -> bool {
        self.Enable == other.Enable && self.Size == other.Size
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for DXVAHD_BLT_STATE_CONSTRICTION_DATA {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DXVAHD_BLT_STATE_CONSTRICTION_DATA {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA {
    pub Anonymous: DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA_0,
}
impl DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA {}
impl ::core::default::Default for DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA {}
unsafe impl ::windows::runtime::Abi for DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub union DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA_0 {
    pub Anonymous: DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA_0_0,
    pub Value: u32,
}
impl DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA_0 {}
impl ::core::default::Default for DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA_0 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA_0 {}
unsafe impl ::windows::runtime::Abi for DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA_0 {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA_0_0 {
    pub _bitfield: u32,
}
impl DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA_0_0 {}
impl ::core::default::Default for DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA_0_0 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA_0_0 {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("_Anonymous_e__Struct").field("_bitfield", &self._bitfield).finish()
    }
}
impl ::core::cmp::PartialEq for DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA_0_0 {
    fn eq(&self, other: &Self) -> bool {
        self._bitfield == other._bitfield
    }
}
impl ::core::cmp::Eq for DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA_0_0 {}
unsafe impl ::windows::runtime::Abi for DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA_0_0 {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVAHD_BLT_STATE_PRIVATE_DATA {
    pub Guid: ::windows::runtime::GUID,
    pub DataSize: u32,
    pub pData: *mut ::core::ffi::c_void,
}
impl DXVAHD_BLT_STATE_PRIVATE_DATA {}
impl ::core::default::Default for DXVAHD_BLT_STATE_PRIVATE_DATA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for DXVAHD_BLT_STATE_PRIVATE_DATA {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVAHD_BLT_STATE_PRIVATE_DATA").field("Guid", &self.Guid).field("DataSize", &self.DataSize).field("pData", &self.pData).finish()
    }
}
impl ::core::cmp::PartialEq for DXVAHD_BLT_STATE_PRIVATE_DATA {
    fn eq(&self, other: &Self) -> bool {
        self.Guid == other.Guid && self.DataSize == other.DataSize && self.pData == other.pData
    }
}
impl ::core::cmp::Eq for DXVAHD_BLT_STATE_PRIVATE_DATA {}
unsafe impl ::windows::runtime::Abi for DXVAHD_BLT_STATE_PRIVATE_DATA {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct DXVAHD_BLT_STATE_TARGET_RECT_DATA {
    pub Enable: super::super::Foundation::BOOL,
    pub TargetRect: super::super::Foundation::RECT,
}
#[cfg(feature = "Win32_Foundation")]
impl DXVAHD_BLT_STATE_TARGET_RECT_DATA {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for DXVAHD_BLT_STATE_TARGET_RECT_DATA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for DXVAHD_BLT_STATE_TARGET_RECT_DATA {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVAHD_BLT_STATE_TARGET_RECT_DATA").field("Enable", &self.Enable).field("TargetRect", &self.TargetRect).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for DXVAHD_BLT_STATE_TARGET_RECT_DATA {
    fn eq(&self, other: &Self) -> bool {
        self.Enable == other.Enable && self.TargetRect == other.TargetRect
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for DXVAHD_BLT_STATE_TARGET_RECT_DATA {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DXVAHD_BLT_STATE_TARGET_RECT_DATA {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub union DXVAHD_COLOR {
    pub RGB: DXVAHD_COLOR_RGBA,
    pub YCbCr: DXVAHD_COLOR_YCbCrA,
}
impl DXVAHD_COLOR {}
impl ::core::default::Default for DXVAHD_COLOR {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for DXVAHD_COLOR {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for DXVAHD_COLOR {}
unsafe impl ::windows::runtime::Abi for DXVAHD_COLOR {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVAHD_COLOR_RGBA {
    pub R: f32,
    pub G: f32,
    pub B: f32,
    pub A: f32,
}
impl DXVAHD_COLOR_RGBA {}
impl ::core::default::Default for DXVAHD_COLOR_RGBA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for DXVAHD_COLOR_RGBA {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVAHD_COLOR_RGBA").field("R", &self.R).field("G", &self.G).field("B", &self.B).field("A", &self.A).finish()
    }
}
impl ::core::cmp::PartialEq for DXVAHD_COLOR_RGBA {
    fn eq(&self, other: &Self) -> bool {
        self.R == other.R && self.G == other.G && self.B == other.B && self.A == other.A
    }
}
impl ::core::cmp::Eq for DXVAHD_COLOR_RGBA {}
unsafe impl ::windows::runtime::Abi for DXVAHD_COLOR_RGBA {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVAHD_COLOR_YCbCrA {
    pub Y: f32,
    pub Cb: f32,
    pub Cr: f32,
    pub A: f32,
}
impl DXVAHD_COLOR_YCbCrA {}
impl ::core::default::Default for DXVAHD_COLOR_YCbCrA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for DXVAHD_COLOR_YCbCrA {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVAHD_COLOR_YCbCrA").field("Y", &self.Y).field("Cb", &self.Cb).field("Cr", &self.Cr).field("A", &self.A).finish()
    }
}
impl ::core::cmp::PartialEq for DXVAHD_COLOR_YCbCrA {
    fn eq(&self, other: &Self) -> bool {
        self.Y == other.Y && self.Cb == other.Cb && self.Cr == other.Cr && self.A == other.A
    }
}
impl ::core::cmp::Eq for DXVAHD_COLOR_YCbCrA {}
unsafe impl ::windows::runtime::Abi for DXVAHD_COLOR_YCbCrA {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVAHD_CONTENT_DESC {
    pub InputFrameFormat: DXVAHD_FRAME_FORMAT,
    pub InputFrameRate: DXVAHD_RATIONAL,
    pub InputWidth: u32,
    pub InputHeight: u32,
    pub OutputFrameRate: DXVAHD_RATIONAL,
    pub OutputWidth: u32,
    pub OutputHeight: u32,
}
impl DXVAHD_CONTENT_DESC {}
impl ::core::default::Default for DXVAHD_CONTENT_DESC {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for DXVAHD_CONTENT_DESC {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVAHD_CONTENT_DESC")
            .field("InputFrameFormat", &self.InputFrameFormat)
            .field("InputFrameRate", &self.InputFrameRate)
            .field("InputWidth", &self.InputWidth)
            .field("InputHeight", &self.InputHeight)
            .field("OutputFrameRate", &self.OutputFrameRate)
            .field("OutputWidth", &self.OutputWidth)
            .field("OutputHeight", &self.OutputHeight)
            .finish()
    }
}
impl ::core::cmp::PartialEq for DXVAHD_CONTENT_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.InputFrameFormat == other.InputFrameFormat && self.InputFrameRate == other.InputFrameRate && self.InputWidth == other.InputWidth && self.InputHeight == other.InputHeight && self.OutputFrameRate == other.OutputFrameRate && self.OutputWidth == other.OutputWidth && self.OutputHeight == other.OutputHeight
    }
}
impl ::core::cmp::Eq for DXVAHD_CONTENT_DESC {}
unsafe impl ::windows::runtime::Abi for DXVAHD_CONTENT_DESC {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct DXVAHD_CUSTOM_RATE_DATA {
    pub CustomRate: DXVAHD_RATIONAL,
    pub OutputFrames: u32,
    pub InputInterlaced: super::super::Foundation::BOOL,
    pub InputFramesOrFields: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl DXVAHD_CUSTOM_RATE_DATA {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for DXVAHD_CUSTOM_RATE_DATA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for DXVAHD_CUSTOM_RATE_DATA {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVAHD_CUSTOM_RATE_DATA").field("CustomRate", &self.CustomRate).field("OutputFrames", &self.OutputFrames).field("InputInterlaced", &self.InputInterlaced).field("InputFramesOrFields", &self.InputFramesOrFields).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for DXVAHD_CUSTOM_RATE_DATA {
    fn eq(&self, other: &Self) -> bool {
        self.CustomRate == other.CustomRate && self.OutputFrames == other.OutputFrames && self.InputInterlaced == other.InputInterlaced && self.InputFramesOrFields == other.InputFramesOrFields
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for DXVAHD_CUSTOM_RATE_DATA {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DXVAHD_CUSTOM_RATE_DATA {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
#[cfg(feature = "Win32_Graphics_Direct3D9")]
#[inline]
pub unsafe fn DXVAHD_CreateDevice<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D9::IDirect3DDevice9Ex>>(pd3ddevice: Param0, pcontentdesc: *const DXVAHD_CONTENT_DESC, usage: DXVAHD_DEVICE_USAGE, pplugin: ::core::option::Option<PDXVAHDSW_Plugin>) -> ::windows::runtime::Result<IDXVAHD_Device> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn DXVAHD_CreateDevice(pd3ddevice: ::windows::runtime::RawPtr, pcontentdesc: *const DXVAHD_CONTENT_DESC, usage: DXVAHD_DEVICE_USAGE, pplugin: ::windows::runtime::RawPtr, ppdevice: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IDXVAHD_Device as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        DXVAHD_CreateDevice(pd3ddevice.into_param().abi(), ::core::mem::transmute(pcontentdesc), ::core::mem::transmute(usage), ::core::mem::transmute(pplugin), &mut result__).from_abi::<IDXVAHD_Device>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVAHD_DEVICE_CAPS(pub i32);
pub const DXVAHD_DEVICE_CAPS_LINEAR_SPACE: DXVAHD_DEVICE_CAPS = DXVAHD_DEVICE_CAPS(1i32);
pub const DXVAHD_DEVICE_CAPS_xvYCC: DXVAHD_DEVICE_CAPS = DXVAHD_DEVICE_CAPS(2i32);
pub const DXVAHD_DEVICE_CAPS_RGB_RANGE_CONVERSION: DXVAHD_DEVICE_CAPS = DXVAHD_DEVICE_CAPS(4i32);
pub const DXVAHD_DEVICE_CAPS_YCbCr_MATRIX_CONVERSION: DXVAHD_DEVICE_CAPS = DXVAHD_DEVICE_CAPS(8i32);
impl ::core::convert::From<i32> for DXVAHD_DEVICE_CAPS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVAHD_DEVICE_CAPS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVAHD_DEVICE_TYPE(pub i32);
pub const DXVAHD_DEVICE_TYPE_HARDWARE: DXVAHD_DEVICE_TYPE = DXVAHD_DEVICE_TYPE(0i32);
pub const DXVAHD_DEVICE_TYPE_SOFTWARE: DXVAHD_DEVICE_TYPE = DXVAHD_DEVICE_TYPE(1i32);
pub const DXVAHD_DEVICE_TYPE_REFERENCE: DXVAHD_DEVICE_TYPE = DXVAHD_DEVICE_TYPE(2i32);
pub const DXVAHD_DEVICE_TYPE_OTHER: DXVAHD_DEVICE_TYPE = DXVAHD_DEVICE_TYPE(3i32);
impl ::core::convert::From<i32> for DXVAHD_DEVICE_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVAHD_DEVICE_TYPE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVAHD_DEVICE_USAGE(pub i32);
pub const DXVAHD_DEVICE_USAGE_PLAYBACK_NORMAL: DXVAHD_DEVICE_USAGE = DXVAHD_DEVICE_USAGE(0i32);
pub const DXVAHD_DEVICE_USAGE_OPTIMAL_SPEED: DXVAHD_DEVICE_USAGE = DXVAHD_DEVICE_USAGE(1i32);
pub const DXVAHD_DEVICE_USAGE_OPTIMAL_QUALITY: DXVAHD_DEVICE_USAGE = DXVAHD_DEVICE_USAGE(2i32);
impl ::core::convert::From<i32> for DXVAHD_DEVICE_USAGE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVAHD_DEVICE_USAGE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVAHD_FEATURE_CAPS(pub i32);
pub const DXVAHD_FEATURE_CAPS_ALPHA_FILL: DXVAHD_FEATURE_CAPS = DXVAHD_FEATURE_CAPS(1i32);
pub const DXVAHD_FEATURE_CAPS_CONSTRICTION: DXVAHD_FEATURE_CAPS = DXVAHD_FEATURE_CAPS(2i32);
pub const DXVAHD_FEATURE_CAPS_LUMA_KEY: DXVAHD_FEATURE_CAPS = DXVAHD_FEATURE_CAPS(4i32);
pub const DXVAHD_FEATURE_CAPS_ALPHA_PALETTE: DXVAHD_FEATURE_CAPS = DXVAHD_FEATURE_CAPS(8i32);
impl ::core::convert::From<i32> for DXVAHD_FEATURE_CAPS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVAHD_FEATURE_CAPS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVAHD_FILTER(pub i32);
pub const DXVAHD_FILTER_BRIGHTNESS: DXVAHD_FILTER = DXVAHD_FILTER(0i32);
pub const DXVAHD_FILTER_CONTRAST: DXVAHD_FILTER = DXVAHD_FILTER(1i32);
pub const DXVAHD_FILTER_HUE: DXVAHD_FILTER = DXVAHD_FILTER(2i32);
pub const DXVAHD_FILTER_SATURATION: DXVAHD_FILTER = DXVAHD_FILTER(3i32);
pub const DXVAHD_FILTER_NOISE_REDUCTION: DXVAHD_FILTER = DXVAHD_FILTER(4i32);
pub const DXVAHD_FILTER_EDGE_ENHANCEMENT: DXVAHD_FILTER = DXVAHD_FILTER(5i32);
pub const DXVAHD_FILTER_ANAMORPHIC_SCALING: DXVAHD_FILTER = DXVAHD_FILTER(6i32);
impl ::core::convert::From<i32> for DXVAHD_FILTER {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVAHD_FILTER {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVAHD_FILTER_CAPS(pub i32);
pub const DXVAHD_FILTER_CAPS_BRIGHTNESS: DXVAHD_FILTER_CAPS = DXVAHD_FILTER_CAPS(1i32);
pub const DXVAHD_FILTER_CAPS_CONTRAST: DXVAHD_FILTER_CAPS = DXVAHD_FILTER_CAPS(2i32);
pub const DXVAHD_FILTER_CAPS_HUE: DXVAHD_FILTER_CAPS = DXVAHD_FILTER_CAPS(4i32);
pub const DXVAHD_FILTER_CAPS_SATURATION: DXVAHD_FILTER_CAPS = DXVAHD_FILTER_CAPS(8i32);
pub const DXVAHD_FILTER_CAPS_NOISE_REDUCTION: DXVAHD_FILTER_CAPS = DXVAHD_FILTER_CAPS(16i32);
pub const DXVAHD_FILTER_CAPS_EDGE_ENHANCEMENT: DXVAHD_FILTER_CAPS = DXVAHD_FILTER_CAPS(32i32);
pub const DXVAHD_FILTER_CAPS_ANAMORPHIC_SCALING: DXVAHD_FILTER_CAPS = DXVAHD_FILTER_CAPS(64i32);
impl ::core::convert::From<i32> for DXVAHD_FILTER_CAPS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVAHD_FILTER_CAPS {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVAHD_FILTER_RANGE_DATA {
    pub Minimum: i32,
    pub Maximum: i32,
    pub Default: i32,
    pub Multiplier: f32,
}
impl DXVAHD_FILTER_RANGE_DATA {}
impl ::core::default::Default for DXVAHD_FILTER_RANGE_DATA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for DXVAHD_FILTER_RANGE_DATA {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVAHD_FILTER_RANGE_DATA").field("Minimum", &self.Minimum).field("Maximum", &self.Maximum).field("Default", &self.Default).field("Multiplier", &self.Multiplier).finish()
    }
}
impl ::core::cmp::PartialEq for DXVAHD_FILTER_RANGE_DATA {
    fn eq(&self, other: &Self) -> bool {
        self.Minimum == other.Minimum && self.Maximum == other.Maximum && self.Default == other.Default && self.Multiplier == other.Multiplier
    }
}
impl ::core::cmp::Eq for DXVAHD_FILTER_RANGE_DATA {}
unsafe impl ::windows::runtime::Abi for DXVAHD_FILTER_RANGE_DATA {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVAHD_FRAME_FORMAT(pub i32);
pub const DXVAHD_FRAME_FORMAT_PROGRESSIVE: DXVAHD_FRAME_FORMAT = DXVAHD_FRAME_FORMAT(0i32);
pub const DXVAHD_FRAME_FORMAT_INTERLACED_TOP_FIELD_FIRST: DXVAHD_FRAME_FORMAT = DXVAHD_FRAME_FORMAT(1i32);
pub const DXVAHD_FRAME_FORMAT_INTERLACED_BOTTOM_FIELD_FIRST: DXVAHD_FRAME_FORMAT = DXVAHD_FRAME_FORMAT(2i32);
impl ::core::convert::From<i32> for DXVAHD_FRAME_FORMAT {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVAHD_FRAME_FORMAT {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVAHD_INPUT_FORMAT_CAPS(pub i32);
pub const DXVAHD_INPUT_FORMAT_CAPS_RGB_INTERLACED: DXVAHD_INPUT_FORMAT_CAPS = DXVAHD_INPUT_FORMAT_CAPS(1i32);
pub const DXVAHD_INPUT_FORMAT_CAPS_RGB_PROCAMP: DXVAHD_INPUT_FORMAT_CAPS = DXVAHD_INPUT_FORMAT_CAPS(2i32);
pub const DXVAHD_INPUT_FORMAT_CAPS_RGB_LUMA_KEY: DXVAHD_INPUT_FORMAT_CAPS = DXVAHD_INPUT_FORMAT_CAPS(4i32);
pub const DXVAHD_INPUT_FORMAT_CAPS_PALETTE_INTERLACED: DXVAHD_INPUT_FORMAT_CAPS = DXVAHD_INPUT_FORMAT_CAPS(8i32);
impl ::core::convert::From<i32> for DXVAHD_INPUT_FORMAT_CAPS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVAHD_INPUT_FORMAT_CAPS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVAHD_ITELECINE_CAPS(pub i32);
pub const DXVAHD_ITELECINE_CAPS_32: DXVAHD_ITELECINE_CAPS = DXVAHD_ITELECINE_CAPS(1i32);
pub const DXVAHD_ITELECINE_CAPS_22: DXVAHD_ITELECINE_CAPS = DXVAHD_ITELECINE_CAPS(2i32);
pub const DXVAHD_ITELECINE_CAPS_2224: DXVAHD_ITELECINE_CAPS = DXVAHD_ITELECINE_CAPS(4i32);
pub const DXVAHD_ITELECINE_CAPS_2332: DXVAHD_ITELECINE_CAPS = DXVAHD_ITELECINE_CAPS(8i32);
pub const DXVAHD_ITELECINE_CAPS_32322: DXVAHD_ITELECINE_CAPS = DXVAHD_ITELECINE_CAPS(16i32);
pub const DXVAHD_ITELECINE_CAPS_55: DXVAHD_ITELECINE_CAPS = DXVAHD_ITELECINE_CAPS(32i32);
pub const DXVAHD_ITELECINE_CAPS_64: DXVAHD_ITELECINE_CAPS = DXVAHD_ITELECINE_CAPS(64i32);
pub const DXVAHD_ITELECINE_CAPS_87: DXVAHD_ITELECINE_CAPS = DXVAHD_ITELECINE_CAPS(128i32);
pub const DXVAHD_ITELECINE_CAPS_222222222223: DXVAHD_ITELECINE_CAPS = DXVAHD_ITELECINE_CAPS(256i32);
pub const DXVAHD_ITELECINE_CAPS_OTHER: DXVAHD_ITELECINE_CAPS = DXVAHD_ITELECINE_CAPS(-2147483648i32);
impl ::core::convert::From<i32> for DXVAHD_ITELECINE_CAPS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVAHD_ITELECINE_CAPS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVAHD_OUTPUT_RATE(pub i32);
pub const DXVAHD_OUTPUT_RATE_NORMAL: DXVAHD_OUTPUT_RATE = DXVAHD_OUTPUT_RATE(0i32);
pub const DXVAHD_OUTPUT_RATE_HALF: DXVAHD_OUTPUT_RATE = DXVAHD_OUTPUT_RATE(1i32);
pub const DXVAHD_OUTPUT_RATE_CUSTOM: DXVAHD_OUTPUT_RATE = DXVAHD_OUTPUT_RATE(2i32);
impl ::core::convert::From<i32> for DXVAHD_OUTPUT_RATE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVAHD_OUTPUT_RATE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVAHD_PROCESSOR_CAPS(pub i32);
pub const DXVAHD_PROCESSOR_CAPS_DEINTERLACE_BLEND: DXVAHD_PROCESSOR_CAPS = DXVAHD_PROCESSOR_CAPS(1i32);
pub const DXVAHD_PROCESSOR_CAPS_DEINTERLACE_BOB: DXVAHD_PROCESSOR_CAPS = DXVAHD_PROCESSOR_CAPS(2i32);
pub const DXVAHD_PROCESSOR_CAPS_DEINTERLACE_ADAPTIVE: DXVAHD_PROCESSOR_CAPS = DXVAHD_PROCESSOR_CAPS(4i32);
pub const DXVAHD_PROCESSOR_CAPS_DEINTERLACE_MOTION_COMPENSATION: DXVAHD_PROCESSOR_CAPS = DXVAHD_PROCESSOR_CAPS(8i32);
pub const DXVAHD_PROCESSOR_CAPS_INVERSE_TELECINE: DXVAHD_PROCESSOR_CAPS = DXVAHD_PROCESSOR_CAPS(16i32);
pub const DXVAHD_PROCESSOR_CAPS_FRAME_RATE_CONVERSION: DXVAHD_PROCESSOR_CAPS = DXVAHD_PROCESSOR_CAPS(32i32);
impl ::core::convert::From<i32> for DXVAHD_PROCESSOR_CAPS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVAHD_PROCESSOR_CAPS {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVAHD_RATIONAL {
    pub Numerator: u32,
    pub Denominator: u32,
}
impl DXVAHD_RATIONAL {}
impl ::core::default::Default for DXVAHD_RATIONAL {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for DXVAHD_RATIONAL {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVAHD_RATIONAL").field("Numerator", &self.Numerator).field("Denominator", &self.Denominator).finish()
    }
}
impl ::core::cmp::PartialEq for DXVAHD_RATIONAL {
    fn eq(&self, other: &Self) -> bool {
        self.Numerator == other.Numerator && self.Denominator == other.Denominator
    }
}
impl ::core::cmp::Eq for DXVAHD_RATIONAL {}
unsafe impl ::windows::runtime::Abi for DXVAHD_RATIONAL {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D9`*"]
pub struct DXVAHD_STREAM_DATA {
    pub Enable: super::super::Foundation::BOOL,
    pub OutputIndex: u32,
    pub InputFrameOrField: u32,
    pub PastFrames: u32,
    pub FutureFrames: u32,
    pub ppPastSurfaces: *mut ::core::option::Option<super::super::Graphics::Direct3D9::IDirect3DSurface9>,
    pub pInputSurface: ::core::option::Option<super::super::Graphics::Direct3D9::IDirect3DSurface9>,
    pub ppFutureSurfaces: *mut ::core::option::Option<super::super::Graphics::Direct3D9::IDirect3DSurface9>,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl DXVAHD_STREAM_DATA {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl ::core::default::Default for DXVAHD_STREAM_DATA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl ::core::fmt::Debug for DXVAHD_STREAM_DATA {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVAHD_STREAM_DATA")
            .field("Enable", &self.Enable)
            .field("OutputIndex", &self.OutputIndex)
            .field("InputFrameOrField", &self.InputFrameOrField)
            .field("PastFrames", &self.PastFrames)
            .field("FutureFrames", &self.FutureFrames)
            .field("ppPastSurfaces", &self.ppPastSurfaces)
            .field("pInputSurface", &self.pInputSurface)
            .field("ppFutureSurfaces", &self.ppFutureSurfaces)
            .finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl ::core::cmp::PartialEq for DXVAHD_STREAM_DATA {
    fn eq(&self, other: &Self) -> bool {
        self.Enable == other.Enable && self.OutputIndex == other.OutputIndex && self.InputFrameOrField == other.InputFrameOrField && self.PastFrames == other.PastFrames && self.FutureFrames == other.FutureFrames && self.ppPastSurfaces == other.ppPastSurfaces && self.pInputSurface == other.pInputSurface && self.ppFutureSurfaces == other.ppFutureSurfaces
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl ::core::cmp::Eq for DXVAHD_STREAM_DATA {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
unsafe impl ::windows::runtime::Abi for DXVAHD_STREAM_DATA {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVAHD_STREAM_STATE(pub i32);
pub const DXVAHD_STREAM_STATE_D3DFORMAT: DXVAHD_STREAM_STATE = DXVAHD_STREAM_STATE(0i32);
pub const DXVAHD_STREAM_STATE_FRAME_FORMAT: DXVAHD_STREAM_STATE = DXVAHD_STREAM_STATE(1i32);
pub const DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE: DXVAHD_STREAM_STATE = DXVAHD_STREAM_STATE(2i32);
pub const DXVAHD_STREAM_STATE_OUTPUT_RATE: DXVAHD_STREAM_STATE = DXVAHD_STREAM_STATE(3i32);
pub const DXVAHD_STREAM_STATE_SOURCE_RECT: DXVAHD_STREAM_STATE = DXVAHD_STREAM_STATE(4i32);
pub const DXVAHD_STREAM_STATE_DESTINATION_RECT: DXVAHD_STREAM_STATE = DXVAHD_STREAM_STATE(5i32);
pub const DXVAHD_STREAM_STATE_ALPHA: DXVAHD_STREAM_STATE = DXVAHD_STREAM_STATE(6i32);
pub const DXVAHD_STREAM_STATE_PALETTE: DXVAHD_STREAM_STATE = DXVAHD_STREAM_STATE(7i32);
pub const DXVAHD_STREAM_STATE_LUMA_KEY: DXVAHD_STREAM_STATE = DXVAHD_STREAM_STATE(8i32);
pub const DXVAHD_STREAM_STATE_ASPECT_RATIO: DXVAHD_STREAM_STATE = DXVAHD_STREAM_STATE(9i32);
pub const DXVAHD_STREAM_STATE_FILTER_BRIGHTNESS: DXVAHD_STREAM_STATE = DXVAHD_STREAM_STATE(100i32);
pub const DXVAHD_STREAM_STATE_FILTER_CONTRAST: DXVAHD_STREAM_STATE = DXVAHD_STREAM_STATE(101i32);
pub const DXVAHD_STREAM_STATE_FILTER_HUE: DXVAHD_STREAM_STATE = DXVAHD_STREAM_STATE(102i32);
pub const DXVAHD_STREAM_STATE_FILTER_SATURATION: DXVAHD_STREAM_STATE = DXVAHD_STREAM_STATE(103i32);
pub const DXVAHD_STREAM_STATE_FILTER_NOISE_REDUCTION: DXVAHD_STREAM_STATE = DXVAHD_STREAM_STATE(104i32);
pub const DXVAHD_STREAM_STATE_FILTER_EDGE_ENHANCEMENT: DXVAHD_STREAM_STATE = DXVAHD_STREAM_STATE(105i32);
pub const DXVAHD_STREAM_STATE_FILTER_ANAMORPHIC_SCALING: DXVAHD_STREAM_STATE = DXVAHD_STREAM_STATE(106i32);
pub const DXVAHD_STREAM_STATE_PRIVATE: DXVAHD_STREAM_STATE = DXVAHD_STREAM_STATE(1000i32);
impl ::core::convert::From<i32> for DXVAHD_STREAM_STATE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVAHD_STREAM_STATE {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct DXVAHD_STREAM_STATE_ALPHA_DATA {
    pub Enable: super::super::Foundation::BOOL,
    pub Alpha: f32,
}
#[cfg(feature = "Win32_Foundation")]
impl DXVAHD_STREAM_STATE_ALPHA_DATA {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for DXVAHD_STREAM_STATE_ALPHA_DATA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for DXVAHD_STREAM_STATE_ALPHA_DATA {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVAHD_STREAM_STATE_ALPHA_DATA").field("Enable", &self.Enable).field("Alpha", &self.Alpha).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for DXVAHD_STREAM_STATE_ALPHA_DATA {
    fn eq(&self, other: &Self) -> bool {
        self.Enable == other.Enable && self.Alpha == other.Alpha
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for DXVAHD_STREAM_STATE_ALPHA_DATA {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DXVAHD_STREAM_STATE_ALPHA_DATA {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA {
    pub Enable: super::super::Foundation::BOOL,
    pub SourceAspectRatio: DXVAHD_RATIONAL,
    pub DestinationAspectRatio: DXVAHD_RATIONAL,
}
#[cfg(feature = "Win32_Foundation")]
impl DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA").field("Enable", &self.Enable).field("SourceAspectRatio", &self.SourceAspectRatio).field("DestinationAspectRatio", &self.DestinationAspectRatio).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA {
    fn eq(&self, other: &Self) -> bool {
        self.Enable == other.Enable && self.SourceAspectRatio == other.SourceAspectRatio && self.DestinationAspectRatio == other.DestinationAspectRatio
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Direct3D9")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
pub struct DXVAHD_STREAM_STATE_D3DFORMAT_DATA {
    pub Format: super::super::Graphics::Direct3D9::D3DFORMAT,
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl DXVAHD_STREAM_STATE_D3DFORMAT_DATA {}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::default::Default for DXVAHD_STREAM_STATE_D3DFORMAT_DATA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::fmt::Debug for DXVAHD_STREAM_STATE_D3DFORMAT_DATA {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVAHD_STREAM_STATE_D3DFORMAT_DATA").field("Format", &self.Format).finish()
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::cmp::PartialEq for DXVAHD_STREAM_STATE_D3DFORMAT_DATA {
    fn eq(&self, other: &Self) -> bool {
        self.Format == other.Format
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::cmp::Eq for DXVAHD_STREAM_STATE_D3DFORMAT_DATA {}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
unsafe impl ::windows::runtime::Abi for DXVAHD_STREAM_STATE_D3DFORMAT_DATA {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA {
    pub Enable: super::super::Foundation::BOOL,
    pub DestinationRect: super::super::Foundation::RECT,
}
#[cfg(feature = "Win32_Foundation")]
impl DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA").field("Enable", &self.Enable).field("DestinationRect", &self.DestinationRect).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA {
    fn eq(&self, other: &Self) -> bool {
        self.Enable == other.Enable && self.DestinationRect == other.DestinationRect
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct DXVAHD_STREAM_STATE_FILTER_DATA {
    pub Enable: super::super::Foundation::BOOL,
    pub Level: i32,
}
#[cfg(feature = "Win32_Foundation")]
impl DXVAHD_STREAM_STATE_FILTER_DATA {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for DXVAHD_STREAM_STATE_FILTER_DATA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for DXVAHD_STREAM_STATE_FILTER_DATA {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVAHD_STREAM_STATE_FILTER_DATA").field("Enable", &self.Enable).field("Level", &self.Level).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for DXVAHD_STREAM_STATE_FILTER_DATA {
    fn eq(&self, other: &Self) -> bool {
        self.Enable == other.Enable && self.Level == other.Level
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for DXVAHD_STREAM_STATE_FILTER_DATA {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DXVAHD_STREAM_STATE_FILTER_DATA {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA {
    pub FrameFormat: DXVAHD_FRAME_FORMAT,
}
impl DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA {}
impl ::core::default::Default for DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA").field("FrameFormat", &self.FrameFormat).finish()
    }
}
impl ::core::cmp::PartialEq for DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA {
    fn eq(&self, other: &Self) -> bool {
        self.FrameFormat == other.FrameFormat
    }
}
impl ::core::cmp::Eq for DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA {}
unsafe impl ::windows::runtime::Abi for DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA {
    pub Anonymous: DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA_0,
}
impl DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA {}
impl ::core::default::Default for DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA {}
unsafe impl ::windows::runtime::Abi for DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub union DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA_0 {
    pub Anonymous: DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA_0_0,
    pub Value: u32,
}
impl DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA_0 {}
impl ::core::default::Default for DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA_0 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA_0 {}
unsafe impl ::windows::runtime::Abi for DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA_0 {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA_0_0 {
    pub _bitfield: u32,
}
impl DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA_0_0 {}
impl ::core::default::Default for DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA_0_0 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA_0_0 {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("_Anonymous_e__Struct").field("_bitfield", &self._bitfield).finish()
    }
}
impl ::core::cmp::PartialEq for DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA_0_0 {
    fn eq(&self, other: &Self) -> bool {
        self._bitfield == other._bitfield
    }
}
impl ::core::cmp::Eq for DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA_0_0 {}
unsafe impl ::windows::runtime::Abi for DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA_0_0 {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct DXVAHD_STREAM_STATE_LUMA_KEY_DATA {
    pub Enable: super::super::Foundation::BOOL,
    pub Lower: f32,
    pub Upper: f32,
}
#[cfg(feature = "Win32_Foundation")]
impl DXVAHD_STREAM_STATE_LUMA_KEY_DATA {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for DXVAHD_STREAM_STATE_LUMA_KEY_DATA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for DXVAHD_STREAM_STATE_LUMA_KEY_DATA {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVAHD_STREAM_STATE_LUMA_KEY_DATA").field("Enable", &self.Enable).field("Lower", &self.Lower).field("Upper", &self.Upper).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for DXVAHD_STREAM_STATE_LUMA_KEY_DATA {
    fn eq(&self, other: &Self) -> bool {
        self.Enable == other.Enable && self.Lower == other.Lower && self.Upper == other.Upper
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for DXVAHD_STREAM_STATE_LUMA_KEY_DATA {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DXVAHD_STREAM_STATE_LUMA_KEY_DATA {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA {
    pub RepeatFrame: super::super::Foundation::BOOL,
    pub OutputRate: DXVAHD_OUTPUT_RATE,
    pub CustomRate: DXVAHD_RATIONAL,
}
#[cfg(feature = "Win32_Foundation")]
impl DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA").field("RepeatFrame", &self.RepeatFrame).field("OutputRate", &self.OutputRate).field("CustomRate", &self.CustomRate).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA {
    fn eq(&self, other: &Self) -> bool {
        self.RepeatFrame == other.RepeatFrame && self.OutputRate == other.OutputRate && self.CustomRate == other.CustomRate
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVAHD_STREAM_STATE_PALETTE_DATA {
    pub Count: u32,
    pub pEntries: *mut u32,
}
impl DXVAHD_STREAM_STATE_PALETTE_DATA {}
impl ::core::default::Default for DXVAHD_STREAM_STATE_PALETTE_DATA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for DXVAHD_STREAM_STATE_PALETTE_DATA {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVAHD_STREAM_STATE_PALETTE_DATA").field("Count", &self.Count).field("pEntries", &self.pEntries).finish()
    }
}
impl ::core::cmp::PartialEq for DXVAHD_STREAM_STATE_PALETTE_DATA {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.pEntries == other.pEntries
    }
}
impl ::core::cmp::Eq for DXVAHD_STREAM_STATE_PALETTE_DATA {}
unsafe impl ::windows::runtime::Abi for DXVAHD_STREAM_STATE_PALETTE_DATA {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVAHD_STREAM_STATE_PRIVATE_DATA {
    pub Guid: ::windows::runtime::GUID,
    pub DataSize: u32,
    pub pData: *mut ::core::ffi::c_void,
}
impl DXVAHD_STREAM_STATE_PRIVATE_DATA {}
impl ::core::default::Default for DXVAHD_STREAM_STATE_PRIVATE_DATA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for DXVAHD_STREAM_STATE_PRIVATE_DATA {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVAHD_STREAM_STATE_PRIVATE_DATA").field("Guid", &self.Guid).field("DataSize", &self.DataSize).field("pData", &self.pData).finish()
    }
}
impl ::core::cmp::PartialEq for DXVAHD_STREAM_STATE_PRIVATE_DATA {
    fn eq(&self, other: &Self) -> bool {
        self.Guid == other.Guid && self.DataSize == other.DataSize && self.pData == other.pData
    }
}
impl ::core::cmp::Eq for DXVAHD_STREAM_STATE_PRIVATE_DATA {}
unsafe impl ::windows::runtime::Abi for DXVAHD_STREAM_STATE_PRIVATE_DATA {
    type Abi = Self;
}
pub const DXVAHD_STREAM_STATE_PRIVATE_IVTC: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2623544892, 3891, 16716, [167, 57, 153, 84, 14, 228, 45, 165]);
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA {
    pub Enable: super::super::Foundation::BOOL,
    pub ITelecineFlags: u32,
    pub Frames: u32,
    pub InputField: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA").field("Enable", &self.Enable).field("ITelecineFlags", &self.ITelecineFlags).field("Frames", &self.Frames).field("InputField", &self.InputField).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA {
    fn eq(&self, other: &Self) -> bool {
        self.Enable == other.Enable && self.ITelecineFlags == other.ITelecineFlags && self.Frames == other.Frames && self.InputField == other.InputField
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct DXVAHD_STREAM_STATE_SOURCE_RECT_DATA {
    pub Enable: super::super::Foundation::BOOL,
    pub SourceRect: super::super::Foundation::RECT,
}
#[cfg(feature = "Win32_Foundation")]
impl DXVAHD_STREAM_STATE_SOURCE_RECT_DATA {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for DXVAHD_STREAM_STATE_SOURCE_RECT_DATA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for DXVAHD_STREAM_STATE_SOURCE_RECT_DATA {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVAHD_STREAM_STATE_SOURCE_RECT_DATA").field("Enable", &self.Enable).field("SourceRect", &self.SourceRect).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for DXVAHD_STREAM_STATE_SOURCE_RECT_DATA {
    fn eq(&self, other: &Self) -> bool {
        self.Enable == other.Enable && self.SourceRect == other.SourceRect
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for DXVAHD_STREAM_STATE_SOURCE_RECT_DATA {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DXVAHD_STREAM_STATE_SOURCE_RECT_DATA {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVAHD_SURFACE_TYPE(pub i32);
pub const DXVAHD_SURFACE_TYPE_VIDEO_INPUT: DXVAHD_SURFACE_TYPE = DXVAHD_SURFACE_TYPE(0i32);
pub const DXVAHD_SURFACE_TYPE_VIDEO_INPUT_PRIVATE: DXVAHD_SURFACE_TYPE = DXVAHD_SURFACE_TYPE(1i32);
pub const DXVAHD_SURFACE_TYPE_VIDEO_OUTPUT: DXVAHD_SURFACE_TYPE = DXVAHD_SURFACE_TYPE(2i32);
impl ::core::convert::From<i32> for DXVAHD_SURFACE_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVAHD_SURFACE_TYPE {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVAHD_VPCAPS {
    pub VPGuid: ::windows::runtime::GUID,
    pub PastFrames: u32,
    pub FutureFrames: u32,
    pub ProcessorCaps: u32,
    pub ITelecineCaps: u32,
    pub CustomRateCount: u32,
}
impl DXVAHD_VPCAPS {}
impl ::core::default::Default for DXVAHD_VPCAPS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for DXVAHD_VPCAPS {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVAHD_VPCAPS").field("VPGuid", &self.VPGuid).field("PastFrames", &self.PastFrames).field("FutureFrames", &self.FutureFrames).field("ProcessorCaps", &self.ProcessorCaps).field("ITelecineCaps", &self.ITelecineCaps).field("CustomRateCount", &self.CustomRateCount).finish()
    }
}
impl ::core::cmp::PartialEq for DXVAHD_VPCAPS {
    fn eq(&self, other: &Self) -> bool {
        self.VPGuid == other.VPGuid && self.PastFrames == other.PastFrames && self.FutureFrames == other.FutureFrames && self.ProcessorCaps == other.ProcessorCaps && self.ITelecineCaps == other.ITelecineCaps && self.CustomRateCount == other.CustomRateCount
    }
}
impl ::core::cmp::Eq for DXVAHD_VPCAPS {}
unsafe impl ::windows::runtime::Abi for DXVAHD_VPCAPS {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Direct3D9")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
pub struct DXVAHD_VPDEVCAPS {
    pub DeviceType: DXVAHD_DEVICE_TYPE,
    pub DeviceCaps: u32,
    pub FeatureCaps: u32,
    pub FilterCaps: u32,
    pub InputFormatCaps: u32,
    pub InputPool: super::super::Graphics::Direct3D9::D3DPOOL,
    pub OutputFormatCount: u32,
    pub InputFormatCount: u32,
    pub VideoProcessorCount: u32,
    pub MaxInputStreams: u32,
    pub MaxStreamStates: u32,
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl DXVAHD_VPDEVCAPS {}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::default::Default for DXVAHD_VPDEVCAPS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::fmt::Debug for DXVAHD_VPDEVCAPS {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVAHD_VPDEVCAPS")
            .field("DeviceType", &self.DeviceType)
            .field("DeviceCaps", &self.DeviceCaps)
            .field("FeatureCaps", &self.FeatureCaps)
            .field("FilterCaps", &self.FilterCaps)
            .field("InputFormatCaps", &self.InputFormatCaps)
            .field("InputPool", &self.InputPool)
            .field("OutputFormatCount", &self.OutputFormatCount)
            .field("InputFormatCount", &self.InputFormatCount)
            .field("VideoProcessorCount", &self.VideoProcessorCount)
            .field("MaxInputStreams", &self.MaxInputStreams)
            .field("MaxStreamStates", &self.MaxStreamStates)
            .finish()
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::cmp::PartialEq for DXVAHD_VPDEVCAPS {
    fn eq(&self, other: &Self) -> bool {
        self.DeviceType == other.DeviceType
            && self.DeviceCaps == other.DeviceCaps
            && self.FeatureCaps == other.FeatureCaps
            && self.FilterCaps == other.FilterCaps
            && self.InputFormatCaps == other.InputFormatCaps
            && self.InputPool == other.InputPool
            && self.OutputFormatCount == other.OutputFormatCount
            && self.InputFormatCount == other.InputFormatCount
            && self.VideoProcessorCount == other.VideoProcessorCount
            && self.MaxInputStreams == other.MaxInputStreams
            && self.MaxStreamStates == other.MaxStreamStates
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::cmp::Eq for DXVAHD_VPDEVCAPS {}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
unsafe impl ::windows::runtime::Abi for DXVAHD_VPDEVCAPS {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Direct3D9")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
pub struct DXVAUncompDataInfo {
    pub UncompWidth: u32,
    pub UncompHeight: u32,
    pub UncompFormat: super::super::Graphics::Direct3D9::D3DFORMAT,
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl DXVAUncompDataInfo {}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::default::Default for DXVAUncompDataInfo {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::fmt::Debug for DXVAUncompDataInfo {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVAUncompDataInfo").field("UncompWidth", &self.UncompWidth).field("UncompHeight", &self.UncompHeight).field("UncompFormat", &self.UncompFormat).finish()
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::cmp::PartialEq for DXVAUncompDataInfo {
    fn eq(&self, other: &Self) -> bool {
        self.UncompWidth == other.UncompWidth && self.UncompHeight == other.UncompHeight && self.UncompFormat == other.UncompFormat
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::cmp::Eq for DXVAUncompDataInfo {}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
unsafe impl ::windows::runtime::Abi for DXVAUncompDataInfo {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVA_AYUVsample2 {
    pub bCrValue: u8,
    pub bCbValue: u8,
    pub bY_Value: u8,
    pub bSampleAlpha8: u8,
}
impl DXVA_AYUVsample2 {}
impl ::core::default::Default for DXVA_AYUVsample2 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for DXVA_AYUVsample2 {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVA_AYUVsample2").field("bCrValue", &self.bCrValue).field("bCbValue", &self.bCbValue).field("bY_Value", &self.bY_Value).field("bSampleAlpha8", &self.bSampleAlpha8).finish()
    }
}
impl ::core::cmp::PartialEq for DXVA_AYUVsample2 {
    fn eq(&self, other: &Self) -> bool {
        self.bCrValue == other.bCrValue && self.bCbValue == other.bCbValue && self.bY_Value == other.bY_Value && self.bSampleAlpha8 == other.bSampleAlpha8
    }
}
impl ::core::cmp::Eq for DXVA_AYUVsample2 {}
unsafe impl ::windows::runtime::Abi for DXVA_AYUVsample2 {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVA_BufferDescription {
    pub dwTypeIndex: u32,
    pub dwBufferIndex: u32,
    pub dwDataOffset: u32,
    pub dwDataSize: u32,
    pub dwFirstMBaddress: u32,
    pub dwNumMBsInBuffer: u32,
    pub dwWidth: u32,
    pub dwHeight: u32,
    pub dwStride: u32,
    pub dwReservedBits: u32,
}
impl DXVA_BufferDescription {}
impl ::core::default::Default for DXVA_BufferDescription {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for DXVA_BufferDescription {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for DXVA_BufferDescription {}
unsafe impl ::windows::runtime::Abi for DXVA_BufferDescription {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVA_COPPCommand {
    pub macKDI: ::windows::runtime::GUID,
    pub guidCommandID: ::windows::runtime::GUID,
    pub dwSequence: u32,
    pub cbSizeData: u32,
    pub CommandData: [u8; 4056],
}
impl DXVA_COPPCommand {}
impl ::core::default::Default for DXVA_COPPCommand {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for DXVA_COPPCommand {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVA_COPPCommand").field("macKDI", &self.macKDI).field("guidCommandID", &self.guidCommandID).field("dwSequence", &self.dwSequence).field("cbSizeData", &self.cbSizeData).field("CommandData", &self.CommandData).finish()
    }
}
impl ::core::cmp::PartialEq for DXVA_COPPCommand {
    fn eq(&self, other: &Self) -> bool {
        self.macKDI == other.macKDI && self.guidCommandID == other.guidCommandID && self.dwSequence == other.dwSequence && self.cbSizeData == other.cbSizeData && self.CommandData == other.CommandData
    }
}
impl ::core::cmp::Eq for DXVA_COPPCommand {}
unsafe impl ::windows::runtime::Abi for DXVA_COPPCommand {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVA_COPPSignature {
    pub Signature: [u8; 256],
}
impl DXVA_COPPSignature {}
impl ::core::default::Default for DXVA_COPPSignature {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for DXVA_COPPSignature {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVA_COPPSignature").field("Signature", &self.Signature).finish()
    }
}
impl ::core::cmp::PartialEq for DXVA_COPPSignature {
    fn eq(&self, other: &Self) -> bool {
        self.Signature == other.Signature
    }
}
impl ::core::cmp::Eq for DXVA_COPPSignature {}
unsafe impl ::windows::runtime::Abi for DXVA_COPPSignature {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVA_COPPStatusInput {
    pub rApp: ::windows::runtime::GUID,
    pub guidStatusRequestID: ::windows::runtime::GUID,
    pub dwSequence: u32,
    pub cbSizeData: u32,
    pub StatusData: [u8; 4056],
}
impl DXVA_COPPStatusInput {}
impl ::core::default::Default for DXVA_COPPStatusInput {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for DXVA_COPPStatusInput {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVA_COPPStatusInput").field("rApp", &self.rApp).field("guidStatusRequestID", &self.guidStatusRequestID).field("dwSequence", &self.dwSequence).field("cbSizeData", &self.cbSizeData).field("StatusData", &self.StatusData).finish()
    }
}
impl ::core::cmp::PartialEq for DXVA_COPPStatusInput {
    fn eq(&self, other: &Self) -> bool {
        self.rApp == other.rApp && self.guidStatusRequestID == other.guidStatusRequestID && self.dwSequence == other.dwSequence && self.cbSizeData == other.cbSizeData && self.StatusData == other.StatusData
    }
}
impl ::core::cmp::Eq for DXVA_COPPStatusInput {}
unsafe impl ::windows::runtime::Abi for DXVA_COPPStatusInput {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVA_COPPStatusOutput {
    pub macKDI: ::windows::runtime::GUID,
    pub cbSizeData: u32,
    pub COPPStatus: [u8; 4076],
}
impl DXVA_COPPStatusOutput {}
impl ::core::default::Default for DXVA_COPPStatusOutput {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for DXVA_COPPStatusOutput {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVA_COPPStatusOutput").field("macKDI", &self.macKDI).field("cbSizeData", &self.cbSizeData).field("COPPStatus", &self.COPPStatus).finish()
    }
}
impl ::core::cmp::PartialEq for DXVA_COPPStatusOutput {
    fn eq(&self, other: &Self) -> bool {
        self.macKDI == other.macKDI && self.cbSizeData == other.cbSizeData && self.COPPStatus == other.COPPStatus
    }
}
impl ::core::cmp::Eq for DXVA_COPPStatusOutput {}
unsafe impl ::windows::runtime::Abi for DXVA_COPPStatusOutput {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVA_ConfigPictureDecode {
    pub dwFunction: u32,
    pub dwReservedBits: [u32; 3],
    pub guidConfigBitstreamEncryption: ::windows::runtime::GUID,
    pub guidConfigMBcontrolEncryption: ::windows::runtime::GUID,
    pub guidConfigResidDiffEncryption: ::windows::runtime::GUID,
    pub bConfigBitstreamRaw: u8,
    pub bConfigMBcontrolRasterOrder: u8,
    pub bConfigResidDiffHost: u8,
    pub bConfigSpatialResid8: u8,
    pub bConfigResid8Subtraction: u8,
    pub bConfigSpatialHost8or9Clipping: u8,
    pub bConfigSpatialResidInterleaved: u8,
    pub bConfigIntraResidUnsigned: u8,
    pub bConfigResidDiffAccelerator: u8,
    pub bConfigHostInverseScan: u8,
    pub bConfigSpecificIDCT: u8,
    pub bConfig4GroupedCoefs: u8,
}
impl DXVA_ConfigPictureDecode {}
impl ::core::default::Default for DXVA_ConfigPictureDecode {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for DXVA_ConfigPictureDecode {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for DXVA_ConfigPictureDecode {}
unsafe impl ::windows::runtime::Abi for DXVA_ConfigPictureDecode {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct DXVA_DeinterlaceBlt {
    pub Size: u32,
    pub Reserved: u32,
    pub rtTarget: i64,
    pub DstRect: super::super::Foundation::RECT,
    pub SrcRect: super::super::Foundation::RECT,
    pub NumSourceSurfaces: u32,
    pub Alpha: f32,
    pub Source: [DXVA_VideoSample; 32],
}
#[cfg(feature = "Win32_Foundation")]
impl DXVA_DeinterlaceBlt {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for DXVA_DeinterlaceBlt {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for DXVA_DeinterlaceBlt {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVA_DeinterlaceBlt")
            .field("Size", &self.Size)
            .field("Reserved", &self.Reserved)
            .field("rtTarget", &self.rtTarget)
            .field("DstRect", &self.DstRect)
            .field("SrcRect", &self.SrcRect)
            .field("NumSourceSurfaces", &self.NumSourceSurfaces)
            .field("Alpha", &self.Alpha)
            .field("Source", &self.Source)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for DXVA_DeinterlaceBlt {
    fn eq(&self, other: &Self) -> bool {
        self.Size == other.Size && self.Reserved == other.Reserved && self.rtTarget == other.rtTarget && self.DstRect == other.DstRect && self.SrcRect == other.SrcRect && self.NumSourceSurfaces == other.NumSourceSurfaces && self.Alpha == other.Alpha && self.Source == other.Source
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for DXVA_DeinterlaceBlt {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DXVA_DeinterlaceBlt {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct DXVA_DeinterlaceBltEx {
    pub Size: u32,
    pub BackgroundColor: DXVA_AYUVsample2,
    pub rcTarget: super::super::Foundation::RECT,
    pub rtTarget: i64,
    pub NumSourceSurfaces: u32,
    pub Alpha: f32,
    pub Source: [DXVA_VideoSample2; 32],
    pub DestinationFormat: u32,
    pub DestinationFlags: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl DXVA_DeinterlaceBltEx {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for DXVA_DeinterlaceBltEx {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for DXVA_DeinterlaceBltEx {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVA_DeinterlaceBltEx")
            .field("Size", &self.Size)
            .field("BackgroundColor", &self.BackgroundColor)
            .field("rcTarget", &self.rcTarget)
            .field("rtTarget", &self.rtTarget)
            .field("NumSourceSurfaces", &self.NumSourceSurfaces)
            .field("Alpha", &self.Alpha)
            .field("Source", &self.Source)
            .field("DestinationFormat", &self.DestinationFormat)
            .field("DestinationFlags", &self.DestinationFlags)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for DXVA_DeinterlaceBltEx {
    fn eq(&self, other: &Self) -> bool {
        self.Size == other.Size && self.BackgroundColor == other.BackgroundColor && self.rcTarget == other.rcTarget && self.rtTarget == other.rtTarget && self.NumSourceSurfaces == other.NumSourceSurfaces && self.Alpha == other.Alpha && self.Source == other.Source && self.DestinationFormat == other.DestinationFormat && self.DestinationFlags == other.DestinationFlags
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for DXVA_DeinterlaceBltEx {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DXVA_DeinterlaceBltEx {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(any(target_arch = "x86_64", target_arch = "aarch64",))]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct DXVA_DeinterlaceBltEx32 {
    pub Size: u32,
    pub BackgroundColor: DXVA_AYUVsample2,
    pub rcTarget: super::super::Foundation::RECT,
    pub rtTarget: i64,
    pub NumSourceSurfaces: u32,
    pub Alpha: f32,
    pub Source: [DXVA_VideoSample32; 32],
    pub DestinationFormat: u32,
    pub DestinationFlags: u32,
}
#[cfg(any(target_arch = "x86_64", target_arch = "aarch64",))]
#[cfg(feature = "Win32_Foundation")]
impl DXVA_DeinterlaceBltEx32 {}
#[cfg(any(target_arch = "x86_64", target_arch = "aarch64",))]
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for DXVA_DeinterlaceBltEx32 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(any(target_arch = "x86_64", target_arch = "aarch64",))]
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for DXVA_DeinterlaceBltEx32 {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVA_DeinterlaceBltEx32")
            .field("Size", &self.Size)
            .field("BackgroundColor", &self.BackgroundColor)
            .field("rcTarget", &self.rcTarget)
            .field("rtTarget", &self.rtTarget)
            .field("NumSourceSurfaces", &self.NumSourceSurfaces)
            .field("Alpha", &self.Alpha)
            .field("Source", &self.Source)
            .field("DestinationFormat", &self.DestinationFormat)
            .field("DestinationFlags", &self.DestinationFlags)
            .finish()
    }
}
#[cfg(any(target_arch = "x86_64", target_arch = "aarch64",))]
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for DXVA_DeinterlaceBltEx32 {
    fn eq(&self, other: &Self) -> bool {
        self.Size == other.Size && self.BackgroundColor == other.BackgroundColor && self.rcTarget == other.rcTarget && self.rtTarget == other.rtTarget && self.NumSourceSurfaces == other.NumSourceSurfaces && self.Alpha == other.Alpha && self.Source == other.Source && self.DestinationFormat == other.DestinationFormat && self.DestinationFlags == other.DestinationFlags
    }
}
#[cfg(any(target_arch = "x86_64", target_arch = "aarch64",))]
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for DXVA_DeinterlaceBltEx32 {}
#[cfg(any(target_arch = "x86_64", target_arch = "aarch64",))]
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DXVA_DeinterlaceBltEx32 {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Direct3D9")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
pub struct DXVA_DeinterlaceCaps {
    pub Size: u32,
    pub NumPreviousOutputFrames: u32,
    pub InputPool: u32,
    pub NumForwardRefSamples: u32,
    pub NumBackwardRefSamples: u32,
    pub d3dOutputFormat: super::super::Graphics::Direct3D9::D3DFORMAT,
    pub VideoProcessingCaps: DXVA_VideoProcessCaps,
    pub DeinterlaceTechnology: DXVA_DeinterlaceTech,
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl DXVA_DeinterlaceCaps {}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::default::Default for DXVA_DeinterlaceCaps {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::fmt::Debug for DXVA_DeinterlaceCaps {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVA_DeinterlaceCaps")
            .field("Size", &self.Size)
            .field("NumPreviousOutputFrames", &self.NumPreviousOutputFrames)
            .field("InputPool", &self.InputPool)
            .field("NumForwardRefSamples", &self.NumForwardRefSamples)
            .field("NumBackwardRefSamples", &self.NumBackwardRefSamples)
            .field("d3dOutputFormat", &self.d3dOutputFormat)
            .field("VideoProcessingCaps", &self.VideoProcessingCaps)
            .field("DeinterlaceTechnology", &self.DeinterlaceTechnology)
            .finish()
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::cmp::PartialEq for DXVA_DeinterlaceCaps {
    fn eq(&self, other: &Self) -> bool {
        self.Size == other.Size && self.NumPreviousOutputFrames == other.NumPreviousOutputFrames && self.InputPool == other.InputPool && self.NumForwardRefSamples == other.NumForwardRefSamples && self.NumBackwardRefSamples == other.NumBackwardRefSamples && self.d3dOutputFormat == other.d3dOutputFormat && self.VideoProcessingCaps == other.VideoProcessingCaps && self.DeinterlaceTechnology == other.DeinterlaceTechnology
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::cmp::Eq for DXVA_DeinterlaceCaps {}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
unsafe impl ::windows::runtime::Abi for DXVA_DeinterlaceCaps {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVA_DeinterlaceQueryAvailableModes {
    pub Size: u32,
    pub NumGuids: u32,
    pub Guids: [::windows::runtime::GUID; 32],
}
impl DXVA_DeinterlaceQueryAvailableModes {}
impl ::core::default::Default for DXVA_DeinterlaceQueryAvailableModes {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for DXVA_DeinterlaceQueryAvailableModes {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVA_DeinterlaceQueryAvailableModes").field("Size", &self.Size).field("NumGuids", &self.NumGuids).field("Guids", &self.Guids).finish()
    }
}
impl ::core::cmp::PartialEq for DXVA_DeinterlaceQueryAvailableModes {
    fn eq(&self, other: &Self) -> bool {
        self.Size == other.Size && self.NumGuids == other.NumGuids && self.Guids == other.Guids
    }
}
impl ::core::cmp::Eq for DXVA_DeinterlaceQueryAvailableModes {}
unsafe impl ::windows::runtime::Abi for DXVA_DeinterlaceQueryAvailableModes {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Direct3D9")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
pub struct DXVA_DeinterlaceQueryModeCaps {
    pub Size: u32,
    pub Guid: ::windows::runtime::GUID,
    pub VideoDesc: DXVA_VideoDesc,
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl DXVA_DeinterlaceQueryModeCaps {}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::default::Default for DXVA_DeinterlaceQueryModeCaps {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::fmt::Debug for DXVA_DeinterlaceQueryModeCaps {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVA_DeinterlaceQueryModeCaps").field("Size", &self.Size).field("Guid", &self.Guid).field("VideoDesc", &self.VideoDesc).finish()
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::cmp::PartialEq for DXVA_DeinterlaceQueryModeCaps {
    fn eq(&self, other: &Self) -> bool {
        self.Size == other.Size && self.Guid == other.Guid && self.VideoDesc == other.VideoDesc
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::cmp::Eq for DXVA_DeinterlaceQueryModeCaps {}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
unsafe impl ::windows::runtime::Abi for DXVA_DeinterlaceQueryModeCaps {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVA_DeinterlaceTech(pub i32);
pub const DXVA_DeinterlaceTech_Unknown: DXVA_DeinterlaceTech = DXVA_DeinterlaceTech(0i32);
pub const DXVA_DeinterlaceTech_BOBLineReplicate: DXVA_DeinterlaceTech = DXVA_DeinterlaceTech(1i32);
pub const DXVA_DeinterlaceTech_BOBVerticalStretch: DXVA_DeinterlaceTech = DXVA_DeinterlaceTech(2i32);
pub const DXVA_DeinterlaceTech_BOBVerticalStretch4Tap: DXVA_DeinterlaceTech = DXVA_DeinterlaceTech(256i32);
pub const DXVA_DeinterlaceTech_MedianFiltering: DXVA_DeinterlaceTech = DXVA_DeinterlaceTech(4i32);
pub const DXVA_DeinterlaceTech_EdgeFiltering: DXVA_DeinterlaceTech = DXVA_DeinterlaceTech(16i32);
pub const DXVA_DeinterlaceTech_FieldAdaptive: DXVA_DeinterlaceTech = DXVA_DeinterlaceTech(32i32);
pub const DXVA_DeinterlaceTech_PixelAdaptive: DXVA_DeinterlaceTech = DXVA_DeinterlaceTech(64i32);
pub const DXVA_DeinterlaceTech_MotionVectorSteered: DXVA_DeinterlaceTech = DXVA_DeinterlaceTech(128i32);
impl ::core::convert::From<i32> for DXVA_DeinterlaceTech {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVA_DeinterlaceTech {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVA_DestinationFlags(pub i32);
pub const DXVA_DestinationFlagMask: DXVA_DestinationFlags = DXVA_DestinationFlags(15i32);
pub const DXVA_DestinationFlag_Background_Changed: DXVA_DestinationFlags = DXVA_DestinationFlags(1i32);
pub const DXVA_DestinationFlag_TargetRect_Changed: DXVA_DestinationFlags = DXVA_DestinationFlags(2i32);
pub const DXVA_DestinationFlag_ColorData_Changed: DXVA_DestinationFlags = DXVA_DestinationFlags(4i32);
pub const DXVA_DestinationFlag_Alpha_Changed: DXVA_DestinationFlags = DXVA_DestinationFlags(8i32);
impl ::core::convert::From<i32> for DXVA_DestinationFlags {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVA_DestinationFlags {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVA_ExtendedFormat {
    pub _bitfield: u32,
}
impl DXVA_ExtendedFormat {}
impl ::core::default::Default for DXVA_ExtendedFormat {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for DXVA_ExtendedFormat {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVA_ExtendedFormat").field("_bitfield", &self._bitfield).finish()
    }
}
impl ::core::cmp::PartialEq for DXVA_ExtendedFormat {
    fn eq(&self, other: &Self) -> bool {
        self._bitfield == other._bitfield
    }
}
impl ::core::cmp::Eq for DXVA_ExtendedFormat {}
unsafe impl ::windows::runtime::Abi for DXVA_ExtendedFormat {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVA_Frequency {
    pub Numerator: u32,
    pub Denominator: u32,
}
impl DXVA_Frequency {}
impl ::core::default::Default for DXVA_Frequency {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for DXVA_Frequency {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVA_Frequency").field("Numerator", &self.Numerator).field("Denominator", &self.Denominator).finish()
    }
}
impl ::core::cmp::PartialEq for DXVA_Frequency {
    fn eq(&self, other: &Self) -> bool {
        self.Numerator == other.Numerator && self.Denominator == other.Denominator
    }
}
impl ::core::cmp::Eq for DXVA_Frequency {}
unsafe impl ::windows::runtime::Abi for DXVA_Frequency {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVA_NominalRange(pub i32);
pub const DXVA_NominalRangeShift: DXVA_NominalRange = DXVA_NominalRange(12i32);
pub const DXVA_NominalRangeMask: DXVA_NominalRange = DXVA_NominalRange(28672i32);
pub const DXVA_NominalRange_Unknown: DXVA_NominalRange = DXVA_NominalRange(0i32);
pub const DXVA_NominalRange_Normal: DXVA_NominalRange = DXVA_NominalRange(1i32);
pub const DXVA_NominalRange_Wide: DXVA_NominalRange = DXVA_NominalRange(2i32);
pub const DXVA_NominalRange_0_255: DXVA_NominalRange = DXVA_NominalRange(1i32);
pub const DXVA_NominalRange_16_235: DXVA_NominalRange = DXVA_NominalRange(2i32);
pub const DXVA_NominalRange_48_208: DXVA_NominalRange = DXVA_NominalRange(3i32);
impl ::core::convert::From<i32> for DXVA_NominalRange {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVA_NominalRange {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVA_PictureParameters {
    pub wDecodedPictureIndex: u16,
    pub wDeblockedPictureIndex: u16,
    pub wForwardRefPictureIndex: u16,
    pub wBackwardRefPictureIndex: u16,
    pub wPicWidthInMBminus1: u16,
    pub wPicHeightInMBminus1: u16,
    pub bMacroblockWidthMinus1: u8,
    pub bMacroblockHeightMinus1: u8,
    pub bBlockWidthMinus1: u8,
    pub bBlockHeightMinus1: u8,
    pub bBPPminus1: u8,
    pub bPicStructure: u8,
    pub bSecondField: u8,
    pub bPicIntra: u8,
    pub bPicBackwardPrediction: u8,
    pub bBidirectionalAveragingMode: u8,
    pub bMVprecisionAndChromaRelation: u8,
    pub bChromaFormat: u8,
    pub bPicScanFixed: u8,
    pub bPicScanMethod: u8,
    pub bPicReadbackRequests: u8,
    pub bRcontrol: u8,
    pub bPicSpatialResid8: u8,
    pub bPicOverflowBlocks: u8,
    pub bPicExtrapolation: u8,
    pub bPicDeblocked: u8,
    pub bPicDeblockConfined: u8,
    pub bPic4MVallowed: u8,
    pub bPicOBMC: u8,
    pub bPicBinPB: u8,
    pub bMV_RPS: u8,
    pub bReservedBits: u8,
    pub wBitstreamFcodes: u16,
    pub wBitstreamPCEelements: u16,
    pub bBitstreamConcealmentNeed: u8,
    pub bBitstreamConcealmentMethod: u8,
}
impl DXVA_PictureParameters {}
impl ::core::default::Default for DXVA_PictureParameters {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for DXVA_PictureParameters {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for DXVA_PictureParameters {}
unsafe impl ::windows::runtime::Abi for DXVA_PictureParameters {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct DXVA_ProcAmpControlBlt {
    pub Size: u32,
    pub DstRect: super::super::Foundation::RECT,
    pub SrcRect: super::super::Foundation::RECT,
    pub Alpha: f32,
    pub Brightness: f32,
    pub Contrast: f32,
    pub Hue: f32,
    pub Saturation: f32,
}
#[cfg(feature = "Win32_Foundation")]
impl DXVA_ProcAmpControlBlt {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for DXVA_ProcAmpControlBlt {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for DXVA_ProcAmpControlBlt {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVA_ProcAmpControlBlt")
            .field("Size", &self.Size)
            .field("DstRect", &self.DstRect)
            .field("SrcRect", &self.SrcRect)
            .field("Alpha", &self.Alpha)
            .field("Brightness", &self.Brightness)
            .field("Contrast", &self.Contrast)
            .field("Hue", &self.Hue)
            .field("Saturation", &self.Saturation)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for DXVA_ProcAmpControlBlt {
    fn eq(&self, other: &Self) -> bool {
        self.Size == other.Size && self.DstRect == other.DstRect && self.SrcRect == other.SrcRect && self.Alpha == other.Alpha && self.Brightness == other.Brightness && self.Contrast == other.Contrast && self.Hue == other.Hue && self.Saturation == other.Saturation
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for DXVA_ProcAmpControlBlt {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DXVA_ProcAmpControlBlt {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Direct3D9")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
pub struct DXVA_ProcAmpControlCaps {
    pub Size: u32,
    pub InputPool: u32,
    pub d3dOutputFormat: super::super::Graphics::Direct3D9::D3DFORMAT,
    pub ProcAmpControlProps: u32,
    pub VideoProcessingCaps: u32,
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl DXVA_ProcAmpControlCaps {}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::default::Default for DXVA_ProcAmpControlCaps {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::fmt::Debug for DXVA_ProcAmpControlCaps {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVA_ProcAmpControlCaps").field("Size", &self.Size).field("InputPool", &self.InputPool).field("d3dOutputFormat", &self.d3dOutputFormat).field("ProcAmpControlProps", &self.ProcAmpControlProps).field("VideoProcessingCaps", &self.VideoProcessingCaps).finish()
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::cmp::PartialEq for DXVA_ProcAmpControlCaps {
    fn eq(&self, other: &Self) -> bool {
        self.Size == other.Size && self.InputPool == other.InputPool && self.d3dOutputFormat == other.d3dOutputFormat && self.ProcAmpControlProps == other.ProcAmpControlProps && self.VideoProcessingCaps == other.VideoProcessingCaps
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::cmp::Eq for DXVA_ProcAmpControlCaps {}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
unsafe impl ::windows::runtime::Abi for DXVA_ProcAmpControlCaps {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVA_ProcAmpControlProp(pub i32);
pub const DXVA_ProcAmp_None: DXVA_ProcAmpControlProp = DXVA_ProcAmpControlProp(0i32);
pub const DXVA_ProcAmp_Brightness: DXVA_ProcAmpControlProp = DXVA_ProcAmpControlProp(1i32);
pub const DXVA_ProcAmp_Contrast: DXVA_ProcAmpControlProp = DXVA_ProcAmpControlProp(2i32);
pub const DXVA_ProcAmp_Hue: DXVA_ProcAmpControlProp = DXVA_ProcAmpControlProp(4i32);
pub const DXVA_ProcAmp_Saturation: DXVA_ProcAmpControlProp = DXVA_ProcAmpControlProp(8i32);
impl ::core::convert::From<i32> for DXVA_ProcAmpControlProp {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVA_ProcAmpControlProp {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Direct3D9")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
pub struct DXVA_ProcAmpControlQueryRange {
    pub Size: u32,
    pub ProcAmpControlProp: DXVA_ProcAmpControlProp,
    pub VideoDesc: DXVA_VideoDesc,
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl DXVA_ProcAmpControlQueryRange {}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::default::Default for DXVA_ProcAmpControlQueryRange {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::fmt::Debug for DXVA_ProcAmpControlQueryRange {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVA_ProcAmpControlQueryRange").field("Size", &self.Size).field("ProcAmpControlProp", &self.ProcAmpControlProp).field("VideoDesc", &self.VideoDesc).finish()
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::cmp::PartialEq for DXVA_ProcAmpControlQueryRange {
    fn eq(&self, other: &Self) -> bool {
        self.Size == other.Size && self.ProcAmpControlProp == other.ProcAmpControlProp && self.VideoDesc == other.VideoDesc
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::cmp::Eq for DXVA_ProcAmpControlQueryRange {}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
unsafe impl ::windows::runtime::Abi for DXVA_ProcAmpControlQueryRange {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVA_SampleFlags(pub i32);
pub const DXVA_SampleFlagsMask: DXVA_SampleFlags = DXVA_SampleFlags(15i32);
pub const DXVA_SampleFlag_Palette_Changed: DXVA_SampleFlags = DXVA_SampleFlags(1i32);
pub const DXVA_SampleFlag_SrcRect_Changed: DXVA_SampleFlags = DXVA_SampleFlags(2i32);
pub const DXVA_SampleFlag_DstRect_Changed: DXVA_SampleFlags = DXVA_SampleFlags(4i32);
pub const DXVA_SampleFlag_ColorData_Changed: DXVA_SampleFlags = DXVA_SampleFlags(8i32);
impl ::core::convert::From<i32> for DXVA_SampleFlags {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVA_SampleFlags {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVA_SampleFormat(pub i32);
pub const DXVA_SampleFormatMask: DXVA_SampleFormat = DXVA_SampleFormat(255i32);
pub const DXVA_SampleUnknown: DXVA_SampleFormat = DXVA_SampleFormat(0i32);
pub const DXVA_SamplePreviousFrame: DXVA_SampleFormat = DXVA_SampleFormat(1i32);
pub const DXVA_SampleProgressiveFrame: DXVA_SampleFormat = DXVA_SampleFormat(2i32);
pub const DXVA_SampleFieldInterleavedEvenFirst: DXVA_SampleFormat = DXVA_SampleFormat(3i32);
pub const DXVA_SampleFieldInterleavedOddFirst: DXVA_SampleFormat = DXVA_SampleFormat(4i32);
pub const DXVA_SampleFieldSingleEven: DXVA_SampleFormat = DXVA_SampleFormat(5i32);
pub const DXVA_SampleFieldSingleOdd: DXVA_SampleFormat = DXVA_SampleFormat(6i32);
pub const DXVA_SampleSubStream: DXVA_SampleFormat = DXVA_SampleFormat(7i32);
impl ::core::convert::From<i32> for DXVA_SampleFormat {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVA_SampleFormat {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVA_VideoChromaSubsampling(pub i32);
pub const DXVA_VideoChromaSubsamplingShift: DXVA_VideoChromaSubsampling = DXVA_VideoChromaSubsampling(8i32);
pub const DXVA_VideoChromaSubsamplingMask: DXVA_VideoChromaSubsampling = DXVA_VideoChromaSubsampling(3840i32);
pub const DXVA_VideoChromaSubsampling_Unknown: DXVA_VideoChromaSubsampling = DXVA_VideoChromaSubsampling(0i32);
pub const DXVA_VideoChromaSubsampling_ProgressiveChroma: DXVA_VideoChromaSubsampling = DXVA_VideoChromaSubsampling(8i32);
pub const DXVA_VideoChromaSubsampling_Horizontally_Cosited: DXVA_VideoChromaSubsampling = DXVA_VideoChromaSubsampling(4i32);
pub const DXVA_VideoChromaSubsampling_Vertically_Cosited: DXVA_VideoChromaSubsampling = DXVA_VideoChromaSubsampling(2i32);
pub const DXVA_VideoChromaSubsampling_Vertically_AlignedChromaPlanes: DXVA_VideoChromaSubsampling = DXVA_VideoChromaSubsampling(1i32);
pub const DXVA_VideoChromaSubsampling_MPEG2: DXVA_VideoChromaSubsampling = DXVA_VideoChromaSubsampling(5i32);
pub const DXVA_VideoChromaSubsampling_MPEG1: DXVA_VideoChromaSubsampling = DXVA_VideoChromaSubsampling(1i32);
pub const DXVA_VideoChromaSubsampling_DV_PAL: DXVA_VideoChromaSubsampling = DXVA_VideoChromaSubsampling(6i32);
pub const DXVA_VideoChromaSubsampling_Cosited: DXVA_VideoChromaSubsampling = DXVA_VideoChromaSubsampling(7i32);
impl ::core::convert::From<i32> for DXVA_VideoChromaSubsampling {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVA_VideoChromaSubsampling {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Direct3D9")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
pub struct DXVA_VideoDesc {
    pub Size: u32,
    pub SampleWidth: u32,
    pub SampleHeight: u32,
    pub SampleFormat: u32,
    pub d3dFormat: super::super::Graphics::Direct3D9::D3DFORMAT,
    pub InputSampleFreq: DXVA_Frequency,
    pub OutputFrameFreq: DXVA_Frequency,
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl DXVA_VideoDesc {}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::default::Default for DXVA_VideoDesc {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::fmt::Debug for DXVA_VideoDesc {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVA_VideoDesc")
            .field("Size", &self.Size)
            .field("SampleWidth", &self.SampleWidth)
            .field("SampleHeight", &self.SampleHeight)
            .field("SampleFormat", &self.SampleFormat)
            .field("d3dFormat", &self.d3dFormat)
            .field("InputSampleFreq", &self.InputSampleFreq)
            .field("OutputFrameFreq", &self.OutputFrameFreq)
            .finish()
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::cmp::PartialEq for DXVA_VideoDesc {
    fn eq(&self, other: &Self) -> bool {
        self.Size == other.Size && self.SampleWidth == other.SampleWidth && self.SampleHeight == other.SampleHeight && self.SampleFormat == other.SampleFormat && self.d3dFormat == other.d3dFormat && self.InputSampleFreq == other.InputSampleFreq && self.OutputFrameFreq == other.OutputFrameFreq
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::cmp::Eq for DXVA_VideoDesc {}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
unsafe impl ::windows::runtime::Abi for DXVA_VideoDesc {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVA_VideoLighting(pub i32);
pub const DXVA_VideoLightingShift: DXVA_VideoLighting = DXVA_VideoLighting(18i32);
pub const DXVA_VideoLightingMask: DXVA_VideoLighting = DXVA_VideoLighting(3932160i32);
pub const DXVA_VideoLighting_Unknown: DXVA_VideoLighting = DXVA_VideoLighting(0i32);
pub const DXVA_VideoLighting_bright: DXVA_VideoLighting = DXVA_VideoLighting(1i32);
pub const DXVA_VideoLighting_office: DXVA_VideoLighting = DXVA_VideoLighting(2i32);
pub const DXVA_VideoLighting_dim: DXVA_VideoLighting = DXVA_VideoLighting(3i32);
pub const DXVA_VideoLighting_dark: DXVA_VideoLighting = DXVA_VideoLighting(4i32);
impl ::core::convert::From<i32> for DXVA_VideoLighting {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVA_VideoLighting {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVA_VideoPrimaries(pub i32);
pub const DXVA_VideoPrimariesShift: DXVA_VideoPrimaries = DXVA_VideoPrimaries(22i32);
pub const DXVA_VideoPrimariesMask: DXVA_VideoPrimaries = DXVA_VideoPrimaries(130023424i32);
pub const DXVA_VideoPrimaries_Unknown: DXVA_VideoPrimaries = DXVA_VideoPrimaries(0i32);
pub const DXVA_VideoPrimaries_reserved: DXVA_VideoPrimaries = DXVA_VideoPrimaries(1i32);
pub const DXVA_VideoPrimaries_BT709: DXVA_VideoPrimaries = DXVA_VideoPrimaries(2i32);
pub const DXVA_VideoPrimaries_BT470_2_SysM: DXVA_VideoPrimaries = DXVA_VideoPrimaries(3i32);
pub const DXVA_VideoPrimaries_BT470_2_SysBG: DXVA_VideoPrimaries = DXVA_VideoPrimaries(4i32);
pub const DXVA_VideoPrimaries_SMPTE170M: DXVA_VideoPrimaries = DXVA_VideoPrimaries(5i32);
pub const DXVA_VideoPrimaries_SMPTE240M: DXVA_VideoPrimaries = DXVA_VideoPrimaries(6i32);
pub const DXVA_VideoPrimaries_EBU3213: DXVA_VideoPrimaries = DXVA_VideoPrimaries(7i32);
pub const DXVA_VideoPrimaries_SMPTE_C: DXVA_VideoPrimaries = DXVA_VideoPrimaries(8i32);
impl ::core::convert::From<i32> for DXVA_VideoPrimaries {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVA_VideoPrimaries {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVA_VideoProcessCaps(pub i32);
pub const DXVA_VideoProcess_None: DXVA_VideoProcessCaps = DXVA_VideoProcessCaps(0i32);
pub const DXVA_VideoProcess_YUV2RGB: DXVA_VideoProcessCaps = DXVA_VideoProcessCaps(1i32);
pub const DXVA_VideoProcess_StretchX: DXVA_VideoProcessCaps = DXVA_VideoProcessCaps(2i32);
pub const DXVA_VideoProcess_StretchY: DXVA_VideoProcessCaps = DXVA_VideoProcessCaps(4i32);
pub const DXVA_VideoProcess_AlphaBlend: DXVA_VideoProcessCaps = DXVA_VideoProcessCaps(8i32);
pub const DXVA_VideoProcess_SubRects: DXVA_VideoProcessCaps = DXVA_VideoProcessCaps(16i32);
pub const DXVA_VideoProcess_SubStreams: DXVA_VideoProcessCaps = DXVA_VideoProcessCaps(32i32);
pub const DXVA_VideoProcess_SubStreamsExtended: DXVA_VideoProcessCaps = DXVA_VideoProcessCaps(64i32);
pub const DXVA_VideoProcess_YUV2RGBExtended: DXVA_VideoProcessCaps = DXVA_VideoProcessCaps(128i32);
pub const DXVA_VideoProcess_AlphaBlendExtended: DXVA_VideoProcessCaps = DXVA_VideoProcessCaps(256i32);
impl ::core::convert::From<i32> for DXVA_VideoProcessCaps {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVA_VideoProcessCaps {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVA_VideoPropertyRange {
    pub MinValue: f32,
    pub MaxValue: f32,
    pub DefaultValue: f32,
    pub StepSize: f32,
}
impl DXVA_VideoPropertyRange {}
impl ::core::default::Default for DXVA_VideoPropertyRange {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for DXVA_VideoPropertyRange {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVA_VideoPropertyRange").field("MinValue", &self.MinValue).field("MaxValue", &self.MaxValue).field("DefaultValue", &self.DefaultValue).field("StepSize", &self.StepSize).finish()
    }
}
impl ::core::cmp::PartialEq for DXVA_VideoPropertyRange {
    fn eq(&self, other: &Self) -> bool {
        self.MinValue == other.MinValue && self.MaxValue == other.MaxValue && self.DefaultValue == other.DefaultValue && self.StepSize == other.StepSize
    }
}
impl ::core::cmp::Eq for DXVA_VideoPropertyRange {}
unsafe impl ::windows::runtime::Abi for DXVA_VideoPropertyRange {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DXVA_VideoSample {
    pub rtStart: i64,
    pub rtEnd: i64,
    pub SampleFormat: DXVA_SampleFormat,
    pub lpDDSSrcSurface: *mut ::core::ffi::c_void,
}
impl DXVA_VideoSample {}
impl ::core::default::Default for DXVA_VideoSample {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for DXVA_VideoSample {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVA_VideoSample").field("rtStart", &self.rtStart).field("rtEnd", &self.rtEnd).field("SampleFormat", &self.SampleFormat).field("lpDDSSrcSurface", &self.lpDDSSrcSurface).finish()
    }
}
impl ::core::cmp::PartialEq for DXVA_VideoSample {
    fn eq(&self, other: &Self) -> bool {
        self.rtStart == other.rtStart && self.rtEnd == other.rtEnd && self.SampleFormat == other.SampleFormat && self.lpDDSSrcSurface == other.lpDDSSrcSurface
    }
}
impl ::core::cmp::Eq for DXVA_VideoSample {}
unsafe impl ::windows::runtime::Abi for DXVA_VideoSample {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(any(target_arch = "x86_64", target_arch = "aarch64",))]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct DXVA_VideoSample2 {
    pub Size: u32,
    pub Reserved: u32,
    pub rtStart: i64,
    pub rtEnd: i64,
    pub SampleFormat: u32,
    pub SampleFlags: u32,
    pub lpDDSSrcSurface: *mut ::core::ffi::c_void,
    pub rcSrc: super::super::Foundation::RECT,
    pub rcDst: super::super::Foundation::RECT,
    pub Palette: [DXVA_AYUVsample2; 16],
}
#[cfg(any(target_arch = "x86_64", target_arch = "aarch64",))]
#[cfg(feature = "Win32_Foundation")]
impl DXVA_VideoSample2 {}
#[cfg(any(target_arch = "x86_64", target_arch = "aarch64",))]
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for DXVA_VideoSample2 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(any(target_arch = "x86_64", target_arch = "aarch64",))]
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for DXVA_VideoSample2 {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVA_VideoSample2")
            .field("Size", &self.Size)
            .field("Reserved", &self.Reserved)
            .field("rtStart", &self.rtStart)
            .field("rtEnd", &self.rtEnd)
            .field("SampleFormat", &self.SampleFormat)
            .field("SampleFlags", &self.SampleFlags)
            .field("lpDDSSrcSurface", &self.lpDDSSrcSurface)
            .field("rcSrc", &self.rcSrc)
            .field("rcDst", &self.rcDst)
            .field("Palette", &self.Palette)
            .finish()
    }
}
#[cfg(any(target_arch = "x86_64", target_arch = "aarch64",))]
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for DXVA_VideoSample2 {
    fn eq(&self, other: &Self) -> bool {
        self.Size == other.Size && self.Reserved == other.Reserved && self.rtStart == other.rtStart && self.rtEnd == other.rtEnd && self.SampleFormat == other.SampleFormat && self.SampleFlags == other.SampleFlags && self.lpDDSSrcSurface == other.lpDDSSrcSurface && self.rcSrc == other.rcSrc && self.rcDst == other.rcDst && self.Palette == other.Palette
    }
}
#[cfg(any(target_arch = "x86_64", target_arch = "aarch64",))]
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for DXVA_VideoSample2 {}
#[cfg(any(target_arch = "x86_64", target_arch = "aarch64",))]
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DXVA_VideoSample2 {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(any(target_arch = "x86",))]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct DXVA_VideoSample2 {
    pub rtStart: i64,
    pub rtEnd: i64,
    pub SampleFormat: u32,
    pub SampleFlags: u32,
    pub lpDDSSrcSurface: *mut ::core::ffi::c_void,
    pub rcSrc: super::super::Foundation::RECT,
    pub rcDst: super::super::Foundation::RECT,
    pub Palette: [DXVA_AYUVsample2; 16],
}
#[cfg(any(target_arch = "x86",))]
#[cfg(feature = "Win32_Foundation")]
impl DXVA_VideoSample2 {}
#[cfg(any(target_arch = "x86",))]
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for DXVA_VideoSample2 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(any(target_arch = "x86",))]
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for DXVA_VideoSample2 {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVA_VideoSample2")
            .field("rtStart", &self.rtStart)
            .field("rtEnd", &self.rtEnd)
            .field("SampleFormat", &self.SampleFormat)
            .field("SampleFlags", &self.SampleFlags)
            .field("lpDDSSrcSurface", &self.lpDDSSrcSurface)
            .field("rcSrc", &self.rcSrc)
            .field("rcDst", &self.rcDst)
            .field("Palette", &self.Palette)
            .finish()
    }
}
#[cfg(any(target_arch = "x86",))]
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for DXVA_VideoSample2 {
    fn eq(&self, other: &Self) -> bool {
        self.rtStart == other.rtStart && self.rtEnd == other.rtEnd && self.SampleFormat == other.SampleFormat && self.SampleFlags == other.SampleFlags && self.lpDDSSrcSurface == other.lpDDSSrcSurface && self.rcSrc == other.rcSrc && self.rcDst == other.rcDst && self.Palette == other.Palette
    }
}
#[cfg(any(target_arch = "x86",))]
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for DXVA_VideoSample2 {}
#[cfg(any(target_arch = "x86",))]
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DXVA_VideoSample2 {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(any(target_arch = "x86_64", target_arch = "aarch64",))]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct DXVA_VideoSample32 {
    pub rtStart: i64,
    pub rtEnd: i64,
    pub SampleFormat: u32,
    pub SampleFlags: u32,
    pub lpDDSSrcSurface: u32,
    pub rcSrc: super::super::Foundation::RECT,
    pub rcDst: super::super::Foundation::RECT,
    pub Palette: [DXVA_AYUVsample2; 16],
}
#[cfg(any(target_arch = "x86_64", target_arch = "aarch64",))]
#[cfg(feature = "Win32_Foundation")]
impl DXVA_VideoSample32 {}
#[cfg(any(target_arch = "x86_64", target_arch = "aarch64",))]
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for DXVA_VideoSample32 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(any(target_arch = "x86_64", target_arch = "aarch64",))]
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for DXVA_VideoSample32 {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DXVA_VideoSample32")
            .field("rtStart", &self.rtStart)
            .field("rtEnd", &self.rtEnd)
            .field("SampleFormat", &self.SampleFormat)
            .field("SampleFlags", &self.SampleFlags)
            .field("lpDDSSrcSurface", &self.lpDDSSrcSurface)
            .field("rcSrc", &self.rcSrc)
            .field("rcDst", &self.rcDst)
            .field("Palette", &self.Palette)
            .finish()
    }
}
#[cfg(any(target_arch = "x86_64", target_arch = "aarch64",))]
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for DXVA_VideoSample32 {
    fn eq(&self, other: &Self) -> bool {
        self.rtStart == other.rtStart && self.rtEnd == other.rtEnd && self.SampleFormat == other.SampleFormat && self.SampleFlags == other.SampleFlags && self.lpDDSSrcSurface == other.lpDDSSrcSurface && self.rcSrc == other.rcSrc && self.rcDst == other.rcDst && self.Palette == other.Palette
    }
}
#[cfg(any(target_arch = "x86_64", target_arch = "aarch64",))]
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for DXVA_VideoSample32 {}
#[cfg(any(target_arch = "x86_64", target_arch = "aarch64",))]
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DXVA_VideoSample32 {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVA_VideoTransferFunction(pub i32);
pub const DXVA_VideoTransFuncShift: DXVA_VideoTransferFunction = DXVA_VideoTransferFunction(27i32);
pub const DXVA_VideoTransFuncMask: DXVA_VideoTransferFunction = DXVA_VideoTransferFunction(-134217728i32);
pub const DXVA_VideoTransFunc_Unknown: DXVA_VideoTransferFunction = DXVA_VideoTransferFunction(0i32);
pub const DXVA_VideoTransFunc_10: DXVA_VideoTransferFunction = DXVA_VideoTransferFunction(1i32);
pub const DXVA_VideoTransFunc_18: DXVA_VideoTransferFunction = DXVA_VideoTransferFunction(2i32);
pub const DXVA_VideoTransFunc_20: DXVA_VideoTransferFunction = DXVA_VideoTransferFunction(3i32);
pub const DXVA_VideoTransFunc_22: DXVA_VideoTransferFunction = DXVA_VideoTransferFunction(4i32);
pub const DXVA_VideoTransFunc_22_709: DXVA_VideoTransferFunction = DXVA_VideoTransferFunction(5i32);
pub const DXVA_VideoTransFunc_22_240M: DXVA_VideoTransferFunction = DXVA_VideoTransferFunction(6i32);
pub const DXVA_VideoTransFunc_22_8bit_sRGB: DXVA_VideoTransferFunction = DXVA_VideoTransferFunction(7i32);
pub const DXVA_VideoTransFunc_28: DXVA_VideoTransferFunction = DXVA_VideoTransferFunction(8i32);
impl ::core::convert::From<i32> for DXVA_VideoTransferFunction {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVA_VideoTransferFunction {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DXVA_VideoTransferMatrix(pub i32);
pub const DXVA_VideoTransferMatrixShift: DXVA_VideoTransferMatrix = DXVA_VideoTransferMatrix(15i32);
pub const DXVA_VideoTransferMatrixMask: DXVA_VideoTransferMatrix = DXVA_VideoTransferMatrix(229376i32);
pub const DXVA_VideoTransferMatrix_Unknown: DXVA_VideoTransferMatrix = DXVA_VideoTransferMatrix(0i32);
pub const DXVA_VideoTransferMatrix_BT709: DXVA_VideoTransferMatrix = DXVA_VideoTransferMatrix(1i32);
pub const DXVA_VideoTransferMatrix_BT601: DXVA_VideoTransferMatrix = DXVA_VideoTransferMatrix(2i32);
pub const DXVA_VideoTransferMatrix_SMPTE240M: DXVA_VideoTransferMatrix = DXVA_VideoTransferMatrix(3i32);
impl ::core::convert::From<i32> for DXVA_VideoTransferMatrix {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DXVA_VideoTransferMatrix {
    type Abi = Self;
}
pub const DXVAp_DeinterlaceBobDevice: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(861578094, 30852, 17316, [156, 145, 127, 135, 250, 243, 227, 126]);
pub const DXVAp_DeinterlaceContainerDevice: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(243649427, 12358, 20464, [174, 204, 213, 140, 181, 240, 53, 253]);
pub const DXVAp_ModeMPEG2_A: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(461487626, 41159, 4563, [185, 132, 0, 192, 79, 46, 115, 197]);
pub const DXVAp_ModeMPEG2_C: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(461487628, 41159, 4563, [185, 132, 0, 192, 79, 46, 115, 197]);
pub const DXVAp_NoEncrypt: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(461487824, 41159, 4563, [185, 132, 0, 192, 79, 46, 115, 197]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct DeviceStreamState(pub i32);
pub const DeviceStreamState_Stop: DeviceStreamState = DeviceStreamState(0i32);
pub const DeviceStreamState_Pause: DeviceStreamState = DeviceStreamState(1i32);
pub const DeviceStreamState_Run: DeviceStreamState = DeviceStreamState(2i32);
pub const DeviceStreamState_Disabled: DeviceStreamState = DeviceStreamState(3i32);
impl ::core::convert::From<i32> for DeviceStreamState {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DeviceStreamState {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct DigitalWindowSetting {
    pub OriginX: f64,
    pub OriginY: f64,
    pub WindowSize: f64,
}
impl DigitalWindowSetting {}
impl ::core::default::Default for DigitalWindowSetting {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for DigitalWindowSetting {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("DigitalWindowSetting").field("OriginX", &self.OriginX).field("OriginY", &self.OriginY).field("WindowSize", &self.WindowSize).finish()
    }
}
impl ::core::cmp::PartialEq for DigitalWindowSetting {
    fn eq(&self, other: &Self) -> bool {
        self.OriginX == other.OriginX && self.OriginY == other.OriginY && self.WindowSize == other.WindowSize
    }
}
impl ::core::cmp::Eq for DigitalWindowSetting {}
unsafe impl ::windows::runtime::Abi for DigitalWindowSetting {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct EAllocationType(pub i32);
pub const eAllocationTypeDynamic: EAllocationType = EAllocationType(0i32);
pub const eAllocationTypeRT: EAllocationType = EAllocationType(1i32);
pub const eAllocationTypePageable: EAllocationType = EAllocationType(2i32);
pub const eAllocationTypeIgnore: EAllocationType = EAllocationType(3i32);
impl ::core::convert::From<i32> for EAllocationType {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for EAllocationType {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct EVRFilterConfigPrefs(pub i32);
pub const EVRFilterConfigPrefs_EnableQoS: EVRFilterConfigPrefs = EVRFilterConfigPrefs(1i32);
pub const EVRFilterConfigPrefs_Mask: EVRFilterConfigPrefs = EVRFilterConfigPrefs(1i32);
impl ::core::convert::From<i32> for EVRFilterConfigPrefs {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for EVRFilterConfigPrefs {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const E_TOCPARSER_INVALIDASFFILE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1728053247i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const E_TOCPARSER_INVALIDRIFFFILE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1728053246i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const FACILITY_MF: u32 = 13u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const FACILITY_MF_WIN32: u32 = 7u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct FILE_ACCESSMODE(pub i32);
pub const ACCESSMODE_READ: FILE_ACCESSMODE = FILE_ACCESSMODE(1i32);
pub const ACCESSMODE_WRITE: FILE_ACCESSMODE = FILE_ACCESSMODE(2i32);
pub const ACCESSMODE_READWRITE: FILE_ACCESSMODE = FILE_ACCESSMODE(3i32);
pub const ACCESSMODE_WRITE_EXCLUSIVE: FILE_ACCESSMODE = FILE_ACCESSMODE(4i32);
impl ::core::convert::From<i32> for FILE_ACCESSMODE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for FILE_ACCESSMODE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct FILE_OPENMODE(pub i32);
pub const OPENMODE_FAIL_IF_NOT_EXIST: FILE_OPENMODE = FILE_OPENMODE(0i32);
pub const OPENMODE_FAIL_IF_EXIST: FILE_OPENMODE = FILE_OPENMODE(1i32);
pub const OPENMODE_RESET_IF_EXIST: FILE_OPENMODE = FILE_OPENMODE(2i32);
pub const OPENMODE_APPEND_IF_EXIST: FILE_OPENMODE = FILE_OPENMODE(3i32);
pub const OPENMODE_DELETE_IF_EXIST: FILE_OPENMODE = FILE_OPENMODE(4i32);
impl ::core::convert::From<i32> for FILE_OPENMODE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for FILE_OPENMODE {
    type Abi = Self;
}
pub const FORMAT_MFVideoFormat: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2933173037, 29478, 17355, [148, 100, 200, 121, 202, 185, 196, 61]);
pub const GUID_NativeDeviceService: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4017218876, 21236, 17349, [184, 106, 173, 108, 178, 22, 166, 30]);
pub const GUID_PlayToService: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4138270621, 40468, 16841, [191, 15, 18, 10, 43, 60, 225, 32]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IAdvancedMediaCapture(pub ::windows::runtime::IUnknown);
impl IAdvancedMediaCapture {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetAdvancedMediaCaptureSettings(&self) -> ::windows::runtime::Result<IAdvancedMediaCaptureSettings> {
        let mut result__: <IAdvancedMediaCaptureSettings as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IAdvancedMediaCaptureSettings>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IAdvancedMediaCapture {
    type Vtable = IAdvancedMediaCapture_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3497334149, 53782, 17220, [181, 191, 70, 59, 104, 249, 119, 187]);
}
impl ::core::convert::From<IAdvancedMediaCapture> for ::windows::runtime::IUnknown {
    fn from(value: IAdvancedMediaCapture) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IAdvancedMediaCapture> for ::windows::runtime::IUnknown {
    fn from(value: &IAdvancedMediaCapture) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IAdvancedMediaCapture {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IAdvancedMediaCapture {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IAdvancedMediaCapture_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, value: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IAdvancedMediaCaptureInitializationSettings(pub ::windows::runtime::IUnknown);
impl IAdvancedMediaCaptureInitializationSettings {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetDirectxDeviceManager<'a, Param0: ::windows::runtime::IntoParam<'a, IMFDXGIDeviceManager>>(&self, value: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), value.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IAdvancedMediaCaptureInitializationSettings {
    type Vtable = IAdvancedMediaCaptureInitializationSettings_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1038225929, 35750, 20266, [165, 119, 40, 25, 181, 111, 241, 77]);
}
impl ::core::convert::From<IAdvancedMediaCaptureInitializationSettings> for ::windows::runtime::IUnknown {
    fn from(value: IAdvancedMediaCaptureInitializationSettings) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IAdvancedMediaCaptureInitializationSettings> for ::windows::runtime::IUnknown {
    fn from(value: &IAdvancedMediaCaptureInitializationSettings) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IAdvancedMediaCaptureInitializationSettings {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IAdvancedMediaCaptureInitializationSettings {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IAdvancedMediaCaptureInitializationSettings_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, value: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IAdvancedMediaCaptureSettings(pub ::windows::runtime::IUnknown);
impl IAdvancedMediaCaptureSettings {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDirectxDeviceManager(&self) -> ::windows::runtime::Result<IMFDXGIDeviceManager> {
        let mut result__: <IMFDXGIDeviceManager as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFDXGIDeviceManager>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IAdvancedMediaCaptureSettings {
    type Vtable = IAdvancedMediaCaptureSettings_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(618678367, 41790, 19105, [181, 100, 96, 25, 177, 209, 79, 101]);
}
impl ::core::convert::From<IAdvancedMediaCaptureSettings> for ::windows::runtime::IUnknown {
    fn from(value: IAdvancedMediaCaptureSettings) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IAdvancedMediaCaptureSettings> for ::windows::runtime::IUnknown {
    fn from(value: &IAdvancedMediaCaptureSettings) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IAdvancedMediaCaptureSettings {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IAdvancedMediaCaptureSettings {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IAdvancedMediaCaptureSettings_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, value: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IAudioSourceProvider(pub ::windows::runtime::IUnknown);
impl IAudioSourceProvider {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ProvideInput(&self, dwsamplecount: u32, pdwchannelcount: *mut u32, pinterleavedaudiodata: *mut f32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwsamplecount), ::core::mem::transmute(pdwchannelcount), ::core::mem::transmute(pinterleavedaudiodata)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IAudioSourceProvider {
    type Vtable = IAudioSourceProvider_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3954897481, 44994, 17794, [145, 198, 182, 13, 242, 232, 73, 84]);
}
impl ::core::convert::From<IAudioSourceProvider> for ::windows::runtime::IUnknown {
    fn from(value: IAudioSourceProvider) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IAudioSourceProvider> for ::windows::runtime::IUnknown {
    fn from(value: &IAudioSourceProvider) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IAudioSourceProvider {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IAudioSourceProvider {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IAudioSourceProvider_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwsamplecount: u32, pdwchannelcount: *mut u32, pinterleavedaudiodata: *mut f32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IClusterDetector(pub ::windows::runtime::IUnknown);
impl IClusterDetector {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Initialize(&self, wbaseentrylevel: u16, wclusterentrylevel: u16) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(wbaseentrylevel), ::core::mem::transmute(wclusterentrylevel)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Detect<'a, Param3: ::windows::runtime::IntoParam<'a, IToc>>(&self, dwmaxnumclusters: u32, fminclusterduration: f32, fmaxclusterduration: f32, psrctoc: Param3) -> ::windows::runtime::Result<IToc> {
        let mut result__: <IToc as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwmaxnumclusters), ::core::mem::transmute(fminclusterduration), ::core::mem::transmute(fmaxclusterduration), psrctoc.into_param().abi(), &mut result__).from_abi::<IToc>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IClusterDetector {
    type Vtable = IClusterDetector_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1057486775, 50816, 16857, [148, 35, 145, 81, 7, 236, 159, 249]);
}
impl ::core::convert::From<IClusterDetector> for ::windows::runtime::IUnknown {
    fn from(value: IClusterDetector) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IClusterDetector> for ::windows::runtime::IUnknown {
    fn from(value: &IClusterDetector) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IClusterDetector {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IClusterDetector {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IClusterDetector_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, wbaseentrylevel: u16, wclusterentrylevel: u16) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwmaxnumclusters: u32, fminclusterduration: f32, fmaxclusterduration: f32, psrctoc: ::windows::runtime::RawPtr, ppdsttoc: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct ICodecAPI(pub ::windows::runtime::IUnknown);
impl ICodecAPI {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn IsSupported(&self, api: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(api)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn IsModifiable(&self, api: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(api)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetParameterRange(&self, api: *const ::windows::runtime::GUID, valuemin: *mut super::super::System::Com::VARIANT, valuemax: *mut super::super::System::Com::VARIANT, steppingdelta: *mut super::super::System::Com::VARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(api), ::core::mem::transmute(valuemin), ::core::mem::transmute(valuemax), ::core::mem::transmute(steppingdelta)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetParameterValues(&self, api: *const ::windows::runtime::GUID, values: *mut *mut super::super::System::Com::VARIANT, valuescount: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(api), ::core::mem::transmute(values), ::core::mem::transmute(valuescount)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetDefaultValue(&self, api: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<super::super::System::Com::VARIANT> {
        let mut result__: <super::super::System::Com::VARIANT as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(api), &mut result__).from_abi::<super::super::System::Com::VARIANT>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetValue(&self, api: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<super::super::System::Com::VARIANT> {
        let mut result__: <super::super::System::Com::VARIANT as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(api), &mut result__).from_abi::<super::super::System::Com::VARIANT>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn SetValue(&self, api: *const ::windows::runtime::GUID, value: *const super::super::System::Com::VARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(api), ::core::mem::transmute(value)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RegisterForEvent(&self, api: *const ::windows::runtime::GUID, userdata: isize) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(api), ::core::mem::transmute(userdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn UnregisterForEvent(&self, api: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(api)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetAllDefaults(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn SetValueWithNotify(&self, api: *const ::windows::runtime::GUID, value: *mut super::super::System::Com::VARIANT, changedparam: *mut *mut ::windows::runtime::GUID, changedparamcount: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), ::core::mem::transmute(api), ::core::mem::transmute(value), ::core::mem::transmute(changedparam), ::core::mem::transmute(changedparamcount)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetAllDefaultsWithNotify(&self, changedparam: *mut *mut ::windows::runtime::GUID, changedparamcount: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), ::core::mem::transmute(changedparam), ::core::mem::transmute(changedparamcount)).ok()
    }
    #[cfg(feature = "Win32_System_Com")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_System_Com`*"]
    pub unsafe fn GetAllSettings<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::IStream>>(&self, __midl__icodecapi0000: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), __midl__icodecapi0000.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_System_Com")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_System_Com`*"]
    pub unsafe fn SetAllSettings<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::IStream>>(&self, __midl__icodecapi0001: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::core::mem::transmute_copy(self), __midl__icodecapi0001.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_System_Com")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_System_Com`*"]
    pub unsafe fn SetAllSettingsWithNotify<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::IStream>>(&self, __midl__icodecapi0002: Param0, changedparam: *mut *mut ::windows::runtime::GUID, changedparamcount: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self), __midl__icodecapi0002.into_param().abi(), ::core::mem::transmute(changedparam), ::core::mem::transmute(changedparamcount)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for ICodecAPI {
    type Vtable = ICodecAPI_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2417865927, 12750, 16802, [133, 220, 143, 160, 191, 65, 184, 218]);
}
impl ::core::convert::From<ICodecAPI> for ::windows::runtime::IUnknown {
    fn from(value: ICodecAPI) -> Self {
        value.0
    }
}
impl ::core::convert::From<&ICodecAPI> for ::windows::runtime::IUnknown {
    fn from(value: &ICodecAPI) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ICodecAPI {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a ICodecAPI {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICodecAPI_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, api: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, api: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, api: *const ::windows::runtime::GUID, valuemin: *mut ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, valuemax: *mut ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, steppingdelta: *mut ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, api: *const ::windows::runtime::GUID, values: *mut *mut super::super::System::Com::VARIANT, valuescount: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, api: *const ::windows::runtime::GUID, value: *mut ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, api: *const ::windows::runtime::GUID, value: *mut ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, api: *const ::windows::runtime::GUID, value: *const ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, api: *const ::windows::runtime::GUID, userdata: isize) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, api: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, api: *const ::windows::runtime::GUID, value: *mut ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, changedparam: *mut *mut ::windows::runtime::GUID, changedparamcount: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, changedparam: *mut *mut ::windows::runtime::GUID, changedparamcount: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Com")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, __midl__icodecapi0000: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))] usize,
    #[cfg(feature = "Win32_System_Com")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, __midl__icodecapi0001: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))] usize,
    #[cfg(feature = "Win32_System_Com")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, __midl__icodecapi0002: ::windows::runtime::RawPtr, changedparam: *mut *mut ::windows::runtime::GUID, changedparamcount: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct ID3D12VideoDecodeCommandList(pub ::windows::runtime::IUnknown);
impl ID3D12VideoDecodeCommandList {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPrivateData(&self, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(pdatasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateData(&self, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(datasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateDataInterface<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guid: *const ::windows::runtime::GUID, pdata: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), pdata.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, name: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), name.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDevice<T: ::windows::runtime::Interface>(&self, result__: *mut ::core::option::Option<T>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &<T as ::windows::runtime::Interface>::IID, result__ as *mut _ as *mut _).ok()
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn GetType(&self) -> super::super::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Close(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn Reset<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12CommandAllocator>>(&self, pallocator: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), pallocator.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ClearState(&self) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn ResourceBarrier(&self, numbarriers: u32, pbarriers: *const super::super::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(numbarriers), ::core::mem::transmute(pbarriers)))
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn DiscardResource<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Resource>>(&self, presource: Param0, pregion: *const super::super::Graphics::Direct3D12::D3D12_DISCARD_REGION) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), presource.into_param().abi(), ::core::mem::transmute(pregion)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn BeginQuery<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12QueryHeap>>(&self, pqueryheap: Param0, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), pqueryheap.into_param().abi(), ::core::mem::transmute(r#type), ::core::mem::transmute(index)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn EndQuery<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12QueryHeap>>(&self, pqueryheap: Param0, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), pqueryheap.into_param().abi(), ::core::mem::transmute(r#type), ::core::mem::transmute(index)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn ResolveQueryData<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12QueryHeap>, Param4: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Resource>>(&self, pqueryheap: Param0, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, startindex: u32, numqueries: u32, pdestinationbuffer: Param4, aligneddestinationbufferoffset: u64) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).16)(
            ::core::mem::transmute_copy(self),
            pqueryheap.into_param().abi(),
            ::core::mem::transmute(r#type),
            ::core::mem::transmute(startindex),
            ::core::mem::transmute(numqueries),
            pdestinationbuffer.into_param().abi(),
            ::core::mem::transmute(aligneddestinationbufferoffset),
        ))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn SetPredication<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Resource>>(&self, pbuffer: Param0, alignedbufferoffset: u64, operation: super::super::Graphics::Direct3D12::D3D12_PREDICATION_OP) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self), pbuffer.into_param().abi(), ::core::mem::transmute(alignedbufferoffset), ::core::mem::transmute(operation)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetMarker(&self, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).18)(::core::mem::transmute_copy(self), ::core::mem::transmute(metadata), ::core::mem::transmute(pdata), ::core::mem::transmute(size)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BeginEvent(&self, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).19)(::core::mem::transmute_copy(self), ::core::mem::transmute(metadata), ::core::mem::transmute(pdata), ::core::mem::transmute(size)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndEvent(&self) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).20)(::core::mem::transmute_copy(self)))
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D12`, `Win32_Graphics_Dxgi`*"]
    pub unsafe fn DecodeFrame<'a, Param0: ::windows::runtime::IntoParam<'a, ID3D12VideoDecoder>>(&self, pdecoder: Param0, poutputarguments: *const D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS, pinputarguments: *const D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).21)(::core::mem::transmute_copy(self), pdecoder.into_param().abi(), ::core::mem::transmute(poutputarguments), ::core::mem::transmute(pinputarguments)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn WriteBufferImmediate(&self, count: u32, pparams: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, pmodes: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).22)(::core::mem::transmute_copy(self), ::core::mem::transmute(count), ::core::mem::transmute(pparams), ::core::mem::transmute(pmodes)))
    }
}
unsafe impl ::windows::runtime::Interface for ID3D12VideoDecodeCommandList {
    type Vtable = ID3D12VideoDecodeCommandList_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(996168558, 44329, 20068, [162, 105, 248, 83, 131, 126, 94, 83]);
}
impl ::core::convert::From<ID3D12VideoDecodeCommandList> for ::windows::runtime::IUnknown {
    fn from(value: ID3D12VideoDecodeCommandList) -> Self {
        value.0
    }
}
impl ::core::convert::From<&ID3D12VideoDecodeCommandList> for ::windows::runtime::IUnknown {
    fn from(value: &ID3D12VideoDecodeCommandList) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ID3D12VideoDecodeCommandList {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a ID3D12VideoDecodeCommandList {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoDecodeCommandList> for super::super::Graphics::Direct3D12::ID3D12CommandList {
    fn from(value: ID3D12VideoDecodeCommandList) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoDecodeCommandList> for super::super::Graphics::Direct3D12::ID3D12CommandList {
    fn from(value: &ID3D12VideoDecodeCommandList) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12CommandList> for ID3D12VideoDecodeCommandList {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12CommandList> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12CommandList> for &ID3D12VideoDecodeCommandList {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12CommandList> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoDecodeCommandList> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: ID3D12VideoDecodeCommandList) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoDecodeCommandList> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: &ID3D12VideoDecodeCommandList) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for ID3D12VideoDecodeCommandList {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for &ID3D12VideoDecodeCommandList {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoDecodeCommandList> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: ID3D12VideoDecodeCommandList) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoDecodeCommandList> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: &ID3D12VideoDecodeCommandList) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for ID3D12VideoDecodeCommandList {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for &ID3D12VideoDecodeCommandList {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ID3D12VideoDecodeCommandList_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdata: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvdevice: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE,
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pallocator: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, numbarriers: u32, pbarriers: *const ::core::mem::ManuallyDrop<super::super::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER>),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presource: ::windows::runtime::RawPtr, pregion: *const super::super::Graphics::Direct3D12::D3D12_DISCARD_REGION),
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12")))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pqueryheap: ::windows::runtime::RawPtr, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pqueryheap: ::windows::runtime::RawPtr, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pqueryheap: ::windows::runtime::RawPtr, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, startindex: u32, numqueries: u32, pdestinationbuffer: ::windows::runtime::RawPtr, aligneddestinationbufferoffset: u64),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbuffer: ::windows::runtime::RawPtr, alignedbufferoffset: u64, operation: super::super::Graphics::Direct3D12::D3D12_PREDICATION_OP),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdecoder: ::windows::runtime::RawPtr, poutputarguments: *const ::core::mem::ManuallyDrop<D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS>, pinputarguments: *const ::core::mem::ManuallyDrop<D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS>),
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi")))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, pparams: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, pmodes: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct ID3D12VideoDecodeCommandList1(pub ::windows::runtime::IUnknown);
impl ID3D12VideoDecodeCommandList1 {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPrivateData(&self, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(pdatasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateData(&self, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(datasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateDataInterface<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guid: *const ::windows::runtime::GUID, pdata: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), pdata.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, name: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), name.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDevice<T: ::windows::runtime::Interface>(&self, result__: *mut ::core::option::Option<T>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &<T as ::windows::runtime::Interface>::IID, result__ as *mut _ as *mut _).ok()
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn GetType(&self) -> super::super::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Close(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn Reset<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12CommandAllocator>>(&self, pallocator: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), pallocator.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ClearState(&self) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn ResourceBarrier(&self, numbarriers: u32, pbarriers: *const super::super::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(numbarriers), ::core::mem::transmute(pbarriers)))
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn DiscardResource<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Resource>>(&self, presource: Param0, pregion: *const super::super::Graphics::Direct3D12::D3D12_DISCARD_REGION) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), presource.into_param().abi(), ::core::mem::transmute(pregion)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn BeginQuery<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12QueryHeap>>(&self, pqueryheap: Param0, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), pqueryheap.into_param().abi(), ::core::mem::transmute(r#type), ::core::mem::transmute(index)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn EndQuery<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12QueryHeap>>(&self, pqueryheap: Param0, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), pqueryheap.into_param().abi(), ::core::mem::transmute(r#type), ::core::mem::transmute(index)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn ResolveQueryData<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12QueryHeap>, Param4: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Resource>>(&self, pqueryheap: Param0, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, startindex: u32, numqueries: u32, pdestinationbuffer: Param4, aligneddestinationbufferoffset: u64) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).16)(
            ::core::mem::transmute_copy(self),
            pqueryheap.into_param().abi(),
            ::core::mem::transmute(r#type),
            ::core::mem::transmute(startindex),
            ::core::mem::transmute(numqueries),
            pdestinationbuffer.into_param().abi(),
            ::core::mem::transmute(aligneddestinationbufferoffset),
        ))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn SetPredication<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Resource>>(&self, pbuffer: Param0, alignedbufferoffset: u64, operation: super::super::Graphics::Direct3D12::D3D12_PREDICATION_OP) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self), pbuffer.into_param().abi(), ::core::mem::transmute(alignedbufferoffset), ::core::mem::transmute(operation)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetMarker(&self, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).18)(::core::mem::transmute_copy(self), ::core::mem::transmute(metadata), ::core::mem::transmute(pdata), ::core::mem::transmute(size)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BeginEvent(&self, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).19)(::core::mem::transmute_copy(self), ::core::mem::transmute(metadata), ::core::mem::transmute(pdata), ::core::mem::transmute(size)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndEvent(&self) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).20)(::core::mem::transmute_copy(self)))
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D12`, `Win32_Graphics_Dxgi`*"]
    pub unsafe fn DecodeFrame<'a, Param0: ::windows::runtime::IntoParam<'a, ID3D12VideoDecoder>>(&self, pdecoder: Param0, poutputarguments: *const D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS, pinputarguments: *const D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).21)(::core::mem::transmute_copy(self), pdecoder.into_param().abi(), ::core::mem::transmute(poutputarguments), ::core::mem::transmute(pinputarguments)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn WriteBufferImmediate(&self, count: u32, pparams: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, pmodes: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).22)(::core::mem::transmute_copy(self), ::core::mem::transmute(count), ::core::mem::transmute(pparams), ::core::mem::transmute(pmodes)))
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D12`, `Win32_Graphics_Dxgi`*"]
    pub unsafe fn DecodeFrame1<'a, Param0: ::windows::runtime::IntoParam<'a, ID3D12VideoDecoder>>(&self, pdecoder: Param0, poutputarguments: *const D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1, pinputarguments: *const D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).23)(::core::mem::transmute_copy(self), pdecoder.into_param().abi(), ::core::mem::transmute(poutputarguments), ::core::mem::transmute(pinputarguments)))
    }
}
unsafe impl ::windows::runtime::Interface for ID3D12VideoDecodeCommandList1 {
    type Vtable = ID3D12VideoDecodeCommandList1_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3576627483, 46446, 17724, [160, 90, 167, 243, 17, 200, 244, 114]);
}
impl ::core::convert::From<ID3D12VideoDecodeCommandList1> for ::windows::runtime::IUnknown {
    fn from(value: ID3D12VideoDecodeCommandList1) -> Self {
        value.0
    }
}
impl ::core::convert::From<&ID3D12VideoDecodeCommandList1> for ::windows::runtime::IUnknown {
    fn from(value: &ID3D12VideoDecodeCommandList1) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ID3D12VideoDecodeCommandList1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a ID3D12VideoDecodeCommandList1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<ID3D12VideoDecodeCommandList1> for ID3D12VideoDecodeCommandList {
    fn from(value: ID3D12VideoDecodeCommandList1) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ID3D12VideoDecodeCommandList1> for ID3D12VideoDecodeCommandList {
    fn from(value: &ID3D12VideoDecodeCommandList1) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ID3D12VideoDecodeCommandList> for ID3D12VideoDecodeCommandList1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ID3D12VideoDecodeCommandList> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ID3D12VideoDecodeCommandList> for &ID3D12VideoDecodeCommandList1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ID3D12VideoDecodeCommandList> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoDecodeCommandList1> for super::super::Graphics::Direct3D12::ID3D12CommandList {
    fn from(value: ID3D12VideoDecodeCommandList1) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoDecodeCommandList1> for super::super::Graphics::Direct3D12::ID3D12CommandList {
    fn from(value: &ID3D12VideoDecodeCommandList1) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12CommandList> for ID3D12VideoDecodeCommandList1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12CommandList> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12CommandList> for &ID3D12VideoDecodeCommandList1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12CommandList> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoDecodeCommandList1> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: ID3D12VideoDecodeCommandList1) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoDecodeCommandList1> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: &ID3D12VideoDecodeCommandList1) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for ID3D12VideoDecodeCommandList1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for &ID3D12VideoDecodeCommandList1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoDecodeCommandList1> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: ID3D12VideoDecodeCommandList1) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoDecodeCommandList1> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: &ID3D12VideoDecodeCommandList1) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for ID3D12VideoDecodeCommandList1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for &ID3D12VideoDecodeCommandList1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ID3D12VideoDecodeCommandList1_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdata: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvdevice: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE,
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pallocator: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, numbarriers: u32, pbarriers: *const ::core::mem::ManuallyDrop<super::super::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER>),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presource: ::windows::runtime::RawPtr, pregion: *const super::super::Graphics::Direct3D12::D3D12_DISCARD_REGION),
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12")))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pqueryheap: ::windows::runtime::RawPtr, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pqueryheap: ::windows::runtime::RawPtr, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pqueryheap: ::windows::runtime::RawPtr, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, startindex: u32, numqueries: u32, pdestinationbuffer: ::windows::runtime::RawPtr, aligneddestinationbufferoffset: u64),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbuffer: ::windows::runtime::RawPtr, alignedbufferoffset: u64, operation: super::super::Graphics::Direct3D12::D3D12_PREDICATION_OP),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdecoder: ::windows::runtime::RawPtr, poutputarguments: *const ::core::mem::ManuallyDrop<D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS>, pinputarguments: *const ::core::mem::ManuallyDrop<D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS>),
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi")))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, pparams: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, pmodes: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdecoder: ::windows::runtime::RawPtr, poutputarguments: *const ::core::mem::ManuallyDrop<D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1>, pinputarguments: *const ::core::mem::ManuallyDrop<D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS>),
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi")))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct ID3D12VideoDecodeCommandList2(pub ::windows::runtime::IUnknown);
impl ID3D12VideoDecodeCommandList2 {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPrivateData(&self, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(pdatasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateData(&self, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(datasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateDataInterface<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guid: *const ::windows::runtime::GUID, pdata: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), pdata.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, name: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), name.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDevice<T: ::windows::runtime::Interface>(&self, result__: *mut ::core::option::Option<T>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &<T as ::windows::runtime::Interface>::IID, result__ as *mut _ as *mut _).ok()
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn GetType(&self) -> super::super::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Close(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn Reset<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12CommandAllocator>>(&self, pallocator: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), pallocator.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ClearState(&self) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn ResourceBarrier(&self, numbarriers: u32, pbarriers: *const super::super::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(numbarriers), ::core::mem::transmute(pbarriers)))
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn DiscardResource<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Resource>>(&self, presource: Param0, pregion: *const super::super::Graphics::Direct3D12::D3D12_DISCARD_REGION) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), presource.into_param().abi(), ::core::mem::transmute(pregion)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn BeginQuery<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12QueryHeap>>(&self, pqueryheap: Param0, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), pqueryheap.into_param().abi(), ::core::mem::transmute(r#type), ::core::mem::transmute(index)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn EndQuery<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12QueryHeap>>(&self, pqueryheap: Param0, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), pqueryheap.into_param().abi(), ::core::mem::transmute(r#type), ::core::mem::transmute(index)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn ResolveQueryData<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12QueryHeap>, Param4: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Resource>>(&self, pqueryheap: Param0, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, startindex: u32, numqueries: u32, pdestinationbuffer: Param4, aligneddestinationbufferoffset: u64) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).16)(
            ::core::mem::transmute_copy(self),
            pqueryheap.into_param().abi(),
            ::core::mem::transmute(r#type),
            ::core::mem::transmute(startindex),
            ::core::mem::transmute(numqueries),
            pdestinationbuffer.into_param().abi(),
            ::core::mem::transmute(aligneddestinationbufferoffset),
        ))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn SetPredication<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Resource>>(&self, pbuffer: Param0, alignedbufferoffset: u64, operation: super::super::Graphics::Direct3D12::D3D12_PREDICATION_OP) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self), pbuffer.into_param().abi(), ::core::mem::transmute(alignedbufferoffset), ::core::mem::transmute(operation)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetMarker(&self, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).18)(::core::mem::transmute_copy(self), ::core::mem::transmute(metadata), ::core::mem::transmute(pdata), ::core::mem::transmute(size)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BeginEvent(&self, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).19)(::core::mem::transmute_copy(self), ::core::mem::transmute(metadata), ::core::mem::transmute(pdata), ::core::mem::transmute(size)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndEvent(&self) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).20)(::core::mem::transmute_copy(self)))
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D12`, `Win32_Graphics_Dxgi`*"]
    pub unsafe fn DecodeFrame<'a, Param0: ::windows::runtime::IntoParam<'a, ID3D12VideoDecoder>>(&self, pdecoder: Param0, poutputarguments: *const D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS, pinputarguments: *const D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).21)(::core::mem::transmute_copy(self), pdecoder.into_param().abi(), ::core::mem::transmute(poutputarguments), ::core::mem::transmute(pinputarguments)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn WriteBufferImmediate(&self, count: u32, pparams: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, pmodes: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).22)(::core::mem::transmute_copy(self), ::core::mem::transmute(count), ::core::mem::transmute(pparams), ::core::mem::transmute(pmodes)))
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D12`, `Win32_Graphics_Dxgi`*"]
    pub unsafe fn DecodeFrame1<'a, Param0: ::windows::runtime::IntoParam<'a, ID3D12VideoDecoder>>(&self, pdecoder: Param0, poutputarguments: *const D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1, pinputarguments: *const D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).23)(::core::mem::transmute_copy(self), pdecoder.into_param().abi(), ::core::mem::transmute(poutputarguments), ::core::mem::transmute(pinputarguments)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn SetProtectedResourceSession<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12ProtectedResourceSession>>(&self, pprotectedresourcesession: Param0) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).24)(::core::mem::transmute_copy(self), pprotectedresourcesession.into_param().abi()))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn InitializeExtensionCommand<'a, Param0: ::windows::runtime::IntoParam<'a, ID3D12VideoExtensionCommand>>(&self, pextensioncommand: Param0, pinitializationparameters: *const ::core::ffi::c_void, initializationparameterssizeinbytes: usize) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).25)(::core::mem::transmute_copy(self), pextensioncommand.into_param().abi(), ::core::mem::transmute(pinitializationparameters), ::core::mem::transmute(initializationparameterssizeinbytes)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ExecuteExtensionCommand<'a, Param0: ::windows::runtime::IntoParam<'a, ID3D12VideoExtensionCommand>>(&self, pextensioncommand: Param0, pexecutionparameters: *const ::core::ffi::c_void, executionparameterssizeinbytes: usize) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).26)(::core::mem::transmute_copy(self), pextensioncommand.into_param().abi(), ::core::mem::transmute(pexecutionparameters), ::core::mem::transmute(executionparameterssizeinbytes)))
    }
}
unsafe impl ::windows::runtime::Interface for ID3D12VideoDecodeCommandList2 {
    type Vtable = ID3D12VideoDecodeCommandList2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1846675584, 49428, 16723, [128, 54, 210, 71, 5, 30, 23, 41]);
}
impl ::core::convert::From<ID3D12VideoDecodeCommandList2> for ::windows::runtime::IUnknown {
    fn from(value: ID3D12VideoDecodeCommandList2) -> Self {
        value.0
    }
}
impl ::core::convert::From<&ID3D12VideoDecodeCommandList2> for ::windows::runtime::IUnknown {
    fn from(value: &ID3D12VideoDecodeCommandList2) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ID3D12VideoDecodeCommandList2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a ID3D12VideoDecodeCommandList2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<ID3D12VideoDecodeCommandList2> for ID3D12VideoDecodeCommandList1 {
    fn from(value: ID3D12VideoDecodeCommandList2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ID3D12VideoDecodeCommandList2> for ID3D12VideoDecodeCommandList1 {
    fn from(value: &ID3D12VideoDecodeCommandList2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ID3D12VideoDecodeCommandList1> for ID3D12VideoDecodeCommandList2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ID3D12VideoDecodeCommandList1> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ID3D12VideoDecodeCommandList1> for &ID3D12VideoDecodeCommandList2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ID3D12VideoDecodeCommandList1> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ID3D12VideoDecodeCommandList2> for ID3D12VideoDecodeCommandList {
    fn from(value: ID3D12VideoDecodeCommandList2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ID3D12VideoDecodeCommandList2> for ID3D12VideoDecodeCommandList {
    fn from(value: &ID3D12VideoDecodeCommandList2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ID3D12VideoDecodeCommandList> for ID3D12VideoDecodeCommandList2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ID3D12VideoDecodeCommandList> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ID3D12VideoDecodeCommandList> for &ID3D12VideoDecodeCommandList2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ID3D12VideoDecodeCommandList> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoDecodeCommandList2> for super::super::Graphics::Direct3D12::ID3D12CommandList {
    fn from(value: ID3D12VideoDecodeCommandList2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoDecodeCommandList2> for super::super::Graphics::Direct3D12::ID3D12CommandList {
    fn from(value: &ID3D12VideoDecodeCommandList2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12CommandList> for ID3D12VideoDecodeCommandList2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12CommandList> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12CommandList> for &ID3D12VideoDecodeCommandList2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12CommandList> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoDecodeCommandList2> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: ID3D12VideoDecodeCommandList2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoDecodeCommandList2> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: &ID3D12VideoDecodeCommandList2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for ID3D12VideoDecodeCommandList2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for &ID3D12VideoDecodeCommandList2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoDecodeCommandList2> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: ID3D12VideoDecodeCommandList2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoDecodeCommandList2> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: &ID3D12VideoDecodeCommandList2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for ID3D12VideoDecodeCommandList2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for &ID3D12VideoDecodeCommandList2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ID3D12VideoDecodeCommandList2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdata: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvdevice: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE,
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pallocator: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, numbarriers: u32, pbarriers: *const ::core::mem::ManuallyDrop<super::super::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER>),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presource: ::windows::runtime::RawPtr, pregion: *const super::super::Graphics::Direct3D12::D3D12_DISCARD_REGION),
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12")))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pqueryheap: ::windows::runtime::RawPtr, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pqueryheap: ::windows::runtime::RawPtr, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pqueryheap: ::windows::runtime::RawPtr, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, startindex: u32, numqueries: u32, pdestinationbuffer: ::windows::runtime::RawPtr, aligneddestinationbufferoffset: u64),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbuffer: ::windows::runtime::RawPtr, alignedbufferoffset: u64, operation: super::super::Graphics::Direct3D12::D3D12_PREDICATION_OP),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdecoder: ::windows::runtime::RawPtr, poutputarguments: *const ::core::mem::ManuallyDrop<D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS>, pinputarguments: *const ::core::mem::ManuallyDrop<D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS>),
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi")))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, pparams: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, pmodes: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdecoder: ::windows::runtime::RawPtr, poutputarguments: *const ::core::mem::ManuallyDrop<D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1>, pinputarguments: *const ::core::mem::ManuallyDrop<D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS>),
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi")))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pprotectedresourcesession: ::windows::runtime::RawPtr),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pextensioncommand: ::windows::runtime::RawPtr, pinitializationparameters: *const ::core::ffi::c_void, initializationparameterssizeinbytes: usize),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pextensioncommand: ::windows::runtime::RawPtr, pexecutionparameters: *const ::core::ffi::c_void, executionparameterssizeinbytes: usize),
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct ID3D12VideoDecoder(pub ::windows::runtime::IUnknown);
impl ID3D12VideoDecoder {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPrivateData(&self, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(pdatasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateData(&self, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(datasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateDataInterface<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guid: *const ::windows::runtime::GUID, pdata: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), pdata.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, name: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), name.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDevice<T: ::windows::runtime::Interface>(&self, result__: *mut ::core::option::Option<T>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &<T as ::windows::runtime::Interface>::IID, result__ as *mut _ as *mut _).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDesc(&self) -> D3D12_VIDEO_DECODER_DESC {
        let mut result__: D3D12_VIDEO_DECODER_DESC = ::core::default::Default::default();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), &mut result__);
        result__
    }
}
unsafe impl ::windows::runtime::Interface for ID3D12VideoDecoder {
    type Vtable = ID3D12VideoDecoder_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3315297244, 30496, 16500, [161, 54, 23, 161, 86, 3, 116, 112]);
}
impl ::core::convert::From<ID3D12VideoDecoder> for ::windows::runtime::IUnknown {
    fn from(value: ID3D12VideoDecoder) -> Self {
        value.0
    }
}
impl ::core::convert::From<&ID3D12VideoDecoder> for ::windows::runtime::IUnknown {
    fn from(value: &ID3D12VideoDecoder) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ID3D12VideoDecoder {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a ID3D12VideoDecoder {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoDecoder> for super::super::Graphics::Direct3D12::ID3D12Pageable {
    fn from(value: ID3D12VideoDecoder) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoDecoder> for super::super::Graphics::Direct3D12::ID3D12Pageable {
    fn from(value: &ID3D12VideoDecoder) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> for ID3D12VideoDecoder {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> for &ID3D12VideoDecoder {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoDecoder> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: ID3D12VideoDecoder) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoDecoder> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: &ID3D12VideoDecoder) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for ID3D12VideoDecoder {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for &ID3D12VideoDecoder {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoDecoder> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: ID3D12VideoDecoder) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoDecoder> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: &ID3D12VideoDecoder) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for ID3D12VideoDecoder {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for &ID3D12VideoDecoder {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ID3D12VideoDecoder_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdata: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvdevice: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, result__: *mut D3D12_VIDEO_DECODER_DESC),
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct ID3D12VideoDecoder1(pub ::windows::runtime::IUnknown);
impl ID3D12VideoDecoder1 {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPrivateData(&self, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(pdatasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateData(&self, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(datasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateDataInterface<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guid: *const ::windows::runtime::GUID, pdata: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), pdata.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, name: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), name.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDevice<T: ::windows::runtime::Interface>(&self, result__: *mut ::core::option::Option<T>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &<T as ::windows::runtime::Interface>::IID, result__ as *mut _ as *mut _).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDesc(&self) -> D3D12_VIDEO_DECODER_DESC {
        let mut result__: D3D12_VIDEO_DECODER_DESC = ::core::default::Default::default();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), &mut result__);
        result__
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetProtectedResourceSession<T: ::windows::runtime::Interface>(&self, result__: *mut ::core::option::Option<T>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), &<T as ::windows::runtime::Interface>::IID, result__ as *mut _ as *mut _).ok()
    }
}
unsafe impl ::windows::runtime::Interface for ID3D12VideoDecoder1 {
    type Vtable = ID3D12VideoDecoder1_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2040718843, 52434, 18074, [159, 222, 25, 93, 16, 149, 31, 126]);
}
impl ::core::convert::From<ID3D12VideoDecoder1> for ::windows::runtime::IUnknown {
    fn from(value: ID3D12VideoDecoder1) -> Self {
        value.0
    }
}
impl ::core::convert::From<&ID3D12VideoDecoder1> for ::windows::runtime::IUnknown {
    fn from(value: &ID3D12VideoDecoder1) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ID3D12VideoDecoder1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a ID3D12VideoDecoder1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<ID3D12VideoDecoder1> for ID3D12VideoDecoder {
    fn from(value: ID3D12VideoDecoder1) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ID3D12VideoDecoder1> for ID3D12VideoDecoder {
    fn from(value: &ID3D12VideoDecoder1) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ID3D12VideoDecoder> for ID3D12VideoDecoder1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ID3D12VideoDecoder> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ID3D12VideoDecoder> for &ID3D12VideoDecoder1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ID3D12VideoDecoder> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoDecoder1> for super::super::Graphics::Direct3D12::ID3D12Pageable {
    fn from(value: ID3D12VideoDecoder1) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoDecoder1> for super::super::Graphics::Direct3D12::ID3D12Pageable {
    fn from(value: &ID3D12VideoDecoder1) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> for ID3D12VideoDecoder1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> for &ID3D12VideoDecoder1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoDecoder1> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: ID3D12VideoDecoder1) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoDecoder1> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: &ID3D12VideoDecoder1) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for ID3D12VideoDecoder1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for &ID3D12VideoDecoder1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoDecoder1> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: ID3D12VideoDecoder1) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoDecoder1> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: &ID3D12VideoDecoder1) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for ID3D12VideoDecoder1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for &ID3D12VideoDecoder1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ID3D12VideoDecoder1_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdata: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvdevice: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, result__: *mut D3D12_VIDEO_DECODER_DESC),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppprotectedsession: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct ID3D12VideoDecoderHeap(pub ::windows::runtime::IUnknown);
impl ID3D12VideoDecoderHeap {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPrivateData(&self, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(pdatasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateData(&self, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(datasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateDataInterface<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guid: *const ::windows::runtime::GUID, pdata: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), pdata.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, name: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), name.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDevice<T: ::windows::runtime::Interface>(&self, result__: *mut ::core::option::Option<T>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &<T as ::windows::runtime::Interface>::IID, result__ as *mut _ as *mut _).ok()
    }
    #[cfg(feature = "Win32_Graphics_Dxgi")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Dxgi`*"]
    pub unsafe fn GetDesc(&self) -> D3D12_VIDEO_DECODER_HEAP_DESC {
        let mut result__: D3D12_VIDEO_DECODER_HEAP_DESC = ::core::default::Default::default();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), &mut result__);
        result__
    }
}
unsafe impl ::windows::runtime::Interface for ID3D12VideoDecoderHeap {
    type Vtable = ID3D12VideoDecoderHeap_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(155629513, 60406, 16455, [187, 115, 134, 131, 226, 125, 187, 31]);
}
impl ::core::convert::From<ID3D12VideoDecoderHeap> for ::windows::runtime::IUnknown {
    fn from(value: ID3D12VideoDecoderHeap) -> Self {
        value.0
    }
}
impl ::core::convert::From<&ID3D12VideoDecoderHeap> for ::windows::runtime::IUnknown {
    fn from(value: &ID3D12VideoDecoderHeap) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ID3D12VideoDecoderHeap {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a ID3D12VideoDecoderHeap {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoDecoderHeap> for super::super::Graphics::Direct3D12::ID3D12Pageable {
    fn from(value: ID3D12VideoDecoderHeap) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoDecoderHeap> for super::super::Graphics::Direct3D12::ID3D12Pageable {
    fn from(value: &ID3D12VideoDecoderHeap) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> for ID3D12VideoDecoderHeap {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> for &ID3D12VideoDecoderHeap {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoDecoderHeap> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: ID3D12VideoDecoderHeap) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoDecoderHeap> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: &ID3D12VideoDecoderHeap) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for ID3D12VideoDecoderHeap {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for &ID3D12VideoDecoderHeap {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoDecoderHeap> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: ID3D12VideoDecoderHeap) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoDecoderHeap> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: &ID3D12VideoDecoderHeap) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for ID3D12VideoDecoderHeap {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for &ID3D12VideoDecoderHeap {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ID3D12VideoDecoderHeap_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdata: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvdevice: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Dxgi")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, result__: *mut D3D12_VIDEO_DECODER_HEAP_DESC),
    #[cfg(not(feature = "Win32_Graphics_Dxgi"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct ID3D12VideoDecoderHeap1(pub ::windows::runtime::IUnknown);
impl ID3D12VideoDecoderHeap1 {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPrivateData(&self, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(pdatasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateData(&self, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(datasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateDataInterface<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guid: *const ::windows::runtime::GUID, pdata: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), pdata.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, name: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), name.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDevice<T: ::windows::runtime::Interface>(&self, result__: *mut ::core::option::Option<T>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &<T as ::windows::runtime::Interface>::IID, result__ as *mut _ as *mut _).ok()
    }
    #[cfg(feature = "Win32_Graphics_Dxgi")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Dxgi`*"]
    pub unsafe fn GetDesc(&self) -> D3D12_VIDEO_DECODER_HEAP_DESC {
        let mut result__: D3D12_VIDEO_DECODER_HEAP_DESC = ::core::default::Default::default();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), &mut result__);
        result__
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetProtectedResourceSession<T: ::windows::runtime::Interface>(&self, result__: *mut ::core::option::Option<T>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), &<T as ::windows::runtime::Interface>::IID, result__ as *mut _ as *mut _).ok()
    }
}
unsafe impl ::windows::runtime::Interface for ID3D12VideoDecoderHeap1 {
    type Vtable = ID3D12VideoDecoderHeap1_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3659372741, 21407, 16818, [191, 107, 17, 152, 160, 59, 109, 38]);
}
impl ::core::convert::From<ID3D12VideoDecoderHeap1> for ::windows::runtime::IUnknown {
    fn from(value: ID3D12VideoDecoderHeap1) -> Self {
        value.0
    }
}
impl ::core::convert::From<&ID3D12VideoDecoderHeap1> for ::windows::runtime::IUnknown {
    fn from(value: &ID3D12VideoDecoderHeap1) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ID3D12VideoDecoderHeap1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a ID3D12VideoDecoderHeap1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<ID3D12VideoDecoderHeap1> for ID3D12VideoDecoderHeap {
    fn from(value: ID3D12VideoDecoderHeap1) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ID3D12VideoDecoderHeap1> for ID3D12VideoDecoderHeap {
    fn from(value: &ID3D12VideoDecoderHeap1) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ID3D12VideoDecoderHeap> for ID3D12VideoDecoderHeap1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ID3D12VideoDecoderHeap> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ID3D12VideoDecoderHeap> for &ID3D12VideoDecoderHeap1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ID3D12VideoDecoderHeap> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoDecoderHeap1> for super::super::Graphics::Direct3D12::ID3D12Pageable {
    fn from(value: ID3D12VideoDecoderHeap1) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoDecoderHeap1> for super::super::Graphics::Direct3D12::ID3D12Pageable {
    fn from(value: &ID3D12VideoDecoderHeap1) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> for ID3D12VideoDecoderHeap1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> for &ID3D12VideoDecoderHeap1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoDecoderHeap1> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: ID3D12VideoDecoderHeap1) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoDecoderHeap1> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: &ID3D12VideoDecoderHeap1) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for ID3D12VideoDecoderHeap1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for &ID3D12VideoDecoderHeap1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoDecoderHeap1> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: ID3D12VideoDecoderHeap1) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoDecoderHeap1> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: &ID3D12VideoDecoderHeap1) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for ID3D12VideoDecoderHeap1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for &ID3D12VideoDecoderHeap1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ID3D12VideoDecoderHeap1_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdata: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvdevice: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Dxgi")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, result__: *mut D3D12_VIDEO_DECODER_HEAP_DESC),
    #[cfg(not(feature = "Win32_Graphics_Dxgi"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppprotectedsession: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct ID3D12VideoDevice(pub ::windows::runtime::IUnknown);
impl ID3D12VideoDevice {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CheckFeatureSupport(&self, featurevideo: D3D12_FEATURE_VIDEO, pfeaturesupportdata: *mut ::core::ffi::c_void, featuresupportdatasize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(featurevideo), ::core::mem::transmute(pfeaturesupportdata), ::core::mem::transmute(featuresupportdatasize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CreateVideoDecoder<T: ::windows::runtime::Interface>(&self, pdesc: *const D3D12_VIDEO_DECODER_DESC) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdesc), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(feature = "Win32_Graphics_Dxgi")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Dxgi`*"]
    pub unsafe fn CreateVideoDecoderHeap<T: ::windows::runtime::Interface>(&self, pvideodecoderheapdesc: *const D3D12_VIDEO_DECODER_HEAP_DESC) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(pvideodecoderheapdesc), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Dxgi`*"]
    pub unsafe fn CreateVideoProcessor<T: ::windows::runtime::Interface>(&self, nodemask: u32, poutputstreamdesc: *const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC, numinputstreamdescs: u32, pinputstreamdescs: *const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(nodemask), ::core::mem::transmute(poutputstreamdesc), ::core::mem::transmute(numinputstreamdescs), ::core::mem::transmute(pinputstreamdescs), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
}
unsafe impl ::windows::runtime::Interface for ID3D12VideoDevice {
    type Vtable = ID3D12VideoDevice_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(520431623, 2886, 19148, [138, 137, 54, 79, 121, 55, 24, 164]);
}
impl ::core::convert::From<ID3D12VideoDevice> for ::windows::runtime::IUnknown {
    fn from(value: ID3D12VideoDevice) -> Self {
        value.0
    }
}
impl ::core::convert::From<&ID3D12VideoDevice> for ::windows::runtime::IUnknown {
    fn from(value: &ID3D12VideoDevice) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ID3D12VideoDevice {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a ID3D12VideoDevice {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ID3D12VideoDevice_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, featurevideo: D3D12_FEATURE_VIDEO, pfeaturesupportdata: *mut ::core::ffi::c_void, featuresupportdatasize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdesc: *const D3D12_VIDEO_DECODER_DESC, riid: *const ::windows::runtime::GUID, ppvideodecoder: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Dxgi")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pvideodecoderheapdesc: *const D3D12_VIDEO_DECODER_HEAP_DESC, riid: *const ::windows::runtime::GUID, ppvideodecoderheap: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Dxgi"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, nodemask: u32, poutputstreamdesc: *const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC, numinputstreamdescs: u32, pinputstreamdescs: *const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC, riid: *const ::windows::runtime::GUID, ppvideoprocessor: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi")))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct ID3D12VideoDevice1(pub ::windows::runtime::IUnknown);
impl ID3D12VideoDevice1 {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CheckFeatureSupport(&self, featurevideo: D3D12_FEATURE_VIDEO, pfeaturesupportdata: *mut ::core::ffi::c_void, featuresupportdatasize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(featurevideo), ::core::mem::transmute(pfeaturesupportdata), ::core::mem::transmute(featuresupportdatasize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CreateVideoDecoder<T: ::windows::runtime::Interface>(&self, pdesc: *const D3D12_VIDEO_DECODER_DESC) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdesc), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(feature = "Win32_Graphics_Dxgi")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Dxgi`*"]
    pub unsafe fn CreateVideoDecoderHeap<T: ::windows::runtime::Interface>(&self, pvideodecoderheapdesc: *const D3D12_VIDEO_DECODER_HEAP_DESC) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(pvideodecoderheapdesc), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Dxgi`*"]
    pub unsafe fn CreateVideoProcessor<T: ::windows::runtime::Interface>(&self, nodemask: u32, poutputstreamdesc: *const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC, numinputstreamdescs: u32, pinputstreamdescs: *const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(nodemask), ::core::mem::transmute(poutputstreamdesc), ::core::mem::transmute(numinputstreamdescs), ::core::mem::transmute(pinputstreamdescs), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`, `Win32_Graphics_Dxgi`*"]
    pub unsafe fn CreateVideoMotionEstimator<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12ProtectedResourceSession>, T: ::windows::runtime::Interface>(&self, pdesc: *const D3D12_VIDEO_MOTION_ESTIMATOR_DESC, pprotectedresourcesession: Param1) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdesc), pprotectedresourcesession.into_param().abi(), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`, `Win32_Graphics_Dxgi`*"]
    pub unsafe fn CreateVideoMotionVectorHeap<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12ProtectedResourceSession>, T: ::windows::runtime::Interface>(&self, pdesc: *const D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC, pprotectedresourcesession: Param1) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdesc), pprotectedresourcesession.into_param().abi(), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
}
unsafe impl ::windows::runtime::Interface for ID3D12VideoDevice1 {
    type Vtable = ID3D12VideoDevice1_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2551583149, 41284, 19587, [152, 144, 243, 14, 38, 214, 88, 171]);
}
impl ::core::convert::From<ID3D12VideoDevice1> for ::windows::runtime::IUnknown {
    fn from(value: ID3D12VideoDevice1) -> Self {
        value.0
    }
}
impl ::core::convert::From<&ID3D12VideoDevice1> for ::windows::runtime::IUnknown {
    fn from(value: &ID3D12VideoDevice1) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ID3D12VideoDevice1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a ID3D12VideoDevice1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<ID3D12VideoDevice1> for ID3D12VideoDevice {
    fn from(value: ID3D12VideoDevice1) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ID3D12VideoDevice1> for ID3D12VideoDevice {
    fn from(value: &ID3D12VideoDevice1) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ID3D12VideoDevice> for ID3D12VideoDevice1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ID3D12VideoDevice> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ID3D12VideoDevice> for &ID3D12VideoDevice1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ID3D12VideoDevice> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ID3D12VideoDevice1_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, featurevideo: D3D12_FEATURE_VIDEO, pfeaturesupportdata: *mut ::core::ffi::c_void, featuresupportdatasize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdesc: *const D3D12_VIDEO_DECODER_DESC, riid: *const ::windows::runtime::GUID, ppvideodecoder: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Dxgi")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pvideodecoderheapdesc: *const D3D12_VIDEO_DECODER_HEAP_DESC, riid: *const ::windows::runtime::GUID, ppvideodecoderheap: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Dxgi"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, nodemask: u32, poutputstreamdesc: *const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC, numinputstreamdescs: u32, pinputstreamdescs: *const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC, riid: *const ::windows::runtime::GUID, ppvideoprocessor: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi")))] usize,
    #[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdesc: *const D3D12_VIDEO_MOTION_ESTIMATOR_DESC, pprotectedresourcesession: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvideomotionestimator: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi")))] usize,
    #[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdesc: *const D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC, pprotectedresourcesession: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvideomotionvectorheap: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi")))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct ID3D12VideoDevice2(pub ::windows::runtime::IUnknown);
impl ID3D12VideoDevice2 {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CheckFeatureSupport(&self, featurevideo: D3D12_FEATURE_VIDEO, pfeaturesupportdata: *mut ::core::ffi::c_void, featuresupportdatasize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(featurevideo), ::core::mem::transmute(pfeaturesupportdata), ::core::mem::transmute(featuresupportdatasize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CreateVideoDecoder<T: ::windows::runtime::Interface>(&self, pdesc: *const D3D12_VIDEO_DECODER_DESC) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdesc), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(feature = "Win32_Graphics_Dxgi")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Dxgi`*"]
    pub unsafe fn CreateVideoDecoderHeap<T: ::windows::runtime::Interface>(&self, pvideodecoderheapdesc: *const D3D12_VIDEO_DECODER_HEAP_DESC) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(pvideodecoderheapdesc), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Dxgi`*"]
    pub unsafe fn CreateVideoProcessor<T: ::windows::runtime::Interface>(&self, nodemask: u32, poutputstreamdesc: *const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC, numinputstreamdescs: u32, pinputstreamdescs: *const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(nodemask), ::core::mem::transmute(poutputstreamdesc), ::core::mem::transmute(numinputstreamdescs), ::core::mem::transmute(pinputstreamdescs), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`, `Win32_Graphics_Dxgi`*"]
    pub unsafe fn CreateVideoMotionEstimator<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12ProtectedResourceSession>, T: ::windows::runtime::Interface>(&self, pdesc: *const D3D12_VIDEO_MOTION_ESTIMATOR_DESC, pprotectedresourcesession: Param1) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdesc), pprotectedresourcesession.into_param().abi(), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`, `Win32_Graphics_Dxgi`*"]
    pub unsafe fn CreateVideoMotionVectorHeap<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12ProtectedResourceSession>, T: ::windows::runtime::Interface>(&self, pdesc: *const D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC, pprotectedresourcesession: Param1) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdesc), pprotectedresourcesession.into_param().abi(), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn CreateVideoDecoder1<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12ProtectedResourceSession>, T: ::windows::runtime::Interface>(&self, pdesc: *const D3D12_VIDEO_DECODER_DESC, pprotectedresourcesession: Param1) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdesc), pprotectedresourcesession.into_param().abi(), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`, `Win32_Graphics_Dxgi`*"]
    pub unsafe fn CreateVideoDecoderHeap1<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12ProtectedResourceSession>, T: ::windows::runtime::Interface>(&self, pvideodecoderheapdesc: *const D3D12_VIDEO_DECODER_HEAP_DESC, pprotectedresourcesession: Param1) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(pvideodecoderheapdesc), pprotectedresourcesession.into_param().abi(), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D12`, `Win32_Graphics_Dxgi`*"]
    pub unsafe fn CreateVideoProcessor1<'a, Param4: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12ProtectedResourceSession>, T: ::windows::runtime::Interface>(&self, nodemask: u32, poutputstreamdesc: *const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC, numinputstreamdescs: u32, pinputstreamdescs: *const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC, pprotectedresourcesession: Param4) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).11)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(nodemask),
            ::core::mem::transmute(poutputstreamdesc),
            ::core::mem::transmute(numinputstreamdescs),
            ::core::mem::transmute(pinputstreamdescs),
            pprotectedresourcesession.into_param().abi(),
            &<T as ::windows::runtime::Interface>::IID,
            &mut result__ as *mut _ as *mut _,
        )
        .and_some(result__)
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn CreateVideoExtensionCommand<'a, Param3: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12ProtectedResourceSession>, T: ::windows::runtime::Interface>(&self, pdesc: *const D3D12_VIDEO_EXTENSION_COMMAND_DESC, pcreationparameters: *const ::core::ffi::c_void, creationparametersdatasizeinbytes: usize, pprotectedresourcesession: Param3) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdesc), ::core::mem::transmute(pcreationparameters), ::core::mem::transmute(creationparametersdatasizeinbytes), pprotectedresourcesession.into_param().abi(), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ExecuteExtensionCommand<'a, Param0: ::windows::runtime::IntoParam<'a, ID3D12VideoExtensionCommand>>(&self, pextensioncommand: Param0, pexecutionparameters: *const ::core::ffi::c_void, executionparameterssizeinbytes: usize, poutputdata: *mut ::core::ffi::c_void, outputdatasizeinbytes: usize) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), pextensioncommand.into_param().abi(), ::core::mem::transmute(pexecutionparameters), ::core::mem::transmute(executionparameterssizeinbytes), ::core::mem::transmute(poutputdata), ::core::mem::transmute(outputdatasizeinbytes)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for ID3D12VideoDevice2 {
    type Vtable = ID3D12VideoDevice2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4028214345, 63544, 19093, [155, 23, 87, 148, 55, 200, 245, 19]);
}
impl ::core::convert::From<ID3D12VideoDevice2> for ::windows::runtime::IUnknown {
    fn from(value: ID3D12VideoDevice2) -> Self {
        value.0
    }
}
impl ::core::convert::From<&ID3D12VideoDevice2> for ::windows::runtime::IUnknown {
    fn from(value: &ID3D12VideoDevice2) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ID3D12VideoDevice2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a ID3D12VideoDevice2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<ID3D12VideoDevice2> for ID3D12VideoDevice1 {
    fn from(value: ID3D12VideoDevice2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ID3D12VideoDevice2> for ID3D12VideoDevice1 {
    fn from(value: &ID3D12VideoDevice2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ID3D12VideoDevice1> for ID3D12VideoDevice2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ID3D12VideoDevice1> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ID3D12VideoDevice1> for &ID3D12VideoDevice2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ID3D12VideoDevice1> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ID3D12VideoDevice2> for ID3D12VideoDevice {
    fn from(value: ID3D12VideoDevice2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ID3D12VideoDevice2> for ID3D12VideoDevice {
    fn from(value: &ID3D12VideoDevice2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ID3D12VideoDevice> for ID3D12VideoDevice2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ID3D12VideoDevice> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ID3D12VideoDevice> for &ID3D12VideoDevice2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ID3D12VideoDevice> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ID3D12VideoDevice2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, featurevideo: D3D12_FEATURE_VIDEO, pfeaturesupportdata: *mut ::core::ffi::c_void, featuresupportdatasize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdesc: *const D3D12_VIDEO_DECODER_DESC, riid: *const ::windows::runtime::GUID, ppvideodecoder: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Dxgi")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pvideodecoderheapdesc: *const D3D12_VIDEO_DECODER_HEAP_DESC, riid: *const ::windows::runtime::GUID, ppvideodecoderheap: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Dxgi"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, nodemask: u32, poutputstreamdesc: *const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC, numinputstreamdescs: u32, pinputstreamdescs: *const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC, riid: *const ::windows::runtime::GUID, ppvideoprocessor: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi")))] usize,
    #[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdesc: *const D3D12_VIDEO_MOTION_ESTIMATOR_DESC, pprotectedresourcesession: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvideomotionestimator: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi")))] usize,
    #[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdesc: *const D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC, pprotectedresourcesession: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvideomotionvectorheap: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi")))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdesc: *const D3D12_VIDEO_DECODER_DESC, pprotectedresourcesession: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvideodecoder: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pvideodecoderheapdesc: *const D3D12_VIDEO_DECODER_HEAP_DESC, pprotectedresourcesession: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvideodecoderheap: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
    pub  unsafe extern "system" fn(this: ::windows::runtime::RawPtr, nodemask: u32, poutputstreamdesc: *const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC, numinputstreamdescs: u32, pinputstreamdescs: *const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC, pprotectedresourcesession: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvideoprocessor: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi")))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdesc: *const D3D12_VIDEO_EXTENSION_COMMAND_DESC, pcreationparameters: *const ::core::ffi::c_void, creationparametersdatasizeinbytes: usize, pprotectedresourcesession: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvideoextensioncommand: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pextensioncommand: ::windows::runtime::RawPtr, pexecutionparameters: *const ::core::ffi::c_void, executionparameterssizeinbytes: usize, poutputdata: *mut ::core::ffi::c_void, outputdatasizeinbytes: usize) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct ID3D12VideoDevice3(pub ::windows::runtime::IUnknown);
impl ID3D12VideoDevice3 {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CheckFeatureSupport(&self, featurevideo: D3D12_FEATURE_VIDEO, pfeaturesupportdata: *mut ::core::ffi::c_void, featuresupportdatasize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(featurevideo), ::core::mem::transmute(pfeaturesupportdata), ::core::mem::transmute(featuresupportdatasize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CreateVideoDecoder<T: ::windows::runtime::Interface>(&self, pdesc: *const D3D12_VIDEO_DECODER_DESC) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdesc), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(feature = "Win32_Graphics_Dxgi")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Dxgi`*"]
    pub unsafe fn CreateVideoDecoderHeap<T: ::windows::runtime::Interface>(&self, pvideodecoderheapdesc: *const D3D12_VIDEO_DECODER_HEAP_DESC) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(pvideodecoderheapdesc), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Dxgi`*"]
    pub unsafe fn CreateVideoProcessor<T: ::windows::runtime::Interface>(&self, nodemask: u32, poutputstreamdesc: *const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC, numinputstreamdescs: u32, pinputstreamdescs: *const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(nodemask), ::core::mem::transmute(poutputstreamdesc), ::core::mem::transmute(numinputstreamdescs), ::core::mem::transmute(pinputstreamdescs), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`, `Win32_Graphics_Dxgi`*"]
    pub unsafe fn CreateVideoMotionEstimator<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12ProtectedResourceSession>, T: ::windows::runtime::Interface>(&self, pdesc: *const D3D12_VIDEO_MOTION_ESTIMATOR_DESC, pprotectedresourcesession: Param1) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdesc), pprotectedresourcesession.into_param().abi(), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`, `Win32_Graphics_Dxgi`*"]
    pub unsafe fn CreateVideoMotionVectorHeap<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12ProtectedResourceSession>, T: ::windows::runtime::Interface>(&self, pdesc: *const D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC, pprotectedresourcesession: Param1) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdesc), pprotectedresourcesession.into_param().abi(), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn CreateVideoDecoder1<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12ProtectedResourceSession>, T: ::windows::runtime::Interface>(&self, pdesc: *const D3D12_VIDEO_DECODER_DESC, pprotectedresourcesession: Param1) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdesc), pprotectedresourcesession.into_param().abi(), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`, `Win32_Graphics_Dxgi`*"]
    pub unsafe fn CreateVideoDecoderHeap1<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12ProtectedResourceSession>, T: ::windows::runtime::Interface>(&self, pvideodecoderheapdesc: *const D3D12_VIDEO_DECODER_HEAP_DESC, pprotectedresourcesession: Param1) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(pvideodecoderheapdesc), pprotectedresourcesession.into_param().abi(), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D12`, `Win32_Graphics_Dxgi`*"]
    pub unsafe fn CreateVideoProcessor1<'a, Param4: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12ProtectedResourceSession>, T: ::windows::runtime::Interface>(&self, nodemask: u32, poutputstreamdesc: *const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC, numinputstreamdescs: u32, pinputstreamdescs: *const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC, pprotectedresourcesession: Param4) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).11)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(nodemask),
            ::core::mem::transmute(poutputstreamdesc),
            ::core::mem::transmute(numinputstreamdescs),
            ::core::mem::transmute(pinputstreamdescs),
            pprotectedresourcesession.into_param().abi(),
            &<T as ::windows::runtime::Interface>::IID,
            &mut result__ as *mut _ as *mut _,
        )
        .and_some(result__)
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn CreateVideoExtensionCommand<'a, Param3: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12ProtectedResourceSession>, T: ::windows::runtime::Interface>(&self, pdesc: *const D3D12_VIDEO_EXTENSION_COMMAND_DESC, pcreationparameters: *const ::core::ffi::c_void, creationparametersdatasizeinbytes: usize, pprotectedresourcesession: Param3) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdesc), ::core::mem::transmute(pcreationparameters), ::core::mem::transmute(creationparametersdatasizeinbytes), pprotectedresourcesession.into_param().abi(), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ExecuteExtensionCommand<'a, Param0: ::windows::runtime::IntoParam<'a, ID3D12VideoExtensionCommand>>(&self, pextensioncommand: Param0, pexecutionparameters: *const ::core::ffi::c_void, executionparameterssizeinbytes: usize, poutputdata: *mut ::core::ffi::c_void, outputdatasizeinbytes: usize) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), pextensioncommand.into_param().abi(), ::core::mem::transmute(pexecutionparameters), ::core::mem::transmute(executionparameterssizeinbytes), ::core::mem::transmute(poutputdata), ::core::mem::transmute(outputdatasizeinbytes)).ok()
    }
    #[cfg(feature = "Win32_Graphics_Dxgi")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Dxgi`*"]
    pub unsafe fn CreateVideoEncoder<T: ::windows::runtime::Interface>(&self, pdesc: *const D3D12_VIDEO_ENCODER_DESC) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdesc), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CreateVideoEncoderHeap<T: ::windows::runtime::Interface>(&self, pdesc: *const D3D12_VIDEO_ENCODER_HEAP_DESC) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdesc), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
}
unsafe impl ::windows::runtime::Interface for ID3D12VideoDevice3 {
    type Vtable = ID3D12VideoDevice3_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1111731636, 14898, 18022, [151, 60, 12, 204, 86, 37, 220, 68]);
}
impl ::core::convert::From<ID3D12VideoDevice3> for ::windows::runtime::IUnknown {
    fn from(value: ID3D12VideoDevice3) -> Self {
        value.0
    }
}
impl ::core::convert::From<&ID3D12VideoDevice3> for ::windows::runtime::IUnknown {
    fn from(value: &ID3D12VideoDevice3) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ID3D12VideoDevice3 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a ID3D12VideoDevice3 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<ID3D12VideoDevice3> for ID3D12VideoDevice2 {
    fn from(value: ID3D12VideoDevice3) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ID3D12VideoDevice3> for ID3D12VideoDevice2 {
    fn from(value: &ID3D12VideoDevice3) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ID3D12VideoDevice2> for ID3D12VideoDevice3 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ID3D12VideoDevice2> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ID3D12VideoDevice2> for &ID3D12VideoDevice3 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ID3D12VideoDevice2> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ID3D12VideoDevice3> for ID3D12VideoDevice1 {
    fn from(value: ID3D12VideoDevice3) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ID3D12VideoDevice3> for ID3D12VideoDevice1 {
    fn from(value: &ID3D12VideoDevice3) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ID3D12VideoDevice1> for ID3D12VideoDevice3 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ID3D12VideoDevice1> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ID3D12VideoDevice1> for &ID3D12VideoDevice3 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ID3D12VideoDevice1> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ID3D12VideoDevice3> for ID3D12VideoDevice {
    fn from(value: ID3D12VideoDevice3) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ID3D12VideoDevice3> for ID3D12VideoDevice {
    fn from(value: &ID3D12VideoDevice3) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ID3D12VideoDevice> for ID3D12VideoDevice3 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ID3D12VideoDevice> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ID3D12VideoDevice> for &ID3D12VideoDevice3 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ID3D12VideoDevice> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ID3D12VideoDevice3_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, featurevideo: D3D12_FEATURE_VIDEO, pfeaturesupportdata: *mut ::core::ffi::c_void, featuresupportdatasize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdesc: *const D3D12_VIDEO_DECODER_DESC, riid: *const ::windows::runtime::GUID, ppvideodecoder: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Dxgi")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pvideodecoderheapdesc: *const D3D12_VIDEO_DECODER_HEAP_DESC, riid: *const ::windows::runtime::GUID, ppvideodecoderheap: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Dxgi"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, nodemask: u32, poutputstreamdesc: *const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC, numinputstreamdescs: u32, pinputstreamdescs: *const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC, riid: *const ::windows::runtime::GUID, ppvideoprocessor: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi")))] usize,
    #[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdesc: *const D3D12_VIDEO_MOTION_ESTIMATOR_DESC, pprotectedresourcesession: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvideomotionestimator: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi")))] usize,
    #[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdesc: *const D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC, pprotectedresourcesession: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvideomotionvectorheap: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi")))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdesc: *const D3D12_VIDEO_DECODER_DESC, pprotectedresourcesession: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvideodecoder: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pvideodecoderheapdesc: *const D3D12_VIDEO_DECODER_HEAP_DESC, pprotectedresourcesession: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvideodecoderheap: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
    pub  unsafe extern "system" fn(this: ::windows::runtime::RawPtr, nodemask: u32, poutputstreamdesc: *const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC, numinputstreamdescs: u32, pinputstreamdescs: *const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC, pprotectedresourcesession: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvideoprocessor: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi")))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdesc: *const D3D12_VIDEO_EXTENSION_COMMAND_DESC, pcreationparameters: *const ::core::ffi::c_void, creationparametersdatasizeinbytes: usize, pprotectedresourcesession: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvideoextensioncommand: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pextensioncommand: ::windows::runtime::RawPtr, pexecutionparameters: *const ::core::ffi::c_void, executionparameterssizeinbytes: usize, poutputdata: *mut ::core::ffi::c_void, outputdatasizeinbytes: usize) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Dxgi")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdesc: *const D3D12_VIDEO_ENCODER_DESC, riid: *const ::windows::runtime::GUID, ppvideoencoder: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Dxgi"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdesc: *const D3D12_VIDEO_ENCODER_HEAP_DESC, riid: *const ::windows::runtime::GUID, ppvideoencoderheap: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct ID3D12VideoEncodeCommandList(pub ::windows::runtime::IUnknown);
impl ID3D12VideoEncodeCommandList {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPrivateData(&self, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(pdatasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateData(&self, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(datasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateDataInterface<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guid: *const ::windows::runtime::GUID, pdata: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), pdata.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, name: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), name.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDevice<T: ::windows::runtime::Interface>(&self, result__: *mut ::core::option::Option<T>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &<T as ::windows::runtime::Interface>::IID, result__ as *mut _ as *mut _).ok()
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn GetType(&self) -> super::super::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Close(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn Reset<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12CommandAllocator>>(&self, pallocator: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), pallocator.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ClearState(&self) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn ResourceBarrier(&self, numbarriers: u32, pbarriers: *const super::super::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(numbarriers), ::core::mem::transmute(pbarriers)))
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn DiscardResource<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Resource>>(&self, presource: Param0, pregion: *const super::super::Graphics::Direct3D12::D3D12_DISCARD_REGION) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), presource.into_param().abi(), ::core::mem::transmute(pregion)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn BeginQuery<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12QueryHeap>>(&self, pqueryheap: Param0, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), pqueryheap.into_param().abi(), ::core::mem::transmute(r#type), ::core::mem::transmute(index)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn EndQuery<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12QueryHeap>>(&self, pqueryheap: Param0, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), pqueryheap.into_param().abi(), ::core::mem::transmute(r#type), ::core::mem::transmute(index)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn ResolveQueryData<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12QueryHeap>, Param4: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Resource>>(&self, pqueryheap: Param0, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, startindex: u32, numqueries: u32, pdestinationbuffer: Param4, aligneddestinationbufferoffset: u64) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).16)(
            ::core::mem::transmute_copy(self),
            pqueryheap.into_param().abi(),
            ::core::mem::transmute(r#type),
            ::core::mem::transmute(startindex),
            ::core::mem::transmute(numqueries),
            pdestinationbuffer.into_param().abi(),
            ::core::mem::transmute(aligneddestinationbufferoffset),
        ))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn SetPredication<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Resource>>(&self, pbuffer: Param0, alignedbufferoffset: u64, operation: super::super::Graphics::Direct3D12::D3D12_PREDICATION_OP) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self), pbuffer.into_param().abi(), ::core::mem::transmute(alignedbufferoffset), ::core::mem::transmute(operation)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetMarker(&self, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).18)(::core::mem::transmute_copy(self), ::core::mem::transmute(metadata), ::core::mem::transmute(pdata), ::core::mem::transmute(size)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BeginEvent(&self, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).19)(::core::mem::transmute_copy(self), ::core::mem::transmute(metadata), ::core::mem::transmute(pdata), ::core::mem::transmute(size)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndEvent(&self) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).20)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn EstimateMotion<'a, Param0: ::windows::runtime::IntoParam<'a, ID3D12VideoMotionEstimator>>(&self, pmotionestimator: Param0, poutputarguments: *const D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT, pinputarguments: *const D3D12_VIDEO_MOTION_ESTIMATOR_INPUT) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).21)(::core::mem::transmute_copy(self), pmotionestimator.into_param().abi(), ::core::mem::transmute(poutputarguments), ::core::mem::transmute(pinputarguments)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn ResolveMotionVectorHeap(&self, poutputarguments: *const D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT, pinputarguments: *const D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).22)(::core::mem::transmute_copy(self), ::core::mem::transmute(poutputarguments), ::core::mem::transmute(pinputarguments)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn WriteBufferImmediate(&self, count: u32, pparams: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, pmodes: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).23)(::core::mem::transmute_copy(self), ::core::mem::transmute(count), ::core::mem::transmute(pparams), ::core::mem::transmute(pmodes)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn SetProtectedResourceSession<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12ProtectedResourceSession>>(&self, pprotectedresourcesession: Param0) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).24)(::core::mem::transmute_copy(self), pprotectedresourcesession.into_param().abi()))
    }
}
unsafe impl ::windows::runtime::Interface for ID3D12VideoEncodeCommandList {
    type Vtable = ID3D12VideoEncodeCommandList_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2220173626, 3261, 18481, [155, 57, 251, 219, 171, 114, 71, 35]);
}
impl ::core::convert::From<ID3D12VideoEncodeCommandList> for ::windows::runtime::IUnknown {
    fn from(value: ID3D12VideoEncodeCommandList) -> Self {
        value.0
    }
}
impl ::core::convert::From<&ID3D12VideoEncodeCommandList> for ::windows::runtime::IUnknown {
    fn from(value: &ID3D12VideoEncodeCommandList) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ID3D12VideoEncodeCommandList {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a ID3D12VideoEncodeCommandList {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoEncodeCommandList> for super::super::Graphics::Direct3D12::ID3D12CommandList {
    fn from(value: ID3D12VideoEncodeCommandList) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoEncodeCommandList> for super::super::Graphics::Direct3D12::ID3D12CommandList {
    fn from(value: &ID3D12VideoEncodeCommandList) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12CommandList> for ID3D12VideoEncodeCommandList {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12CommandList> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12CommandList> for &ID3D12VideoEncodeCommandList {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12CommandList> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoEncodeCommandList> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: ID3D12VideoEncodeCommandList) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoEncodeCommandList> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: &ID3D12VideoEncodeCommandList) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for ID3D12VideoEncodeCommandList {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for &ID3D12VideoEncodeCommandList {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoEncodeCommandList> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: ID3D12VideoEncodeCommandList) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoEncodeCommandList> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: &ID3D12VideoEncodeCommandList) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for ID3D12VideoEncodeCommandList {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for &ID3D12VideoEncodeCommandList {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ID3D12VideoEncodeCommandList_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdata: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvdevice: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE,
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pallocator: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, numbarriers: u32, pbarriers: *const ::core::mem::ManuallyDrop<super::super::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER>),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presource: ::windows::runtime::RawPtr, pregion: *const super::super::Graphics::Direct3D12::D3D12_DISCARD_REGION),
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12")))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pqueryheap: ::windows::runtime::RawPtr, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pqueryheap: ::windows::runtime::RawPtr, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pqueryheap: ::windows::runtime::RawPtr, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, startindex: u32, numqueries: u32, pdestinationbuffer: ::windows::runtime::RawPtr, aligneddestinationbufferoffset: u64),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbuffer: ::windows::runtime::RawPtr, alignedbufferoffset: u64, operation: super::super::Graphics::Direct3D12::D3D12_PREDICATION_OP),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pmotionestimator: ::windows::runtime::RawPtr, poutputarguments: *const ::core::mem::ManuallyDrop<D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT>, pinputarguments: *const ::core::mem::ManuallyDrop<D3D12_VIDEO_MOTION_ESTIMATOR_INPUT>),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, poutputarguments: *const ::core::mem::ManuallyDrop<D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT>, pinputarguments: *const ::core::mem::ManuallyDrop<D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT>),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, pparams: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, pmodes: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pprotectedresourcesession: ::windows::runtime::RawPtr),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct ID3D12VideoEncodeCommandList1(pub ::windows::runtime::IUnknown);
impl ID3D12VideoEncodeCommandList1 {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPrivateData(&self, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(pdatasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateData(&self, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(datasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateDataInterface<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guid: *const ::windows::runtime::GUID, pdata: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), pdata.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, name: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), name.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDevice<T: ::windows::runtime::Interface>(&self, result__: *mut ::core::option::Option<T>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &<T as ::windows::runtime::Interface>::IID, result__ as *mut _ as *mut _).ok()
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn GetType(&self) -> super::super::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Close(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn Reset<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12CommandAllocator>>(&self, pallocator: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), pallocator.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ClearState(&self) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn ResourceBarrier(&self, numbarriers: u32, pbarriers: *const super::super::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(numbarriers), ::core::mem::transmute(pbarriers)))
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn DiscardResource<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Resource>>(&self, presource: Param0, pregion: *const super::super::Graphics::Direct3D12::D3D12_DISCARD_REGION) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), presource.into_param().abi(), ::core::mem::transmute(pregion)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn BeginQuery<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12QueryHeap>>(&self, pqueryheap: Param0, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), pqueryheap.into_param().abi(), ::core::mem::transmute(r#type), ::core::mem::transmute(index)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn EndQuery<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12QueryHeap>>(&self, pqueryheap: Param0, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), pqueryheap.into_param().abi(), ::core::mem::transmute(r#type), ::core::mem::transmute(index)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn ResolveQueryData<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12QueryHeap>, Param4: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Resource>>(&self, pqueryheap: Param0, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, startindex: u32, numqueries: u32, pdestinationbuffer: Param4, aligneddestinationbufferoffset: u64) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).16)(
            ::core::mem::transmute_copy(self),
            pqueryheap.into_param().abi(),
            ::core::mem::transmute(r#type),
            ::core::mem::transmute(startindex),
            ::core::mem::transmute(numqueries),
            pdestinationbuffer.into_param().abi(),
            ::core::mem::transmute(aligneddestinationbufferoffset),
        ))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn SetPredication<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Resource>>(&self, pbuffer: Param0, alignedbufferoffset: u64, operation: super::super::Graphics::Direct3D12::D3D12_PREDICATION_OP) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self), pbuffer.into_param().abi(), ::core::mem::transmute(alignedbufferoffset), ::core::mem::transmute(operation)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetMarker(&self, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).18)(::core::mem::transmute_copy(self), ::core::mem::transmute(metadata), ::core::mem::transmute(pdata), ::core::mem::transmute(size)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BeginEvent(&self, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).19)(::core::mem::transmute_copy(self), ::core::mem::transmute(metadata), ::core::mem::transmute(pdata), ::core::mem::transmute(size)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndEvent(&self) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).20)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn EstimateMotion<'a, Param0: ::windows::runtime::IntoParam<'a, ID3D12VideoMotionEstimator>>(&self, pmotionestimator: Param0, poutputarguments: *const D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT, pinputarguments: *const D3D12_VIDEO_MOTION_ESTIMATOR_INPUT) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).21)(::core::mem::transmute_copy(self), pmotionestimator.into_param().abi(), ::core::mem::transmute(poutputarguments), ::core::mem::transmute(pinputarguments)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn ResolveMotionVectorHeap(&self, poutputarguments: *const D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT, pinputarguments: *const D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).22)(::core::mem::transmute_copy(self), ::core::mem::transmute(poutputarguments), ::core::mem::transmute(pinputarguments)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn WriteBufferImmediate(&self, count: u32, pparams: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, pmodes: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).23)(::core::mem::transmute_copy(self), ::core::mem::transmute(count), ::core::mem::transmute(pparams), ::core::mem::transmute(pmodes)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn SetProtectedResourceSession<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12ProtectedResourceSession>>(&self, pprotectedresourcesession: Param0) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).24)(::core::mem::transmute_copy(self), pprotectedresourcesession.into_param().abi()))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn InitializeExtensionCommand<'a, Param0: ::windows::runtime::IntoParam<'a, ID3D12VideoExtensionCommand>>(&self, pextensioncommand: Param0, pinitializationparameters: *const ::core::ffi::c_void, initializationparameterssizeinbytes: usize) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).25)(::core::mem::transmute_copy(self), pextensioncommand.into_param().abi(), ::core::mem::transmute(pinitializationparameters), ::core::mem::transmute(initializationparameterssizeinbytes)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ExecuteExtensionCommand<'a, Param0: ::windows::runtime::IntoParam<'a, ID3D12VideoExtensionCommand>>(&self, pextensioncommand: Param0, pexecutionparameters: *const ::core::ffi::c_void, executionparameterssizeinbytes: usize) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).26)(::core::mem::transmute_copy(self), pextensioncommand.into_param().abi(), ::core::mem::transmute(pexecutionparameters), ::core::mem::transmute(executionparameterssizeinbytes)))
    }
}
unsafe impl ::windows::runtime::Interface for ID3D12VideoEncodeCommandList1 {
    type Vtable = ID3D12VideoEncodeCommandList1_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2492931786, 11227, 18281, [136, 207, 54, 117, 234, 117, 126, 188]);
}
impl ::core::convert::From<ID3D12VideoEncodeCommandList1> for ::windows::runtime::IUnknown {
    fn from(value: ID3D12VideoEncodeCommandList1) -> Self {
        value.0
    }
}
impl ::core::convert::From<&ID3D12VideoEncodeCommandList1> for ::windows::runtime::IUnknown {
    fn from(value: &ID3D12VideoEncodeCommandList1) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ID3D12VideoEncodeCommandList1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a ID3D12VideoEncodeCommandList1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<ID3D12VideoEncodeCommandList1> for ID3D12VideoEncodeCommandList {
    fn from(value: ID3D12VideoEncodeCommandList1) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ID3D12VideoEncodeCommandList1> for ID3D12VideoEncodeCommandList {
    fn from(value: &ID3D12VideoEncodeCommandList1) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ID3D12VideoEncodeCommandList> for ID3D12VideoEncodeCommandList1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ID3D12VideoEncodeCommandList> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ID3D12VideoEncodeCommandList> for &ID3D12VideoEncodeCommandList1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ID3D12VideoEncodeCommandList> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoEncodeCommandList1> for super::super::Graphics::Direct3D12::ID3D12CommandList {
    fn from(value: ID3D12VideoEncodeCommandList1) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoEncodeCommandList1> for super::super::Graphics::Direct3D12::ID3D12CommandList {
    fn from(value: &ID3D12VideoEncodeCommandList1) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12CommandList> for ID3D12VideoEncodeCommandList1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12CommandList> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12CommandList> for &ID3D12VideoEncodeCommandList1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12CommandList> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoEncodeCommandList1> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: ID3D12VideoEncodeCommandList1) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoEncodeCommandList1> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: &ID3D12VideoEncodeCommandList1) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for ID3D12VideoEncodeCommandList1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for &ID3D12VideoEncodeCommandList1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoEncodeCommandList1> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: ID3D12VideoEncodeCommandList1) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoEncodeCommandList1> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: &ID3D12VideoEncodeCommandList1) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for ID3D12VideoEncodeCommandList1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for &ID3D12VideoEncodeCommandList1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ID3D12VideoEncodeCommandList1_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdata: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvdevice: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE,
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pallocator: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, numbarriers: u32, pbarriers: *const ::core::mem::ManuallyDrop<super::super::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER>),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presource: ::windows::runtime::RawPtr, pregion: *const super::super::Graphics::Direct3D12::D3D12_DISCARD_REGION),
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12")))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pqueryheap: ::windows::runtime::RawPtr, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pqueryheap: ::windows::runtime::RawPtr, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pqueryheap: ::windows::runtime::RawPtr, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, startindex: u32, numqueries: u32, pdestinationbuffer: ::windows::runtime::RawPtr, aligneddestinationbufferoffset: u64),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbuffer: ::windows::runtime::RawPtr, alignedbufferoffset: u64, operation: super::super::Graphics::Direct3D12::D3D12_PREDICATION_OP),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pmotionestimator: ::windows::runtime::RawPtr, poutputarguments: *const ::core::mem::ManuallyDrop<D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT>, pinputarguments: *const ::core::mem::ManuallyDrop<D3D12_VIDEO_MOTION_ESTIMATOR_INPUT>),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, poutputarguments: *const ::core::mem::ManuallyDrop<D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT>, pinputarguments: *const ::core::mem::ManuallyDrop<D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT>),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, pparams: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, pmodes: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pprotectedresourcesession: ::windows::runtime::RawPtr),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pextensioncommand: ::windows::runtime::RawPtr, pinitializationparameters: *const ::core::ffi::c_void, initializationparameterssizeinbytes: usize),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pextensioncommand: ::windows::runtime::RawPtr, pexecutionparameters: *const ::core::ffi::c_void, executionparameterssizeinbytes: usize),
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct ID3D12VideoEncodeCommandList2(pub ::windows::runtime::IUnknown);
impl ID3D12VideoEncodeCommandList2 {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPrivateData(&self, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(pdatasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateData(&self, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(datasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateDataInterface<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guid: *const ::windows::runtime::GUID, pdata: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), pdata.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, name: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), name.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDevice<T: ::windows::runtime::Interface>(&self, result__: *mut ::core::option::Option<T>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &<T as ::windows::runtime::Interface>::IID, result__ as *mut _ as *mut _).ok()
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn GetType(&self) -> super::super::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Close(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn Reset<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12CommandAllocator>>(&self, pallocator: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), pallocator.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ClearState(&self) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn ResourceBarrier(&self, numbarriers: u32, pbarriers: *const super::super::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(numbarriers), ::core::mem::transmute(pbarriers)))
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn DiscardResource<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Resource>>(&self, presource: Param0, pregion: *const super::super::Graphics::Direct3D12::D3D12_DISCARD_REGION) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), presource.into_param().abi(), ::core::mem::transmute(pregion)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn BeginQuery<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12QueryHeap>>(&self, pqueryheap: Param0, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), pqueryheap.into_param().abi(), ::core::mem::transmute(r#type), ::core::mem::transmute(index)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn EndQuery<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12QueryHeap>>(&self, pqueryheap: Param0, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), pqueryheap.into_param().abi(), ::core::mem::transmute(r#type), ::core::mem::transmute(index)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn ResolveQueryData<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12QueryHeap>, Param4: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Resource>>(&self, pqueryheap: Param0, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, startindex: u32, numqueries: u32, pdestinationbuffer: Param4, aligneddestinationbufferoffset: u64) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).16)(
            ::core::mem::transmute_copy(self),
            pqueryheap.into_param().abi(),
            ::core::mem::transmute(r#type),
            ::core::mem::transmute(startindex),
            ::core::mem::transmute(numqueries),
            pdestinationbuffer.into_param().abi(),
            ::core::mem::transmute(aligneddestinationbufferoffset),
        ))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn SetPredication<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Resource>>(&self, pbuffer: Param0, alignedbufferoffset: u64, operation: super::super::Graphics::Direct3D12::D3D12_PREDICATION_OP) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self), pbuffer.into_param().abi(), ::core::mem::transmute(alignedbufferoffset), ::core::mem::transmute(operation)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetMarker(&self, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).18)(::core::mem::transmute_copy(self), ::core::mem::transmute(metadata), ::core::mem::transmute(pdata), ::core::mem::transmute(size)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BeginEvent(&self, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).19)(::core::mem::transmute_copy(self), ::core::mem::transmute(metadata), ::core::mem::transmute(pdata), ::core::mem::transmute(size)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndEvent(&self) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).20)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn EstimateMotion<'a, Param0: ::windows::runtime::IntoParam<'a, ID3D12VideoMotionEstimator>>(&self, pmotionestimator: Param0, poutputarguments: *const D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT, pinputarguments: *const D3D12_VIDEO_MOTION_ESTIMATOR_INPUT) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).21)(::core::mem::transmute_copy(self), pmotionestimator.into_param().abi(), ::core::mem::transmute(poutputarguments), ::core::mem::transmute(pinputarguments)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn ResolveMotionVectorHeap(&self, poutputarguments: *const D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT, pinputarguments: *const D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).22)(::core::mem::transmute_copy(self), ::core::mem::transmute(poutputarguments), ::core::mem::transmute(pinputarguments)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn WriteBufferImmediate(&self, count: u32, pparams: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, pmodes: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).23)(::core::mem::transmute_copy(self), ::core::mem::transmute(count), ::core::mem::transmute(pparams), ::core::mem::transmute(pmodes)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn SetProtectedResourceSession<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12ProtectedResourceSession>>(&self, pprotectedresourcesession: Param0) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).24)(::core::mem::transmute_copy(self), pprotectedresourcesession.into_param().abi()))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn InitializeExtensionCommand<'a, Param0: ::windows::runtime::IntoParam<'a, ID3D12VideoExtensionCommand>>(&self, pextensioncommand: Param0, pinitializationparameters: *const ::core::ffi::c_void, initializationparameterssizeinbytes: usize) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).25)(::core::mem::transmute_copy(self), pextensioncommand.into_param().abi(), ::core::mem::transmute(pinitializationparameters), ::core::mem::transmute(initializationparameterssizeinbytes)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ExecuteExtensionCommand<'a, Param0: ::windows::runtime::IntoParam<'a, ID3D12VideoExtensionCommand>>(&self, pextensioncommand: Param0, pexecutionparameters: *const ::core::ffi::c_void, executionparameterssizeinbytes: usize) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).26)(::core::mem::transmute_copy(self), pextensioncommand.into_param().abi(), ::core::mem::transmute(pexecutionparameters), ::core::mem::transmute(executionparameterssizeinbytes)))
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D12`, `Win32_Graphics_Dxgi`*"]
    pub unsafe fn EncodeFrame<'a, Param0: ::windows::runtime::IntoParam<'a, ID3D12VideoEncoder>, Param1: ::windows::runtime::IntoParam<'a, ID3D12VideoEncoderHeap>>(&self, pencoder: Param0, pheap: Param1, pinputarguments: *const D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS, poutputarguments: *const D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).27)(::core::mem::transmute_copy(self), pencoder.into_param().abi(), pheap.into_param().abi(), ::core::mem::transmute(pinputarguments), ::core::mem::transmute(poutputarguments)))
    }
    #[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`, `Win32_Graphics_Dxgi`*"]
    pub unsafe fn ResolveEncoderOutputMetadata(&self, pinputarguments: *const D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS, poutputarguments: *const D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).28)(::core::mem::transmute_copy(self), ::core::mem::transmute(pinputarguments), ::core::mem::transmute(poutputarguments)))
    }
}
unsafe impl ::windows::runtime::Interface for ID3D12VideoEncodeCommandList2 {
    type Vtable = ID3D12VideoEncodeCommandList2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2304020962, 59137, 18089, [154, 31, 141, 52, 128, 237, 134, 122]);
}
impl ::core::convert::From<ID3D12VideoEncodeCommandList2> for ::windows::runtime::IUnknown {
    fn from(value: ID3D12VideoEncodeCommandList2) -> Self {
        value.0
    }
}
impl ::core::convert::From<&ID3D12VideoEncodeCommandList2> for ::windows::runtime::IUnknown {
    fn from(value: &ID3D12VideoEncodeCommandList2) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ID3D12VideoEncodeCommandList2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a ID3D12VideoEncodeCommandList2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<ID3D12VideoEncodeCommandList2> for ID3D12VideoEncodeCommandList1 {
    fn from(value: ID3D12VideoEncodeCommandList2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ID3D12VideoEncodeCommandList2> for ID3D12VideoEncodeCommandList1 {
    fn from(value: &ID3D12VideoEncodeCommandList2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ID3D12VideoEncodeCommandList1> for ID3D12VideoEncodeCommandList2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ID3D12VideoEncodeCommandList1> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ID3D12VideoEncodeCommandList1> for &ID3D12VideoEncodeCommandList2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ID3D12VideoEncodeCommandList1> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ID3D12VideoEncodeCommandList2> for ID3D12VideoEncodeCommandList {
    fn from(value: ID3D12VideoEncodeCommandList2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ID3D12VideoEncodeCommandList2> for ID3D12VideoEncodeCommandList {
    fn from(value: &ID3D12VideoEncodeCommandList2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ID3D12VideoEncodeCommandList> for ID3D12VideoEncodeCommandList2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ID3D12VideoEncodeCommandList> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ID3D12VideoEncodeCommandList> for &ID3D12VideoEncodeCommandList2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ID3D12VideoEncodeCommandList> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoEncodeCommandList2> for super::super::Graphics::Direct3D12::ID3D12CommandList {
    fn from(value: ID3D12VideoEncodeCommandList2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoEncodeCommandList2> for super::super::Graphics::Direct3D12::ID3D12CommandList {
    fn from(value: &ID3D12VideoEncodeCommandList2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12CommandList> for ID3D12VideoEncodeCommandList2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12CommandList> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12CommandList> for &ID3D12VideoEncodeCommandList2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12CommandList> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoEncodeCommandList2> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: ID3D12VideoEncodeCommandList2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoEncodeCommandList2> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: &ID3D12VideoEncodeCommandList2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for ID3D12VideoEncodeCommandList2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for &ID3D12VideoEncodeCommandList2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoEncodeCommandList2> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: ID3D12VideoEncodeCommandList2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoEncodeCommandList2> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: &ID3D12VideoEncodeCommandList2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for ID3D12VideoEncodeCommandList2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for &ID3D12VideoEncodeCommandList2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ID3D12VideoEncodeCommandList2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdata: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvdevice: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE,
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pallocator: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, numbarriers: u32, pbarriers: *const ::core::mem::ManuallyDrop<super::super::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER>),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presource: ::windows::runtime::RawPtr, pregion: *const super::super::Graphics::Direct3D12::D3D12_DISCARD_REGION),
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12")))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pqueryheap: ::windows::runtime::RawPtr, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pqueryheap: ::windows::runtime::RawPtr, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pqueryheap: ::windows::runtime::RawPtr, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, startindex: u32, numqueries: u32, pdestinationbuffer: ::windows::runtime::RawPtr, aligneddestinationbufferoffset: u64),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbuffer: ::windows::runtime::RawPtr, alignedbufferoffset: u64, operation: super::super::Graphics::Direct3D12::D3D12_PREDICATION_OP),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pmotionestimator: ::windows::runtime::RawPtr, poutputarguments: *const ::core::mem::ManuallyDrop<D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT>, pinputarguments: *const ::core::mem::ManuallyDrop<D3D12_VIDEO_MOTION_ESTIMATOR_INPUT>),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, poutputarguments: *const ::core::mem::ManuallyDrop<D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT>, pinputarguments: *const ::core::mem::ManuallyDrop<D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT>),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, pparams: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, pmodes: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pprotectedresourcesession: ::windows::runtime::RawPtr),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pextensioncommand: ::windows::runtime::RawPtr, pinitializationparameters: *const ::core::ffi::c_void, initializationparameterssizeinbytes: usize),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pextensioncommand: ::windows::runtime::RawPtr, pexecutionparameters: *const ::core::ffi::c_void, executionparameterssizeinbytes: usize),
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pencoder: ::windows::runtime::RawPtr, pheap: ::windows::runtime::RawPtr, pinputarguments: *const ::core::mem::ManuallyDrop<D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS>, poutputarguments: *const ::core::mem::ManuallyDrop<D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS>),
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi")))] usize,
    #[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pinputarguments: *const ::core::mem::ManuallyDrop<D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS>, poutputarguments: *const ::core::mem::ManuallyDrop<D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS>),
    #[cfg(not(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi")))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct ID3D12VideoEncoder(pub ::windows::runtime::IUnknown);
impl ID3D12VideoEncoder {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPrivateData(&self, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(pdatasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateData(&self, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(datasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateDataInterface<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guid: *const ::windows::runtime::GUID, pdata: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), pdata.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, name: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), name.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDevice<T: ::windows::runtime::Interface>(&self, result__: *mut ::core::option::Option<T>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &<T as ::windows::runtime::Interface>::IID, result__ as *mut _ as *mut _).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetNodeMask(&self) -> u32 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetEncoderFlags(&self) -> D3D12_VIDEO_ENCODER_FLAGS {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCodec(&self) -> D3D12_VIDEO_ENCODER_CODEC {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCodecProfile(&self, dstprofile: D3D12_VIDEO_ENCODER_PROFILE_DESC) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(dstprofile)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCodecConfiguration(&self, dstcodecconfig: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(dstcodecconfig)).ok()
    }
    #[cfg(feature = "Win32_Graphics_Dxgi")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Dxgi`*"]
    pub unsafe fn GetInputFormat(&self) -> super::super::Graphics::Dxgi::DXGI_FORMAT {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetMaxMotionEstimationPrecision(&self) -> D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self)))
    }
}
unsafe impl ::windows::runtime::Interface for ID3D12VideoEncoder {
    type Vtable = ID3D12VideoEncoder_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(772612397, 36345, 17574, [167, 112, 187, 40, 155, 24, 39, 55]);
}
impl ::core::convert::From<ID3D12VideoEncoder> for ::windows::runtime::IUnknown {
    fn from(value: ID3D12VideoEncoder) -> Self {
        value.0
    }
}
impl ::core::convert::From<&ID3D12VideoEncoder> for ::windows::runtime::IUnknown {
    fn from(value: &ID3D12VideoEncoder) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ID3D12VideoEncoder {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a ID3D12VideoEncoder {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoEncoder> for super::super::Graphics::Direct3D12::ID3D12Pageable {
    fn from(value: ID3D12VideoEncoder) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoEncoder> for super::super::Graphics::Direct3D12::ID3D12Pageable {
    fn from(value: &ID3D12VideoEncoder) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> for ID3D12VideoEncoder {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> for &ID3D12VideoEncoder {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoEncoder> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: ID3D12VideoEncoder) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoEncoder> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: &ID3D12VideoEncoder) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for ID3D12VideoEncoder {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for &ID3D12VideoEncoder {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoEncoder> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: ID3D12VideoEncoder) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoEncoder> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: &ID3D12VideoEncoder) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for ID3D12VideoEncoder {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for &ID3D12VideoEncoder {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ID3D12VideoEncoder_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdata: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvdevice: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> D3D12_VIDEO_ENCODER_FLAGS,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> D3D12_VIDEO_ENCODER_CODEC,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dstprofile: D3D12_VIDEO_ENCODER_PROFILE_DESC) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dstcodecconfig: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Dxgi")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Graphics::Dxgi::DXGI_FORMAT,
    #[cfg(not(feature = "Win32_Graphics_Dxgi"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct ID3D12VideoEncoderHeap(pub ::windows::runtime::IUnknown);
impl ID3D12VideoEncoderHeap {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPrivateData(&self, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(pdatasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateData(&self, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(datasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateDataInterface<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guid: *const ::windows::runtime::GUID, pdata: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), pdata.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, name: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), name.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDevice<T: ::windows::runtime::Interface>(&self, result__: *mut ::core::option::Option<T>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &<T as ::windows::runtime::Interface>::IID, result__ as *mut _ as *mut _).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetNodeMask(&self) -> u32 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetEncoderHeapFlags(&self) -> D3D12_VIDEO_ENCODER_HEAP_FLAGS {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCodec(&self) -> D3D12_VIDEO_ENCODER_CODEC {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCodecProfile(&self, dstprofile: D3D12_VIDEO_ENCODER_PROFILE_DESC) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(dstprofile)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCodecLevel(&self, dstlevel: D3D12_VIDEO_ENCODER_LEVEL_SETTING) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(dstlevel)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetResolutionListCount(&self) -> u32 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetResolutionList(&self, resolutionslistcount: u32, presolutionlist: *mut D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), ::core::mem::transmute(resolutionslistcount), ::core::mem::transmute(presolutionlist)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for ID3D12VideoEncoderHeap {
    type Vtable = ID3D12VideoEncoderHeap_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(582180246, 34666, 17600, [178, 94, 251, 140, 156, 127, 28, 74]);
}
impl ::core::convert::From<ID3D12VideoEncoderHeap> for ::windows::runtime::IUnknown {
    fn from(value: ID3D12VideoEncoderHeap) -> Self {
        value.0
    }
}
impl ::core::convert::From<&ID3D12VideoEncoderHeap> for ::windows::runtime::IUnknown {
    fn from(value: &ID3D12VideoEncoderHeap) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ID3D12VideoEncoderHeap {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a ID3D12VideoEncoderHeap {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoEncoderHeap> for super::super::Graphics::Direct3D12::ID3D12Pageable {
    fn from(value: ID3D12VideoEncoderHeap) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoEncoderHeap> for super::super::Graphics::Direct3D12::ID3D12Pageable {
    fn from(value: &ID3D12VideoEncoderHeap) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> for ID3D12VideoEncoderHeap {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> for &ID3D12VideoEncoderHeap {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoEncoderHeap> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: ID3D12VideoEncoderHeap) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoEncoderHeap> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: &ID3D12VideoEncoderHeap) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for ID3D12VideoEncoderHeap {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for &ID3D12VideoEncoderHeap {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoEncoderHeap> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: ID3D12VideoEncoderHeap) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoEncoderHeap> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: &ID3D12VideoEncoderHeap) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for ID3D12VideoEncoderHeap {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for &ID3D12VideoEncoderHeap {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ID3D12VideoEncoderHeap_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdata: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvdevice: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> D3D12_VIDEO_ENCODER_HEAP_FLAGS,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> D3D12_VIDEO_ENCODER_CODEC,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dstprofile: D3D12_VIDEO_ENCODER_PROFILE_DESC) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dstlevel: D3D12_VIDEO_ENCODER_LEVEL_SETTING) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, resolutionslistcount: u32, presolutionlist: *mut D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct ID3D12VideoExtensionCommand(pub ::windows::runtime::IUnknown);
impl ID3D12VideoExtensionCommand {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPrivateData(&self, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(pdatasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateData(&self, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(datasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateDataInterface<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guid: *const ::windows::runtime::GUID, pdata: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), pdata.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, name: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), name.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDevice<T: ::windows::runtime::Interface>(&self, result__: *mut ::core::option::Option<T>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &<T as ::windows::runtime::Interface>::IID, result__ as *mut _ as *mut _).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDesc(&self) -> D3D12_VIDEO_EXTENSION_COMMAND_DESC {
        let mut result__: D3D12_VIDEO_EXTENSION_COMMAND_DESC = ::core::default::Default::default();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), &mut result__);
        result__
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetProtectedResourceSession<T: ::windows::runtime::Interface>(&self, result__: *mut ::core::option::Option<T>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), &<T as ::windows::runtime::Interface>::IID, result__ as *mut _ as *mut _).ok()
    }
}
unsafe impl ::windows::runtime::Interface for ID3D12VideoExtensionCommand {
    type Vtable = ID3D12VideoExtensionCommand_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1431192040, 44686, 19084, [183, 210, 91, 79, 39, 74, 48, 228]);
}
impl ::core::convert::From<ID3D12VideoExtensionCommand> for ::windows::runtime::IUnknown {
    fn from(value: ID3D12VideoExtensionCommand) -> Self {
        value.0
    }
}
impl ::core::convert::From<&ID3D12VideoExtensionCommand> for ::windows::runtime::IUnknown {
    fn from(value: &ID3D12VideoExtensionCommand) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ID3D12VideoExtensionCommand {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a ID3D12VideoExtensionCommand {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoExtensionCommand> for super::super::Graphics::Direct3D12::ID3D12Pageable {
    fn from(value: ID3D12VideoExtensionCommand) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoExtensionCommand> for super::super::Graphics::Direct3D12::ID3D12Pageable {
    fn from(value: &ID3D12VideoExtensionCommand) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> for ID3D12VideoExtensionCommand {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> for &ID3D12VideoExtensionCommand {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoExtensionCommand> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: ID3D12VideoExtensionCommand) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoExtensionCommand> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: &ID3D12VideoExtensionCommand) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for ID3D12VideoExtensionCommand {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for &ID3D12VideoExtensionCommand {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoExtensionCommand> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: ID3D12VideoExtensionCommand) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoExtensionCommand> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: &ID3D12VideoExtensionCommand) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for ID3D12VideoExtensionCommand {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for &ID3D12VideoExtensionCommand {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ID3D12VideoExtensionCommand_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdata: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvdevice: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, result__: *mut D3D12_VIDEO_EXTENSION_COMMAND_DESC),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppprotectedsession: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct ID3D12VideoMotionEstimator(pub ::windows::runtime::IUnknown);
impl ID3D12VideoMotionEstimator {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPrivateData(&self, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(pdatasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateData(&self, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(datasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateDataInterface<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guid: *const ::windows::runtime::GUID, pdata: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), pdata.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, name: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), name.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDevice<T: ::windows::runtime::Interface>(&self, result__: *mut ::core::option::Option<T>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &<T as ::windows::runtime::Interface>::IID, result__ as *mut _ as *mut _).ok()
    }
    #[cfg(feature = "Win32_Graphics_Dxgi")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Dxgi`*"]
    pub unsafe fn GetDesc(&self) -> D3D12_VIDEO_MOTION_ESTIMATOR_DESC {
        let mut result__: D3D12_VIDEO_MOTION_ESTIMATOR_DESC = ::core::default::Default::default();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), &mut result__);
        result__
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetProtectedResourceSession<T: ::windows::runtime::Interface>(&self, result__: *mut ::core::option::Option<T>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), &<T as ::windows::runtime::Interface>::IID, result__ as *mut _ as *mut _).ok()
    }
}
unsafe impl ::windows::runtime::Interface for ID3D12VideoMotionEstimator {
    type Vtable = ID3D12VideoMotionEstimator_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(872263182, 2443, 17039, [135, 187, 52, 182, 149, 222, 8, 248]);
}
impl ::core::convert::From<ID3D12VideoMotionEstimator> for ::windows::runtime::IUnknown {
    fn from(value: ID3D12VideoMotionEstimator) -> Self {
        value.0
    }
}
impl ::core::convert::From<&ID3D12VideoMotionEstimator> for ::windows::runtime::IUnknown {
    fn from(value: &ID3D12VideoMotionEstimator) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ID3D12VideoMotionEstimator {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a ID3D12VideoMotionEstimator {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoMotionEstimator> for super::super::Graphics::Direct3D12::ID3D12Pageable {
    fn from(value: ID3D12VideoMotionEstimator) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoMotionEstimator> for super::super::Graphics::Direct3D12::ID3D12Pageable {
    fn from(value: &ID3D12VideoMotionEstimator) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> for ID3D12VideoMotionEstimator {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> for &ID3D12VideoMotionEstimator {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoMotionEstimator> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: ID3D12VideoMotionEstimator) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoMotionEstimator> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: &ID3D12VideoMotionEstimator) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for ID3D12VideoMotionEstimator {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for &ID3D12VideoMotionEstimator {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoMotionEstimator> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: ID3D12VideoMotionEstimator) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoMotionEstimator> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: &ID3D12VideoMotionEstimator) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for ID3D12VideoMotionEstimator {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for &ID3D12VideoMotionEstimator {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ID3D12VideoMotionEstimator_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdata: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvdevice: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Dxgi")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, result__: *mut D3D12_VIDEO_MOTION_ESTIMATOR_DESC),
    #[cfg(not(feature = "Win32_Graphics_Dxgi"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppprotectedsession: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct ID3D12VideoMotionVectorHeap(pub ::windows::runtime::IUnknown);
impl ID3D12VideoMotionVectorHeap {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPrivateData(&self, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(pdatasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateData(&self, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(datasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateDataInterface<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guid: *const ::windows::runtime::GUID, pdata: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), pdata.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, name: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), name.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDevice<T: ::windows::runtime::Interface>(&self, result__: *mut ::core::option::Option<T>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &<T as ::windows::runtime::Interface>::IID, result__ as *mut _ as *mut _).ok()
    }
    #[cfg(feature = "Win32_Graphics_Dxgi")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Dxgi`*"]
    pub unsafe fn GetDesc(&self) -> D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC {
        let mut result__: D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC = ::core::default::Default::default();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), &mut result__);
        result__
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetProtectedResourceSession<T: ::windows::runtime::Interface>(&self, result__: *mut ::core::option::Option<T>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), &<T as ::windows::runtime::Interface>::IID, result__ as *mut _ as *mut _).ok()
    }
}
unsafe impl ::windows::runtime::Interface for ID3D12VideoMotionVectorHeap {
    type Vtable = ID3D12VideoMotionVectorHeap_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1541503367, 29754, 16481, [131, 75, 35, 210, 45, 174, 165, 5]);
}
impl ::core::convert::From<ID3D12VideoMotionVectorHeap> for ::windows::runtime::IUnknown {
    fn from(value: ID3D12VideoMotionVectorHeap) -> Self {
        value.0
    }
}
impl ::core::convert::From<&ID3D12VideoMotionVectorHeap> for ::windows::runtime::IUnknown {
    fn from(value: &ID3D12VideoMotionVectorHeap) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ID3D12VideoMotionVectorHeap {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a ID3D12VideoMotionVectorHeap {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoMotionVectorHeap> for super::super::Graphics::Direct3D12::ID3D12Pageable {
    fn from(value: ID3D12VideoMotionVectorHeap) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoMotionVectorHeap> for super::super::Graphics::Direct3D12::ID3D12Pageable {
    fn from(value: &ID3D12VideoMotionVectorHeap) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> for ID3D12VideoMotionVectorHeap {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> for &ID3D12VideoMotionVectorHeap {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoMotionVectorHeap> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: ID3D12VideoMotionVectorHeap) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoMotionVectorHeap> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: &ID3D12VideoMotionVectorHeap) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for ID3D12VideoMotionVectorHeap {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for &ID3D12VideoMotionVectorHeap {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoMotionVectorHeap> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: ID3D12VideoMotionVectorHeap) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoMotionVectorHeap> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: &ID3D12VideoMotionVectorHeap) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for ID3D12VideoMotionVectorHeap {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for &ID3D12VideoMotionVectorHeap {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ID3D12VideoMotionVectorHeap_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdata: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvdevice: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Dxgi")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, result__: *mut D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC),
    #[cfg(not(feature = "Win32_Graphics_Dxgi"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppprotectedsession: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct ID3D12VideoProcessCommandList(pub ::windows::runtime::IUnknown);
impl ID3D12VideoProcessCommandList {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPrivateData(&self, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(pdatasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateData(&self, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(datasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateDataInterface<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guid: *const ::windows::runtime::GUID, pdata: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), pdata.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, name: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), name.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDevice<T: ::windows::runtime::Interface>(&self, result__: *mut ::core::option::Option<T>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &<T as ::windows::runtime::Interface>::IID, result__ as *mut _ as *mut _).ok()
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn GetType(&self) -> super::super::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Close(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn Reset<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12CommandAllocator>>(&self, pallocator: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), pallocator.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ClearState(&self) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn ResourceBarrier(&self, numbarriers: u32, pbarriers: *const super::super::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(numbarriers), ::core::mem::transmute(pbarriers)))
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn DiscardResource<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Resource>>(&self, presource: Param0, pregion: *const super::super::Graphics::Direct3D12::D3D12_DISCARD_REGION) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), presource.into_param().abi(), ::core::mem::transmute(pregion)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn BeginQuery<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12QueryHeap>>(&self, pqueryheap: Param0, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), pqueryheap.into_param().abi(), ::core::mem::transmute(r#type), ::core::mem::transmute(index)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn EndQuery<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12QueryHeap>>(&self, pqueryheap: Param0, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), pqueryheap.into_param().abi(), ::core::mem::transmute(r#type), ::core::mem::transmute(index)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn ResolveQueryData<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12QueryHeap>, Param4: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Resource>>(&self, pqueryheap: Param0, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, startindex: u32, numqueries: u32, pdestinationbuffer: Param4, aligneddestinationbufferoffset: u64) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).16)(
            ::core::mem::transmute_copy(self),
            pqueryheap.into_param().abi(),
            ::core::mem::transmute(r#type),
            ::core::mem::transmute(startindex),
            ::core::mem::transmute(numqueries),
            pdestinationbuffer.into_param().abi(),
            ::core::mem::transmute(aligneddestinationbufferoffset),
        ))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn SetPredication<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Resource>>(&self, pbuffer: Param0, alignedbufferoffset: u64, operation: super::super::Graphics::Direct3D12::D3D12_PREDICATION_OP) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self), pbuffer.into_param().abi(), ::core::mem::transmute(alignedbufferoffset), ::core::mem::transmute(operation)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetMarker(&self, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).18)(::core::mem::transmute_copy(self), ::core::mem::transmute(metadata), ::core::mem::transmute(pdata), ::core::mem::transmute(size)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BeginEvent(&self, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).19)(::core::mem::transmute_copy(self), ::core::mem::transmute(metadata), ::core::mem::transmute(pdata), ::core::mem::transmute(size)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndEvent(&self) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).20)(::core::mem::transmute_copy(self)))
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn ProcessFrames<'a, Param0: ::windows::runtime::IntoParam<'a, ID3D12VideoProcessor>>(&self, pvideoprocessor: Param0, poutputarguments: *const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS, numinputstreams: u32, pinputarguments: *const D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).21)(::core::mem::transmute_copy(self), pvideoprocessor.into_param().abi(), ::core::mem::transmute(poutputarguments), ::core::mem::transmute(numinputstreams), ::core::mem::transmute(pinputarguments)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn WriteBufferImmediate(&self, count: u32, pparams: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, pmodes: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).22)(::core::mem::transmute_copy(self), ::core::mem::transmute(count), ::core::mem::transmute(pparams), ::core::mem::transmute(pmodes)))
    }
}
unsafe impl ::windows::runtime::Interface for ID3D12VideoProcessCommandList {
    type Vtable = ID3D12VideoProcessCommandList_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2930922554, 5759, 18050, [172, 200, 209, 89, 237, 74, 98, 9]);
}
impl ::core::convert::From<ID3D12VideoProcessCommandList> for ::windows::runtime::IUnknown {
    fn from(value: ID3D12VideoProcessCommandList) -> Self {
        value.0
    }
}
impl ::core::convert::From<&ID3D12VideoProcessCommandList> for ::windows::runtime::IUnknown {
    fn from(value: &ID3D12VideoProcessCommandList) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ID3D12VideoProcessCommandList {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a ID3D12VideoProcessCommandList {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoProcessCommandList> for super::super::Graphics::Direct3D12::ID3D12CommandList {
    fn from(value: ID3D12VideoProcessCommandList) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoProcessCommandList> for super::super::Graphics::Direct3D12::ID3D12CommandList {
    fn from(value: &ID3D12VideoProcessCommandList) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12CommandList> for ID3D12VideoProcessCommandList {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12CommandList> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12CommandList> for &ID3D12VideoProcessCommandList {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12CommandList> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoProcessCommandList> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: ID3D12VideoProcessCommandList) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoProcessCommandList> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: &ID3D12VideoProcessCommandList) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for ID3D12VideoProcessCommandList {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for &ID3D12VideoProcessCommandList {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoProcessCommandList> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: ID3D12VideoProcessCommandList) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoProcessCommandList> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: &ID3D12VideoProcessCommandList) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for ID3D12VideoProcessCommandList {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for &ID3D12VideoProcessCommandList {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ID3D12VideoProcessCommandList_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdata: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvdevice: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE,
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pallocator: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, numbarriers: u32, pbarriers: *const ::core::mem::ManuallyDrop<super::super::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER>),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presource: ::windows::runtime::RawPtr, pregion: *const super::super::Graphics::Direct3D12::D3D12_DISCARD_REGION),
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12")))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pqueryheap: ::windows::runtime::RawPtr, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pqueryheap: ::windows::runtime::RawPtr, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pqueryheap: ::windows::runtime::RawPtr, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, startindex: u32, numqueries: u32, pdestinationbuffer: ::windows::runtime::RawPtr, aligneddestinationbufferoffset: u64),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbuffer: ::windows::runtime::RawPtr, alignedbufferoffset: u64, operation: super::super::Graphics::Direct3D12::D3D12_PREDICATION_OP),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pvideoprocessor: ::windows::runtime::RawPtr, poutputarguments: *const ::core::mem::ManuallyDrop<D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS>, numinputstreams: u32, pinputarguments: *const ::core::mem::ManuallyDrop<D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS>),
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12")))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, pparams: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, pmodes: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct ID3D12VideoProcessCommandList1(pub ::windows::runtime::IUnknown);
impl ID3D12VideoProcessCommandList1 {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPrivateData(&self, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(pdatasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateData(&self, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(datasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateDataInterface<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guid: *const ::windows::runtime::GUID, pdata: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), pdata.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, name: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), name.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDevice<T: ::windows::runtime::Interface>(&self, result__: *mut ::core::option::Option<T>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &<T as ::windows::runtime::Interface>::IID, result__ as *mut _ as *mut _).ok()
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn GetType(&self) -> super::super::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Close(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn Reset<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12CommandAllocator>>(&self, pallocator: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), pallocator.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ClearState(&self) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn ResourceBarrier(&self, numbarriers: u32, pbarriers: *const super::super::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(numbarriers), ::core::mem::transmute(pbarriers)))
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn DiscardResource<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Resource>>(&self, presource: Param0, pregion: *const super::super::Graphics::Direct3D12::D3D12_DISCARD_REGION) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), presource.into_param().abi(), ::core::mem::transmute(pregion)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn BeginQuery<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12QueryHeap>>(&self, pqueryheap: Param0, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), pqueryheap.into_param().abi(), ::core::mem::transmute(r#type), ::core::mem::transmute(index)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn EndQuery<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12QueryHeap>>(&self, pqueryheap: Param0, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), pqueryheap.into_param().abi(), ::core::mem::transmute(r#type), ::core::mem::transmute(index)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn ResolveQueryData<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12QueryHeap>, Param4: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Resource>>(&self, pqueryheap: Param0, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, startindex: u32, numqueries: u32, pdestinationbuffer: Param4, aligneddestinationbufferoffset: u64) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).16)(
            ::core::mem::transmute_copy(self),
            pqueryheap.into_param().abi(),
            ::core::mem::transmute(r#type),
            ::core::mem::transmute(startindex),
            ::core::mem::transmute(numqueries),
            pdestinationbuffer.into_param().abi(),
            ::core::mem::transmute(aligneddestinationbufferoffset),
        ))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn SetPredication<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Resource>>(&self, pbuffer: Param0, alignedbufferoffset: u64, operation: super::super::Graphics::Direct3D12::D3D12_PREDICATION_OP) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self), pbuffer.into_param().abi(), ::core::mem::transmute(alignedbufferoffset), ::core::mem::transmute(operation)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetMarker(&self, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).18)(::core::mem::transmute_copy(self), ::core::mem::transmute(metadata), ::core::mem::transmute(pdata), ::core::mem::transmute(size)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BeginEvent(&self, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).19)(::core::mem::transmute_copy(self), ::core::mem::transmute(metadata), ::core::mem::transmute(pdata), ::core::mem::transmute(size)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndEvent(&self) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).20)(::core::mem::transmute_copy(self)))
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn ProcessFrames<'a, Param0: ::windows::runtime::IntoParam<'a, ID3D12VideoProcessor>>(&self, pvideoprocessor: Param0, poutputarguments: *const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS, numinputstreams: u32, pinputarguments: *const D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).21)(::core::mem::transmute_copy(self), pvideoprocessor.into_param().abi(), ::core::mem::transmute(poutputarguments), ::core::mem::transmute(numinputstreams), ::core::mem::transmute(pinputarguments)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn WriteBufferImmediate(&self, count: u32, pparams: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, pmodes: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).22)(::core::mem::transmute_copy(self), ::core::mem::transmute(count), ::core::mem::transmute(pparams), ::core::mem::transmute(pmodes)))
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn ProcessFrames1<'a, Param0: ::windows::runtime::IntoParam<'a, ID3D12VideoProcessor>>(&self, pvideoprocessor: Param0, poutputarguments: *const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS, numinputstreams: u32, pinputarguments: *const D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).23)(::core::mem::transmute_copy(self), pvideoprocessor.into_param().abi(), ::core::mem::transmute(poutputarguments), ::core::mem::transmute(numinputstreams), ::core::mem::transmute(pinputarguments)))
    }
}
unsafe impl ::windows::runtime::Interface for ID3D12VideoProcessCommandList1 {
    type Vtable = ID3D12VideoProcessCommandList1_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1412193357, 30102, 17231, [140, 147, 78, 250, 103, 102, 242, 103]);
}
impl ::core::convert::From<ID3D12VideoProcessCommandList1> for ::windows::runtime::IUnknown {
    fn from(value: ID3D12VideoProcessCommandList1) -> Self {
        value.0
    }
}
impl ::core::convert::From<&ID3D12VideoProcessCommandList1> for ::windows::runtime::IUnknown {
    fn from(value: &ID3D12VideoProcessCommandList1) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ID3D12VideoProcessCommandList1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a ID3D12VideoProcessCommandList1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<ID3D12VideoProcessCommandList1> for ID3D12VideoProcessCommandList {
    fn from(value: ID3D12VideoProcessCommandList1) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ID3D12VideoProcessCommandList1> for ID3D12VideoProcessCommandList {
    fn from(value: &ID3D12VideoProcessCommandList1) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ID3D12VideoProcessCommandList> for ID3D12VideoProcessCommandList1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ID3D12VideoProcessCommandList> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ID3D12VideoProcessCommandList> for &ID3D12VideoProcessCommandList1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ID3D12VideoProcessCommandList> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoProcessCommandList1> for super::super::Graphics::Direct3D12::ID3D12CommandList {
    fn from(value: ID3D12VideoProcessCommandList1) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoProcessCommandList1> for super::super::Graphics::Direct3D12::ID3D12CommandList {
    fn from(value: &ID3D12VideoProcessCommandList1) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12CommandList> for ID3D12VideoProcessCommandList1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12CommandList> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12CommandList> for &ID3D12VideoProcessCommandList1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12CommandList> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoProcessCommandList1> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: ID3D12VideoProcessCommandList1) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoProcessCommandList1> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: &ID3D12VideoProcessCommandList1) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for ID3D12VideoProcessCommandList1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for &ID3D12VideoProcessCommandList1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoProcessCommandList1> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: ID3D12VideoProcessCommandList1) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoProcessCommandList1> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: &ID3D12VideoProcessCommandList1) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for ID3D12VideoProcessCommandList1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for &ID3D12VideoProcessCommandList1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ID3D12VideoProcessCommandList1_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdata: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvdevice: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE,
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pallocator: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, numbarriers: u32, pbarriers: *const ::core::mem::ManuallyDrop<super::super::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER>),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presource: ::windows::runtime::RawPtr, pregion: *const super::super::Graphics::Direct3D12::D3D12_DISCARD_REGION),
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12")))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pqueryheap: ::windows::runtime::RawPtr, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pqueryheap: ::windows::runtime::RawPtr, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pqueryheap: ::windows::runtime::RawPtr, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, startindex: u32, numqueries: u32, pdestinationbuffer: ::windows::runtime::RawPtr, aligneddestinationbufferoffset: u64),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbuffer: ::windows::runtime::RawPtr, alignedbufferoffset: u64, operation: super::super::Graphics::Direct3D12::D3D12_PREDICATION_OP),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pvideoprocessor: ::windows::runtime::RawPtr, poutputarguments: *const ::core::mem::ManuallyDrop<D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS>, numinputstreams: u32, pinputarguments: *const ::core::mem::ManuallyDrop<D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS>),
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12")))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, pparams: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, pmodes: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pvideoprocessor: ::windows::runtime::RawPtr, poutputarguments: *const ::core::mem::ManuallyDrop<D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS>, numinputstreams: u32, pinputarguments: *const ::core::mem::ManuallyDrop<D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1>),
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12")))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct ID3D12VideoProcessCommandList2(pub ::windows::runtime::IUnknown);
impl ID3D12VideoProcessCommandList2 {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPrivateData(&self, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(pdatasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateData(&self, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(datasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateDataInterface<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guid: *const ::windows::runtime::GUID, pdata: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), pdata.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, name: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), name.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDevice<T: ::windows::runtime::Interface>(&self, result__: *mut ::core::option::Option<T>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &<T as ::windows::runtime::Interface>::IID, result__ as *mut _ as *mut _).ok()
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn GetType(&self) -> super::super::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Close(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn Reset<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12CommandAllocator>>(&self, pallocator: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), pallocator.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ClearState(&self) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn ResourceBarrier(&self, numbarriers: u32, pbarriers: *const super::super::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(numbarriers), ::core::mem::transmute(pbarriers)))
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn DiscardResource<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Resource>>(&self, presource: Param0, pregion: *const super::super::Graphics::Direct3D12::D3D12_DISCARD_REGION) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), presource.into_param().abi(), ::core::mem::transmute(pregion)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn BeginQuery<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12QueryHeap>>(&self, pqueryheap: Param0, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), pqueryheap.into_param().abi(), ::core::mem::transmute(r#type), ::core::mem::transmute(index)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn EndQuery<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12QueryHeap>>(&self, pqueryheap: Param0, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), pqueryheap.into_param().abi(), ::core::mem::transmute(r#type), ::core::mem::transmute(index)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn ResolveQueryData<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12QueryHeap>, Param4: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Resource>>(&self, pqueryheap: Param0, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, startindex: u32, numqueries: u32, pdestinationbuffer: Param4, aligneddestinationbufferoffset: u64) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).16)(
            ::core::mem::transmute_copy(self),
            pqueryheap.into_param().abi(),
            ::core::mem::transmute(r#type),
            ::core::mem::transmute(startindex),
            ::core::mem::transmute(numqueries),
            pdestinationbuffer.into_param().abi(),
            ::core::mem::transmute(aligneddestinationbufferoffset),
        ))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn SetPredication<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Resource>>(&self, pbuffer: Param0, alignedbufferoffset: u64, operation: super::super::Graphics::Direct3D12::D3D12_PREDICATION_OP) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self), pbuffer.into_param().abi(), ::core::mem::transmute(alignedbufferoffset), ::core::mem::transmute(operation)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetMarker(&self, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).18)(::core::mem::transmute_copy(self), ::core::mem::transmute(metadata), ::core::mem::transmute(pdata), ::core::mem::transmute(size)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BeginEvent(&self, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).19)(::core::mem::transmute_copy(self), ::core::mem::transmute(metadata), ::core::mem::transmute(pdata), ::core::mem::transmute(size)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndEvent(&self) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).20)(::core::mem::transmute_copy(self)))
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn ProcessFrames<'a, Param0: ::windows::runtime::IntoParam<'a, ID3D12VideoProcessor>>(&self, pvideoprocessor: Param0, poutputarguments: *const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS, numinputstreams: u32, pinputarguments: *const D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).21)(::core::mem::transmute_copy(self), pvideoprocessor.into_param().abi(), ::core::mem::transmute(poutputarguments), ::core::mem::transmute(numinputstreams), ::core::mem::transmute(pinputarguments)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn WriteBufferImmediate(&self, count: u32, pparams: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, pmodes: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).22)(::core::mem::transmute_copy(self), ::core::mem::transmute(count), ::core::mem::transmute(pparams), ::core::mem::transmute(pmodes)))
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn ProcessFrames1<'a, Param0: ::windows::runtime::IntoParam<'a, ID3D12VideoProcessor>>(&self, pvideoprocessor: Param0, poutputarguments: *const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS, numinputstreams: u32, pinputarguments: *const D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).23)(::core::mem::transmute_copy(self), pvideoprocessor.into_param().abi(), ::core::mem::transmute(poutputarguments), ::core::mem::transmute(numinputstreams), ::core::mem::transmute(pinputarguments)))
    }
    #[cfg(feature = "Win32_Graphics_Direct3D12")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D12`*"]
    pub unsafe fn SetProtectedResourceSession<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12ProtectedResourceSession>>(&self, pprotectedresourcesession: Param0) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).24)(::core::mem::transmute_copy(self), pprotectedresourcesession.into_param().abi()))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn InitializeExtensionCommand<'a, Param0: ::windows::runtime::IntoParam<'a, ID3D12VideoExtensionCommand>>(&self, pextensioncommand: Param0, pinitializationparameters: *const ::core::ffi::c_void, initializationparameterssizeinbytes: usize) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).25)(::core::mem::transmute_copy(self), pextensioncommand.into_param().abi(), ::core::mem::transmute(pinitializationparameters), ::core::mem::transmute(initializationparameterssizeinbytes)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ExecuteExtensionCommand<'a, Param0: ::windows::runtime::IntoParam<'a, ID3D12VideoExtensionCommand>>(&self, pextensioncommand: Param0, pexecutionparameters: *const ::core::ffi::c_void, executionparameterssizeinbytes: usize) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).26)(::core::mem::transmute_copy(self), pextensioncommand.into_param().abi(), ::core::mem::transmute(pexecutionparameters), ::core::mem::transmute(executionparameterssizeinbytes)))
    }
}
unsafe impl ::windows::runtime::Interface for ID3D12VideoProcessCommandList2 {
    type Vtable = ID3D12VideoProcessCommandList2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3679607524, 27350, 18236, [186, 167, 89, 178, 227, 112, 130, 228]);
}
impl ::core::convert::From<ID3D12VideoProcessCommandList2> for ::windows::runtime::IUnknown {
    fn from(value: ID3D12VideoProcessCommandList2) -> Self {
        value.0
    }
}
impl ::core::convert::From<&ID3D12VideoProcessCommandList2> for ::windows::runtime::IUnknown {
    fn from(value: &ID3D12VideoProcessCommandList2) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ID3D12VideoProcessCommandList2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a ID3D12VideoProcessCommandList2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<ID3D12VideoProcessCommandList2> for ID3D12VideoProcessCommandList1 {
    fn from(value: ID3D12VideoProcessCommandList2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ID3D12VideoProcessCommandList2> for ID3D12VideoProcessCommandList1 {
    fn from(value: &ID3D12VideoProcessCommandList2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ID3D12VideoProcessCommandList1> for ID3D12VideoProcessCommandList2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ID3D12VideoProcessCommandList1> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ID3D12VideoProcessCommandList1> for &ID3D12VideoProcessCommandList2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ID3D12VideoProcessCommandList1> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ID3D12VideoProcessCommandList2> for ID3D12VideoProcessCommandList {
    fn from(value: ID3D12VideoProcessCommandList2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ID3D12VideoProcessCommandList2> for ID3D12VideoProcessCommandList {
    fn from(value: &ID3D12VideoProcessCommandList2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ID3D12VideoProcessCommandList> for ID3D12VideoProcessCommandList2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ID3D12VideoProcessCommandList> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ID3D12VideoProcessCommandList> for &ID3D12VideoProcessCommandList2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ID3D12VideoProcessCommandList> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoProcessCommandList2> for super::super::Graphics::Direct3D12::ID3D12CommandList {
    fn from(value: ID3D12VideoProcessCommandList2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoProcessCommandList2> for super::super::Graphics::Direct3D12::ID3D12CommandList {
    fn from(value: &ID3D12VideoProcessCommandList2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12CommandList> for ID3D12VideoProcessCommandList2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12CommandList> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12CommandList> for &ID3D12VideoProcessCommandList2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12CommandList> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoProcessCommandList2> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: ID3D12VideoProcessCommandList2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoProcessCommandList2> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: &ID3D12VideoProcessCommandList2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for ID3D12VideoProcessCommandList2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for &ID3D12VideoProcessCommandList2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoProcessCommandList2> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: ID3D12VideoProcessCommandList2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoProcessCommandList2> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: &ID3D12VideoProcessCommandList2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for ID3D12VideoProcessCommandList2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for &ID3D12VideoProcessCommandList2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ID3D12VideoProcessCommandList2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdata: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvdevice: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE,
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pallocator: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, numbarriers: u32, pbarriers: *const ::core::mem::ManuallyDrop<super::super::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER>),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presource: ::windows::runtime::RawPtr, pregion: *const super::super::Graphics::Direct3D12::D3D12_DISCARD_REGION),
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12")))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pqueryheap: ::windows::runtime::RawPtr, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pqueryheap: ::windows::runtime::RawPtr, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pqueryheap: ::windows::runtime::RawPtr, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, startindex: u32, numqueries: u32, pdestinationbuffer: ::windows::runtime::RawPtr, aligneddestinationbufferoffset: u64),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbuffer: ::windows::runtime::RawPtr, alignedbufferoffset: u64, operation: super::super::Graphics::Direct3D12::D3D12_PREDICATION_OP),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pvideoprocessor: ::windows::runtime::RawPtr, poutputarguments: *const ::core::mem::ManuallyDrop<D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS>, numinputstreams: u32, pinputarguments: *const ::core::mem::ManuallyDrop<D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS>),
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12")))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, pparams: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, pmodes: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pvideoprocessor: ::windows::runtime::RawPtr, poutputarguments: *const ::core::mem::ManuallyDrop<D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS>, numinputstreams: u32, pinputarguments: *const ::core::mem::ManuallyDrop<D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1>),
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12")))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D12")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pprotectedresourcesession: ::windows::runtime::RawPtr),
    #[cfg(not(feature = "Win32_Graphics_Direct3D12"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pextensioncommand: ::windows::runtime::RawPtr, pinitializationparameters: *const ::core::ffi::c_void, initializationparameterssizeinbytes: usize),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pextensioncommand: ::windows::runtime::RawPtr, pexecutionparameters: *const ::core::ffi::c_void, executionparameterssizeinbytes: usize),
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct ID3D12VideoProcessor(pub ::windows::runtime::IUnknown);
impl ID3D12VideoProcessor {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPrivateData(&self, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(pdatasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateData(&self, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(datasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateDataInterface<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guid: *const ::windows::runtime::GUID, pdata: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), pdata.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, name: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), name.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDevice<T: ::windows::runtime::Interface>(&self, result__: *mut ::core::option::Option<T>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &<T as ::windows::runtime::Interface>::IID, result__ as *mut _ as *mut _).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetNodeMask(&self) -> u32 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetNumInputStreamDescs(&self) -> u32 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self)))
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Dxgi`*"]
    pub unsafe fn GetInputStreamDescs(&self, numinputstreamdescs: u32, pinputstreamdescs: *mut D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(numinputstreamdescs), ::core::mem::transmute(pinputstreamdescs)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Dxgi`*"]
    pub unsafe fn GetOutputStreamDesc(&self) -> D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC {
        let mut result__: D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC = ::core::default::Default::default();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), &mut result__);
        result__
    }
}
unsafe impl ::windows::runtime::Interface for ID3D12VideoProcessor {
    type Vtable = ID3D12VideoProcessor_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(810539826, 48862, 16650, [133, 69, 148, 58, 198, 164, 97, 56]);
}
impl ::core::convert::From<ID3D12VideoProcessor> for ::windows::runtime::IUnknown {
    fn from(value: ID3D12VideoProcessor) -> Self {
        value.0
    }
}
impl ::core::convert::From<&ID3D12VideoProcessor> for ::windows::runtime::IUnknown {
    fn from(value: &ID3D12VideoProcessor) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ID3D12VideoProcessor {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a ID3D12VideoProcessor {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoProcessor> for super::super::Graphics::Direct3D12::ID3D12Pageable {
    fn from(value: ID3D12VideoProcessor) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoProcessor> for super::super::Graphics::Direct3D12::ID3D12Pageable {
    fn from(value: &ID3D12VideoProcessor) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> for ID3D12VideoProcessor {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> for &ID3D12VideoProcessor {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoProcessor> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: ID3D12VideoProcessor) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoProcessor> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: &ID3D12VideoProcessor) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for ID3D12VideoProcessor {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for &ID3D12VideoProcessor {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoProcessor> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: ID3D12VideoProcessor) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoProcessor> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: &ID3D12VideoProcessor) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for ID3D12VideoProcessor {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for &ID3D12VideoProcessor {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ID3D12VideoProcessor_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdata: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvdevice: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, numinputstreamdescs: u32, pinputstreamdescs: *mut D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, result__: *mut D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC),
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi")))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct ID3D12VideoProcessor1(pub ::windows::runtime::IUnknown);
impl ID3D12VideoProcessor1 {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPrivateData(&self, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(pdatasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateData(&self, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(datasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPrivateDataInterface<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guid: *const ::windows::runtime::GUID, pdata: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), pdata.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, name: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), name.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDevice<T: ::windows::runtime::Interface>(&self, result__: *mut ::core::option::Option<T>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &<T as ::windows::runtime::Interface>::IID, result__ as *mut _ as *mut _).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetNodeMask(&self) -> u32 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetNumInputStreamDescs(&self) -> u32 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self)))
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Dxgi`*"]
    pub unsafe fn GetInputStreamDescs(&self, numinputstreamdescs: u32, pinputstreamdescs: *mut D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(numinputstreamdescs), ::core::mem::transmute(pinputstreamdescs)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Dxgi`*"]
    pub unsafe fn GetOutputStreamDesc(&self) -> D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC {
        let mut result__: D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC = ::core::default::Default::default();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), &mut result__);
        result__
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetProtectedResourceSession<T: ::windows::runtime::Interface>(&self, result__: *mut ::core::option::Option<T>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), &<T as ::windows::runtime::Interface>::IID, result__ as *mut _ as *mut _).ok()
    }
}
unsafe impl ::windows::runtime::Interface for ID3D12VideoProcessor1 {
    type Vtable = ID3D12VideoProcessor1_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4090488341, 21823, 16988, [134, 216, 238, 140, 27, 31, 176, 28]);
}
impl ::core::convert::From<ID3D12VideoProcessor1> for ::windows::runtime::IUnknown {
    fn from(value: ID3D12VideoProcessor1) -> Self {
        value.0
    }
}
impl ::core::convert::From<&ID3D12VideoProcessor1> for ::windows::runtime::IUnknown {
    fn from(value: &ID3D12VideoProcessor1) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ID3D12VideoProcessor1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a ID3D12VideoProcessor1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<ID3D12VideoProcessor1> for ID3D12VideoProcessor {
    fn from(value: ID3D12VideoProcessor1) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ID3D12VideoProcessor1> for ID3D12VideoProcessor {
    fn from(value: &ID3D12VideoProcessor1) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ID3D12VideoProcessor> for ID3D12VideoProcessor1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ID3D12VideoProcessor> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ID3D12VideoProcessor> for &ID3D12VideoProcessor1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ID3D12VideoProcessor> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoProcessor1> for super::super::Graphics::Direct3D12::ID3D12Pageable {
    fn from(value: ID3D12VideoProcessor1) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoProcessor1> for super::super::Graphics::Direct3D12::ID3D12Pageable {
    fn from(value: &ID3D12VideoProcessor1) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> for ID3D12VideoProcessor1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> for &ID3D12VideoProcessor1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Pageable> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoProcessor1> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: ID3D12VideoProcessor1) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoProcessor1> for super::super::Graphics::Direct3D12::ID3D12DeviceChild {
    fn from(value: &ID3D12VideoProcessor1) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for ID3D12VideoProcessor1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> for &ID3D12VideoProcessor1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12DeviceChild> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<ID3D12VideoProcessor1> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: ID3D12VideoProcessor1) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::core::convert::From<&ID3D12VideoProcessor1> for super::super::Graphics::Direct3D12::ID3D12Object {
    fn from(value: &ID3D12VideoProcessor1) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for ID3D12VideoProcessor1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D12::ID3D12Object> for &ID3D12VideoProcessor1 {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Graphics::Direct3D12::ID3D12Object> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ID3D12VideoProcessor1_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdatasize: *mut u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pdata: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvdevice: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, numinputstreamdescs: u32, pinputstreamdescs: *mut D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, result__: *mut D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC),
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppprotectedsession: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IDXVAHD_Device(pub ::windows::runtime::IUnknown);
impl IDXVAHD_Device {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D9`*"]
    pub unsafe fn CreateVideoSurface(&self, width: u32, height: u32, format: super::super::Graphics::Direct3D9::D3DFORMAT, pool: super::super::Graphics::Direct3D9::D3DPOOL, usage: u32, r#type: DXVAHD_SURFACE_TYPE, numsurfaces: u32, ppsurfaces: *mut ::core::option::Option<super::super::Graphics::Direct3D9::IDirect3DSurface9>, psharedhandle: *mut super::super::Foundation::HANDLE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(width),
            ::core::mem::transmute(height),
            ::core::mem::transmute(format),
            ::core::mem::transmute(pool),
            ::core::mem::transmute(usage),
            ::core::mem::transmute(r#type),
            ::core::mem::transmute(numsurfaces),
            ::core::mem::transmute(ppsurfaces),
            ::core::mem::transmute(psharedhandle),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Graphics_Direct3D9")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
    pub unsafe fn GetVideoProcessorDeviceCaps(&self) -> ::windows::runtime::Result<DXVAHD_VPDEVCAPS> {
        let mut result__: <DXVAHD_VPDEVCAPS as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<DXVAHD_VPDEVCAPS>(result__)
    }
    #[cfg(feature = "Win32_Graphics_Direct3D9")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
    pub unsafe fn GetVideoProcessorOutputFormats(&self, count: u32, pformats: *mut super::super::Graphics::Direct3D9::D3DFORMAT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(count), ::core::mem::transmute(pformats)).ok()
    }
    #[cfg(feature = "Win32_Graphics_Direct3D9")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
    pub unsafe fn GetVideoProcessorInputFormats(&self, count: u32, pformats: *mut super::super::Graphics::Direct3D9::D3DFORMAT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(count), ::core::mem::transmute(pformats)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetVideoProcessorCaps(&self, count: u32, pcaps: *mut DXVAHD_VPCAPS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(count), ::core::mem::transmute(pcaps)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetVideoProcessorCustomRates(&self, pvpguid: *const ::windows::runtime::GUID, count: u32, prates: *mut DXVAHD_CUSTOM_RATE_DATA) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(pvpguid), ::core::mem::transmute(count), ::core::mem::transmute(prates)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetVideoProcessorFilterRange(&self, filter: DXVAHD_FILTER) -> ::windows::runtime::Result<DXVAHD_FILTER_RANGE_DATA> {
        let mut result__: <DXVAHD_FILTER_RANGE_DATA as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(filter), &mut result__).from_abi::<DXVAHD_FILTER_RANGE_DATA>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CreateVideoProcessor(&self, pvpguid: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<IDXVAHD_VideoProcessor> {
        let mut result__: <IDXVAHD_VideoProcessor as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(pvpguid), &mut result__).from_abi::<IDXVAHD_VideoProcessor>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDXVAHD_Device {
    type Vtable = IDXVAHD_Device_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2515611133, 55166, 18878, [129, 95, 87, 213, 121, 99, 77, 109]);
}
impl ::core::convert::From<IDXVAHD_Device> for ::windows::runtime::IUnknown {
    fn from(value: IDXVAHD_Device) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IDXVAHD_Device> for ::windows::runtime::IUnknown {
    fn from(value: &IDXVAHD_Device) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IDXVAHD_Device {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IDXVAHD_Device {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDXVAHD_Device_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, width: u32, height: u32, format: super::super::Graphics::Direct3D9::D3DFORMAT, pool: super::super::Graphics::Direct3D9::D3DPOOL, usage: u32, r#type: DXVAHD_SURFACE_TYPE, numsurfaces: u32, ppsurfaces: *mut ::windows::runtime::RawPtr, psharedhandle: *mut super::super::Foundation::HANDLE) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9")))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D9")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcaps: *mut DXVAHD_VPDEVCAPS) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Direct3D9"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D9")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, pformats: *mut super::super::Graphics::Direct3D9::D3DFORMAT) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Direct3D9"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D9")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, pformats: *mut super::super::Graphics::Direct3D9::D3DFORMAT) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Direct3D9"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, pcaps: *mut DXVAHD_VPCAPS) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pvpguid: *const ::windows::runtime::GUID, count: u32, prates: *mut DXVAHD_CUSTOM_RATE_DATA) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, filter: DXVAHD_FILTER, prange: *mut DXVAHD_FILTER_RANGE_DATA) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pvpguid: *const ::windows::runtime::GUID, ppvideoprocessor: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IDXVAHD_VideoProcessor(pub ::windows::runtime::IUnknown);
impl IDXVAHD_VideoProcessor {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetVideoProcessBltState(&self, state: DXVAHD_BLT_STATE, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(state), ::core::mem::transmute(datasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetVideoProcessBltState(&self, state: DXVAHD_BLT_STATE, datasize: u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(state), ::core::mem::transmute(datasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetVideoProcessStreamState(&self, streamnumber: u32, state: DXVAHD_STREAM_STATE, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(streamnumber), ::core::mem::transmute(state), ::core::mem::transmute(datasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetVideoProcessStreamState(&self, streamnumber: u32, state: DXVAHD_STREAM_STATE, datasize: u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(streamnumber), ::core::mem::transmute(state), ::core::mem::transmute(datasize), ::core::mem::transmute(pdata)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D9`*"]
    pub unsafe fn VideoProcessBltHD<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D9::IDirect3DSurface9>>(&self, poutputsurface: Param0, outputframe: u32, streamcount: u32, pstreams: *const DXVAHD_STREAM_DATA) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), poutputsurface.into_param().abi(), ::core::mem::transmute(outputframe), ::core::mem::transmute(streamcount), ::core::mem::transmute(pstreams)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDXVAHD_VideoProcessor {
    type Vtable = IDXVAHD_VideoProcessor_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2515856884, 28163, 19671, [190, 27, 48, 117, 214, 101, 170, 82]);
}
impl ::core::convert::From<IDXVAHD_VideoProcessor> for ::windows::runtime::IUnknown {
    fn from(value: IDXVAHD_VideoProcessor) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IDXVAHD_VideoProcessor> for ::windows::runtime::IUnknown {
    fn from(value: &IDXVAHD_VideoProcessor) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IDXVAHD_VideoProcessor {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IDXVAHD_VideoProcessor {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDXVAHD_VideoProcessor_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, state: DXVAHD_BLT_STATE, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, state: DXVAHD_BLT_STATE, datasize: u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, streamnumber: u32, state: DXVAHD_STREAM_STATE, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, streamnumber: u32, state: DXVAHD_STREAM_STATE, datasize: u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, poutputsurface: ::windows::runtime::RawPtr, outputframe: u32, streamcount: u32, pstreams: *const ::core::mem::ManuallyDrop<DXVAHD_STREAM_DATA>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9")))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IDirect3D9ExOverlayExtension(pub ::windows::runtime::IUnknown);
impl IDirect3D9ExOverlayExtension {
    #[cfg(feature = "Win32_Graphics_Direct3D9")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
    pub unsafe fn CheckDeviceOverlayType(&self, adapter: u32, devtype: super::super::Graphics::Direct3D9::D3DDEVTYPE, overlaywidth: u32, overlayheight: u32, overlayformat: super::super::Graphics::Direct3D9::D3DFORMAT, pdisplaymode: *mut super::super::Graphics::Direct3D9::D3DDISPLAYMODEEX, displayrotation: super::super::Graphics::Direct3D9::D3DDISPLAYROTATION, poverlaycaps: *mut D3DOVERLAYCAPS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(adapter),
            ::core::mem::transmute(devtype),
            ::core::mem::transmute(overlaywidth),
            ::core::mem::transmute(overlayheight),
            ::core::mem::transmute(overlayformat),
            ::core::mem::transmute(pdisplaymode),
            ::core::mem::transmute(displayrotation),
            ::core::mem::transmute(poverlaycaps),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDirect3D9ExOverlayExtension {
    type Vtable = IDirect3D9ExOverlayExtension_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(410708755, 43765, 19545, [135, 109, 224, 89, 8, 140, 13, 248]);
}
impl ::core::convert::From<IDirect3D9ExOverlayExtension> for ::windows::runtime::IUnknown {
    fn from(value: IDirect3D9ExOverlayExtension) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IDirect3D9ExOverlayExtension> for ::windows::runtime::IUnknown {
    fn from(value: &IDirect3D9ExOverlayExtension) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IDirect3D9ExOverlayExtension {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IDirect3D9ExOverlayExtension {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDirect3D9ExOverlayExtension_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Graphics_Direct3D9")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, adapter: u32, devtype: super::super::Graphics::Direct3D9::D3DDEVTYPE, overlaywidth: u32, overlayheight: u32, overlayformat: super::super::Graphics::Direct3D9::D3DFORMAT, pdisplaymode: *mut super::super::Graphics::Direct3D9::D3DDISPLAYMODEEX, displayrotation: super::super::Graphics::Direct3D9::D3DDISPLAYROTATION, poverlaycaps: *mut D3DOVERLAYCAPS) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Direct3D9"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IDirect3DAuthenticatedChannel9(pub ::windows::runtime::IUnknown);
impl IDirect3DAuthenticatedChannel9 {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCertificateSize(&self, pcertificatesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(pcertificatesize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCertificate(&self, certifactesize: u32, ppcertificate: *mut u8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(certifactesize), ::core::mem::transmute(ppcertificate)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn NegotiateKeyExchange(&self, datasize: u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(datasize), ::core::mem::transmute(pdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Query(&self, inputsize: u32, pinput: *const ::core::ffi::c_void, outputsize: u32, poutput: *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(inputsize), ::core::mem::transmute(pinput), ::core::mem::transmute(outputsize), ::core::mem::transmute(poutput)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D9`*"]
    pub unsafe fn Configure(&self, inputsize: u32, pinput: *const ::core::ffi::c_void, poutput: *mut super::super::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_CONFIGURE_OUTPUT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(inputsize), ::core::mem::transmute(pinput), ::core::mem::transmute(poutput)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDirect3DAuthenticatedChannel9 {
    type Vtable = IDirect3DAuthenticatedChannel9_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4280598254, 55841, 19435, [152, 181, 210, 248, 153, 249, 138, 249]);
}
impl ::core::convert::From<IDirect3DAuthenticatedChannel9> for ::windows::runtime::IUnknown {
    fn from(value: IDirect3DAuthenticatedChannel9) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IDirect3DAuthenticatedChannel9> for ::windows::runtime::IUnknown {
    fn from(value: &IDirect3DAuthenticatedChannel9) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IDirect3DAuthenticatedChannel9 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IDirect3DAuthenticatedChannel9 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDirect3DAuthenticatedChannel9_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcertificatesize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, certifactesize: u32, ppcertificate: *mut u8) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, datasize: u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, inputsize: u32, pinput: *const ::core::ffi::c_void, outputsize: u32, poutput: *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, inputsize: u32, pinput: *const ::core::ffi::c_void, poutput: *mut super::super::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_CONFIGURE_OUTPUT) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9")))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IDirect3DCryptoSession9(pub ::windows::runtime::IUnknown);
impl IDirect3DCryptoSession9 {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCertificateSize(&self, pcertificatesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(pcertificatesize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCertificate(&self, certifactesize: u32, ppcertificate: *mut u8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(certifactesize), ::core::mem::transmute(ppcertificate)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn NegotiateKeyExchange(&self, datasize: u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(datasize), ::core::mem::transmute(pdata)).ok()
    }
    #[cfg(feature = "Win32_Graphics_Direct3D9")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
    pub unsafe fn EncryptionBlt<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D9::IDirect3DSurface9>, Param1: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D9::IDirect3DSurface9>>(&self, psrcsurface: Param0, pdstsurface: Param1, dstsurfacesize: u32, piv: *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), psrcsurface.into_param().abi(), pdstsurface.into_param().abi(), ::core::mem::transmute(dstsurfacesize), ::core::mem::transmute(piv)).ok()
    }
    #[cfg(feature = "Win32_Graphics_Direct3D9")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
    pub unsafe fn DecryptionBlt<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D9::IDirect3DSurface9>, Param1: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D9::IDirect3DSurface9>>(&self, psrcsurface: Param0, pdstsurface: Param1, srcsurfacesize: u32, pencryptedblockinfo: *mut super::super::Graphics::Direct3D9::D3DENCRYPTED_BLOCK_INFO, pcontentkey: *mut ::core::ffi::c_void, piv: *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), psrcsurface.into_param().abi(), pdstsurface.into_param().abi(), ::core::mem::transmute(srcsurfacesize), ::core::mem::transmute(pencryptedblockinfo), ::core::mem::transmute(pcontentkey), ::core::mem::transmute(piv)).ok()
    }
    #[cfg(feature = "Win32_Graphics_Direct3D9")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
    pub unsafe fn GetSurfacePitch<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D9::IDirect3DSurface9>>(&self, psrcsurface: Param0, psurfacepitch: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), psrcsurface.into_param().abi(), ::core::mem::transmute(psurfacepitch)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn StartSessionKeyRefresh(&self, prandomnumber: *mut ::core::ffi::c_void, randomnumbersize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(prandomnumber), ::core::mem::transmute(randomnumbersize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn FinishSessionKeyRefresh(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetEncryptionBltKey(&self, preadbackkey: *mut ::core::ffi::c_void, keysize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(preadbackkey), ::core::mem::transmute(keysize)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDirect3DCryptoSession9 {
    type Vtable = IDirect3DCryptoSession9_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4195006361, 31388, 18634, [140, 91, 35, 126, 113, 165, 68, 52]);
}
impl ::core::convert::From<IDirect3DCryptoSession9> for ::windows::runtime::IUnknown {
    fn from(value: IDirect3DCryptoSession9) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IDirect3DCryptoSession9> for ::windows::runtime::IUnknown {
    fn from(value: &IDirect3DCryptoSession9) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IDirect3DCryptoSession9 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IDirect3DCryptoSession9 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDirect3DCryptoSession9_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcertificatesize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, certifactesize: u32, ppcertificate: *mut u8) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, datasize: u32, pdata: *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Direct3D9")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psrcsurface: ::windows::runtime::RawPtr, pdstsurface: ::windows::runtime::RawPtr, dstsurfacesize: u32, piv: *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Direct3D9"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D9")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psrcsurface: ::windows::runtime::RawPtr, pdstsurface: ::windows::runtime::RawPtr, srcsurfacesize: u32, pencryptedblockinfo: *mut super::super::Graphics::Direct3D9::D3DENCRYPTED_BLOCK_INFO, pcontentkey: *mut ::core::ffi::c_void, piv: *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Direct3D9"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D9")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psrcsurface: ::windows::runtime::RawPtr, psurfacepitch: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Direct3D9"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, prandomnumber: *mut ::core::ffi::c_void, randomnumbersize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, preadbackkey: *mut ::core::ffi::c_void, keysize: u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IDirect3DDevice9Video(pub ::windows::runtime::IUnknown);
impl IDirect3DDevice9Video {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetContentProtectionCaps(&self, pcryptotype: *const ::windows::runtime::GUID, pdecodeprofile: *const ::windows::runtime::GUID, pcaps: *mut D3DCONTENTPROTECTIONCAPS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(pcryptotype), ::core::mem::transmute(pdecodeprofile), ::core::mem::transmute(pcaps)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D9`*"]
    pub unsafe fn CreateAuthenticatedChannel(&self, channeltype: super::super::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNELTYPE, ppauthenticatedchannel: *mut ::core::option::Option<IDirect3DAuthenticatedChannel9>, pchannelhandle: *mut super::super::Foundation::HANDLE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(channeltype), ::core::mem::transmute(ppauthenticatedchannel), ::core::mem::transmute(pchannelhandle)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn CreateCryptoSession(&self, pcryptotype: *const ::windows::runtime::GUID, pdecodeprofile: *const ::windows::runtime::GUID, ppcryptosession: *mut ::core::option::Option<IDirect3DCryptoSession9>, pcryptohandle: *mut super::super::Foundation::HANDLE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(pcryptotype), ::core::mem::transmute(pdecodeprofile), ::core::mem::transmute(ppcryptosession), ::core::mem::transmute(pcryptohandle)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDirect3DDevice9Video {
    type Vtable = IDirect3DDevice9Video_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(651969889, 41454, 19175, [150, 218, 17, 138, 54, 192, 236, 149]);
}
impl ::core::convert::From<IDirect3DDevice9Video> for ::windows::runtime::IUnknown {
    fn from(value: IDirect3DDevice9Video) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IDirect3DDevice9Video> for ::windows::runtime::IUnknown {
    fn from(value: &IDirect3DDevice9Video) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IDirect3DDevice9Video {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IDirect3DDevice9Video {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDirect3DDevice9Video_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcryptotype: *const ::windows::runtime::GUID, pdecodeprofile: *const ::windows::runtime::GUID, pcaps: *mut D3DCONTENTPROTECTIONCAPS) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, channeltype: super::super::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNELTYPE, ppauthenticatedchannel: *mut ::windows::runtime::RawPtr, pchannelhandle: *mut super::super::Foundation::HANDLE) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9")))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcryptotype: *const ::windows::runtime::GUID, pdecodeprofile: *const ::windows::runtime::GUID, ppcryptosession: *mut ::windows::runtime::RawPtr, pcryptohandle: *mut super::super::Foundation::HANDLE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IDirect3DDeviceManager9(pub ::windows::runtime::IUnknown);
impl IDirect3DDeviceManager9 {
    #[cfg(feature = "Win32_Graphics_Direct3D9")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
    pub unsafe fn ResetDevice<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D9::IDirect3DDevice9>>(&self, pdevice: Param0, resettoken: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), pdevice.into_param().abi(), ::core::mem::transmute(resettoken)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn OpenDeviceHandle(&self) -> ::windows::runtime::Result<super::super::Foundation::HANDLE> {
        let mut result__: <super::super::Foundation::HANDLE as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::HANDLE>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn CloseDeviceHandle<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::HANDLE>>(&self, hdevice: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), hdevice.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn TestDevice<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::HANDLE>>(&self, hdevice: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), hdevice.into_param().abi()).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D9`*"]
    pub unsafe fn LockDevice<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, hdevice: Param0, ppdevice: *mut ::core::option::Option<super::super::Graphics::Direct3D9::IDirect3DDevice9>, fblock: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), hdevice.into_param().abi(), ::core::mem::transmute(ppdevice), fblock.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn UnlockDevice<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, hdevice: Param0, fsavestate: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), hdevice.into_param().abi(), fsavestate.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetVideoService<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::HANDLE>>(&self, hdevice: Param0, riid: *const ::windows::runtime::GUID, ppservice: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), hdevice.into_param().abi(), ::core::mem::transmute(riid), ::core::mem::transmute(ppservice)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDirect3DDeviceManager9 {
    type Vtable = IDirect3DDeviceManager9_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2697649679, 1749, 19700, [161, 199, 243, 205, 215, 37, 170, 117]);
}
impl ::core::convert::From<IDirect3DDeviceManager9> for ::windows::runtime::IUnknown {
    fn from(value: IDirect3DDeviceManager9) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IDirect3DDeviceManager9> for ::windows::runtime::IUnknown {
    fn from(value: &IDirect3DDeviceManager9) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IDirect3DDeviceManager9 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IDirect3DDeviceManager9 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDirect3DDeviceManager9_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Graphics_Direct3D9")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdevice: ::windows::runtime::RawPtr, resettoken: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Direct3D9"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, phdevice: *mut super::super::Foundation::HANDLE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hdevice: super::super::Foundation::HANDLE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hdevice: super::super::Foundation::HANDLE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hdevice: super::super::Foundation::HANDLE, ppdevice: *mut ::windows::runtime::RawPtr, fblock: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9")))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hdevice: super::super::Foundation::HANDLE, fsavestate: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hdevice: super::super::Foundation::HANDLE, riid: *const ::windows::runtime::GUID, ppservice: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IDirectXVideoAccelerationService(pub ::windows::runtime::IUnknown);
impl IDirectXVideoAccelerationService {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D9`*"]
    pub unsafe fn CreateSurface(&self, width: u32, height: u32, backbuffers: u32, format: super::super::Graphics::Direct3D9::D3DFORMAT, pool: super::super::Graphics::Direct3D9::D3DPOOL, usage: u32, dxvatype: DXVA2_VideoRenderTargetType, ppsurface: *mut ::core::option::Option<super::super::Graphics::Direct3D9::IDirect3DSurface9>, psharedhandle: *mut super::super::Foundation::HANDLE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(width),
            ::core::mem::transmute(height),
            ::core::mem::transmute(backbuffers),
            ::core::mem::transmute(format),
            ::core::mem::transmute(pool),
            ::core::mem::transmute(usage),
            ::core::mem::transmute(dxvatype),
            ::core::mem::transmute(ppsurface),
            ::core::mem::transmute(psharedhandle),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDirectXVideoAccelerationService {
    type Vtable = IDirectXVideoAccelerationService_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4233209168, 54759, 4569, [175, 85, 0, 5, 78, 67, 255, 2]);
}
impl ::core::convert::From<IDirectXVideoAccelerationService> for ::windows::runtime::IUnknown {
    fn from(value: IDirectXVideoAccelerationService) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IDirectXVideoAccelerationService> for ::windows::runtime::IUnknown {
    fn from(value: &IDirectXVideoAccelerationService) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IDirectXVideoAccelerationService {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IDirectXVideoAccelerationService {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDirectXVideoAccelerationService_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, width: u32, height: u32, backbuffers: u32, format: super::super::Graphics::Direct3D9::D3DFORMAT, pool: super::super::Graphics::Direct3D9::D3DPOOL, usage: u32, dxvatype: DXVA2_VideoRenderTargetType, ppsurface: *mut ::windows::runtime::RawPtr, psharedhandle: *mut super::super::Foundation::HANDLE) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9")))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IDirectXVideoDecoder(pub ::windows::runtime::IUnknown);
impl IDirectXVideoDecoder {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetVideoDecoderService(&self) -> ::windows::runtime::Result<IDirectXVideoDecoderService> {
        let mut result__: <IDirectXVideoDecoderService as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IDirectXVideoDecoderService>(result__)
    }
    #[cfg(feature = "Win32_Graphics_Direct3D9")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
    pub unsafe fn GetCreationParameters(&self, pdeviceguid: *mut ::windows::runtime::GUID, pvideodesc: *mut DXVA2_VideoDesc, pconfig: *mut DXVA2_ConfigPictureDecode, pdecoderrendertargets: *mut *mut ::core::option::Option<super::super::Graphics::Direct3D9::IDirect3DSurface9>, pnumsurfaces: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdeviceguid), ::core::mem::transmute(pvideodesc), ::core::mem::transmute(pconfig), ::core::mem::transmute(pdecoderrendertargets), ::core::mem::transmute(pnumsurfaces)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBuffer(&self, buffertype: DXVA2_BufferfType, ppbuffer: *mut *mut ::core::ffi::c_void, pbuffersize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(buffertype), ::core::mem::transmute(ppbuffer), ::core::mem::transmute(pbuffersize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ReleaseBuffer(&self, buffertype: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(buffertype)).ok()
    }
    #[cfg(feature = "Win32_Graphics_Direct3D9")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
    pub unsafe fn BeginFrame<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D9::IDirect3DSurface9>>(&self, prendertarget: Param0, pvpvpdata: *const ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), prendertarget.into_param().abi(), ::core::mem::transmute(pvpvpdata)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn EndFrame(&self, phandlecomplete: *mut super::super::Foundation::HANDLE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(phandlecomplete)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Execute(&self, pexecuteparams: *const DXVA2_DecodeExecuteParams) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(pexecuteparams)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDirectXVideoDecoder {
    type Vtable = IDirectXVideoDecoder_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4071653642, 64768, 17353, [145, 140, 223, 148, 226, 216, 239, 125]);
}
impl ::core::convert::From<IDirectXVideoDecoder> for ::windows::runtime::IUnknown {
    fn from(value: IDirectXVideoDecoder) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IDirectXVideoDecoder> for ::windows::runtime::IUnknown {
    fn from(value: &IDirectXVideoDecoder) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IDirectXVideoDecoder {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IDirectXVideoDecoder {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDirectXVideoDecoder_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppservice: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Direct3D9")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdeviceguid: *mut ::windows::runtime::GUID, pvideodesc: *mut DXVA2_VideoDesc, pconfig: *mut DXVA2_ConfigPictureDecode, pdecoderrendertargets: *mut *mut ::windows::runtime::RawPtr, pnumsurfaces: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Direct3D9"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffertype: DXVA2_BufferfType, ppbuffer: *mut *mut ::core::ffi::c_void, pbuffersize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffertype: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Direct3D9")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, prendertarget: ::windows::runtime::RawPtr, pvpvpdata: *const ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Direct3D9"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, phandlecomplete: *mut super::super::Foundation::HANDLE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pexecuteparams: *const DXVA2_DecodeExecuteParams) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IDirectXVideoDecoderService(pub ::windows::runtime::IUnknown);
impl IDirectXVideoDecoderService {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D9`*"]
    pub unsafe fn CreateSurface(&self, width: u32, height: u32, backbuffers: u32, format: super::super::Graphics::Direct3D9::D3DFORMAT, pool: super::super::Graphics::Direct3D9::D3DPOOL, usage: u32, dxvatype: DXVA2_VideoRenderTargetType, ppsurface: *mut ::core::option::Option<super::super::Graphics::Direct3D9::IDirect3DSurface9>, psharedhandle: *mut super::super::Foundation::HANDLE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(width),
            ::core::mem::transmute(height),
            ::core::mem::transmute(backbuffers),
            ::core::mem::transmute(format),
            ::core::mem::transmute(pool),
            ::core::mem::transmute(usage),
            ::core::mem::transmute(dxvatype),
            ::core::mem::transmute(ppsurface),
            ::core::mem::transmute(psharedhandle),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDecoderDeviceGuids(&self, pcount: *mut u32, pguids: *mut *mut ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(pcount), ::core::mem::transmute(pguids)).ok()
    }
    #[cfg(feature = "Win32_Graphics_Direct3D9")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
    pub unsafe fn GetDecoderRenderTargets(&self, guid: *const ::windows::runtime::GUID, pcount: *mut u32, pformats: *mut *mut super::super::Graphics::Direct3D9::D3DFORMAT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(pcount), ::core::mem::transmute(pformats)).ok()
    }
    #[cfg(feature = "Win32_Graphics_Direct3D9")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
    pub unsafe fn GetDecoderConfigurations(&self, guid: *const ::windows::runtime::GUID, pvideodesc: *const DXVA2_VideoDesc, preserved: *mut ::core::ffi::c_void, pcount: *mut u32, ppconfigs: *mut *mut DXVA2_ConfigPictureDecode) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(pvideodesc), ::core::mem::transmute(preserved), ::core::mem::transmute(pcount), ::core::mem::transmute(ppconfigs)).ok()
    }
    #[cfg(feature = "Win32_Graphics_Direct3D9")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
    pub unsafe fn CreateVideoDecoder(&self, guid: *const ::windows::runtime::GUID, pvideodesc: *const DXVA2_VideoDesc, pconfig: *const DXVA2_ConfigPictureDecode, ppdecoderrendertargets: *const ::core::option::Option<super::super::Graphics::Direct3D9::IDirect3DSurface9>, numrendertargets: u32) -> ::windows::runtime::Result<IDirectXVideoDecoder> {
        let mut result__: <IDirectXVideoDecoder as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(pvideodesc), ::core::mem::transmute(pconfig), ::core::mem::transmute(ppdecoderrendertargets), ::core::mem::transmute(numrendertargets), &mut result__).from_abi::<IDirectXVideoDecoder>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDirectXVideoDecoderService {
    type Vtable = IDirectXVideoDecoderService_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4233209169, 54759, 4569, [175, 85, 0, 5, 78, 67, 255, 2]);
}
impl ::core::convert::From<IDirectXVideoDecoderService> for ::windows::runtime::IUnknown {
    fn from(value: IDirectXVideoDecoderService) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IDirectXVideoDecoderService> for ::windows::runtime::IUnknown {
    fn from(value: &IDirectXVideoDecoderService) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IDirectXVideoDecoderService {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IDirectXVideoDecoderService {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IDirectXVideoDecoderService> for IDirectXVideoAccelerationService {
    fn from(value: IDirectXVideoDecoderService) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IDirectXVideoDecoderService> for IDirectXVideoAccelerationService {
    fn from(value: &IDirectXVideoDecoderService) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDirectXVideoAccelerationService> for IDirectXVideoDecoderService {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDirectXVideoAccelerationService> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDirectXVideoAccelerationService> for &IDirectXVideoDecoderService {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDirectXVideoAccelerationService> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDirectXVideoDecoderService_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, width: u32, height: u32, backbuffers: u32, format: super::super::Graphics::Direct3D9::D3DFORMAT, pool: super::super::Graphics::Direct3D9::D3DPOOL, usage: u32, dxvatype: DXVA2_VideoRenderTargetType, ppsurface: *mut ::windows::runtime::RawPtr, psharedhandle: *mut super::super::Foundation::HANDLE) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcount: *mut u32, pguids: *mut *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Direct3D9")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pcount: *mut u32, pformats: *mut *mut super::super::Graphics::Direct3D9::D3DFORMAT) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Direct3D9"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D9")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pvideodesc: *const DXVA2_VideoDesc, preserved: *mut ::core::ffi::c_void, pcount: *mut u32, ppconfigs: *mut *mut DXVA2_ConfigPictureDecode) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Direct3D9"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D9")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pvideodesc: *const DXVA2_VideoDesc, pconfig: *const DXVA2_ConfigPictureDecode, ppdecoderrendertargets: *const ::windows::runtime::RawPtr, numrendertargets: u32, ppdecode: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Direct3D9"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IDirectXVideoMemoryConfiguration(pub ::windows::runtime::IUnknown);
impl IDirectXVideoMemoryConfiguration {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetAvailableSurfaceTypeByIndex(&self, dwtypeindex: u32) -> ::windows::runtime::Result<DXVA2_SurfaceType> {
        let mut result__: <DXVA2_SurfaceType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwtypeindex), &mut result__).from_abi::<DXVA2_SurfaceType>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetSurfaceType(&self, dwtype: DXVA2_SurfaceType) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwtype)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDirectXVideoMemoryConfiguration {
    type Vtable = IDirectXVideoMemoryConfiguration_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3086554845, 56123, 18881, [132, 215, 228, 94, 249, 158, 199, 38]);
}
impl ::core::convert::From<IDirectXVideoMemoryConfiguration> for ::windows::runtime::IUnknown {
    fn from(value: IDirectXVideoMemoryConfiguration) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IDirectXVideoMemoryConfiguration> for ::windows::runtime::IUnknown {
    fn from(value: &IDirectXVideoMemoryConfiguration) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IDirectXVideoMemoryConfiguration {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IDirectXVideoMemoryConfiguration {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDirectXVideoMemoryConfiguration_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwtypeindex: u32, pdwtype: *mut DXVA2_SurfaceType) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwtype: DXVA2_SurfaceType) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IDirectXVideoProcessor(pub ::windows::runtime::IUnknown);
impl IDirectXVideoProcessor {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetVideoProcessorService(&self) -> ::windows::runtime::Result<IDirectXVideoProcessorService> {
        let mut result__: <IDirectXVideoProcessorService as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IDirectXVideoProcessorService>(result__)
    }
    #[cfg(feature = "Win32_Graphics_Direct3D9")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
    pub unsafe fn GetCreationParameters(&self, pdeviceguid: *mut ::windows::runtime::GUID, pvideodesc: *mut DXVA2_VideoDesc, prendertargetformat: *mut super::super::Graphics::Direct3D9::D3DFORMAT, pmaxnumsubstreams: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdeviceguid), ::core::mem::transmute(pvideodesc), ::core::mem::transmute(prendertargetformat), ::core::mem::transmute(pmaxnumsubstreams)).ok()
    }
    #[cfg(feature = "Win32_Graphics_Direct3D9")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
    pub unsafe fn GetVideoProcessorCaps(&self) -> ::windows::runtime::Result<DXVA2_VideoProcessorCaps> {
        let mut result__: <DXVA2_VideoProcessorCaps as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), &mut result__).from_abi::<DXVA2_VideoProcessorCaps>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetProcAmpRange(&self, procampcap: u32) -> ::windows::runtime::Result<DXVA2_ValueRange> {
        let mut result__: <DXVA2_ValueRange as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(procampcap), &mut result__).from_abi::<DXVA2_ValueRange>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetFilterPropertyRange(&self, filtersetting: u32) -> ::windows::runtime::Result<DXVA2_ValueRange> {
        let mut result__: <DXVA2_ValueRange as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(filtersetting), &mut result__).from_abi::<DXVA2_ValueRange>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D9`*"]
    pub unsafe fn VideoProcessBlt<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D9::IDirect3DSurface9>>(&self, prendertarget: Param0, pbltparams: *const DXVA2_VideoProcessBltParams, psamples: *const DXVA2_VideoSample, numsamples: u32, phandlecomplete: *mut super::super::Foundation::HANDLE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), prendertarget.into_param().abi(), ::core::mem::transmute(pbltparams), ::core::mem::transmute(psamples), ::core::mem::transmute(numsamples), ::core::mem::transmute(phandlecomplete)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDirectXVideoProcessor {
    type Vtable = IDirectXVideoProcessor_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2352626160, 37230, 18064, [128, 79, 76, 128, 1, 53, 93, 37]);
}
impl ::core::convert::From<IDirectXVideoProcessor> for ::windows::runtime::IUnknown {
    fn from(value: IDirectXVideoProcessor) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IDirectXVideoProcessor> for ::windows::runtime::IUnknown {
    fn from(value: &IDirectXVideoProcessor) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IDirectXVideoProcessor {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IDirectXVideoProcessor {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDirectXVideoProcessor_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppservice: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Direct3D9")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdeviceguid: *mut ::windows::runtime::GUID, pvideodesc: *mut DXVA2_VideoDesc, prendertargetformat: *mut super::super::Graphics::Direct3D9::D3DFORMAT, pmaxnumsubstreams: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Direct3D9"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D9")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcaps: *mut DXVA2_VideoProcessorCaps) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Direct3D9"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, procampcap: u32, prange: *mut DXVA2_ValueRange) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, filtersetting: u32, prange: *mut DXVA2_ValueRange) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, prendertarget: ::windows::runtime::RawPtr, pbltparams: *const DXVA2_VideoProcessBltParams, psamples: *const ::core::mem::ManuallyDrop<DXVA2_VideoSample>, numsamples: u32, phandlecomplete: *mut super::super::Foundation::HANDLE) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9")))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IDirectXVideoProcessorService(pub ::windows::runtime::IUnknown);
impl IDirectXVideoProcessorService {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D9`*"]
    pub unsafe fn CreateSurface(&self, width: u32, height: u32, backbuffers: u32, format: super::super::Graphics::Direct3D9::D3DFORMAT, pool: super::super::Graphics::Direct3D9::D3DPOOL, usage: u32, dxvatype: DXVA2_VideoRenderTargetType, ppsurface: *mut ::core::option::Option<super::super::Graphics::Direct3D9::IDirect3DSurface9>, psharedhandle: *mut super::super::Foundation::HANDLE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(width),
            ::core::mem::transmute(height),
            ::core::mem::transmute(backbuffers),
            ::core::mem::transmute(format),
            ::core::mem::transmute(pool),
            ::core::mem::transmute(usage),
            ::core::mem::transmute(dxvatype),
            ::core::mem::transmute(ppsurface),
            ::core::mem::transmute(psharedhandle),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RegisterVideoProcessorSoftwareDevice(&self, pcallbacks: *const ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(pcallbacks)).ok()
    }
    #[cfg(feature = "Win32_Graphics_Direct3D9")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
    pub unsafe fn GetVideoProcessorDeviceGuids(&self, pvideodesc: *const DXVA2_VideoDesc, pcount: *mut u32, pguids: *mut *mut ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(pvideodesc), ::core::mem::transmute(pcount), ::core::mem::transmute(pguids)).ok()
    }
    #[cfg(feature = "Win32_Graphics_Direct3D9")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
    pub unsafe fn GetVideoProcessorRenderTargets(&self, videoprocdeviceguid: *const ::windows::runtime::GUID, pvideodesc: *const DXVA2_VideoDesc, pcount: *mut u32, pformats: *mut *mut super::super::Graphics::Direct3D9::D3DFORMAT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(videoprocdeviceguid), ::core::mem::transmute(pvideodesc), ::core::mem::transmute(pcount), ::core::mem::transmute(pformats)).ok()
    }
    #[cfg(feature = "Win32_Graphics_Direct3D9")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
    pub unsafe fn GetVideoProcessorSubStreamFormats(&self, videoprocdeviceguid: *const ::windows::runtime::GUID, pvideodesc: *const DXVA2_VideoDesc, rendertargetformat: super::super::Graphics::Direct3D9::D3DFORMAT, pcount: *mut u32, pformats: *mut *mut super::super::Graphics::Direct3D9::D3DFORMAT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(videoprocdeviceguid), ::core::mem::transmute(pvideodesc), ::core::mem::transmute(rendertargetformat), ::core::mem::transmute(pcount), ::core::mem::transmute(pformats)).ok()
    }
    #[cfg(feature = "Win32_Graphics_Direct3D9")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
    pub unsafe fn GetVideoProcessorCaps(&self, videoprocdeviceguid: *const ::windows::runtime::GUID, pvideodesc: *const DXVA2_VideoDesc, rendertargetformat: super::super::Graphics::Direct3D9::D3DFORMAT) -> ::windows::runtime::Result<DXVA2_VideoProcessorCaps> {
        let mut result__: <DXVA2_VideoProcessorCaps as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(videoprocdeviceguid), ::core::mem::transmute(pvideodesc), ::core::mem::transmute(rendertargetformat), &mut result__).from_abi::<DXVA2_VideoProcessorCaps>(result__)
    }
    #[cfg(feature = "Win32_Graphics_Direct3D9")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
    pub unsafe fn GetProcAmpRange(&self, videoprocdeviceguid: *const ::windows::runtime::GUID, pvideodesc: *const DXVA2_VideoDesc, rendertargetformat: super::super::Graphics::Direct3D9::D3DFORMAT, procampcap: u32) -> ::windows::runtime::Result<DXVA2_ValueRange> {
        let mut result__: <DXVA2_ValueRange as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(videoprocdeviceguid), ::core::mem::transmute(pvideodesc), ::core::mem::transmute(rendertargetformat), ::core::mem::transmute(procampcap), &mut result__).from_abi::<DXVA2_ValueRange>(result__)
    }
    #[cfg(feature = "Win32_Graphics_Direct3D9")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
    pub unsafe fn GetFilterPropertyRange(&self, videoprocdeviceguid: *const ::windows::runtime::GUID, pvideodesc: *const DXVA2_VideoDesc, rendertargetformat: super::super::Graphics::Direct3D9::D3DFORMAT, filtersetting: u32) -> ::windows::runtime::Result<DXVA2_ValueRange> {
        let mut result__: <DXVA2_ValueRange as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(videoprocdeviceguid), ::core::mem::transmute(pvideodesc), ::core::mem::transmute(rendertargetformat), ::core::mem::transmute(filtersetting), &mut result__).from_abi::<DXVA2_ValueRange>(result__)
    }
    #[cfg(feature = "Win32_Graphics_Direct3D9")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
    pub unsafe fn CreateVideoProcessor(&self, videoprocdeviceguid: *const ::windows::runtime::GUID, pvideodesc: *const DXVA2_VideoDesc, rendertargetformat: super::super::Graphics::Direct3D9::D3DFORMAT, maxnumsubstreams: u32) -> ::windows::runtime::Result<IDirectXVideoProcessor> {
        let mut result__: <IDirectXVideoProcessor as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(videoprocdeviceguid), ::core::mem::transmute(pvideodesc), ::core::mem::transmute(rendertargetformat), ::core::mem::transmute(maxnumsubstreams), &mut result__).from_abi::<IDirectXVideoProcessor>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDirectXVideoProcessorService {
    type Vtable = IDirectXVideoProcessorService_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4233209170, 54759, 4569, [175, 85, 0, 5, 78, 67, 255, 2]);
}
impl ::core::convert::From<IDirectXVideoProcessorService> for ::windows::runtime::IUnknown {
    fn from(value: IDirectXVideoProcessorService) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IDirectXVideoProcessorService> for ::windows::runtime::IUnknown {
    fn from(value: &IDirectXVideoProcessorService) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IDirectXVideoProcessorService {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IDirectXVideoProcessorService {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IDirectXVideoProcessorService> for IDirectXVideoAccelerationService {
    fn from(value: IDirectXVideoProcessorService) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IDirectXVideoProcessorService> for IDirectXVideoAccelerationService {
    fn from(value: &IDirectXVideoProcessorService) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDirectXVideoAccelerationService> for IDirectXVideoProcessorService {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDirectXVideoAccelerationService> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDirectXVideoAccelerationService> for &IDirectXVideoProcessorService {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDirectXVideoAccelerationService> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDirectXVideoProcessorService_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, width: u32, height: u32, backbuffers: u32, format: super::super::Graphics::Direct3D9::D3DFORMAT, pool: super::super::Graphics::Direct3D9::D3DPOOL, usage: u32, dxvatype: DXVA2_VideoRenderTargetType, ppsurface: *mut ::windows::runtime::RawPtr, psharedhandle: *mut super::super::Foundation::HANDLE) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcallbacks: *const ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Direct3D9")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pvideodesc: *const DXVA2_VideoDesc, pcount: *mut u32, pguids: *mut *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Direct3D9"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D9")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, videoprocdeviceguid: *const ::windows::runtime::GUID, pvideodesc: *const DXVA2_VideoDesc, pcount: *mut u32, pformats: *mut *mut super::super::Graphics::Direct3D9::D3DFORMAT) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Direct3D9"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D9")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, videoprocdeviceguid: *const ::windows::runtime::GUID, pvideodesc: *const DXVA2_VideoDesc, rendertargetformat: super::super::Graphics::Direct3D9::D3DFORMAT, pcount: *mut u32, pformats: *mut *mut super::super::Graphics::Direct3D9::D3DFORMAT) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Direct3D9"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D9")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, videoprocdeviceguid: *const ::windows::runtime::GUID, pvideodesc: *const DXVA2_VideoDesc, rendertargetformat: super::super::Graphics::Direct3D9::D3DFORMAT, pcaps: *mut DXVA2_VideoProcessorCaps) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Direct3D9"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D9")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, videoprocdeviceguid: *const ::windows::runtime::GUID, pvideodesc: *const DXVA2_VideoDesc, rendertargetformat: super::super::Graphics::Direct3D9::D3DFORMAT, procampcap: u32, prange: *mut DXVA2_ValueRange) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Direct3D9"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D9")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, videoprocdeviceguid: *const ::windows::runtime::GUID, pvideodesc: *const DXVA2_VideoDesc, rendertargetformat: super::super::Graphics::Direct3D9::D3DFORMAT, filtersetting: u32, prange: *mut DXVA2_ValueRange) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Direct3D9"))] usize,
    #[cfg(feature = "Win32_Graphics_Direct3D9")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, videoprocdeviceguid: *const ::windows::runtime::GUID, pvideodesc: *const DXVA2_VideoDesc, rendertargetformat: super::super::Graphics::Direct3D9::D3DFORMAT, maxnumsubstreams: u32, ppvidprocess: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Direct3D9"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IEVRFilterConfig(pub ::windows::runtime::IUnknown);
impl IEVRFilterConfig {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetNumberOfStreams(&self, dwmaxstreams: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwmaxstreams)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetNumberOfStreams(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IEVRFilterConfig {
    type Vtable = IEVRFilterConfig_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2213092997, 33473, 20135, [128, 29, 133, 220, 80, 183, 80, 134]);
}
impl ::core::convert::From<IEVRFilterConfig> for ::windows::runtime::IUnknown {
    fn from(value: IEVRFilterConfig) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IEVRFilterConfig> for ::windows::runtime::IUnknown {
    fn from(value: &IEVRFilterConfig) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IEVRFilterConfig {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IEVRFilterConfig {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IEVRFilterConfig_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwmaxstreams: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwmaxstreams: *mut u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IEVRFilterConfigEx(pub ::windows::runtime::IUnknown);
impl IEVRFilterConfigEx {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetNumberOfStreams(&self, dwmaxstreams: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwmaxstreams)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetNumberOfStreams(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetConfigPrefs(&self, dwconfigflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwconfigflags)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetConfigPrefs(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IEVRFilterConfigEx {
    type Vtable = IEVRFilterConfigEx_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2929942568, 31085, 17743, [190, 238, 180, 128, 113, 226, 67, 4]);
}
impl ::core::convert::From<IEVRFilterConfigEx> for ::windows::runtime::IUnknown {
    fn from(value: IEVRFilterConfigEx) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IEVRFilterConfigEx> for ::windows::runtime::IUnknown {
    fn from(value: &IEVRFilterConfigEx) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IEVRFilterConfigEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IEVRFilterConfigEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IEVRFilterConfigEx> for IEVRFilterConfig {
    fn from(value: IEVRFilterConfigEx) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IEVRFilterConfigEx> for IEVRFilterConfig {
    fn from(value: &IEVRFilterConfigEx) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IEVRFilterConfig> for IEVRFilterConfigEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IEVRFilterConfig> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IEVRFilterConfig> for &IEVRFilterConfigEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IEVRFilterConfig> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IEVRFilterConfigEx_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwmaxstreams: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwmaxstreams: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwconfigflags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwconfigflags: *mut u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IEVRTrustedVideoPlugin(pub ::windows::runtime::IUnknown);
impl IEVRTrustedVideoPlugin {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn IsInTrustedVideoMode(&self) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn CanConstrict(&self) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetConstriction(&self, dwkpix: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwkpix)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn DisableImageExport<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, bdisable: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), bdisable.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IEVRTrustedVideoPlugin {
    type Vtable = IEVRTrustedVideoPlugin_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2208616000, 30480, 18763, [168, 147, 164, 114, 4, 154, 246, 48]);
}
impl ::core::convert::From<IEVRTrustedVideoPlugin> for ::windows::runtime::IUnknown {
    fn from(value: IEVRTrustedVideoPlugin) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IEVRTrustedVideoPlugin> for ::windows::runtime::IUnknown {
    fn from(value: &IEVRTrustedVideoPlugin) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IEVRTrustedVideoPlugin {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IEVRTrustedVideoPlugin {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IEVRTrustedVideoPlugin_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pyes: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pyes: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwkpix: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, bdisable: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IEVRVideoStreamControl(pub ::windows::runtime::IUnknown);
impl IEVRVideoStreamControl {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetStreamActiveState<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, factive: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), factive.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetStreamActiveState(&self) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IEVRVideoStreamControl {
    type Vtable = IEVRVideoStreamControl_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3503285131, 37863, 18290, [137, 87, 4, 0, 196, 154, 68, 133]);
}
impl ::core::convert::From<IEVRVideoStreamControl> for ::windows::runtime::IUnknown {
    fn from(value: IEVRVideoStreamControl) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IEVRVideoStreamControl> for ::windows::runtime::IUnknown {
    fn from(value: &IEVRVideoStreamControl) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IEVRVideoStreamControl {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IEVRVideoStreamControl {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IEVRVideoStreamControl_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, factive: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, lpfactive: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IFileClient(pub ::windows::runtime::IUnknown);
impl IFileClient {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetObjectDiskSize(&self, pqwsize: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(pqwsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Write<'a, Param0: ::windows::runtime::IntoParam<'a, IFileIo>>(&self, pfio: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), pfio.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Read<'a, Param0: ::windows::runtime::IntoParam<'a, IFileIo>>(&self, pfio: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), pfio.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IFileClient {
    type Vtable = IFileClient_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3217871254, 4676, 18496, [171, 68, 72, 9, 117, 196, 255, 228]);
}
impl ::core::convert::From<IFileClient> for ::windows::runtime::IUnknown {
    fn from(value: IFileClient) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IFileClient> for ::windows::runtime::IUnknown {
    fn from(value: &IFileClient) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IFileClient {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IFileClient {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IFileClient_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pqwsize: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pfio: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pfio: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IFileIo(pub ::windows::runtime::IUnknown);
impl IFileIo {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn Initialize<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, eaccessmode: FILE_ACCESSMODE, eopenmode: FILE_OPENMODE, pwszfilename: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(eaccessmode), ::core::mem::transmute(eopenmode), pwszfilename.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetLength(&self, pqwlength: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(pqwlength)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetLength(&self, qwlength: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(qwlength)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCurrentPosition(&self, pqwposition: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(pqwposition)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetCurrentPosition(&self, qwposition: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(qwposition)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn IsEndOfStream(&self, pbendofstream: *mut super::super::Foundation::BOOL) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(pbendofstream)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Read(&self, pbt: *mut u8, ul: u32, pulread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(pbt), ::core::mem::transmute(ul), ::core::mem::transmute(pulread)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Write(&self, pbt: *mut u8, ul: u32, pulwritten: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(pbt), ::core::mem::transmute(ul), ::core::mem::transmute(pulwritten)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Seek(&self, eseekorigin: SEEK_ORIGIN, qwseekoffset: u64, dwseekflags: u32, pqwcurrentposition: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(eseekorigin), ::core::mem::transmute(qwseekoffset), ::core::mem::transmute(dwseekflags), ::core::mem::transmute(pqwcurrentposition)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Close(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IFileIo {
    type Vtable = IFileIo_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(295252374, 4676, 18496, [171, 68, 72, 9, 117, 196, 255, 228]);
}
impl ::core::convert::From<IFileIo> for ::windows::runtime::IUnknown {
    fn from(value: IFileIo) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IFileIo> for ::windows::runtime::IUnknown {
    fn from(value: &IFileIo) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IFileIo {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IFileIo {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IFileIo_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, eaccessmode: FILE_ACCESSMODE, eopenmode: FILE_OPENMODE, pwszfilename: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pqwlength: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, qwlength: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pqwposition: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, qwposition: u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbendofstream: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbt: *mut u8, ul: u32, pulread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbt: *mut u8, ul: u32, pulwritten: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, eseekorigin: SEEK_ORIGIN, qwseekoffset: u64, dwseekflags: u32, pqwcurrentposition: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMF2DBuffer(pub ::windows::runtime::IUnknown);
impl IMF2DBuffer {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Lock2D(&self, ppbscanline0: *mut *mut u8, plpitch: *mut i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(ppbscanline0), ::core::mem::transmute(plpitch)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Unlock2D(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetScanline0AndPitch(&self, pbscanline0: *mut *mut u8, plpitch: *mut i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(pbscanline0), ::core::mem::transmute(plpitch)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn IsContiguousFormat(&self) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetContiguousLength(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ContiguousCopyTo(&self, pbdestbuffer: *mut u8, cbdestbuffer: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(pbdestbuffer), ::core::mem::transmute(cbdestbuffer)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ContiguousCopyFrom(&self, pbsrcbuffer: *const u8, cbsrcbuffer: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(pbsrcbuffer), ::core::mem::transmute(cbsrcbuffer)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMF2DBuffer {
    type Vtable = IMF2DBuffer_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2110379513, 40665, 17644, [155, 191, 6, 0, 187, 88, 159, 187]);
}
impl ::core::convert::From<IMF2DBuffer> for ::windows::runtime::IUnknown {
    fn from(value: IMF2DBuffer) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMF2DBuffer> for ::windows::runtime::IUnknown {
    fn from(value: &IMF2DBuffer) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMF2DBuffer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMF2DBuffer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMF2DBuffer_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppbscanline0: *mut *mut u8, plpitch: *mut i32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbscanline0: *mut *mut u8, plpitch: *mut i32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pfiscontiguous: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcblength: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbdestbuffer: *mut u8, cbdestbuffer: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbsrcbuffer: *const u8, cbsrcbuffer: u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMF2DBuffer2(pub ::windows::runtime::IUnknown);
impl IMF2DBuffer2 {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Lock2D(&self, ppbscanline0: *mut *mut u8, plpitch: *mut i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(ppbscanline0), ::core::mem::transmute(plpitch)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Unlock2D(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetScanline0AndPitch(&self, pbscanline0: *mut *mut u8, plpitch: *mut i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(pbscanline0), ::core::mem::transmute(plpitch)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn IsContiguousFormat(&self) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetContiguousLength(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ContiguousCopyTo(&self, pbdestbuffer: *mut u8, cbdestbuffer: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(pbdestbuffer), ::core::mem::transmute(cbdestbuffer)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ContiguousCopyFrom(&self, pbsrcbuffer: *const u8, cbsrcbuffer: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(pbsrcbuffer), ::core::mem::transmute(cbsrcbuffer)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Lock2DSize(&self, lockflags: MF2DBuffer_LockFlags, ppbscanline0: *mut *mut u8, plpitch: *mut i32, ppbbufferstart: *mut *mut u8, pcbbufferlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(lockflags), ::core::mem::transmute(ppbscanline0), ::core::mem::transmute(plpitch), ::core::mem::transmute(ppbbufferstart), ::core::mem::transmute(pcbbufferlength)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Copy2DTo<'a, Param0: ::windows::runtime::IntoParam<'a, IMF2DBuffer2>>(&self, pdestbuffer: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), pdestbuffer.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMF2DBuffer2 {
    type Vtable = IMF2DBuffer2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(867065510, 17174, 17263, [141, 221, 215, 61, 34, 248, 41, 236]);
}
impl ::core::convert::From<IMF2DBuffer2> for ::windows::runtime::IUnknown {
    fn from(value: IMF2DBuffer2) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMF2DBuffer2> for ::windows::runtime::IUnknown {
    fn from(value: &IMF2DBuffer2) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMF2DBuffer2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMF2DBuffer2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMF2DBuffer2> for IMF2DBuffer {
    fn from(value: IMF2DBuffer2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMF2DBuffer2> for IMF2DBuffer {
    fn from(value: &IMF2DBuffer2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMF2DBuffer> for IMF2DBuffer2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMF2DBuffer> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMF2DBuffer> for &IMF2DBuffer2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMF2DBuffer> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMF2DBuffer2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppbscanline0: *mut *mut u8, plpitch: *mut i32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbscanline0: *mut *mut u8, plpitch: *mut i32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pfiscontiguous: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcblength: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbdestbuffer: *mut u8, cbdestbuffer: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbsrcbuffer: *const u8, cbsrcbuffer: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, lockflags: MF2DBuffer_LockFlags, ppbscanline0: *mut *mut u8, plpitch: *mut i32, ppbbufferstart: *mut *mut u8, pcbbufferlength: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdestbuffer: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFASFContentInfo(pub ::windows::runtime::IUnknown);
impl IMFASFContentInfo {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetHeaderSize<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaBuffer>>(&self, pistartofcontent: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), pistartofcontent.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ParseHeader<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaBuffer>>(&self, piheaderbuffer: Param0, cboffsetwithinheader: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), piheaderbuffer.into_param().abi(), ::core::mem::transmute(cboffsetwithinheader)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GenerateHeader<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaBuffer>>(&self, piheader: Param0, pcbheader: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), piheader.into_param().abi(), ::core::mem::transmute(pcbheader)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetProfile(&self) -> ::windows::runtime::Result<IMFASFProfile> {
        let mut result__: <IMFASFProfile as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFASFProfile>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetProfile<'a, Param0: ::windows::runtime::IntoParam<'a, IMFASFProfile>>(&self, piprofile: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), piprofile.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GeneratePresentationDescriptor(&self) -> ::windows::runtime::Result<IMFPresentationDescriptor> {
        let mut result__: <IMFPresentationDescriptor as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFPresentationDescriptor>(result__)
    }
    #[cfg(feature = "Win32_System_PropertiesSystem")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_System_PropertiesSystem`*"]
    pub unsafe fn GetEncodingConfigurationPropertyStore(&self, wstreamnumber: u16) -> ::windows::runtime::Result<super::super::System::PropertiesSystem::IPropertyStore> {
        let mut result__: <super::super::System::PropertiesSystem::IPropertyStore as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(wstreamnumber), &mut result__).from_abi::<super::super::System::PropertiesSystem::IPropertyStore>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFASFContentInfo {
    type Vtable = IMFASFContentInfo_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2984027597, 54746, 17489, [142, 158, 219, 92, 89, 145, 78, 173]);
}
impl ::core::convert::From<IMFASFContentInfo> for ::windows::runtime::IUnknown {
    fn from(value: IMFASFContentInfo) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFASFContentInfo> for ::windows::runtime::IUnknown {
    fn from(value: &IMFASFContentInfo) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFASFContentInfo {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFASFContentInfo {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFASFContentInfo_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pistartofcontent: ::windows::runtime::RawPtr, cbheadersize: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, piheaderbuffer: ::windows::runtime::RawPtr, cboffsetwithinheader: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, piheader: ::windows::runtime::RawPtr, pcbheader: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppiprofile: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, piprofile: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppipresentationdescriptor: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_PropertiesSystem")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, wstreamnumber: u16, ppistore: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_PropertiesSystem"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFASFIndexer(pub ::windows::runtime::IUnknown);
impl IMFASFIndexer {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetFlags(&self, dwflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwflags)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetFlags(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Initialize<'a, Param0: ::windows::runtime::IntoParam<'a, IMFASFContentInfo>>(&self, picontentinfo: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), picontentinfo.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetIndexPosition<'a, Param0: ::windows::runtime::IntoParam<'a, IMFASFContentInfo>>(&self, picontentinfo: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), picontentinfo.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetIndexByteStreams(&self, ppibytestreams: *const ::core::option::Option<IMFByteStream>, cbytestreams: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(ppibytestreams), ::core::mem::transmute(cbytestreams)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetIndexByteStreamCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetIndexStatus(&self, pindexidentifier: *const ASF_INDEX_IDENTIFIER, pfisindexed: *mut super::super::Foundation::BOOL, pbindexdescriptor: *mut u8, pcbindexdescriptor: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(pindexidentifier), ::core::mem::transmute(pfisindexed), ::core::mem::transmute(pbindexdescriptor), ::core::mem::transmute(pcbindexdescriptor)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetIndexStatus<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, pbindexdescriptor: *const u8, cbindexdescriptor: u32, fgenerateindex: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(pbindexdescriptor), ::core::mem::transmute(cbindexdescriptor), fgenerateindex.into_param().abi()).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetSeekPositionForValue(&self, pvarvalue: *const super::super::System::Com::StructuredStorage::PROPVARIANT, pindexidentifier: *const ASF_INDEX_IDENTIFIER, pcboffsetwithindata: *mut u64, phnsapproxtime: *mut i64, pdwpayloadnumberofstreamwithinpacket: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(pvarvalue), ::core::mem::transmute(pindexidentifier), ::core::mem::transmute(pcboffsetwithindata), ::core::mem::transmute(phnsapproxtime), ::core::mem::transmute(pdwpayloadnumberofstreamwithinpacket)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GenerateIndexEntries<'a, Param0: ::windows::runtime::IntoParam<'a, IMFSample>>(&self, piasfpacketsample: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), piasfpacketsample.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CommitIndex<'a, Param0: ::windows::runtime::IntoParam<'a, IMFASFContentInfo>>(&self, picontentinfo: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), picontentinfo.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetIndexWriteSpace(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCompletedIndex<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaBuffer>>(&self, piindexbuffer: Param0, cboffsetwithinindex: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), piindexbuffer.into_param().abi(), ::core::mem::transmute(cboffsetwithinindex)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFASFIndexer {
    type Vtable = IMFASFIndexer_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1398345544, 56379, 17047, [129, 63, 120, 119, 97, 173, 123, 62]);
}
impl ::core::convert::From<IMFASFIndexer> for ::windows::runtime::IUnknown {
    fn from(value: IMFASFIndexer) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFASFIndexer> for ::windows::runtime::IUnknown {
    fn from(value: &IMFASFIndexer) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFASFIndexer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFASFIndexer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFASFIndexer_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwflags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwflags: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, picontentinfo: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, picontentinfo: ::windows::runtime::RawPtr, pcbindexoffset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppibytestreams: *const ::windows::runtime::RawPtr, cbytestreams: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcbytestreams: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pindexidentifier: *const ASF_INDEX_IDENTIFIER, pfisindexed: *mut super::super::Foundation::BOOL, pbindexdescriptor: *mut u8, pcbindexdescriptor: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbindexdescriptor: *const u8, cbindexdescriptor: u32, fgenerateindex: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    pub  unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pvarvalue: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>, pindexidentifier: *const ASF_INDEX_IDENTIFIER, pcboffsetwithindata: *mut u64, phnsapproxtime: *mut i64, pdwpayloadnumberofstreamwithinpacket: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, piasfpacketsample: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, picontentinfo: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcbindexwritespace: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, piindexbuffer: ::windows::runtime::RawPtr, cboffsetwithinindex: u64) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFASFMultiplexer(pub ::windows::runtime::IUnknown);
impl IMFASFMultiplexer {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Initialize<'a, Param0: ::windows::runtime::IntoParam<'a, IMFASFContentInfo>>(&self, picontentinfo: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), picontentinfo.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetFlags(&self, dwflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwflags)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetFlags(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ProcessSample<'a, Param1: ::windows::runtime::IntoParam<'a, IMFSample>>(&self, wstreamnumber: u16, pisample: Param1, hnstimestampadjust: i64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(wstreamnumber), pisample.into_param().abi(), ::core::mem::transmute(hnstimestampadjust)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetNextPacket(&self, pdwstatusflags: *mut u32, ppipacket: *mut ::core::option::Option<IMFSample>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdwstatusflags), ::core::mem::transmute(ppipacket)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Flush(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn End<'a, Param0: ::windows::runtime::IntoParam<'a, IMFASFContentInfo>>(&self, picontentinfo: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), picontentinfo.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStatistics(&self, wstreamnumber: u16) -> ::windows::runtime::Result<ASF_MUX_STATISTICS> {
        let mut result__: <ASF_MUX_STATISTICS as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(wstreamnumber), &mut result__).from_abi::<ASF_MUX_STATISTICS>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetSyncTolerance(&self, mssynctolerance: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(mssynctolerance)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFASFMultiplexer {
    type Vtable = IMFASFMultiplexer_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1472059402, 39736, 18488, [183, 55, 197, 143, 103, 13, 125, 79]);
}
impl ::core::convert::From<IMFASFMultiplexer> for ::windows::runtime::IUnknown {
    fn from(value: IMFASFMultiplexer) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFASFMultiplexer> for ::windows::runtime::IUnknown {
    fn from(value: &IMFASFMultiplexer) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFASFMultiplexer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFASFMultiplexer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFASFMultiplexer_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, picontentinfo: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwflags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwflags: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, wstreamnumber: u16, pisample: ::windows::runtime::RawPtr, hnstimestampadjust: i64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwstatusflags: *mut u32, ppipacket: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, picontentinfo: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, wstreamnumber: u16, pmuxstats: *mut ASF_MUX_STATISTICS) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mssynctolerance: u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFASFMutualExclusion(pub ::windows::runtime::IUnknown);
impl IMFASFMutualExclusion {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetType(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetType(&self, guidtype: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidtype)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetRecordCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamsForRecord(&self, dwrecordnumber: u32, pwstreamnumarray: *mut u16, pcstreams: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwrecordnumber), ::core::mem::transmute(pwstreamnumarray), ::core::mem::transmute(pcstreams)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AddStreamForRecord(&self, dwrecordnumber: u32, wstreamnumber: u16) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwrecordnumber), ::core::mem::transmute(wstreamnumber)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveStreamFromRecord(&self, dwrecordnumber: u32, wstreamnumber: u16) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwrecordnumber), ::core::mem::transmute(wstreamnumber)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveRecord(&self, dwrecordnumber: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwrecordnumber)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AddRecord(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Clone(&self) -> ::windows::runtime::Result<IMFASFMutualExclusion> {
        let mut result__: <IMFASFMutualExclusion as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFASFMutualExclusion>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFASFMutualExclusion {
    type Vtable = IMFASFMutualExclusion_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(307593873, 58265, 4565, [188, 42, 0, 176, 208, 243, 244, 171]);
}
impl ::core::convert::From<IMFASFMutualExclusion> for ::windows::runtime::IUnknown {
    fn from(value: IMFASFMutualExclusion) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFASFMutualExclusion> for ::windows::runtime::IUnknown {
    fn from(value: &IMFASFMutualExclusion) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFASFMutualExclusion {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFASFMutualExclusion {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFASFMutualExclusion_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pguidtype: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidtype: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwrecordcount: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwrecordnumber: u32, pwstreamnumarray: *mut u16, pcstreams: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwrecordnumber: u32, wstreamnumber: u16) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwrecordnumber: u32, wstreamnumber: u16) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwrecordnumber: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwrecordnumber: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppimutex: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFASFProfile(pub ::windows::runtime::IUnknown);
impl IMFASFProfile {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetItem(&self, guidkey: *const ::windows::runtime::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetItemType(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<MF_ATTRIBUTE_TYPE> {
        let mut result__: <MF_ATTRIBUTE_TYPE as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<MF_ATTRIBUTE_TYPE>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn CompareItem(&self, guidkey: *const ::windows::runtime::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(value), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn Compare<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, ptheirs: Param0, matchtype: MF_ATTRIBUTES_MATCH_TYPE) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ptheirs.into_param().abi(), ::core::mem::transmute(matchtype), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUINT32(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUINT64(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDouble(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<f64> {
        let mut result__: <f64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<f64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetGUID(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStringLength(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetString(&self, guidkey: *const ::windows::runtime::GUID, pwszvalue: super::super::Foundation::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pwszvalue), ::core::mem::transmute(cchbufsize), ::core::mem::transmute(pcchlength)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetAllocatedString(&self, guidkey: *const ::windows::runtime::GUID, ppwszvalue: *mut super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(ppwszvalue), ::core::mem::transmute(pcchlength)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBlobSize(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBlob(&self, guidkey: *const ::windows::runtime::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize), ::core::mem::transmute(pcbblobsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetAllocatedBlob(&self, guidkey: *const ::windows::runtime::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(ppbuf), ::core::mem::transmute(pcbsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUnknown<T: ::windows::runtime::Interface>(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn SetItem(&self, guidkey: *const ::windows::runtime::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(value)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteItem(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteAllItems(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUINT32(&self, guidkey: *const ::windows::runtime::GUID, unvalue: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(unvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUINT64(&self, guidkey: *const ::windows::runtime::GUID, unvalue: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(unvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetDouble(&self, guidkey: *const ::windows::runtime::GUID, fvalue: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(fvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetGUID(&self, guidkey: *const ::windows::runtime::GUID, guidvalue: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(guidvalue)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetString<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, guidkey: *const ::windows::runtime::GUID, wszvalue: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), wszvalue.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetBlob(&self, guidkey: *const ::windows::runtime::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUnknown<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guidkey: *const ::windows::runtime::GUID, punknown: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).27)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), punknown.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn LockStore(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).28)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn UnlockStore(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetItemByIndex(&self, unindex: u32, pguidkey: *mut ::windows::runtime::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).31)(::core::mem::transmute_copy(self), ::core::mem::transmute(unindex), ::core::mem::transmute(pguidkey), ::core::mem::transmute(pvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CopyAllItems<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, pdest: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::core::mem::transmute_copy(self), pdest.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).33)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStream(&self, dwstreamindex: u32, pwstreamnumber: *mut u16, ppistream: *mut ::core::option::Option<IMFASFStreamConfig>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).34)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), ::core::mem::transmute(pwstreamnumber), ::core::mem::transmute(ppistream)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamByNumber(&self, wstreamnumber: u16) -> ::windows::runtime::Result<IMFASFStreamConfig> {
        let mut result__: <IMFASFStreamConfig as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).35)(::core::mem::transmute_copy(self), ::core::mem::transmute(wstreamnumber), &mut result__).from_abi::<IMFASFStreamConfig>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetStream<'a, Param0: ::windows::runtime::IntoParam<'a, IMFASFStreamConfig>>(&self, pistream: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).36)(::core::mem::transmute_copy(self), pistream.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveStream(&self, wstreamnumber: u16) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).37)(::core::mem::transmute_copy(self), ::core::mem::transmute(wstreamnumber)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CreateStream<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaType>>(&self, pimediatype: Param0) -> ::windows::runtime::Result<IMFASFStreamConfig> {
        let mut result__: <IMFASFStreamConfig as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).38)(::core::mem::transmute_copy(self), pimediatype.into_param().abi(), &mut result__).from_abi::<IMFASFStreamConfig>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetMutualExclusionCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).39)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetMutualExclusion(&self, dwmutexindex: u32) -> ::windows::runtime::Result<IMFASFMutualExclusion> {
        let mut result__: <IMFASFMutualExclusion as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).40)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwmutexindex), &mut result__).from_abi::<IMFASFMutualExclusion>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AddMutualExclusion<'a, Param0: ::windows::runtime::IntoParam<'a, IMFASFMutualExclusion>>(&self, pimutex: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).41)(::core::mem::transmute_copy(self), pimutex.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveMutualExclusion(&self, dwmutexindex: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).42)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwmutexindex)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CreateMutualExclusion(&self) -> ::windows::runtime::Result<IMFASFMutualExclusion> {
        let mut result__: <IMFASFMutualExclusion as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).43)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFASFMutualExclusion>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamPrioritization(&self) -> ::windows::runtime::Result<IMFASFStreamPrioritization> {
        let mut result__: <IMFASFStreamPrioritization as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).44)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFASFStreamPrioritization>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AddStreamPrioritization<'a, Param0: ::windows::runtime::IntoParam<'a, IMFASFStreamPrioritization>>(&self, pistreamprioritization: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).45)(::core::mem::transmute_copy(self), pistreamprioritization.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveStreamPrioritization(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).46)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CreateStreamPrioritization(&self) -> ::windows::runtime::Result<IMFASFStreamPrioritization> {
        let mut result__: <IMFASFStreamPrioritization as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).47)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFASFStreamPrioritization>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Clone(&self) -> ::windows::runtime::Result<IMFASFProfile> {
        let mut result__: <IMFASFProfile as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).48)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFASFProfile>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFASFProfile {
    type Vtable = IMFASFProfile_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3530014570, 651, 19981, [144, 61, 67, 240, 239, 130, 208, 212]);
}
impl ::core::convert::From<IMFASFProfile> for ::windows::runtime::IUnknown {
    fn from(value: IMFASFProfile) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFASFProfile> for ::windows::runtime::IUnknown {
    fn from(value: &IMFASFProfile) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFASFProfile {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFASFProfile {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFASFProfile> for IMFAttributes {
    fn from(value: IMFASFProfile) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFASFProfile> for IMFAttributes {
    fn from(value: &IMFASFProfile) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAttributes> for IMFASFProfile {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAttributes> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAttributes> for &IMFASFProfile {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAttributes> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFASFProfile_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ptype: *mut MF_ATTRIBUTE_TYPE) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, value: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>, pbresult: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ptheirs: ::windows::runtime::RawPtr, matchtype: MF_ATTRIBUTES_MATCH_TYPE, pbresult: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punvalue: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punvalue: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pfvalue: *mut f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pguidvalue: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pwszvalue: super::super::Foundation::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ppwszvalue: *mut super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pcbblobsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, value: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, unvalue: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, unvalue: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, fvalue: f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, guidvalue: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, wszvalue: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punknown: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcitems: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, unindex: u32, pguidkey: *mut ::windows::runtime::GUID, pvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdest: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcstreams: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, pwstreamnumber: *mut u16, ppistream: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, wstreamnumber: u16, ppistream: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pistream: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, wstreamnumber: u16) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pimediatype: ::windows::runtime::RawPtr, ppistream: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcmutexs: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwmutexindex: u32, ppimutex: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pimutex: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwmutexindex: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppimutex: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppistreamprioritization: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pistreamprioritization: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppistreamprioritization: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppiprofile: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFASFSplitter(pub ::windows::runtime::IUnknown);
impl IMFASFSplitter {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Initialize<'a, Param0: ::windows::runtime::IntoParam<'a, IMFASFContentInfo>>(&self, picontentinfo: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), picontentinfo.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetFlags(&self, dwflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwflags)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetFlags(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SelectStreams(&self, pwstreamnumbers: *const u16, wnumstreams: u16) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(pwstreamnumbers), ::core::mem::transmute(wnumstreams)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSelectedStreams(&self, pwstreamnumbers: *mut u16, pwnumstreams: *mut u16) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(pwstreamnumbers), ::core::mem::transmute(pwnumstreams)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ParseData<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaBuffer>>(&self, pibuffer: Param0, cbbufferoffset: u32, cblength: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), pibuffer.into_param().abi(), ::core::mem::transmute(cbbufferoffset), ::core::mem::transmute(cblength)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetNextSample(&self, pdwstatusflags: *mut ASF_STATUSFLAGS, pwstreamnumber: *mut u16, ppisample: *mut ::core::option::Option<IMFSample>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdwstatusflags), ::core::mem::transmute(pwstreamnumber), ::core::mem::transmute(ppisample)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Flush(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetLastSendTime(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFASFSplitter {
    type Vtable = IMFASFSplitter_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(307593877, 58265, 4565, [188, 42, 0, 176, 208, 243, 244, 171]);
}
impl ::core::convert::From<IMFASFSplitter> for ::windows::runtime::IUnknown {
    fn from(value: IMFASFSplitter) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFASFSplitter> for ::windows::runtime::IUnknown {
    fn from(value: &IMFASFSplitter) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFASFSplitter {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFASFSplitter {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFASFSplitter_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, picontentinfo: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwflags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwflags: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pwstreamnumbers: *const u16, wnumstreams: u16) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pwstreamnumbers: *mut u16, pwnumstreams: *mut u16) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pibuffer: ::windows::runtime::RawPtr, cbbufferoffset: u32, cblength: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwstatusflags: *mut ASF_STATUSFLAGS, pwstreamnumber: *mut u16, ppisample: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwlastsendtime: *mut u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFASFStreamConfig(pub ::windows::runtime::IUnknown);
impl IMFASFStreamConfig {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetItem(&self, guidkey: *const ::windows::runtime::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetItemType(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<MF_ATTRIBUTE_TYPE> {
        let mut result__: <MF_ATTRIBUTE_TYPE as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<MF_ATTRIBUTE_TYPE>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn CompareItem(&self, guidkey: *const ::windows::runtime::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(value), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn Compare<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, ptheirs: Param0, matchtype: MF_ATTRIBUTES_MATCH_TYPE) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ptheirs.into_param().abi(), ::core::mem::transmute(matchtype), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUINT32(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUINT64(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDouble(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<f64> {
        let mut result__: <f64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<f64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetGUID(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStringLength(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetString(&self, guidkey: *const ::windows::runtime::GUID, pwszvalue: super::super::Foundation::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pwszvalue), ::core::mem::transmute(cchbufsize), ::core::mem::transmute(pcchlength)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetAllocatedString(&self, guidkey: *const ::windows::runtime::GUID, ppwszvalue: *mut super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(ppwszvalue), ::core::mem::transmute(pcchlength)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBlobSize(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBlob(&self, guidkey: *const ::windows::runtime::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize), ::core::mem::transmute(pcbblobsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetAllocatedBlob(&self, guidkey: *const ::windows::runtime::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(ppbuf), ::core::mem::transmute(pcbsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUnknown<T: ::windows::runtime::Interface>(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn SetItem(&self, guidkey: *const ::windows::runtime::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(value)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteItem(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteAllItems(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUINT32(&self, guidkey: *const ::windows::runtime::GUID, unvalue: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(unvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUINT64(&self, guidkey: *const ::windows::runtime::GUID, unvalue: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(unvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetDouble(&self, guidkey: *const ::windows::runtime::GUID, fvalue: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(fvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetGUID(&self, guidkey: *const ::windows::runtime::GUID, guidvalue: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(guidvalue)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetString<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, guidkey: *const ::windows::runtime::GUID, wszvalue: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), wszvalue.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetBlob(&self, guidkey: *const ::windows::runtime::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUnknown<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guidkey: *const ::windows::runtime::GUID, punknown: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).27)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), punknown.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn LockStore(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).28)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn UnlockStore(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetItemByIndex(&self, unindex: u32, pguidkey: *mut ::windows::runtime::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).31)(::core::mem::transmute_copy(self), ::core::mem::transmute(unindex), ::core::mem::transmute(pguidkey), ::core::mem::transmute(pvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CopyAllItems<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, pdest: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::core::mem::transmute_copy(self), pdest.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamType(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).33)(::core::mem::transmute_copy(self), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamNumber(&self) -> u16 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).34)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetStreamNumber(&self, wstreamnum: u16) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).35)(::core::mem::transmute_copy(self), ::core::mem::transmute(wstreamnum)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetMediaType(&self) -> ::windows::runtime::Result<IMFMediaType> {
        let mut result__: <IMFMediaType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).36)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFMediaType>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetMediaType<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaType>>(&self, pimediatype: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).37)(::core::mem::transmute_copy(self), pimediatype.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPayloadExtensionCount(&self) -> ::windows::runtime::Result<u16> {
        let mut result__: <u16 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).38)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u16>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPayloadExtension(&self, wpayloadextensionnumber: u16, pguidextensionsystemid: *mut ::windows::runtime::GUID, pcbextensiondatasize: *mut u16, pbextensionsysteminfo: *mut u8, pcbextensionsysteminfo: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).39)(::core::mem::transmute_copy(self), ::core::mem::transmute(wpayloadextensionnumber), ::core::mem::transmute(pguidextensionsystemid), ::core::mem::transmute(pcbextensiondatasize), ::core::mem::transmute(pbextensionsysteminfo), ::core::mem::transmute(pcbextensionsysteminfo)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AddPayloadExtension<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::GUID>>(&self, guidextensionsystemid: Param0, cbextensiondatasize: u16, pbextensionsysteminfo: *const u8, cbextensionsysteminfo: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).40)(::core::mem::transmute_copy(self), guidextensionsystemid.into_param().abi(), ::core::mem::transmute(cbextensiondatasize), ::core::mem::transmute(pbextensionsysteminfo), ::core::mem::transmute(cbextensionsysteminfo)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveAllPayloadExtensions(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).41)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Clone(&self) -> ::windows::runtime::Result<IMFASFStreamConfig> {
        let mut result__: <IMFASFStreamConfig as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).42)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFASFStreamConfig>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFASFStreamConfig {
    type Vtable = IMFASFStreamConfig_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2659903698, 56253, 16896, [154, 202, 6, 230, 223, 72, 73, 19]);
}
impl ::core::convert::From<IMFASFStreamConfig> for ::windows::runtime::IUnknown {
    fn from(value: IMFASFStreamConfig) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFASFStreamConfig> for ::windows::runtime::IUnknown {
    fn from(value: &IMFASFStreamConfig) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFASFStreamConfig {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFASFStreamConfig {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFASFStreamConfig> for IMFAttributes {
    fn from(value: IMFASFStreamConfig) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFASFStreamConfig> for IMFAttributes {
    fn from(value: &IMFASFStreamConfig) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAttributes> for IMFASFStreamConfig {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAttributes> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAttributes> for &IMFASFStreamConfig {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAttributes> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFASFStreamConfig_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ptype: *mut MF_ATTRIBUTE_TYPE) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, value: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>, pbresult: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ptheirs: ::windows::runtime::RawPtr, matchtype: MF_ATTRIBUTES_MATCH_TYPE, pbresult: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punvalue: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punvalue: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pfvalue: *mut f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pguidvalue: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pwszvalue: super::super::Foundation::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ppwszvalue: *mut super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pcbblobsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, value: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, unvalue: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, unvalue: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, fvalue: f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, guidvalue: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, wszvalue: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punknown: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcitems: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, unindex: u32, pguidkey: *mut ::windows::runtime::GUID, pvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdest: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pguidstreamtype: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u16,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, wstreamnum: u16) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppimediatype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pimediatype: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcpayloadextensions: *mut u16) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, wpayloadextensionnumber: u16, pguidextensionsystemid: *mut ::windows::runtime::GUID, pcbextensiondatasize: *mut u16, pbextensionsysteminfo: *mut u8, pcbextensionsysteminfo: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidextensionsystemid: ::windows::runtime::GUID, cbextensiondatasize: u16, pbextensionsysteminfo: *const u8, cbextensionsysteminfo: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppistreamconfig: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFASFStreamPrioritization(pub ::windows::runtime::IUnknown);
impl IMFASFStreamPrioritization {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStream(&self, dwstreamindex: u32, pwstreamnumber: *mut u16, pwstreamflags: *mut u16) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), ::core::mem::transmute(pwstreamnumber), ::core::mem::transmute(pwstreamflags)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AddStream(&self, wstreamnumber: u16, wstreamflags: u16) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(wstreamnumber), ::core::mem::transmute(wstreamflags)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveStream(&self, dwstreamindex: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Clone(&self) -> ::windows::runtime::Result<IMFASFStreamPrioritization> {
        let mut result__: <IMFASFStreamPrioritization as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFASFStreamPrioritization>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFASFStreamPrioritization {
    type Vtable = IMFASFStreamPrioritization_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1771822119, 48047, 18943, [142, 56, 156, 57, 201, 181, 224, 136]);
}
impl ::core::convert::From<IMFASFStreamPrioritization> for ::windows::runtime::IUnknown {
    fn from(value: IMFASFStreamPrioritization) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFASFStreamPrioritization> for ::windows::runtime::IUnknown {
    fn from(value: &IMFASFStreamPrioritization) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFASFStreamPrioritization {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFASFStreamPrioritization {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFASFStreamPrioritization_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwstreamcount: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, pwstreamnumber: *mut u16, pwstreamflags: *mut u16) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, wstreamnumber: u16, wstreamflags: u16) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppistreamprioritization: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFASFStreamSelector(pub ::windows::runtime::IUnknown);
impl IMFASFStreamSelector {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetOutputCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetOutputStreamCount(&self, dwoutputnum: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwoutputnum), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetOutputStreamNumbers(&self, dwoutputnum: u32) -> ::windows::runtime::Result<u16> {
        let mut result__: <u16 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwoutputnum), &mut result__).from_abi::<u16>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetOutputFromStream(&self, wstreamnum: u16) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(wstreamnum), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetOutputOverride(&self, dwoutputnum: u32) -> ::windows::runtime::Result<ASF_SELECTION_STATUS> {
        let mut result__: <ASF_SELECTION_STATUS as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwoutputnum), &mut result__).from_abi::<ASF_SELECTION_STATUS>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetOutputOverride(&self, dwoutputnum: u32, selection: ASF_SELECTION_STATUS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwoutputnum), ::core::mem::transmute(selection)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetOutputMutexCount(&self, dwoutputnum: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwoutputnum), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetOutputMutex(&self, dwoutputnum: u32, dwmutexnum: u32) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwoutputnum), ::core::mem::transmute(dwmutexnum), &mut result__).from_abi::<::windows::runtime::IUnknown>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetOutputMutexSelection(&self, dwoutputnum: u32, dwmutexnum: u32, wselectedrecord: u16) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwoutputnum), ::core::mem::transmute(dwmutexnum), ::core::mem::transmute(wselectedrecord)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBandwidthStepCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBandwidthStep(&self, dwstepnum: u32, pdwbitrate: *mut u32, rgwstreamnumbers: *mut u16, rgselections: *mut ASF_SELECTION_STATUS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstepnum), ::core::mem::transmute(pdwbitrate), ::core::mem::transmute(rgwstreamnumbers), ::core::mem::transmute(rgselections)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BitrateToStepNumber(&self, dwbitrate: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwbitrate), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetStreamSelectorFlags(&self, dwstreamselectorflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamselectorflags)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFASFStreamSelector {
    type Vtable = IMFASFStreamSelector_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3491474762, 20384, 19040, [147, 73, 194, 126, 98, 218, 157, 65]);
}
impl ::core::convert::From<IMFASFStreamSelector> for ::windows::runtime::IUnknown {
    fn from(value: IMFASFStreamSelector) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFASFStreamSelector> for ::windows::runtime::IUnknown {
    fn from(value: &IMFASFStreamSelector) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFASFStreamSelector {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFASFStreamSelector {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFASFStreamSelector_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcstreams: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcoutputs: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwoutputnum: u32, pcstreams: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwoutputnum: u32, rgwstreamnumbers: *mut u16) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, wstreamnum: u16, pdwoutput: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwoutputnum: u32, pselection: *mut ASF_SELECTION_STATUS) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwoutputnum: u32, selection: ASF_SELECTION_STATUS) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwoutputnum: u32, pcmutexes: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwoutputnum: u32, dwmutexnum: u32, ppmutex: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwoutputnum: u32, dwmutexnum: u32, wselectedrecord: u16) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcstepcount: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstepnum: u32, pdwbitrate: *mut u32, rgwstreamnumbers: *mut u16, rgselections: *mut ASF_SELECTION_STATUS) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwbitrate: u32, pdwstepnum: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamselectorflags: u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFActivate(pub ::windows::runtime::IUnknown);
impl IMFActivate {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetItem(&self, guidkey: *const ::windows::runtime::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetItemType(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<MF_ATTRIBUTE_TYPE> {
        let mut result__: <MF_ATTRIBUTE_TYPE as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<MF_ATTRIBUTE_TYPE>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn CompareItem(&self, guidkey: *const ::windows::runtime::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(value), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn Compare<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, ptheirs: Param0, matchtype: MF_ATTRIBUTES_MATCH_TYPE) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ptheirs.into_param().abi(), ::core::mem::transmute(matchtype), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUINT32(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUINT64(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDouble(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<f64> {
        let mut result__: <f64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<f64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetGUID(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStringLength(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetString(&self, guidkey: *const ::windows::runtime::GUID, pwszvalue: super::super::Foundation::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pwszvalue), ::core::mem::transmute(cchbufsize), ::core::mem::transmute(pcchlength)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetAllocatedString(&self, guidkey: *const ::windows::runtime::GUID, ppwszvalue: *mut super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(ppwszvalue), ::core::mem::transmute(pcchlength)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBlobSize(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBlob(&self, guidkey: *const ::windows::runtime::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize), ::core::mem::transmute(pcbblobsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetAllocatedBlob(&self, guidkey: *const ::windows::runtime::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(ppbuf), ::core::mem::transmute(pcbsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUnknown<T: ::windows::runtime::Interface>(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn SetItem(&self, guidkey: *const ::windows::runtime::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(value)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteItem(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteAllItems(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUINT32(&self, guidkey: *const ::windows::runtime::GUID, unvalue: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(unvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUINT64(&self, guidkey: *const ::windows::runtime::GUID, unvalue: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(unvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetDouble(&self, guidkey: *const ::windows::runtime::GUID, fvalue: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(fvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetGUID(&self, guidkey: *const ::windows::runtime::GUID, guidvalue: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(guidvalue)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetString<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, guidkey: *const ::windows::runtime::GUID, wszvalue: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), wszvalue.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetBlob(&self, guidkey: *const ::windows::runtime::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUnknown<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guidkey: *const ::windows::runtime::GUID, punknown: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).27)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), punknown.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn LockStore(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).28)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn UnlockStore(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetItemByIndex(&self, unindex: u32, pguidkey: *mut ::windows::runtime::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).31)(::core::mem::transmute_copy(self), ::core::mem::transmute(unindex), ::core::mem::transmute(pguidkey), ::core::mem::transmute(pvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CopyAllItems<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, pdest: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::core::mem::transmute_copy(self), pdest.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ActivateObject<T: ::windows::runtime::Interface>(&self) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).33)(::core::mem::transmute_copy(self), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ShutdownObject(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).34)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DetachObject(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).35)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFActivate {
    type Vtable = IMFActivate_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2146344602, 19081, 18342, [137, 156, 182, 165, 58, 112, 251, 103]);
}
impl ::core::convert::From<IMFActivate> for ::windows::runtime::IUnknown {
    fn from(value: IMFActivate) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFActivate> for ::windows::runtime::IUnknown {
    fn from(value: &IMFActivate) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFActivate {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFActivate {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFActivate> for IMFAttributes {
    fn from(value: IMFActivate) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFActivate> for IMFAttributes {
    fn from(value: &IMFActivate) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAttributes> for IMFActivate {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAttributes> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAttributes> for &IMFActivate {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAttributes> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFActivate_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ptype: *mut MF_ATTRIBUTE_TYPE) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, value: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>, pbresult: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ptheirs: ::windows::runtime::RawPtr, matchtype: MF_ATTRIBUTES_MATCH_TYPE, pbresult: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punvalue: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punvalue: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pfvalue: *mut f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pguidvalue: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pwszvalue: super::super::Foundation::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ppwszvalue: *mut super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pcbblobsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, value: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, unvalue: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, unvalue: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, fvalue: f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, guidvalue: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, wszvalue: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punknown: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcitems: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, unindex: u32, pguidkey: *mut ::windows::runtime::GUID, pvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdest: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFAsyncCallback(pub ::windows::runtime::IUnknown);
impl IMFAsyncCallback {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetParameters(&self, pdwflags: *mut u32, pdwqueue: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdwflags), ::core::mem::transmute(pdwqueue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Invoke<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, pasyncresult: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), pasyncresult.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFAsyncCallback {
    type Vtable = IMFAsyncCallback_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2725249999, 9044, 20266, [141, 106, 171, 124, 255, 21, 67, 126]);
}
impl ::core::convert::From<IMFAsyncCallback> for ::windows::runtime::IUnknown {
    fn from(value: IMFAsyncCallback) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFAsyncCallback> for ::windows::runtime::IUnknown {
    fn from(value: &IMFAsyncCallback) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFAsyncCallback {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFAsyncCallback {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFAsyncCallback_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwflags: *mut u32, pdwqueue: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pasyncresult: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFAsyncCallbackLogging(pub ::windows::runtime::IUnknown);
impl IMFAsyncCallbackLogging {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetParameters(&self, pdwflags: *mut u32, pdwqueue: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdwflags), ::core::mem::transmute(pdwqueue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Invoke<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, pasyncresult: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), pasyncresult.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetObjectPointer(&self) -> *mut ::core::ffi::c_void {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetObjectTag(&self) -> u32 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self)))
    }
}
unsafe impl ::windows::runtime::Interface for IMFAsyncCallbackLogging {
    type Vtable = IMFAsyncCallbackLogging_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3349470369, 62960, 18358, [185, 43, 191, 1, 6, 210, 87, 145]);
}
impl ::core::convert::From<IMFAsyncCallbackLogging> for ::windows::runtime::IUnknown {
    fn from(value: IMFAsyncCallbackLogging) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFAsyncCallbackLogging> for ::windows::runtime::IUnknown {
    fn from(value: &IMFAsyncCallbackLogging) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFAsyncCallbackLogging {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFAsyncCallbackLogging {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFAsyncCallbackLogging> for IMFAsyncCallback {
    fn from(value: IMFAsyncCallbackLogging) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFAsyncCallbackLogging> for IMFAsyncCallback {
    fn from(value: &IMFAsyncCallbackLogging) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAsyncCallback> for IMFAsyncCallbackLogging {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAsyncCallback> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAsyncCallback> for &IMFAsyncCallbackLogging {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAsyncCallback> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFAsyncCallbackLogging_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwflags: *mut u32, pdwqueue: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pasyncresult: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> *mut ::core::ffi::c_void,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFAsyncResult(pub ::windows::runtime::IUnknown);
impl IMFAsyncResult {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetState(&self) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<::windows::runtime::IUnknown>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStatus(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetStatus(&self, hrstatus: ::windows::runtime::HRESULT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(hrstatus)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetObject(&self) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), &mut result__).from_abi::<::windows::runtime::IUnknown>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStateNoAddRef(&self) -> ::core::option::Option<::windows::runtime::IUnknown> {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self)))
    }
}
unsafe impl ::windows::runtime::Interface for IMFAsyncResult {
    type Vtable = IMFAsyncResult_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2892724361, 1856, 19793, [134, 25, 144, 89, 148, 165, 92, 198]);
}
impl ::core::convert::From<IMFAsyncResult> for ::windows::runtime::IUnknown {
    fn from(value: IMFAsyncResult) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFAsyncResult> for ::windows::runtime::IUnknown {
    fn from(value: &IMFAsyncResult) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFAsyncResult {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFAsyncResult {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFAsyncResult_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppunkstate: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hrstatus: ::windows::runtime::HRESULT) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppobject: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::RawPtr,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFAttributes(pub ::windows::runtime::IUnknown);
impl IMFAttributes {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetItem(&self, guidkey: *const ::windows::runtime::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetItemType(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<MF_ATTRIBUTE_TYPE> {
        let mut result__: <MF_ATTRIBUTE_TYPE as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<MF_ATTRIBUTE_TYPE>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn CompareItem(&self, guidkey: *const ::windows::runtime::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(value), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn Compare<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, ptheirs: Param0, matchtype: MF_ATTRIBUTES_MATCH_TYPE) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ptheirs.into_param().abi(), ::core::mem::transmute(matchtype), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUINT32(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUINT64(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDouble(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<f64> {
        let mut result__: <f64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<f64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetGUID(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStringLength(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetString(&self, guidkey: *const ::windows::runtime::GUID, pwszvalue: super::super::Foundation::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pwszvalue), ::core::mem::transmute(cchbufsize), ::core::mem::transmute(pcchlength)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetAllocatedString(&self, guidkey: *const ::windows::runtime::GUID, ppwszvalue: *mut super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(ppwszvalue), ::core::mem::transmute(pcchlength)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBlobSize(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBlob(&self, guidkey: *const ::windows::runtime::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize), ::core::mem::transmute(pcbblobsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetAllocatedBlob(&self, guidkey: *const ::windows::runtime::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(ppbuf), ::core::mem::transmute(pcbsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUnknown<T: ::windows::runtime::Interface>(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn SetItem(&self, guidkey: *const ::windows::runtime::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(value)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteItem(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteAllItems(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUINT32(&self, guidkey: *const ::windows::runtime::GUID, unvalue: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(unvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUINT64(&self, guidkey: *const ::windows::runtime::GUID, unvalue: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(unvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetDouble(&self, guidkey: *const ::windows::runtime::GUID, fvalue: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(fvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetGUID(&self, guidkey: *const ::windows::runtime::GUID, guidvalue: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(guidvalue)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetString<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, guidkey: *const ::windows::runtime::GUID, wszvalue: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), wszvalue.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetBlob(&self, guidkey: *const ::windows::runtime::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUnknown<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guidkey: *const ::windows::runtime::GUID, punknown: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).27)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), punknown.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn LockStore(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).28)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn UnlockStore(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetItemByIndex(&self, unindex: u32, pguidkey: *mut ::windows::runtime::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).31)(::core::mem::transmute_copy(self), ::core::mem::transmute(unindex), ::core::mem::transmute(pguidkey), ::core::mem::transmute(pvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CopyAllItems<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, pdest: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::core::mem::transmute_copy(self), pdest.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFAttributes {
    type Vtable = IMFAttributes_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(752015649, 50247, 17575, [161, 60, 74, 218, 191, 194, 71, 227]);
}
impl ::core::convert::From<IMFAttributes> for ::windows::runtime::IUnknown {
    fn from(value: IMFAttributes) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFAttributes> for ::windows::runtime::IUnknown {
    fn from(value: &IMFAttributes) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFAttributes {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFAttributes {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFAttributes_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ptype: *mut MF_ATTRIBUTE_TYPE) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, value: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>, pbresult: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ptheirs: ::windows::runtime::RawPtr, matchtype: MF_ATTRIBUTES_MATCH_TYPE, pbresult: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punvalue: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punvalue: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pfvalue: *mut f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pguidvalue: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pwszvalue: super::super::Foundation::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ppwszvalue: *mut super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pcbblobsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, value: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, unvalue: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, unvalue: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, fvalue: f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, guidvalue: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, wszvalue: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punknown: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcitems: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, unindex: u32, pguidkey: *mut ::windows::runtime::GUID, pvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdest: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFAudioMediaType(pub ::windows::runtime::IUnknown);
impl IMFAudioMediaType {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetItem(&self, guidkey: *const ::windows::runtime::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetItemType(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<MF_ATTRIBUTE_TYPE> {
        let mut result__: <MF_ATTRIBUTE_TYPE as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<MF_ATTRIBUTE_TYPE>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn CompareItem(&self, guidkey: *const ::windows::runtime::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(value), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn Compare<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, ptheirs: Param0, matchtype: MF_ATTRIBUTES_MATCH_TYPE) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ptheirs.into_param().abi(), ::core::mem::transmute(matchtype), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUINT32(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUINT64(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDouble(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<f64> {
        let mut result__: <f64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<f64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetGUID(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStringLength(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetString(&self, guidkey: *const ::windows::runtime::GUID, pwszvalue: super::super::Foundation::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pwszvalue), ::core::mem::transmute(cchbufsize), ::core::mem::transmute(pcchlength)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetAllocatedString(&self, guidkey: *const ::windows::runtime::GUID, ppwszvalue: *mut super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(ppwszvalue), ::core::mem::transmute(pcchlength)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBlobSize(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBlob(&self, guidkey: *const ::windows::runtime::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize), ::core::mem::transmute(pcbblobsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetAllocatedBlob(&self, guidkey: *const ::windows::runtime::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(ppbuf), ::core::mem::transmute(pcbsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUnknown<T: ::windows::runtime::Interface>(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn SetItem(&self, guidkey: *const ::windows::runtime::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(value)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteItem(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteAllItems(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUINT32(&self, guidkey: *const ::windows::runtime::GUID, unvalue: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(unvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUINT64(&self, guidkey: *const ::windows::runtime::GUID, unvalue: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(unvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetDouble(&self, guidkey: *const ::windows::runtime::GUID, fvalue: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(fvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetGUID(&self, guidkey: *const ::windows::runtime::GUID, guidvalue: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(guidvalue)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetString<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, guidkey: *const ::windows::runtime::GUID, wszvalue: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), wszvalue.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetBlob(&self, guidkey: *const ::windows::runtime::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUnknown<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guidkey: *const ::windows::runtime::GUID, punknown: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).27)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), punknown.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn LockStore(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).28)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn UnlockStore(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetItemByIndex(&self, unindex: u32, pguidkey: *mut ::windows::runtime::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).31)(::core::mem::transmute_copy(self), ::core::mem::transmute(unindex), ::core::mem::transmute(pguidkey), ::core::mem::transmute(pvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CopyAllItems<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, pdest: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::core::mem::transmute_copy(self), pdest.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetMajorType(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).33)(::core::mem::transmute_copy(self), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn IsCompressedFormat(&self) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).34)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn IsEqual<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaType>>(&self, pimediatype: Param0) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).35)(::core::mem::transmute_copy(self), pimediatype.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetRepresentation<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::GUID>>(&self, guidrepresentation: Param0, ppvrepresentation: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).36)(::core::mem::transmute_copy(self), guidrepresentation.into_param().abi(), ::core::mem::transmute(ppvrepresentation)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn FreeRepresentation<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::GUID>>(&self, guidrepresentation: Param0, pvrepresentation: *const ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).37)(::core::mem::transmute_copy(self), guidrepresentation.into_param().abi(), ::core::mem::transmute(pvrepresentation)).ok()
    }
    #[cfg(feature = "Win32_Media_Multimedia")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Media_Multimedia`*"]
    pub unsafe fn GetAudioFormat(&self) -> *mut super::Multimedia::WAVEFORMATEX {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).38)(::core::mem::transmute_copy(self)))
    }
}
unsafe impl ::windows::runtime::Interface for IMFAudioMediaType {
    type Vtable = IMFAudioMediaType_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(648064451, 52774, 18034, [147, 4, 105, 85, 46, 221, 63, 175]);
}
impl ::core::convert::From<IMFAudioMediaType> for ::windows::runtime::IUnknown {
    fn from(value: IMFAudioMediaType) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFAudioMediaType> for ::windows::runtime::IUnknown {
    fn from(value: &IMFAudioMediaType) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFAudioMediaType {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFAudioMediaType {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFAudioMediaType> for IMFMediaType {
    fn from(value: IMFAudioMediaType) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFAudioMediaType> for IMFMediaType {
    fn from(value: &IMFAudioMediaType) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaType> for IMFAudioMediaType {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaType> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaType> for &IMFAudioMediaType {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaType> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<IMFAudioMediaType> for IMFAttributes {
    fn from(value: IMFAudioMediaType) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFAudioMediaType> for IMFAttributes {
    fn from(value: &IMFAudioMediaType) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAttributes> for IMFAudioMediaType {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAttributes> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAttributes> for &IMFAudioMediaType {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAttributes> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFAudioMediaType_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ptype: *mut MF_ATTRIBUTE_TYPE) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, value: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>, pbresult: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ptheirs: ::windows::runtime::RawPtr, matchtype: MF_ATTRIBUTES_MATCH_TYPE, pbresult: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punvalue: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punvalue: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pfvalue: *mut f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pguidvalue: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pwszvalue: super::super::Foundation::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ppwszvalue: *mut super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pcbblobsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, value: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, unvalue: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, unvalue: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, fvalue: f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, guidvalue: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, wszvalue: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punknown: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcitems: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, unindex: u32, pguidkey: *mut ::windows::runtime::GUID, pvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdest: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pguidmajortype: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pfcompressed: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pimediatype: ::windows::runtime::RawPtr, pdwflags: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidrepresentation: ::windows::runtime::GUID, ppvrepresentation: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidrepresentation: ::windows::runtime::GUID, pvrepresentation: *const ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Media_Multimedia")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> *mut super::Multimedia::WAVEFORMATEX,
    #[cfg(not(feature = "Win32_Media_Multimedia"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFAudioPolicy(pub ::windows::runtime::IUnknown);
impl IMFAudioPolicy {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetGroupingParam(&self, rguidclass: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(rguidclass)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetGroupingParam(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetDisplayName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, pszname: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), pszname.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetDisplayName(&self) -> ::windows::runtime::Result<super::super::Foundation::PWSTR> {
        let mut result__: <super::super::Foundation::PWSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::PWSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetIconPath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, pszpath: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), pszpath.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetIconPath(&self) -> ::windows::runtime::Result<super::super::Foundation::PWSTR> {
        let mut result__: <super::super::Foundation::PWSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::PWSTR>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFAudioPolicy {
    type Vtable = IMFAudioPolicy_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2690878507, 25701, 17301, [154, 231, 163, 33, 169, 253, 40, 86]);
}
impl ::core::convert::From<IMFAudioPolicy> for ::windows::runtime::IUnknown {
    fn from(value: IMFAudioPolicy) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFAudioPolicy> for ::windows::runtime::IUnknown {
    fn from(value: &IMFAudioPolicy) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFAudioPolicy {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFAudioPolicy {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFAudioPolicy_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, rguidclass: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pguidclass: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszname: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszname: *mut super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszpath: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszpath: *mut super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFAudioStreamVolume(pub ::windows::runtime::IUnknown);
impl IMFAudioStreamVolume {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetChannelCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetChannelVolume(&self, dwindex: u32, flevel: f32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwindex), ::core::mem::transmute(flevel)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetChannelVolume(&self, dwindex: u32) -> ::windows::runtime::Result<f32> {
        let mut result__: <f32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwindex), &mut result__).from_abi::<f32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetAllVolumes(&self, dwcount: u32, pfvolumes: *const f32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwcount), ::core::mem::transmute(pfvolumes)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetAllVolumes(&self, dwcount: u32, pfvolumes: *mut f32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwcount), ::core::mem::transmute(pfvolumes)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFAudioStreamVolume {
    type Vtable = IMFAudioStreamVolume_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1991359451, 20168, 20278, [177, 6, 112, 169, 49, 109, 245, 147]);
}
impl ::core::convert::From<IMFAudioStreamVolume> for ::windows::runtime::IUnknown {
    fn from(value: IMFAudioStreamVolume) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFAudioStreamVolume> for ::windows::runtime::IUnknown {
    fn from(value: &IMFAudioStreamVolume) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFAudioStreamVolume {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFAudioStreamVolume {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFAudioStreamVolume_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwcount: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwindex: u32, flevel: f32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwindex: u32, pflevel: *mut f32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwcount: u32, pfvolumes: *const f32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwcount: u32, pfvolumes: *mut f32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFBufferListNotify(pub ::windows::runtime::IUnknown);
impl IMFBufferListNotify {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnAddSourceBuffer(&self) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnRemoveSourceBuffer(&self) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self)))
    }
}
unsafe impl ::windows::runtime::Interface for IMFBufferListNotify {
    type Vtable = IMFBufferListNotify_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(617433079, 33240, 18309, [173, 178, 175, 105, 122, 150, 60, 210]);
}
impl ::core::convert::From<IMFBufferListNotify> for ::windows::runtime::IUnknown {
    fn from(value: IMFBufferListNotify) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFBufferListNotify> for ::windows::runtime::IUnknown {
    fn from(value: &IMFBufferListNotify) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFBufferListNotify {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFBufferListNotify {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFBufferListNotify_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFByteStream(pub ::windows::runtime::IUnknown);
impl IMFByteStream {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCapabilities(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetLength(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetLength(&self, qwlength: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(qwlength)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCurrentPosition(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetCurrentPosition(&self, qwposition: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(qwposition)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn IsEndOfStream(&self) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Read(&self, pb: *mut u8, cb: u32, pcbread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(pb), ::core::mem::transmute(cb), ::core::mem::transmute(pcbread)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BeginRead<'a, Param2: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param3: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, pb: *mut u8, cb: u32, pcallback: Param2, punkstate: Param3) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(pb), ::core::mem::transmute(cb), pcallback.into_param().abi(), punkstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndRead<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, presult: Param0) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), presult.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Write(&self, pb: *const u8, cb: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(pb), ::core::mem::transmute(cb), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BeginWrite<'a, Param2: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param3: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, pb: *const u8, cb: u32, pcallback: Param2, punkstate: Param3) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), ::core::mem::transmute(pb), ::core::mem::transmute(cb), pcallback.into_param().abi(), punkstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndWrite<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, presult: Param0) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), presult.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Seek(&self, seekorigin: MFBYTESTREAM_SEEK_ORIGIN, llseekoffset: i64, dwseekflags: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), ::core::mem::transmute(seekorigin), ::core::mem::transmute(llseekoffset), ::core::mem::transmute(dwseekflags), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Flush(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Close(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFByteStream {
    type Vtable = IMFByteStream_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2907446016, 19447, 16943, [145, 117, 117, 102, 147, 217, 19, 13]);
}
impl ::core::convert::From<IMFByteStream> for ::windows::runtime::IUnknown {
    fn from(value: IMFByteStream) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFByteStream> for ::windows::runtime::IUnknown {
    fn from(value: &IMFByteStream) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFByteStream {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFByteStream {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFByteStream_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwcapabilities: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pqwlength: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, qwlength: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pqwposition: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, qwposition: u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pfendofstream: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pb: *mut u8, cb: u32, pcbread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pb: *mut u8, cb: u32, pcallback: ::windows::runtime::RawPtr, punkstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presult: ::windows::runtime::RawPtr, pcbread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pb: *const u8, cb: u32, pcbwritten: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pb: *const u8, cb: u32, pcallback: ::windows::runtime::RawPtr, punkstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presult: ::windows::runtime::RawPtr, pcbwritten: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, seekorigin: MFBYTESTREAM_SEEK_ORIGIN, llseekoffset: i64, dwseekflags: u32, pqwcurrentposition: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFByteStreamBuffering(pub ::windows::runtime::IUnknown);
impl IMFByteStreamBuffering {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetBufferingParams(&self, pparams: *const MFBYTESTREAM_BUFFERING_PARAMS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(pparams)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn EnableBuffering<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, fenable: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), fenable.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn StopBuffering(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFByteStreamBuffering {
    type Vtable = IMFByteStreamBuffering_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1835456386, 7503, 19895, [140, 99, 203, 140, 119, 241, 239, 94]);
}
impl ::core::convert::From<IMFByteStreamBuffering> for ::windows::runtime::IUnknown {
    fn from(value: IMFByteStreamBuffering) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFByteStreamBuffering> for ::windows::runtime::IUnknown {
    fn from(value: &IMFByteStreamBuffering) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFByteStreamBuffering {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFByteStreamBuffering {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFByteStreamBuffering_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pparams: *const MFBYTESTREAM_BUFFERING_PARAMS) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, fenable: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFByteStreamCacheControl(pub ::windows::runtime::IUnknown);
impl IMFByteStreamCacheControl {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn StopBackgroundTransfer(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFByteStreamCacheControl {
    type Vtable = IMFByteStreamCacheControl_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4110692004, 31382, 19061, [170, 123, 43, 225, 239, 127, 136, 213]);
}
impl ::core::convert::From<IMFByteStreamCacheControl> for ::windows::runtime::IUnknown {
    fn from(value: IMFByteStreamCacheControl) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFByteStreamCacheControl> for ::windows::runtime::IUnknown {
    fn from(value: &IMFByteStreamCacheControl) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFByteStreamCacheControl {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFByteStreamCacheControl {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFByteStreamCacheControl_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFByteStreamCacheControl2(pub ::windows::runtime::IUnknown);
impl IMFByteStreamCacheControl2 {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn StopBackgroundTransfer(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetByteRanges(&self, pcranges: *mut u32, ppranges: *mut *mut MF_BYTE_STREAM_CACHE_RANGE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(pcranges), ::core::mem::transmute(ppranges)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetCacheLimit(&self, qwbytes: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(qwbytes)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn IsBackgroundTransferActive(&self) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFByteStreamCacheControl2 {
    type Vtable = IMFByteStreamCacheControl2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1909343900, 62283, 18922, [165, 107, 45, 42, 16, 229, 17, 73]);
}
impl ::core::convert::From<IMFByteStreamCacheControl2> for ::windows::runtime::IUnknown {
    fn from(value: IMFByteStreamCacheControl2) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFByteStreamCacheControl2> for ::windows::runtime::IUnknown {
    fn from(value: &IMFByteStreamCacheControl2) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFByteStreamCacheControl2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFByteStreamCacheControl2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFByteStreamCacheControl2> for IMFByteStreamCacheControl {
    fn from(value: IMFByteStreamCacheControl2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFByteStreamCacheControl2> for IMFByteStreamCacheControl {
    fn from(value: &IMFByteStreamCacheControl2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFByteStreamCacheControl> for IMFByteStreamCacheControl2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFByteStreamCacheControl> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFByteStreamCacheControl> for &IMFByteStreamCacheControl2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFByteStreamCacheControl> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFByteStreamCacheControl2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcranges: *mut u32, ppranges: *mut *mut MF_BYTE_STREAM_CACHE_RANGE) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, qwbytes: u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pfactive: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFByteStreamHandler(pub ::windows::runtime::IUnknown);
impl IMFByteStreamHandler {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_PropertiesSystem"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_PropertiesSystem`*"]
    pub unsafe fn BeginCreateObject<'a, Param0: ::windows::runtime::IntoParam<'a, IMFByteStream>, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::System::PropertiesSystem::IPropertyStore>, Param5: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param6: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(
        &self,
        pbytestream: Param0,
        pwszurl: Param1,
        dwflags: u32,
        pprops: Param3,
        ppiunknowncancelcookie: *mut ::core::option::Option<::windows::runtime::IUnknown>,
        pcallback: Param5,
        punkstate: Param6,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), pbytestream.into_param().abi(), pwszurl.into_param().abi(), ::core::mem::transmute(dwflags), pprops.into_param().abi(), ::core::mem::transmute(ppiunknowncancelcookie), pcallback.into_param().abi(), punkstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndCreateObject<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, presult: Param0, pobjecttype: *mut MF_OBJECT_TYPE, ppobject: *mut ::core::option::Option<::windows::runtime::IUnknown>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), presult.into_param().abi(), ::core::mem::transmute(pobjecttype), ::core::mem::transmute(ppobject)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CancelObjectCreation<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, piunknowncancelcookie: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), piunknowncancelcookie.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetMaxNumberOfBytesRequiredForResolution(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFByteStreamHandler {
    type Vtable = IMFByteStreamHandler_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3141667492, 30299, 18975, [145, 254, 214, 168, 161, 67, 146, 76]);
}
impl ::core::convert::From<IMFByteStreamHandler> for ::windows::runtime::IUnknown {
    fn from(value: IMFByteStreamHandler) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFByteStreamHandler> for ::windows::runtime::IUnknown {
    fn from(value: &IMFByteStreamHandler) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFByteStreamHandler {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFByteStreamHandler {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFByteStreamHandler_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_PropertiesSystem"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbytestream: ::windows::runtime::RawPtr, pwszurl: super::super::Foundation::PWSTR, dwflags: u32, pprops: ::windows::runtime::RawPtr, ppiunknowncancelcookie: *mut ::windows::runtime::RawPtr, pcallback: ::windows::runtime::RawPtr, punkstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_PropertiesSystem")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presult: ::windows::runtime::RawPtr, pobjecttype: *mut MF_OBJECT_TYPE, ppobject: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, piunknowncancelcookie: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pqwbytes: *mut u64) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFByteStreamProxyClassFactory(pub ::windows::runtime::IUnknown);
impl IMFByteStreamProxyClassFactory {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CreateByteStreamProxy<'a, Param0: ::windows::runtime::IntoParam<'a, IMFByteStream>, Param1: ::windows::runtime::IntoParam<'a, IMFAttributes>, T: ::windows::runtime::Interface>(&self, pbytestream: Param0, pattributes: Param1) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), pbytestream.into_param().abi(), pattributes.into_param().abi(), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFByteStreamProxyClassFactory {
    type Vtable = IMFByteStreamProxyClassFactory_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2796830596, 23562, 17128, [164, 77, 177, 133, 122, 118, 153, 47]);
}
impl ::core::convert::From<IMFByteStreamProxyClassFactory> for ::windows::runtime::IUnknown {
    fn from(value: IMFByteStreamProxyClassFactory) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFByteStreamProxyClassFactory> for ::windows::runtime::IUnknown {
    fn from(value: &IMFByteStreamProxyClassFactory) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFByteStreamProxyClassFactory {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFByteStreamProxyClassFactory {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFByteStreamProxyClassFactory_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbytestream: ::windows::runtime::RawPtr, pattributes: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFByteStreamTimeSeek(pub ::windows::runtime::IUnknown);
impl IMFByteStreamTimeSeek {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn IsTimeSeekSupported(&self) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn TimeSeek(&self, qwtimeposition: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(qwtimeposition)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetTimeSeekResult(&self, pqwstarttime: *mut u64, pqwstoptime: *mut u64, pqwduration: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(pqwstarttime), ::core::mem::transmute(pqwstoptime), ::core::mem::transmute(pqwduration)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFByteStreamTimeSeek {
    type Vtable = IMFByteStreamTimeSeek_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1687645178, 64353, 16449, [144, 105, 140, 154, 95, 101, 155, 235]);
}
impl ::core::convert::From<IMFByteStreamTimeSeek> for ::windows::runtime::IUnknown {
    fn from(value: IMFByteStreamTimeSeek) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFByteStreamTimeSeek> for ::windows::runtime::IUnknown {
    fn from(value: &IMFByteStreamTimeSeek) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFByteStreamTimeSeek {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFByteStreamTimeSeek {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFByteStreamTimeSeek_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pftimeseekissupported: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, qwtimeposition: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pqwstarttime: *mut u64, pqwstoptime: *mut u64, pqwduration: *mut u64) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFCameraOcclusionStateMonitor(pub ::windows::runtime::IUnknown);
impl IMFCameraOcclusionStateMonitor {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Start(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Stop(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSupportedStates(&self) -> u32 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self)))
    }
}
unsafe impl ::windows::runtime::Interface for IMFCameraOcclusionStateMonitor {
    type Vtable = IMFCameraOcclusionStateMonitor_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3429445446, 50839, 18402, [167, 45, 123, 6, 70, 23, 116, 155]);
}
impl ::core::convert::From<IMFCameraOcclusionStateMonitor> for ::windows::runtime::IUnknown {
    fn from(value: IMFCameraOcclusionStateMonitor) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFCameraOcclusionStateMonitor> for ::windows::runtime::IUnknown {
    fn from(value: &IMFCameraOcclusionStateMonitor) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFCameraOcclusionStateMonitor {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFCameraOcclusionStateMonitor {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFCameraOcclusionStateMonitor_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFCameraOcclusionStateReport(pub ::windows::runtime::IUnknown);
impl IMFCameraOcclusionStateReport {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetOcclusionState(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFCameraOcclusionStateReport {
    type Vtable = IMFCameraOcclusionStateReport_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(373338831, 29914, 17506, [164, 59, 183, 109, 59, 220, 20, 52]);
}
impl ::core::convert::From<IMFCameraOcclusionStateReport> for ::windows::runtime::IUnknown {
    fn from(value: IMFCameraOcclusionStateReport) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFCameraOcclusionStateReport> for ::windows::runtime::IUnknown {
    fn from(value: &IMFCameraOcclusionStateReport) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFCameraOcclusionStateReport {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFCameraOcclusionStateReport {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFCameraOcclusionStateReport_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, occlusionstate: *mut u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFCameraOcclusionStateReportCallback(pub ::windows::runtime::IUnknown);
impl IMFCameraOcclusionStateReportCallback {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnOcclusionStateReport<'a, Param0: ::windows::runtime::IntoParam<'a, IMFCameraOcclusionStateReport>>(&self, occlusionstatereport: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), occlusionstatereport.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFCameraOcclusionStateReportCallback {
    type Vtable = IMFCameraOcclusionStateReportCallback_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1851277767, 14473, 16409, [144, 53, 120, 63, 177, 155, 89, 72]);
}
impl ::core::convert::From<IMFCameraOcclusionStateReportCallback> for ::windows::runtime::IUnknown {
    fn from(value: IMFCameraOcclusionStateReportCallback) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFCameraOcclusionStateReportCallback> for ::windows::runtime::IUnknown {
    fn from(value: &IMFCameraOcclusionStateReportCallback) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFCameraOcclusionStateReportCallback {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFCameraOcclusionStateReportCallback {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFCameraOcclusionStateReportCallback_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, occlusionstatereport: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFCameraSyncObject(pub ::windows::runtime::IUnknown);
impl IMFCameraSyncObject {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn WaitOnSignal(&self, timeoutinms: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(timeoutinms)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Shutdown(&self) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self)))
    }
}
unsafe impl ::windows::runtime::Interface for IMFCameraSyncObject {
    type Vtable = IMFCameraSyncObject_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1664660026, 12354, 18898, [163, 234, 236, 15, 237, 129, 84, 7]);
}
impl ::core::convert::From<IMFCameraSyncObject> for ::windows::runtime::IUnknown {
    fn from(value: IMFCameraSyncObject) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFCameraSyncObject> for ::windows::runtime::IUnknown {
    fn from(value: &IMFCameraSyncObject) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFCameraSyncObject {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFCameraSyncObject {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFCameraSyncObject_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, timeoutinms: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFCaptureEngine(pub ::windows::runtime::IUnknown);
impl IMFCaptureEngine {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Initialize<'a, Param0: ::windows::runtime::IntoParam<'a, IMFCaptureEngineOnEventCallback>, Param1: ::windows::runtime::IntoParam<'a, IMFAttributes>, Param2: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>, Param3: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, peventcallback: Param0, pattributes: Param1, paudiosource: Param2, pvideosource: Param3) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), peventcallback.into_param().abi(), pattributes.into_param().abi(), paudiosource.into_param().abi(), pvideosource.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn StartPreview(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn StopPreview(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn StartRecord(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn StopRecord<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, bfinalize: Param0, bflushunprocessedsamples: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), bfinalize.into_param().abi(), bflushunprocessedsamples.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn TakePhoto(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSink(&self, mfcaptureenginesinktype: MF_CAPTURE_ENGINE_SINK_TYPE) -> ::windows::runtime::Result<IMFCaptureSink> {
        let mut result__: <IMFCaptureSink as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(mfcaptureenginesinktype), &mut result__).from_abi::<IMFCaptureSink>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSource(&self) -> ::windows::runtime::Result<IMFCaptureSource> {
        let mut result__: <IMFCaptureSource as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFCaptureSource>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFCaptureEngine {
    type Vtable = IMFCaptureEngine_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2797315123, 5995, 18610, [179, 117, 83, 170, 3, 71, 50, 7]);
}
impl ::core::convert::From<IMFCaptureEngine> for ::windows::runtime::IUnknown {
    fn from(value: IMFCaptureEngine) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFCaptureEngine> for ::windows::runtime::IUnknown {
    fn from(value: &IMFCaptureEngine) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFCaptureEngine {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFCaptureEngine {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFCaptureEngine_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, peventcallback: ::windows::runtime::RawPtr, pattributes: ::windows::runtime::RawPtr, paudiosource: ::windows::runtime::RawPtr, pvideosource: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, bfinalize: super::super::Foundation::BOOL, bflushunprocessedsamples: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mfcaptureenginesinktype: MF_CAPTURE_ENGINE_SINK_TYPE, ppsink: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppsource: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFCaptureEngineClassFactory(pub ::windows::runtime::IUnknown);
impl IMFCaptureEngineClassFactory {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CreateInstance(&self, clsid: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(clsid), ::core::mem::transmute(riid), ::core::mem::transmute(ppvobject)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFCaptureEngineClassFactory {
    type Vtable = IMFCaptureEngineClassFactory_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2399326528, 22268, 17154, [167, 5, 58, 151, 199, 139, 231, 121]);
}
impl ::core::convert::From<IMFCaptureEngineClassFactory> for ::windows::runtime::IUnknown {
    fn from(value: IMFCaptureEngineClassFactory) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFCaptureEngineClassFactory> for ::windows::runtime::IUnknown {
    fn from(value: &IMFCaptureEngineClassFactory) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFCaptureEngineClassFactory {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFCaptureEngineClassFactory {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFCaptureEngineClassFactory_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, clsid: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFCaptureEngineOnEventCallback(pub ::windows::runtime::IUnknown);
impl IMFCaptureEngineOnEventCallback {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnEvent<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaEvent>>(&self, pevent: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), pevent.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFCaptureEngineOnEventCallback {
    type Vtable = IMFCaptureEngineOnEventCallback_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2933543360, 36901, 18819, [144, 18, 222, 89, 123, 136, 176, 137]);
}
impl ::core::convert::From<IMFCaptureEngineOnEventCallback> for ::windows::runtime::IUnknown {
    fn from(value: IMFCaptureEngineOnEventCallback) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFCaptureEngineOnEventCallback> for ::windows::runtime::IUnknown {
    fn from(value: &IMFCaptureEngineOnEventCallback) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFCaptureEngineOnEventCallback {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFCaptureEngineOnEventCallback {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFCaptureEngineOnEventCallback_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pevent: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFCaptureEngineOnSampleCallback(pub ::windows::runtime::IUnknown);
impl IMFCaptureEngineOnSampleCallback {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnSample<'a, Param0: ::windows::runtime::IntoParam<'a, IMFSample>>(&self, psample: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), psample.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFCaptureEngineOnSampleCallback {
    type Vtable = IMFCaptureEngineOnSampleCallback_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1377110914, 43833, 17511, [152, 15, 228, 139, 240, 130, 46, 205]);
}
impl ::core::convert::From<IMFCaptureEngineOnSampleCallback> for ::windows::runtime::IUnknown {
    fn from(value: IMFCaptureEngineOnSampleCallback) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFCaptureEngineOnSampleCallback> for ::windows::runtime::IUnknown {
    fn from(value: &IMFCaptureEngineOnSampleCallback) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFCaptureEngineOnSampleCallback {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFCaptureEngineOnSampleCallback {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFCaptureEngineOnSampleCallback_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psample: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFCaptureEngineOnSampleCallback2(pub ::windows::runtime::IUnknown);
impl IMFCaptureEngineOnSampleCallback2 {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnSample<'a, Param0: ::windows::runtime::IntoParam<'a, IMFSample>>(&self, psample: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), psample.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnSynchronizedEvent<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaEvent>>(&self, pevent: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), pevent.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFCaptureEngineOnSampleCallback2 {
    type Vtable = IMFCaptureEngineOnSampleCallback2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3816615639, 13327, 17684, [159, 77, 156, 42, 224, 38, 16, 11]);
}
impl ::core::convert::From<IMFCaptureEngineOnSampleCallback2> for ::windows::runtime::IUnknown {
    fn from(value: IMFCaptureEngineOnSampleCallback2) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFCaptureEngineOnSampleCallback2> for ::windows::runtime::IUnknown {
    fn from(value: &IMFCaptureEngineOnSampleCallback2) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFCaptureEngineOnSampleCallback2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFCaptureEngineOnSampleCallback2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFCaptureEngineOnSampleCallback2> for IMFCaptureEngineOnSampleCallback {
    fn from(value: IMFCaptureEngineOnSampleCallback2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFCaptureEngineOnSampleCallback2> for IMFCaptureEngineOnSampleCallback {
    fn from(value: &IMFCaptureEngineOnSampleCallback2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFCaptureEngineOnSampleCallback> for IMFCaptureEngineOnSampleCallback2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFCaptureEngineOnSampleCallback> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFCaptureEngineOnSampleCallback> for &IMFCaptureEngineOnSampleCallback2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFCaptureEngineOnSampleCallback> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFCaptureEngineOnSampleCallback2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psample: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pevent: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFCapturePhotoConfirmation(pub ::windows::runtime::IUnknown);
impl IMFCapturePhotoConfirmation {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPhotoConfirmationCallback<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>>(&self, pnotificationcallback: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), pnotificationcallback.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPixelFormat<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::GUID>>(&self, subtype: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), subtype.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPixelFormat(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFCapturePhotoConfirmation {
    type Vtable = IMFCapturePhotoConfirmation_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(435586377, 51850, 18182, [164, 239, 72, 29, 188, 149, 225, 44]);
}
impl ::core::convert::From<IMFCapturePhotoConfirmation> for ::windows::runtime::IUnknown {
    fn from(value: IMFCapturePhotoConfirmation) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFCapturePhotoConfirmation> for ::windows::runtime::IUnknown {
    fn from(value: &IMFCapturePhotoConfirmation) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFCapturePhotoConfirmation {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFCapturePhotoConfirmation {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFCapturePhotoConfirmation_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pnotificationcallback: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, subtype: ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, subtype: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFCapturePhotoSink(pub ::windows::runtime::IUnknown);
impl IMFCapturePhotoSink {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetOutputMediaType(&self, dwsinkstreamindex: u32) -> ::windows::runtime::Result<IMFMediaType> {
        let mut result__: <IMFMediaType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwsinkstreamindex), &mut result__).from_abi::<IMFMediaType>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetService(&self, dwsinkstreamindex: u32, rguidservice: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwsinkstreamindex), ::core::mem::transmute(rguidservice), ::core::mem::transmute(riid), &mut result__).from_abi::<::windows::runtime::IUnknown>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AddStream<'a, Param1: ::windows::runtime::IntoParam<'a, IMFMediaType>, Param2: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, dwsourcestreamindex: u32, pmediatype: Param1, pattributes: Param2) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwsourcestreamindex), pmediatype.into_param().abi(), pattributes.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Prepare(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveAllStreams(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetOutputFileName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, filename: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), filename.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetSampleCallback<'a, Param0: ::windows::runtime::IntoParam<'a, IMFCaptureEngineOnSampleCallback>>(&self, pcallback: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), pcallback.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetOutputByteStream<'a, Param0: ::windows::runtime::IntoParam<'a, IMFByteStream>>(&self, pbytestream: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), pbytestream.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFCapturePhotoSink {
    type Vtable = IMFCapturePhotoSink_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3537124552, 18619, 19111, [149, 219, 16, 192, 105, 119, 231, 119]);
}
impl ::core::convert::From<IMFCapturePhotoSink> for ::windows::runtime::IUnknown {
    fn from(value: IMFCapturePhotoSink) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFCapturePhotoSink> for ::windows::runtime::IUnknown {
    fn from(value: &IMFCapturePhotoSink) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFCapturePhotoSink {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFCapturePhotoSink {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFCapturePhotoSink> for IMFCaptureSink {
    fn from(value: IMFCapturePhotoSink) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFCapturePhotoSink> for IMFCaptureSink {
    fn from(value: &IMFCapturePhotoSink) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFCaptureSink> for IMFCapturePhotoSink {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFCaptureSink> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFCaptureSink> for &IMFCapturePhotoSink {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFCaptureSink> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFCapturePhotoSink_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwsinkstreamindex: u32, ppmediatype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwsinkstreamindex: u32, rguidservice: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppunknown: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwsourcestreamindex: u32, pmediatype: ::windows::runtime::RawPtr, pattributes: ::windows::runtime::RawPtr, pdwsinkstreamindex: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, filename: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcallback: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbytestream: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFCapturePreviewSink(pub ::windows::runtime::IUnknown);
impl IMFCapturePreviewSink {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetOutputMediaType(&self, dwsinkstreamindex: u32) -> ::windows::runtime::Result<IMFMediaType> {
        let mut result__: <IMFMediaType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwsinkstreamindex), &mut result__).from_abi::<IMFMediaType>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetService(&self, dwsinkstreamindex: u32, rguidservice: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwsinkstreamindex), ::core::mem::transmute(rguidservice), ::core::mem::transmute(riid), &mut result__).from_abi::<::windows::runtime::IUnknown>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AddStream<'a, Param1: ::windows::runtime::IntoParam<'a, IMFMediaType>, Param2: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, dwsourcestreamindex: u32, pmediatype: Param1, pattributes: Param2) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwsourcestreamindex), pmediatype.into_param().abi(), pattributes.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Prepare(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveAllStreams(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetRenderHandle<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::HANDLE>>(&self, handle: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), handle.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetRenderSurface<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, psurface: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), psurface.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn UpdateVideo(&self, psrc: *const MFVideoNormalizedRect, pdst: *const super::super::Foundation::RECT, pborderclr: *const u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(psrc), ::core::mem::transmute(pdst), ::core::mem::transmute(pborderclr)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetSampleCallback<'a, Param1: ::windows::runtime::IntoParam<'a, IMFCaptureEngineOnSampleCallback>>(&self, dwstreamsinkindex: u32, pcallback: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamsinkindex), pcallback.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetMirrorState(&self) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetMirrorState<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, fmirrorstate: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), fmirrorstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetRotation(&self, dwstreamindex: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetRotation(&self, dwstreamindex: u32, dwrotationvalue: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), ::core::mem::transmute(dwrotationvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetCustomSink<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaSink>>(&self, pmediasink: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::core::mem::transmute_copy(self), pmediasink.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFCapturePreviewSink {
    type Vtable = IMFCapturePreviewSink_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1999924477, 23369, 19827, [172, 224, 91, 82, 168, 89, 242, 224]);
}
impl ::core::convert::From<IMFCapturePreviewSink> for ::windows::runtime::IUnknown {
    fn from(value: IMFCapturePreviewSink) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFCapturePreviewSink> for ::windows::runtime::IUnknown {
    fn from(value: &IMFCapturePreviewSink) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFCapturePreviewSink {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFCapturePreviewSink {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFCapturePreviewSink> for IMFCaptureSink {
    fn from(value: IMFCapturePreviewSink) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFCapturePreviewSink> for IMFCaptureSink {
    fn from(value: &IMFCapturePreviewSink) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFCaptureSink> for IMFCapturePreviewSink {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFCaptureSink> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFCaptureSink> for &IMFCapturePreviewSink {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFCaptureSink> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFCapturePreviewSink_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwsinkstreamindex: u32, ppmediatype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwsinkstreamindex: u32, rguidservice: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppunknown: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwsourcestreamindex: u32, pmediatype: ::windows::runtime::RawPtr, pattributes: ::windows::runtime::RawPtr, pdwsinkstreamindex: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: super::super::Foundation::HANDLE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psurface: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psrc: *const MFVideoNormalizedRect, pdst: *const super::super::Foundation::RECT, pborderclr: *const u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamsinkindex: u32, pcallback: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pfmirrorstate: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, fmirrorstate: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, pdwrotationvalue: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, dwrotationvalue: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pmediasink: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFCaptureRecordSink(pub ::windows::runtime::IUnknown);
impl IMFCaptureRecordSink {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetOutputMediaType(&self, dwsinkstreamindex: u32) -> ::windows::runtime::Result<IMFMediaType> {
        let mut result__: <IMFMediaType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwsinkstreamindex), &mut result__).from_abi::<IMFMediaType>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetService(&self, dwsinkstreamindex: u32, rguidservice: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwsinkstreamindex), ::core::mem::transmute(rguidservice), ::core::mem::transmute(riid), &mut result__).from_abi::<::windows::runtime::IUnknown>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AddStream<'a, Param1: ::windows::runtime::IntoParam<'a, IMFMediaType>, Param2: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, dwsourcestreamindex: u32, pmediatype: Param1, pattributes: Param2) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwsourcestreamindex), pmediatype.into_param().abi(), pattributes.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Prepare(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveAllStreams(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetOutputByteStream<'a, Param0: ::windows::runtime::IntoParam<'a, IMFByteStream>>(&self, pbytestream: Param0, guidcontainertype: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), pbytestream.into_param().abi(), ::core::mem::transmute(guidcontainertype)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetOutputFileName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, filename: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), filename.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetSampleCallback<'a, Param1: ::windows::runtime::IntoParam<'a, IMFCaptureEngineOnSampleCallback>>(&self, dwstreamsinkindex: u32, pcallback: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamsinkindex), pcallback.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetCustomSink<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaSink>>(&self, pmediasink: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), pmediasink.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetRotation(&self, dwstreamindex: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetRotation(&self, dwstreamindex: u32, dwrotationvalue: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), ::core::mem::transmute(dwrotationvalue)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFCaptureRecordSink {
    type Vtable = IMFCaptureRecordSink_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(857978202, 63786, 20450, [142, 220, 233, 191, 192, 99, 77, 119]);
}
impl ::core::convert::From<IMFCaptureRecordSink> for ::windows::runtime::IUnknown {
    fn from(value: IMFCaptureRecordSink) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFCaptureRecordSink> for ::windows::runtime::IUnknown {
    fn from(value: &IMFCaptureRecordSink) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFCaptureRecordSink {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFCaptureRecordSink {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFCaptureRecordSink> for IMFCaptureSink {
    fn from(value: IMFCaptureRecordSink) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFCaptureRecordSink> for IMFCaptureSink {
    fn from(value: &IMFCaptureRecordSink) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFCaptureSink> for IMFCaptureRecordSink {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFCaptureSink> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFCaptureSink> for &IMFCaptureRecordSink {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFCaptureSink> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFCaptureRecordSink_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwsinkstreamindex: u32, ppmediatype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwsinkstreamindex: u32, rguidservice: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppunknown: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwsourcestreamindex: u32, pmediatype: ::windows::runtime::RawPtr, pattributes: ::windows::runtime::RawPtr, pdwsinkstreamindex: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbytestream: ::windows::runtime::RawPtr, guidcontainertype: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, filename: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamsinkindex: u32, pcallback: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pmediasink: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, pdwrotationvalue: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, dwrotationvalue: u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFCaptureSink(pub ::windows::runtime::IUnknown);
impl IMFCaptureSink {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetOutputMediaType(&self, dwsinkstreamindex: u32) -> ::windows::runtime::Result<IMFMediaType> {
        let mut result__: <IMFMediaType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwsinkstreamindex), &mut result__).from_abi::<IMFMediaType>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetService(&self, dwsinkstreamindex: u32, rguidservice: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwsinkstreamindex), ::core::mem::transmute(rguidservice), ::core::mem::transmute(riid), &mut result__).from_abi::<::windows::runtime::IUnknown>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AddStream<'a, Param1: ::windows::runtime::IntoParam<'a, IMFMediaType>, Param2: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, dwsourcestreamindex: u32, pmediatype: Param1, pattributes: Param2) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwsourcestreamindex), pmediatype.into_param().abi(), pattributes.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Prepare(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveAllStreams(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFCaptureSink {
    type Vtable = IMFCaptureSink_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1926632283, 13801, 16684, [185, 38, 253, 82, 101, 242, 168, 133]);
}
impl ::core::convert::From<IMFCaptureSink> for ::windows::runtime::IUnknown {
    fn from(value: IMFCaptureSink) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFCaptureSink> for ::windows::runtime::IUnknown {
    fn from(value: &IMFCaptureSink) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFCaptureSink {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFCaptureSink {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFCaptureSink_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwsinkstreamindex: u32, ppmediatype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwsinkstreamindex: u32, rguidservice: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppunknown: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwsourcestreamindex: u32, pmediatype: ::windows::runtime::RawPtr, pattributes: ::windows::runtime::RawPtr, pdwsinkstreamindex: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFCaptureSink2(pub ::windows::runtime::IUnknown);
impl IMFCaptureSink2 {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetOutputMediaType(&self, dwsinkstreamindex: u32) -> ::windows::runtime::Result<IMFMediaType> {
        let mut result__: <IMFMediaType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwsinkstreamindex), &mut result__).from_abi::<IMFMediaType>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetService(&self, dwsinkstreamindex: u32, rguidservice: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwsinkstreamindex), ::core::mem::transmute(rguidservice), ::core::mem::transmute(riid), &mut result__).from_abi::<::windows::runtime::IUnknown>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AddStream<'a, Param1: ::windows::runtime::IntoParam<'a, IMFMediaType>, Param2: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, dwsourcestreamindex: u32, pmediatype: Param1, pattributes: Param2) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwsourcestreamindex), pmediatype.into_param().abi(), pattributes.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Prepare(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveAllStreams(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetOutputMediaType<'a, Param1: ::windows::runtime::IntoParam<'a, IMFMediaType>, Param2: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, dwstreamindex: u32, pmediatype: Param1, pencodingattributes: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), pmediatype.into_param().abi(), pencodingattributes.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFCaptureSink2 {
    type Vtable = IMFCaptureSink2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4192477598, 24983, 19294, [184, 136, 190, 227, 16, 171, 44, 89]);
}
impl ::core::convert::From<IMFCaptureSink2> for ::windows::runtime::IUnknown {
    fn from(value: IMFCaptureSink2) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFCaptureSink2> for ::windows::runtime::IUnknown {
    fn from(value: &IMFCaptureSink2) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFCaptureSink2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFCaptureSink2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFCaptureSink2> for IMFCaptureSink {
    fn from(value: IMFCaptureSink2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFCaptureSink2> for IMFCaptureSink {
    fn from(value: &IMFCaptureSink2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFCaptureSink> for IMFCaptureSink2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFCaptureSink> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFCaptureSink> for &IMFCaptureSink2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFCaptureSink> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFCaptureSink2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwsinkstreamindex: u32, ppmediatype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwsinkstreamindex: u32, rguidservice: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppunknown: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwsourcestreamindex: u32, pmediatype: ::windows::runtime::RawPtr, pattributes: ::windows::runtime::RawPtr, pdwsinkstreamindex: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, pmediatype: ::windows::runtime::RawPtr, pencodingattributes: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFCaptureSource(pub ::windows::runtime::IUnknown);
impl IMFCaptureSource {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCaptureDeviceSource(&self, mfcaptureenginedevicetype: MF_CAPTURE_ENGINE_DEVICE_TYPE) -> ::windows::runtime::Result<IMFMediaSource> {
        let mut result__: <IMFMediaSource as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(mfcaptureenginedevicetype), &mut result__).from_abi::<IMFMediaSource>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCaptureDeviceActivate(&self, mfcaptureenginedevicetype: MF_CAPTURE_ENGINE_DEVICE_TYPE) -> ::windows::runtime::Result<IMFActivate> {
        let mut result__: <IMFActivate as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(mfcaptureenginedevicetype), &mut result__).from_abi::<IMFActivate>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetService(&self, rguidservice: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(rguidservice), ::core::mem::transmute(riid), &mut result__).from_abi::<::windows::runtime::IUnknown>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AddEffect<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, dwsourcestreamindex: u32, punknown: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwsourcestreamindex), punknown.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveEffect<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, dwsourcestreamindex: u32, punknown: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwsourcestreamindex), punknown.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveAllEffects(&self, dwsourcestreamindex: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwsourcestreamindex)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetAvailableDeviceMediaType(&self, dwsourcestreamindex: u32, dwmediatypeindex: u32) -> ::windows::runtime::Result<IMFMediaType> {
        let mut result__: <IMFMediaType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwsourcestreamindex), ::core::mem::transmute(dwmediatypeindex), &mut result__).from_abi::<IMFMediaType>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetCurrentDeviceMediaType<'a, Param1: ::windows::runtime::IntoParam<'a, IMFMediaType>>(&self, dwsourcestreamindex: u32, pmediatype: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwsourcestreamindex), pmediatype.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCurrentDeviceMediaType(&self, dwsourcestreamindex: u32) -> ::windows::runtime::Result<IMFMediaType> {
        let mut result__: <IMFMediaType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwsourcestreamindex), &mut result__).from_abi::<IMFMediaType>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDeviceStreamCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDeviceStreamCategory(&self, dwsourcestreamindex: u32) -> ::windows::runtime::Result<MF_CAPTURE_ENGINE_STREAM_CATEGORY> {
        let mut result__: <MF_CAPTURE_ENGINE_STREAM_CATEGORY as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwsourcestreamindex), &mut result__).from_abi::<MF_CAPTURE_ENGINE_STREAM_CATEGORY>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetMirrorState(&self, dwstreamindex: u32) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetMirrorState<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, dwstreamindex: u32, fmirrorstate: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), fmirrorstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamIndexFromFriendlyName(&self, uifriendlyname: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).16)(::core::mem::transmute_copy(self), ::core::mem::transmute(uifriendlyname), &mut result__).from_abi::<u32>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFCaptureSource {
    type Vtable = IMFCaptureSource_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1134183080, 3372, 17669, [190, 131, 247, 155, 42, 5, 213, 196]);
}
impl ::core::convert::From<IMFCaptureSource> for ::windows::runtime::IUnknown {
    fn from(value: IMFCaptureSource) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFCaptureSource> for ::windows::runtime::IUnknown {
    fn from(value: &IMFCaptureSource) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFCaptureSource {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFCaptureSource {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFCaptureSource_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mfcaptureenginedevicetype: MF_CAPTURE_ENGINE_DEVICE_TYPE, ppmediasource: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mfcaptureenginedevicetype: MF_CAPTURE_ENGINE_DEVICE_TYPE, ppactivate: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, rguidservice: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppunknown: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwsourcestreamindex: u32, punknown: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwsourcestreamindex: u32, punknown: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwsourcestreamindex: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwsourcestreamindex: u32, dwmediatypeindex: u32, ppmediatype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwsourcestreamindex: u32, pmediatype: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwsourcestreamindex: u32, ppmediatype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwstreamcount: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwsourcestreamindex: u32, pstreamcategory: *mut MF_CAPTURE_ENGINE_STREAM_CATEGORY) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, pfmirrorstate: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, fmirrorstate: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, uifriendlyname: u32, pdwactualstreamindex: *mut u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFCdmSuspendNotify(pub ::windows::runtime::IUnknown);
impl IMFCdmSuspendNotify {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Begin(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn End(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFCdmSuspendNotify {
    type Vtable = IMFCdmSuspendNotify_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2052474322, 17341, 18429, [135, 183, 220, 210, 76, 199, 214, 146]);
}
impl ::core::convert::From<IMFCdmSuspendNotify> for ::windows::runtime::IUnknown {
    fn from(value: IMFCdmSuspendNotify) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFCdmSuspendNotify> for ::windows::runtime::IUnknown {
    fn from(value: &IMFCdmSuspendNotify) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFCdmSuspendNotify {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFCdmSuspendNotify {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFCdmSuspendNotify_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFClock(pub ::windows::runtime::IUnknown);
impl IMFClock {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetClockCharacteristics(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCorrelatedTime(&self, dwreserved: u32, pllclocktime: *mut i64, phnssystemtime: *mut i64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwreserved), ::core::mem::transmute(pllclocktime), ::core::mem::transmute(phnssystemtime)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetContinuityKey(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetState(&self, dwreserved: u32) -> ::windows::runtime::Result<MFCLOCK_STATE> {
        let mut result__: <MFCLOCK_STATE as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwreserved), &mut result__).from_abi::<MFCLOCK_STATE>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetProperties(&self) -> ::windows::runtime::Result<MFCLOCK_PROPERTIES> {
        let mut result__: <MFCLOCK_PROPERTIES as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MFCLOCK_PROPERTIES>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFClock {
    type Vtable = IMFClock_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(783411525, 6328, 16697, [155, 26, 213, 213, 132, 129, 133, 48]);
}
impl ::core::convert::From<IMFClock> for ::windows::runtime::IUnknown {
    fn from(value: IMFClock) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFClock> for ::windows::runtime::IUnknown {
    fn from(value: &IMFClock) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFClock {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFClock {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFClock_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwcharacteristics: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwreserved: u32, pllclocktime: *mut i64, phnssystemtime: *mut i64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwcontinuitykey: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwreserved: u32, peclockstate: *mut MFCLOCK_STATE) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pclockproperties: *mut MFCLOCK_PROPERTIES) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFClockConsumer(pub ::windows::runtime::IUnknown);
impl IMFClockConsumer {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPresentationClock<'a, Param0: ::windows::runtime::IntoParam<'a, IMFPresentationClock>>(&self, ppresentationclock: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ppresentationclock.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPresentationClock(&self) -> ::windows::runtime::Result<IMFPresentationClock> {
        let mut result__: <IMFPresentationClock as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFPresentationClock>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFClockConsumer {
    type Vtable = IMFClockConsumer_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1861396066, 18368, 18022, [177, 61, 203, 183, 23, 242, 250, 44]);
}
impl ::core::convert::From<IMFClockConsumer> for ::windows::runtime::IUnknown {
    fn from(value: IMFClockConsumer) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFClockConsumer> for ::windows::runtime::IUnknown {
    fn from(value: &IMFClockConsumer) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFClockConsumer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFClockConsumer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFClockConsumer_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppresentationclock: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pppresentationclock: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFClockStateSink(pub ::windows::runtime::IUnknown);
impl IMFClockStateSink {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnClockStart(&self, hnssystemtime: i64, llclockstartoffset: i64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(hnssystemtime), ::core::mem::transmute(llclockstartoffset)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnClockStop(&self, hnssystemtime: i64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(hnssystemtime)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnClockPause(&self, hnssystemtime: i64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(hnssystemtime)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnClockRestart(&self, hnssystemtime: i64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(hnssystemtime)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnClockSetRate(&self, hnssystemtime: i64, flrate: f32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(hnssystemtime), ::core::mem::transmute(flrate)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFClockStateSink {
    type Vtable = IMFClockStateSink_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4134104706, 29943, 20285, [161, 120, 138, 94, 9, 195, 101, 159]);
}
impl ::core::convert::From<IMFClockStateSink> for ::windows::runtime::IUnknown {
    fn from(value: IMFClockStateSink) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFClockStateSink> for ::windows::runtime::IUnknown {
    fn from(value: &IMFClockStateSink) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFClockStateSink {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFClockStateSink {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFClockStateSink_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hnssystemtime: i64, llclockstartoffset: i64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hnssystemtime: i64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hnssystemtime: i64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hnssystemtime: i64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hnssystemtime: i64, flrate: f32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFCollection(pub ::windows::runtime::IUnknown);
impl IMFCollection {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetElementCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetElement(&self, dwelementindex: u32) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwelementindex), &mut result__).from_abi::<::windows::runtime::IUnknown>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AddElement<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, punkelement: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), punkelement.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveElement(&self, dwelementindex: u32) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwelementindex), &mut result__).from_abi::<::windows::runtime::IUnknown>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn InsertElementAt<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, dwindex: u32, punknown: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwindex), punknown.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveAllElements(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFCollection {
    type Vtable = IMFCollection_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1539876715, 34458, 18083, [155, 3, 250, 33, 138, 102, 174, 190]);
}
impl ::core::convert::From<IMFCollection> for ::windows::runtime::IUnknown {
    fn from(value: IMFCollection) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFCollection> for ::windows::runtime::IUnknown {
    fn from(value: &IMFCollection) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFCollection {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFCollection {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFCollection_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcelements: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwelementindex: u32, ppunkelement: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, punkelement: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwelementindex: u32, ppunkelement: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwindex: u32, punknown: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFContentDecryptionModule(pub ::windows::runtime::IUnknown);
impl IMFContentDecryptionModule {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetContentEnabler<'a, Param0: ::windows::runtime::IntoParam<'a, IMFContentEnabler>, Param1: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, contentenabler: Param0, result: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), contentenabler.into_param().abi(), result.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSuspendNotify(&self) -> ::windows::runtime::Result<IMFCdmSuspendNotify> {
        let mut result__: <IMFCdmSuspendNotify as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFCdmSuspendNotify>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPMPHostApp<'a, Param0: ::windows::runtime::IntoParam<'a, IMFPMPHostApp>>(&self, pmphostapp: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), pmphostapp.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CreateSession<'a, Param1: ::windows::runtime::IntoParam<'a, IMFContentDecryptionModuleSessionCallbacks>>(&self, sessiontype: MF_MEDIAKEYSESSION_TYPE, callbacks: Param1) -> ::windows::runtime::Result<IMFContentDecryptionModuleSession> {
        let mut result__: <IMFContentDecryptionModuleSession as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(sessiontype), callbacks.into_param().abi(), &mut result__).from_abi::<IMFContentDecryptionModuleSession>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetServerCertificate(&self, certificate: *const u8, certificatesize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(certificate), ::core::mem::transmute(certificatesize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CreateTrustedInput(&self, contentinitdata: *const u8, contentinitdatasize: u32) -> ::windows::runtime::Result<IMFTrustedInput> {
        let mut result__: <IMFTrustedInput as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(contentinitdata), ::core::mem::transmute(contentinitdatasize), &mut result__).from_abi::<IMFTrustedInput>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetProtectionSystemIds(&self, systemids: *mut *mut ::windows::runtime::GUID, count: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(systemids), ::core::mem::transmute(count)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFContentDecryptionModule {
    type Vtable = IMFContentDecryptionModule_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2277415020, 4286, 18755, [191, 72, 75, 84, 206, 25, 131, 162]);
}
impl ::core::convert::From<IMFContentDecryptionModule> for ::windows::runtime::IUnknown {
    fn from(value: IMFContentDecryptionModule) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFContentDecryptionModule> for ::windows::runtime::IUnknown {
    fn from(value: &IMFContentDecryptionModule) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFContentDecryptionModule {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFContentDecryptionModule {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFContentDecryptionModule_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, contentenabler: ::windows::runtime::RawPtr, result: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, notify: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pmphostapp: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, sessiontype: MF_MEDIAKEYSESSION_TYPE, callbacks: ::windows::runtime::RawPtr, session: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, certificate: *const u8, certificatesize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, contentinitdata: *const u8, contentinitdatasize: u32, trustedinput: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, systemids: *mut *mut ::windows::runtime::GUID, count: *mut u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFContentDecryptionModuleAccess(pub ::windows::runtime::IUnknown);
impl IMFContentDecryptionModuleAccess {
    #[cfg(feature = "Win32_System_PropertiesSystem")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_System_PropertiesSystem`*"]
    pub unsafe fn CreateContentDecryptionModule<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::System::PropertiesSystem::IPropertyStore>>(&self, contentdecryptionmoduleproperties: Param0) -> ::windows::runtime::Result<IMFContentDecryptionModule> {
        let mut result__: <IMFContentDecryptionModule as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), contentdecryptionmoduleproperties.into_param().abi(), &mut result__).from_abi::<IMFContentDecryptionModule>(result__)
    }
    #[cfg(feature = "Win32_System_PropertiesSystem")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_System_PropertiesSystem`*"]
    pub unsafe fn GetConfiguration(&self) -> ::windows::runtime::Result<super::super::System::PropertiesSystem::IPropertyStore> {
        let mut result__: <super::super::System::PropertiesSystem::IPropertyStore as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::System::PropertiesSystem::IPropertyStore>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetKeySystem(&self) -> ::windows::runtime::Result<super::super::Foundation::PWSTR> {
        let mut result__: <super::super::Foundation::PWSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::PWSTR>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFContentDecryptionModuleAccess {
    type Vtable = IMFContentDecryptionModuleAccess_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2824065524, 58016, 17155, [158, 220, 241, 166, 142, 228, 49, 54]);
}
impl ::core::convert::From<IMFContentDecryptionModuleAccess> for ::windows::runtime::IUnknown {
    fn from(value: IMFContentDecryptionModuleAccess) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFContentDecryptionModuleAccess> for ::windows::runtime::IUnknown {
    fn from(value: &IMFContentDecryptionModuleAccess) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFContentDecryptionModuleAccess {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFContentDecryptionModuleAccess {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFContentDecryptionModuleAccess_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_System_PropertiesSystem")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, contentdecryptionmoduleproperties: ::windows::runtime::RawPtr, contentdecryptionmodule: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_PropertiesSystem"))] usize,
    #[cfg(feature = "Win32_System_PropertiesSystem")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, configuration: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_PropertiesSystem"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, keysystem: *mut super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFContentDecryptionModuleFactory(pub ::windows::runtime::IUnknown);
impl IMFContentDecryptionModuleFactory {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn IsTypeSupported<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, keysystem: Param0, contenttype: Param1) -> super::super::Foundation::BOOL {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), keysystem.into_param().abi(), contenttype.into_param().abi()))
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_PropertiesSystem"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_PropertiesSystem`*"]
    pub unsafe fn CreateContentDecryptionModuleAccess<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, keysystem: Param0, configurations: *const ::core::option::Option<super::super::System::PropertiesSystem::IPropertyStore>, numconfigurations: u32) -> ::windows::runtime::Result<IMFContentDecryptionModuleAccess> {
        let mut result__: <IMFContentDecryptionModuleAccess as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), keysystem.into_param().abi(), ::core::mem::transmute(configurations), ::core::mem::transmute(numconfigurations), &mut result__).from_abi::<IMFContentDecryptionModuleAccess>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFContentDecryptionModuleFactory {
    type Vtable = IMFContentDecryptionModuleFactory_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2103099158, 19643, 19976, [185, 119, 155, 165, 144, 73, 148, 62]);
}
impl ::core::convert::From<IMFContentDecryptionModuleFactory> for ::windows::runtime::IUnknown {
    fn from(value: IMFContentDecryptionModuleFactory) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFContentDecryptionModuleFactory> for ::windows::runtime::IUnknown {
    fn from(value: &IMFContentDecryptionModuleFactory) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFContentDecryptionModuleFactory {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFContentDecryptionModuleFactory {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFContentDecryptionModuleFactory_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, keysystem: super::super::Foundation::PWSTR, contenttype: super::super::Foundation::PWSTR) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_PropertiesSystem"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, keysystem: super::super::Foundation::PWSTR, configurations: *const ::windows::runtime::RawPtr, numconfigurations: u32, contentdecryptionmoduleaccess: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_PropertiesSystem")))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFContentDecryptionModuleSession(pub ::windows::runtime::IUnknown);
impl IMFContentDecryptionModuleSession {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetSessionId(&self) -> ::windows::runtime::Result<super::super::Foundation::PWSTR> {
        let mut result__: <super::super::Foundation::PWSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::PWSTR>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetExpiration(&self) -> ::windows::runtime::Result<f64> {
        let mut result__: <f64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<f64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetKeyStatuses(&self, keystatuses: *mut *mut MFMediaKeyStatus, numkeystatuses: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(keystatuses), ::core::mem::transmute(numkeystatuses)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn Load<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, sessionid: Param0) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), sessionid.into_param().abi(), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GenerateRequest<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, initdatatype: Param0, initdata: *const u8, initdatasize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), initdatatype.into_param().abi(), ::core::mem::transmute(initdata), ::core::mem::transmute(initdatasize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Update(&self, response: *const u8, responsesize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(response), ::core::mem::transmute(responsesize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Close(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Remove(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFContentDecryptionModuleSession {
    type Vtable = IMFContentDecryptionModuleSession_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1310932733, 7634, 18920, [181, 119, 214, 62, 238, 76, 13, 51]);
}
impl ::core::convert::From<IMFContentDecryptionModuleSession> for ::windows::runtime::IUnknown {
    fn from(value: IMFContentDecryptionModuleSession) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFContentDecryptionModuleSession> for ::windows::runtime::IUnknown {
    fn from(value: &IMFContentDecryptionModuleSession) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFContentDecryptionModuleSession {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFContentDecryptionModuleSession {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFContentDecryptionModuleSession_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, sessionid: *mut super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, expiration: *mut f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, keystatuses: *mut *mut MFMediaKeyStatus, numkeystatuses: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, sessionid: super::super::Foundation::PWSTR, loaded: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, initdatatype: super::super::Foundation::PWSTR, initdata: *const u8, initdatasize: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, response: *const u8, responsesize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFContentDecryptionModuleSessionCallbacks(pub ::windows::runtime::IUnknown);
impl IMFContentDecryptionModuleSessionCallbacks {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn KeyMessage<'a, Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, messagetype: MF_MEDIAKEYSESSION_MESSAGETYPE, message: *const u8, messagesize: u32, destinationurl: Param3) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(messagetype), ::core::mem::transmute(message), ::core::mem::transmute(messagesize), destinationurl.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn KeyStatusChanged(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFContentDecryptionModuleSessionCallbacks {
    type Vtable = IMFContentDecryptionModuleSessionCallbacks_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1066856000, 44417, 16534, [132, 112, 89, 164, 183, 112, 248, 154]);
}
impl ::core::convert::From<IMFContentDecryptionModuleSessionCallbacks> for ::windows::runtime::IUnknown {
    fn from(value: IMFContentDecryptionModuleSessionCallbacks) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFContentDecryptionModuleSessionCallbacks> for ::windows::runtime::IUnknown {
    fn from(value: &IMFContentDecryptionModuleSessionCallbacks) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFContentDecryptionModuleSessionCallbacks {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFContentDecryptionModuleSessionCallbacks {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFContentDecryptionModuleSessionCallbacks_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, messagetype: MF_MEDIAKEYSESSION_MESSAGETYPE, message: *const u8, messagesize: u32, destinationurl: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFContentDecryptorContext(pub ::windows::runtime::IUnknown);
impl IMFContentDecryptorContext {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn InitializeHardwareKey(&self, inputprivatedatabytecount: u32, inputprivatedata: *const ::core::ffi::c_void) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(inputprivatedatabytecount), ::core::mem::transmute(inputprivatedata), &mut result__).from_abi::<u64>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFContentDecryptorContext {
    type Vtable = IMFContentDecryptorContext_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2126819773, 17403, 18275, [133, 210, 100, 252, 181, 197, 244, 203]);
}
impl ::core::convert::From<IMFContentDecryptorContext> for ::windows::runtime::IUnknown {
    fn from(value: IMFContentDecryptorContext) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFContentDecryptorContext> for ::windows::runtime::IUnknown {
    fn from(value: &IMFContentDecryptorContext) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFContentDecryptorContext {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFContentDecryptorContext {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFContentDecryptorContext_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, inputprivatedatabytecount: u32, inputprivatedata: *const ::core::ffi::c_void, outputprivatedata: *mut u64) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFContentEnabler(pub ::windows::runtime::IUnknown);
impl IMFContentEnabler {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetEnableType(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetEnableURL(&self, ppwszurl: *mut super::super::Foundation::PWSTR, pcchurl: *mut u32, ptruststatus: *mut MF_URL_TRUST_STATUS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(ppwszurl), ::core::mem::transmute(pcchurl), ::core::mem::transmute(ptruststatus)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetEnableData(&self, ppbdata: *mut *mut u8, pcbdata: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(ppbdata), ::core::mem::transmute(pcbdata)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn IsAutomaticSupported(&self) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AutomaticEnable(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn MonitorEnable(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Cancel(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFContentEnabler {
    type Vtable = IMFContentEnabler_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3552898905, 18894, 17281, [144, 113, 213, 188, 208, 68, 199, 112]);
}
impl ::core::convert::From<IMFContentEnabler> for ::windows::runtime::IUnknown {
    fn from(value: IMFContentEnabler) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFContentEnabler> for ::windows::runtime::IUnknown {
    fn from(value: &IMFContentEnabler) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFContentEnabler {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFContentEnabler {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFContentEnabler_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ptype: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppwszurl: *mut super::super::Foundation::PWSTR, pcchurl: *mut u32, ptruststatus: *mut MF_URL_TRUST_STATUS) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppbdata: *mut *mut u8, pcbdata: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pfautomatic: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFContentProtectionDevice(pub ::windows::runtime::IUnknown);
impl IMFContentProtectionDevice {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn InvokeFunction(&self, functionid: u32, inputbufferbytecount: u32, inputbuffer: *const u8, outputbufferbytecount: *mut u32, outputbuffer: *mut u8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(functionid), ::core::mem::transmute(inputbufferbytecount), ::core::mem::transmute(inputbuffer), ::core::mem::transmute(outputbufferbytecount), ::core::mem::transmute(outputbuffer)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPrivateDataByteCount(&self, privateinputbytecount: *mut u32, privateoutputbytecount: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(privateinputbytecount), ::core::mem::transmute(privateoutputbytecount)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFContentProtectionDevice {
    type Vtable = IMFContentProtectionDevice_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3861213556, 41056, 19610, [160, 136, 59, 27, 71, 28, 173, 40]);
}
impl ::core::convert::From<IMFContentProtectionDevice> for ::windows::runtime::IUnknown {
    fn from(value: IMFContentProtectionDevice) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFContentProtectionDevice> for ::windows::runtime::IUnknown {
    fn from(value: &IMFContentProtectionDevice) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFContentProtectionDevice {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFContentProtectionDevice {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFContentProtectionDevice_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, functionid: u32, inputbufferbytecount: u32, inputbuffer: *const u8, outputbufferbytecount: *mut u32, outputbuffer: *mut u8) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, privateinputbytecount: *mut u32, privateoutputbytecount: *mut u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFContentProtectionManager(pub ::windows::runtime::IUnknown);
impl IMFContentProtectionManager {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BeginEnableContent<'a, Param0: ::windows::runtime::IntoParam<'a, IMFActivate>, Param1: ::windows::runtime::IntoParam<'a, IMFTopology>, Param2: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param3: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, penableractivate: Param0, ptopo: Param1, pcallback: Param2, punkstate: Param3) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), penableractivate.into_param().abi(), ptopo.into_param().abi(), pcallback.into_param().abi(), punkstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndEnableContent<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, presult: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), presult.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFContentProtectionManager {
    type Vtable = IMFContentProtectionManager_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2902008921, 27233, 17085, [181, 124, 180, 62, 81, 32, 60, 176]);
}
impl ::core::convert::From<IMFContentProtectionManager> for ::windows::runtime::IUnknown {
    fn from(value: IMFContentProtectionManager) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFContentProtectionManager> for ::windows::runtime::IUnknown {
    fn from(value: &IMFContentProtectionManager) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFContentProtectionManager {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFContentProtectionManager {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFContentProtectionManager_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, penableractivate: ::windows::runtime::RawPtr, ptopo: ::windows::runtime::RawPtr, pcallback: ::windows::runtime::RawPtr, punkstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presult: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFDLNASinkInit(pub ::windows::runtime::IUnknown);
impl IMFDLNASinkInit {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn Initialize<'a, Param0: ::windows::runtime::IntoParam<'a, IMFByteStream>, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, pbytestream: Param0, fpal: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), pbytestream.into_param().abi(), fpal.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFDLNASinkInit {
    type Vtable = IMFDLNASinkInit_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(201402265, 7009, 19472, [189, 169, 4, 68, 91, 229, 245, 97]);
}
impl ::core::convert::From<IMFDLNASinkInit> for ::windows::runtime::IUnknown {
    fn from(value: IMFDLNASinkInit) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFDLNASinkInit> for ::windows::runtime::IUnknown {
    fn from(value: &IMFDLNASinkInit) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFDLNASinkInit {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFDLNASinkInit {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFDLNASinkInit_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbytestream: ::windows::runtime::RawPtr, fpal: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFDRMNetHelper(pub ::windows::runtime::IUnknown);
impl IMFDRMNetHelper {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn ProcessLicenseRequest(&self, plicenserequest: *const u8, cblicenserequest: u32, pplicenseresponse: *mut *mut u8, pcblicenseresponse: *mut u32, pbstrkid: *mut super::super::Foundation::BSTR) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(plicenserequest), ::core::mem::transmute(cblicenserequest), ::core::mem::transmute(pplicenseresponse), ::core::mem::transmute(pcblicenseresponse), ::core::mem::transmute(pbstrkid)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetChainedLicenseResponse(&self, pplicenseresponse: *mut *mut u8, pcblicenseresponse: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(pplicenseresponse), ::core::mem::transmute(pcblicenseresponse)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFDRMNetHelper {
    type Vtable = IMFDRMNetHelper_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1025503466, 26522, 16784, [141, 70, 127, 166, 158, 140, 126, 21]);
}
impl ::core::convert::From<IMFDRMNetHelper> for ::windows::runtime::IUnknown {
    fn from(value: IMFDRMNetHelper) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFDRMNetHelper> for ::windows::runtime::IUnknown {
    fn from(value: &IMFDRMNetHelper) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFDRMNetHelper {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFDRMNetHelper {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFDRMNetHelper_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, plicenserequest: *const u8, cblicenserequest: u32, pplicenseresponse: *mut *mut u8, pcblicenseresponse: *mut u32, pbstrkid: *mut ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pplicenseresponse: *mut *mut u8, pcblicenseresponse: *mut u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFDXGIBuffer(pub ::windows::runtime::IUnknown);
impl IMFDXGIBuffer {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetResource(&self, riid: *const ::windows::runtime::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(riid), ::core::mem::transmute(ppvobject)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSubresourceIndex(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUnknown(&self, guid: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), ::core::mem::transmute(riid), ::core::mem::transmute(ppvobject)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUnknown<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guid: *const ::windows::runtime::GUID, punkdata: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(guid), punkdata.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFDXGIBuffer {
    type Vtable = IMFDXGIBuffer_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3877063930, 7326, 18609, [136, 102, 98, 98, 38, 191, 194, 88]);
}
impl ::core::convert::From<IMFDXGIBuffer> for ::windows::runtime::IUnknown {
    fn from(value: IMFDXGIBuffer) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFDXGIBuffer> for ::windows::runtime::IUnknown {
    fn from(value: &IMFDXGIBuffer) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFDXGIBuffer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFDXGIBuffer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFDXGIBuffer_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pusubresource: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, punkdata: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFDXGIDeviceManager(pub ::windows::runtime::IUnknown);
impl IMFDXGIDeviceManager {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn CloseDeviceHandle<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::HANDLE>>(&self, hdevice: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), hdevice.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetVideoService<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::HANDLE>>(&self, hdevice: Param0, riid: *const ::windows::runtime::GUID, ppservice: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), hdevice.into_param().abi(), ::core::mem::transmute(riid), ::core::mem::transmute(ppservice)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn LockDevice<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::HANDLE>, Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, hdevice: Param0, riid: *const ::windows::runtime::GUID, ppunkdevice: *mut *mut ::core::ffi::c_void, fblock: Param3) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), hdevice.into_param().abi(), ::core::mem::transmute(riid), ::core::mem::transmute(ppunkdevice), fblock.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn OpenDeviceHandle(&self) -> ::windows::runtime::Result<super::super::Foundation::HANDLE> {
        let mut result__: <super::super::Foundation::HANDLE as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::HANDLE>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ResetDevice<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, punkdevice: Param0, resettoken: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), punkdevice.into_param().abi(), ::core::mem::transmute(resettoken)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn TestDevice<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::HANDLE>>(&self, hdevice: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), hdevice.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn UnlockDevice<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, hdevice: Param0, fsavestate: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), hdevice.into_param().abi(), fsavestate.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFDXGIDeviceManager {
    type Vtable = IMFDXGIDeviceManager_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3948100957, 11702, 16632, [151, 169, 73, 70, 146, 1, 79, 7]);
}
impl ::core::convert::From<IMFDXGIDeviceManager> for ::windows::runtime::IUnknown {
    fn from(value: IMFDXGIDeviceManager) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFDXGIDeviceManager> for ::windows::runtime::IUnknown {
    fn from(value: &IMFDXGIDeviceManager) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFDXGIDeviceManager {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFDXGIDeviceManager {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFDXGIDeviceManager_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hdevice: super::super::Foundation::HANDLE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hdevice: super::super::Foundation::HANDLE, riid: *const ::windows::runtime::GUID, ppservice: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hdevice: super::super::Foundation::HANDLE, riid: *const ::windows::runtime::GUID, ppunkdevice: *mut *mut ::core::ffi::c_void, fblock: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, phdevice: *mut super::super::Foundation::HANDLE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, punkdevice: ::windows::runtime::RawPtr, resettoken: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hdevice: super::super::Foundation::HANDLE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hdevice: super::super::Foundation::HANDLE, fsavestate: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFDXGIDeviceManagerSource(pub ::windows::runtime::IUnknown);
impl IMFDXGIDeviceManagerSource {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetManager(&self) -> ::windows::runtime::Result<IMFDXGIDeviceManager> {
        let mut result__: <IMFDXGIDeviceManager as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFDXGIDeviceManager>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFDXGIDeviceManagerSource {
    type Vtable = IMFDXGIDeviceManagerSource_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(549193547, 31373, 17929, [140, 59, 100, 160, 163, 181, 215, 206]);
}
impl ::core::convert::From<IMFDXGIDeviceManagerSource> for ::windows::runtime::IUnknown {
    fn from(value: IMFDXGIDeviceManagerSource) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFDXGIDeviceManagerSource> for ::windows::runtime::IUnknown {
    fn from(value: &IMFDXGIDeviceManagerSource) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFDXGIDeviceManagerSource {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFDXGIDeviceManagerSource {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFDXGIDeviceManagerSource_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppmanager: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFDesiredSample(pub ::windows::runtime::IUnknown);
impl IMFDesiredSample {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDesiredSampleTimeAndDuration(&self, phnssampletime: *mut i64, phnssampleduration: *mut i64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(phnssampletime), ::core::mem::transmute(phnssampleduration)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetDesiredSampleTimeAndDuration(&self, hnssampletime: i64, hnssampleduration: i64) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(hnssampletime), ::core::mem::transmute(hnssampleduration)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Clear(&self) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self)))
    }
}
unsafe impl ::windows::runtime::Interface for IMFDesiredSample {
    type Vtable = IMFDesiredSample_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1455592656, 30014, 16992, [141, 97, 163, 216, 130, 11, 29, 84]);
}
impl ::core::convert::From<IMFDesiredSample> for ::windows::runtime::IUnknown {
    fn from(value: IMFDesiredSample) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFDesiredSample> for ::windows::runtime::IUnknown {
    fn from(value: &IMFDesiredSample) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFDesiredSample {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFDesiredSample {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFDesiredSample_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, phnssampletime: *mut i64, phnssampleduration: *mut i64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hnssampletime: i64, hnssampleduration: i64),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFExtendedCameraControl(pub ::windows::runtime::IUnknown);
impl IMFExtendedCameraControl {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCapabilities(&self) -> u64 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetFlags(&self, ulflags: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(ulflags)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetFlags(&self) -> u64 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn LockPayload(&self, pppayload: *mut *mut u8, pulpayload: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(pppayload), ::core::mem::transmute(pulpayload)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn UnlockPayload(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CommitSettings(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFExtendedCameraControl {
    type Vtable = IMFExtendedCameraControl_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(954414368, 64673, 18501, [162, 122, 104, 183, 198, 171, 55, 137]);
}
impl ::core::convert::From<IMFExtendedCameraControl> for ::windows::runtime::IUnknown {
    fn from(value: IMFExtendedCameraControl) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFExtendedCameraControl> for ::windows::runtime::IUnknown {
    fn from(value: &IMFExtendedCameraControl) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFExtendedCameraControl {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFExtendedCameraControl {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFExtendedCameraControl_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u64,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ulflags: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u64,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pppayload: *mut *mut u8, pulpayload: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFExtendedCameraController(pub ::windows::runtime::IUnknown);
impl IMFExtendedCameraController {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetExtendedCameraControl(&self, dwstreamindex: u32, ulpropertyid: u32) -> ::windows::runtime::Result<IMFExtendedCameraControl> {
        let mut result__: <IMFExtendedCameraControl as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), ::core::mem::transmute(ulpropertyid), &mut result__).from_abi::<IMFExtendedCameraControl>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFExtendedCameraController {
    type Vtable = IMFExtendedCameraController_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3105800174, 51715, 19188, [138, 130, 163, 23, 82, 244, 160, 252]);
}
impl ::core::convert::From<IMFExtendedCameraController> for ::windows::runtime::IUnknown {
    fn from(value: IMFExtendedCameraController) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFExtendedCameraController> for ::windows::runtime::IUnknown {
    fn from(value: &IMFExtendedCameraController) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFExtendedCameraController {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFExtendedCameraController {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFExtendedCameraController_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, ulpropertyid: u32, ppcontrol: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFExtendedCameraIntrinsicModel(pub ::windows::runtime::IUnknown);
impl IMFExtendedCameraIntrinsicModel {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetModel(&self) -> ::windows::runtime::Result<MFExtendedCameraIntrinsic_IntrinsicModel> {
        let mut result__: <MFExtendedCameraIntrinsic_IntrinsicModel as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MFExtendedCameraIntrinsic_IntrinsicModel>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetModel(&self, pintrinsicmodel: *const MFExtendedCameraIntrinsic_IntrinsicModel) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(pintrinsicmodel)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDistortionModelType(&self) -> ::windows::runtime::Result<MFCameraIntrinsic_DistortionModelType> {
        let mut result__: <MFCameraIntrinsic_DistortionModelType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MFCameraIntrinsic_DistortionModelType>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFExtendedCameraIntrinsicModel {
    type Vtable = IMFExtendedCameraIntrinsicModel_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1549360740, 17968, 16945, [133, 90, 18, 132, 47, 115, 50, 69]);
}
impl ::core::convert::From<IMFExtendedCameraIntrinsicModel> for ::windows::runtime::IUnknown {
    fn from(value: IMFExtendedCameraIntrinsicModel) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFExtendedCameraIntrinsicModel> for ::windows::runtime::IUnknown {
    fn from(value: &IMFExtendedCameraIntrinsicModel) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFExtendedCameraIntrinsicModel {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFExtendedCameraIntrinsicModel {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFExtendedCameraIntrinsicModel_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pintrinsicmodel: *mut MFExtendedCameraIntrinsic_IntrinsicModel) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pintrinsicmodel: *const MFExtendedCameraIntrinsic_IntrinsicModel) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdistortionmodeltype: *mut MFCameraIntrinsic_DistortionModelType) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFExtendedCameraIntrinsics(pub ::windows::runtime::IUnknown);
impl IMFExtendedCameraIntrinsics {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn InitializeFromBuffer(&self, pbbuffer: *const u8, dwbuffersize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(pbbuffer), ::core::mem::transmute(dwbuffersize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBufferSize(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SerializeToBuffer(&self, pbbuffer: *mut u8, pdwbuffersize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(pbbuffer), ::core::mem::transmute(pdwbuffersize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetIntrinsicModelCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetIntrinsicModelByIndex(&self, dwindex: u32) -> ::windows::runtime::Result<IMFExtendedCameraIntrinsicModel> {
        let mut result__: <IMFExtendedCameraIntrinsicModel as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwindex), &mut result__).from_abi::<IMFExtendedCameraIntrinsicModel>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AddIntrinsicModel<'a, Param0: ::windows::runtime::IntoParam<'a, IMFExtendedCameraIntrinsicModel>>(&self, pintrinsicmodel: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), pintrinsicmodel.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFExtendedCameraIntrinsics {
    type Vtable = IMFExtendedCameraIntrinsics_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1753181612, 27015, 18256, [161, 106, 115, 77, 30, 122, 16, 254]);
}
impl ::core::convert::From<IMFExtendedCameraIntrinsics> for ::windows::runtime::IUnknown {
    fn from(value: IMFExtendedCameraIntrinsics) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFExtendedCameraIntrinsics> for ::windows::runtime::IUnknown {
    fn from(value: &IMFExtendedCameraIntrinsics) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFExtendedCameraIntrinsics {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFExtendedCameraIntrinsics {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFExtendedCameraIntrinsics_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbbuffer: *const u8, dwbuffersize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwbuffersize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbbuffer: *mut u8, pdwbuffersize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwcount: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwindex: u32, ppintrinsicmodel: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pintrinsicmodel: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFExtendedCameraIntrinsicsDistortionModel6KT(pub ::windows::runtime::IUnknown);
impl IMFExtendedCameraIntrinsicsDistortionModel6KT {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDistortionModel(&self) -> ::windows::runtime::Result<MFCameraIntrinsic_DistortionModel6KT> {
        let mut result__: <MFCameraIntrinsic_DistortionModel6KT as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MFCameraIntrinsic_DistortionModel6KT>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetDistortionModel(&self, pdistortionmodel: *const MFCameraIntrinsic_DistortionModel6KT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdistortionmodel)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFExtendedCameraIntrinsicsDistortionModel6KT {
    type Vtable = IMFExtendedCameraIntrinsicsDistortionModel6KT_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1958896955, 24405, 20145, [159, 15, 24, 184, 246, 139, 125, 61]);
}
impl ::core::convert::From<IMFExtendedCameraIntrinsicsDistortionModel6KT> for ::windows::runtime::IUnknown {
    fn from(value: IMFExtendedCameraIntrinsicsDistortionModel6KT) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFExtendedCameraIntrinsicsDistortionModel6KT> for ::windows::runtime::IUnknown {
    fn from(value: &IMFExtendedCameraIntrinsicsDistortionModel6KT) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFExtendedCameraIntrinsicsDistortionModel6KT {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFExtendedCameraIntrinsicsDistortionModel6KT {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFExtendedCameraIntrinsicsDistortionModel6KT_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdistortionmodel: *mut MFCameraIntrinsic_DistortionModel6KT) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdistortionmodel: *const MFCameraIntrinsic_DistortionModel6KT) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFExtendedCameraIntrinsicsDistortionModelArcTan(pub ::windows::runtime::IUnknown);
impl IMFExtendedCameraIntrinsicsDistortionModelArcTan {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDistortionModel(&self) -> ::windows::runtime::Result<MFCameraIntrinsic_DistortionModelArcTan> {
        let mut result__: <MFCameraIntrinsic_DistortionModelArcTan as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MFCameraIntrinsic_DistortionModelArcTan>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetDistortionModel(&self, pdistortionmodel: *const MFCameraIntrinsic_DistortionModelArcTan) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdistortionmodel)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFExtendedCameraIntrinsicsDistortionModelArcTan {
    type Vtable = IMFExtendedCameraIntrinsicsDistortionModelArcTan_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2167234453, 46450, 17884, [186, 252, 174, 36, 25, 157, 221, 168]);
}
impl ::core::convert::From<IMFExtendedCameraIntrinsicsDistortionModelArcTan> for ::windows::runtime::IUnknown {
    fn from(value: IMFExtendedCameraIntrinsicsDistortionModelArcTan) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFExtendedCameraIntrinsicsDistortionModelArcTan> for ::windows::runtime::IUnknown {
    fn from(value: &IMFExtendedCameraIntrinsicsDistortionModelArcTan) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFExtendedCameraIntrinsicsDistortionModelArcTan {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFExtendedCameraIntrinsicsDistortionModelArcTan {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFExtendedCameraIntrinsicsDistortionModelArcTan_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdistortionmodel: *mut MFCameraIntrinsic_DistortionModelArcTan) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdistortionmodel: *const MFCameraIntrinsic_DistortionModelArcTan) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFExtendedDRMTypeSupport(pub ::windows::runtime::IUnknown);
impl IMFExtendedDRMTypeSupport {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn IsTypeSupportedEx<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>>(&self, r#type: Param0, keysystem: Param1) -> ::windows::runtime::Result<MF_MEDIA_ENGINE_CANPLAY> {
        let mut result__: <MF_MEDIA_ENGINE_CANPLAY as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), r#type.into_param().abi(), keysystem.into_param().abi(), &mut result__).from_abi::<MF_MEDIA_ENGINE_CANPLAY>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFExtendedDRMTypeSupport {
    type Vtable = IMFExtendedDRMTypeSupport_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(858703202, 14168, 18061, [167, 132, 227, 143, 35, 85, 33, 40]);
}
impl ::core::convert::From<IMFExtendedDRMTypeSupport> for ::windows::runtime::IUnknown {
    fn from(value: IMFExtendedDRMTypeSupport) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFExtendedDRMTypeSupport> for ::windows::runtime::IUnknown {
    fn from(value: &IMFExtendedDRMTypeSupport) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFExtendedDRMTypeSupport {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFExtendedDRMTypeSupport {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFExtendedDRMTypeSupport_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, keysystem: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, panswer: *mut MF_MEDIA_ENGINE_CANPLAY) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFFieldOfUseMFTUnlock(pub ::windows::runtime::IUnknown);
impl IMFFieldOfUseMFTUnlock {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Unlock<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, punkmft: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), punkmft.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFFieldOfUseMFTUnlock {
    type Vtable = IMFFieldOfUseMFTUnlock_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1351512531, 60518, 20419, [135, 117, 180, 185, 237, 107, 168, 71]);
}
impl ::core::convert::From<IMFFieldOfUseMFTUnlock> for ::windows::runtime::IUnknown {
    fn from(value: IMFFieldOfUseMFTUnlock) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFFieldOfUseMFTUnlock> for ::windows::runtime::IUnknown {
    fn from(value: &IMFFieldOfUseMFTUnlock) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFFieldOfUseMFTUnlock {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFFieldOfUseMFTUnlock {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFFieldOfUseMFTUnlock_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, punkmft: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFFinalizableMediaSink(pub ::windows::runtime::IUnknown);
impl IMFFinalizableMediaSink {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCharacteristics(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AddStreamSink<'a, Param1: ::windows::runtime::IntoParam<'a, IMFMediaType>>(&self, dwstreamsinkidentifier: u32, pmediatype: Param1) -> ::windows::runtime::Result<IMFStreamSink> {
        let mut result__: <IMFStreamSink as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamsinkidentifier), pmediatype.into_param().abi(), &mut result__).from_abi::<IMFStreamSink>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveStreamSink(&self, dwstreamsinkidentifier: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamsinkidentifier)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamSinkCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamSinkByIndex(&self, dwindex: u32) -> ::windows::runtime::Result<IMFStreamSink> {
        let mut result__: <IMFStreamSink as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwindex), &mut result__).from_abi::<IMFStreamSink>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamSinkById(&self, dwstreamsinkidentifier: u32) -> ::windows::runtime::Result<IMFStreamSink> {
        let mut result__: <IMFStreamSink as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamsinkidentifier), &mut result__).from_abi::<IMFStreamSink>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPresentationClock<'a, Param0: ::windows::runtime::IntoParam<'a, IMFPresentationClock>>(&self, ppresentationclock: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ppresentationclock.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPresentationClock(&self) -> ::windows::runtime::Result<IMFPresentationClock> {
        let mut result__: <IMFPresentationClock as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFPresentationClock>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Shutdown(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BeginFinalize<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, pcallback: Param0, punkstate: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), pcallback.into_param().abi(), punkstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndFinalize<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, presult: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), presult.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFFinalizableMediaSink {
    type Vtable = IMFFinalizableMediaSink_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3941381962, 39504, 17102, [149, 65, 106, 127, 87, 170, 74, 215]);
}
impl ::core::convert::From<IMFFinalizableMediaSink> for ::windows::runtime::IUnknown {
    fn from(value: IMFFinalizableMediaSink) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFFinalizableMediaSink> for ::windows::runtime::IUnknown {
    fn from(value: &IMFFinalizableMediaSink) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFFinalizableMediaSink {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFFinalizableMediaSink {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFFinalizableMediaSink> for IMFMediaSink {
    fn from(value: IMFFinalizableMediaSink) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFFinalizableMediaSink> for IMFMediaSink {
    fn from(value: &IMFFinalizableMediaSink) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaSink> for IMFFinalizableMediaSink {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaSink> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaSink> for &IMFFinalizableMediaSink {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaSink> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFFinalizableMediaSink_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwcharacteristics: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamsinkidentifier: u32, pmediatype: ::windows::runtime::RawPtr, ppstreamsink: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamsinkidentifier: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcstreamsinkcount: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwindex: u32, ppstreamsink: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamsinkidentifier: u32, ppstreamsink: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppresentationclock: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pppresentationclock: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcallback: ::windows::runtime::RawPtr, punkstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presult: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFGetService(pub ::windows::runtime::IUnknown);
impl IMFGetService {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetService<T: ::windows::runtime::Interface>(&self, guidservice: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidservice), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFGetService {
    type Vtable = IMFGetService_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4204345480, 17283, 16730, [169, 48, 221, 71, 42, 140, 246, 247]);
}
impl ::core::convert::From<IMFGetService> for ::windows::runtime::IUnknown {
    fn from(value: IMFGetService) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFGetService> for ::windows::runtime::IUnknown {
    fn from(value: &IMFGetService) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFGetService {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFGetService {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFGetService_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidservice: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFHDCPStatus(pub ::windows::runtime::IUnknown);
impl IMFHDCPStatus {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn Query(&self, pstatus: *mut MF_HDCP_STATUS, pfstatus: *mut super::super::Foundation::BOOL) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(pstatus), ::core::mem::transmute(pfstatus)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Set(&self, status: MF_HDCP_STATUS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(status)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFHDCPStatus {
    type Vtable = IMFHDCPStatus_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3728740180, 23537, 16591, [137, 100, 11, 234, 19, 107, 30, 61]);
}
impl ::core::convert::From<IMFHDCPStatus> for ::windows::runtime::IUnknown {
    fn from(value: IMFHDCPStatus) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFHDCPStatus> for ::windows::runtime::IUnknown {
    fn from(value: &IMFHDCPStatus) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFHDCPStatus {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFHDCPStatus {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFHDCPStatus_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstatus: *mut MF_HDCP_STATUS, pfstatus: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, status: MF_HDCP_STATUS) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFHttpDownloadRequest(pub ::windows::runtime::IUnknown);
impl IMFHttpDownloadRequest {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn AddHeader<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, szheader: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), szheader.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BeginSendRequest<'a, Param2: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param3: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, pbpayload: *const u8, cbpayload: u32, pcallback: Param2, punkstate: Param3) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(pbpayload), ::core::mem::transmute(cbpayload), pcallback.into_param().abi(), punkstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndSendRequest<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, presult: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), presult.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BeginReceiveResponse<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, pcallback: Param0, punkstate: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), pcallback.into_param().abi(), punkstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndReceiveResponse<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, presult: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), presult.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BeginReadPayload<'a, Param2: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param3: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, pb: *mut u8, cb: u32, pcallback: Param2, punkstate: Param3) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(pb), ::core::mem::transmute(cb), pcallback.into_param().abi(), punkstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndReadPayload<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, presult: Param0, pqwoffset: *mut u64, pcbread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), presult.into_param().abi(), ::core::mem::transmute(pqwoffset), ::core::mem::transmute(pcbread)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn QueryHeader<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, szheadername: Param0, dwindex: u32) -> ::windows::runtime::Result<super::super::Foundation::PWSTR> {
        let mut result__: <super::super::Foundation::PWSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), szheadername.into_param().abi(), ::core::mem::transmute(dwindex), &mut result__).from_abi::<super::super::Foundation::PWSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetURL(&self) -> ::windows::runtime::Result<super::super::Foundation::PWSTR> {
        let mut result__: <super::super::Foundation::PWSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::PWSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn HasNullSourceOrigin(&self) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetTimeSeekResult(&self, pqwstarttime: *mut u64, pqwstoptime: *mut u64, pqwduration: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), ::core::mem::transmute(pqwstarttime), ::core::mem::transmute(pqwstoptime), ::core::mem::transmute(pqwduration)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetHttpStatus(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetAtEndOfPayload(&self) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetTotalLength(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).16)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetRangeEndOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Close(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFHttpDownloadRequest {
    type Vtable = IMFHttpDownloadRequest_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4151967199, 9959, 17008, [138, 139, 185, 131, 209, 133, 157, 224]);
}
impl ::core::convert::From<IMFHttpDownloadRequest> for ::windows::runtime::IUnknown {
    fn from(value: IMFHttpDownloadRequest) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFHttpDownloadRequest> for ::windows::runtime::IUnknown {
    fn from(value: &IMFHttpDownloadRequest) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFHttpDownloadRequest {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFHttpDownloadRequest {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFHttpDownloadRequest_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, szheader: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbpayload: *const u8, cbpayload: u32, pcallback: ::windows::runtime::RawPtr, punkstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presult: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcallback: ::windows::runtime::RawPtr, punkstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presult: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pb: *mut u8, cb: u32, pcallback: ::windows::runtime::RawPtr, punkstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presult: ::windows::runtime::RawPtr, pqwoffset: *mut u64, pcbread: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, szheadername: super::super::Foundation::PWSTR, dwindex: u32, ppszheadervalue: *mut super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppszurl: *mut super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pfnullsourceorigin: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pqwstarttime: *mut u64, pqwstoptime: *mut u64, pqwduration: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwhttpstatus: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pfatendofpayload: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pqwtotallength: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pqwrangeend: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFHttpDownloadSession(pub ::windows::runtime::IUnknown);
impl IMFHttpDownloadSession {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetServer<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, szservername: Param0, nport: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), szservername.into_param().abi(), ::core::mem::transmute(nport)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn CreateRequest<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>, Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>, Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(
        &self,
        szobjectname: Param0,
        fbypassproxycache: Param1,
        fsecure: Param2,
        szverb: Param3,
        szreferrer: Param4,
    ) -> ::windows::runtime::Result<IMFHttpDownloadRequest> {
        let mut result__: <IMFHttpDownloadRequest as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), szobjectname.into_param().abi(), fbypassproxycache.into_param().abi(), fsecure.into_param().abi(), szverb.into_param().abi(), szreferrer.into_param().abi(), &mut result__).from_abi::<IMFHttpDownloadRequest>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Close(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFHttpDownloadSession {
    type Vtable = IMFHttpDownloadSession_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1912248876, 21454, 18018, [161, 50, 26, 126, 140, 191, 98, 219]);
}
impl ::core::convert::From<IMFHttpDownloadSession> for ::windows::runtime::IUnknown {
    fn from(value: IMFHttpDownloadSession) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFHttpDownloadSession> for ::windows::runtime::IUnknown {
    fn from(value: &IMFHttpDownloadSession) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFHttpDownloadSession {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFHttpDownloadSession {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFHttpDownloadSession_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, szservername: super::super::Foundation::PWSTR, nport: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, szobjectname: super::super::Foundation::PWSTR, fbypassproxycache: super::super::Foundation::BOOL, fsecure: super::super::Foundation::BOOL, szverb: super::super::Foundation::PWSTR, szreferrer: super::super::Foundation::PWSTR, pprequest: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFHttpDownloadSessionProvider(pub ::windows::runtime::IUnknown);
impl IMFHttpDownloadSessionProvider {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn CreateHttpDownloadSession<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, wszscheme: Param0) -> ::windows::runtime::Result<IMFHttpDownloadSession> {
        let mut result__: <IMFHttpDownloadSession as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), wszscheme.into_param().abi(), &mut result__).from_abi::<IMFHttpDownloadSession>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFHttpDownloadSessionProvider {
    type Vtable = IMFHttpDownloadSessionProvider_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(458028217, 14870, 16661, [131, 157, 3, 204, 92, 153, 223, 1]);
}
impl ::core::convert::From<IMFHttpDownloadSessionProvider> for ::windows::runtime::IUnknown {
    fn from(value: IMFHttpDownloadSessionProvider) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFHttpDownloadSessionProvider> for ::windows::runtime::IUnknown {
    fn from(value: &IMFHttpDownloadSessionProvider) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFHttpDownloadSessionProvider {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFHttpDownloadSessionProvider {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFHttpDownloadSessionProvider_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, wszscheme: super::super::Foundation::PWSTR, ppdownloadsession: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFImageSharingEngine(pub ::windows::runtime::IUnknown);
impl IMFImageSharingEngine {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetSource<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, pstream: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), pstream.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetDevice(&self) -> ::windows::runtime::Result<DEVICE_INFO> {
        let mut result__: <DEVICE_INFO as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<DEVICE_INFO>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Shutdown(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFImageSharingEngine {
    type Vtable = IMFImageSharingEngine_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3483414158, 32284, 17618, [174, 104, 252, 76, 20, 138, 99, 84]);
}
impl ::core::convert::From<IMFImageSharingEngine> for ::windows::runtime::IUnknown {
    fn from(value: IMFImageSharingEngine) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFImageSharingEngine> for ::windows::runtime::IUnknown {
    fn from(value: &IMFImageSharingEngine) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFImageSharingEngine {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFImageSharingEngine {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFImageSharingEngine_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstream: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdevice: *mut ::core::mem::ManuallyDrop<DEVICE_INFO>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFImageSharingEngineClassFactory(pub ::windows::runtime::IUnknown);
impl IMFImageSharingEngineClassFactory {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn CreateInstanceFromUDN<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>>(&self, puniquedevicename: Param0) -> ::windows::runtime::Result<IMFImageSharingEngine> {
        let mut result__: <IMFImageSharingEngine as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), puniquedevicename.into_param().abi(), &mut result__).from_abi::<IMFImageSharingEngine>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFImageSharingEngineClassFactory {
    type Vtable = IMFImageSharingEngineClassFactory_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(533026599, 43003, 20424, [131, 174, 138, 240, 36, 153, 10, 241]);
}
impl ::core::convert::From<IMFImageSharingEngineClassFactory> for ::windows::runtime::IUnknown {
    fn from(value: IMFImageSharingEngineClassFactory) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFImageSharingEngineClassFactory> for ::windows::runtime::IUnknown {
    fn from(value: &IMFImageSharingEngineClassFactory) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFImageSharingEngineClassFactory {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFImageSharingEngineClassFactory {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFImageSharingEngineClassFactory_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, puniquedevicename: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, ppengine: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFInputTrustAuthority(pub ::windows::runtime::IUnknown);
impl IMFInputTrustAuthority {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDecrypter(&self, riid: *const ::windows::runtime::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(riid), ::core::mem::transmute(ppv)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RequestAccess(&self, action: MFPOLICYMANAGER_ACTION) -> ::windows::runtime::Result<IMFActivate> {
        let mut result__: <IMFActivate as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(action), &mut result__).from_abi::<IMFActivate>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPolicy(&self, action: MFPOLICYMANAGER_ACTION) -> ::windows::runtime::Result<IMFOutputPolicy> {
        let mut result__: <IMFOutputPolicy as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(action), &mut result__).from_abi::<IMFOutputPolicy>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BindAccess(&self, pparam: *const MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(pparam)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn UpdateAccess(&self, pparam: *const MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(pparam)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Reset(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFInputTrustAuthority {
    type Vtable = IMFInputTrustAuthority_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3516894872, 45350, 17478, [137, 12, 93, 203, 122, 215, 20, 83]);
}
impl ::core::convert::From<IMFInputTrustAuthority> for ::windows::runtime::IUnknown {
    fn from(value: IMFInputTrustAuthority) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFInputTrustAuthority> for ::windows::runtime::IUnknown {
    fn from(value: &IMFInputTrustAuthority) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFInputTrustAuthority {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFInputTrustAuthority {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFInputTrustAuthority_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, action: MFPOLICYMANAGER_ACTION, ppcontentenableractivate: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, action: MFPOLICYMANAGER_ACTION, pppolicy: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pparam: *const MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pparam: *const MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFLocalMFTRegistration(pub ::windows::runtime::IUnknown);
impl IMFLocalMFTRegistration {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn RegisterMFTs(&self, pmfts: *const MFT_REGISTRATION_INFO, cmfts: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(pmfts), ::core::mem::transmute(cmfts)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFLocalMFTRegistration {
    type Vtable = IMFLocalMFTRegistration_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(345787763, 46270, 20365, [139, 135, 7, 158, 146, 107, 106, 221]);
}
impl ::core::convert::From<IMFLocalMFTRegistration> for ::windows::runtime::IUnknown {
    fn from(value: IMFLocalMFTRegistration) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFLocalMFTRegistration> for ::windows::runtime::IUnknown {
    fn from(value: &IMFLocalMFTRegistration) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFLocalMFTRegistration {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFLocalMFTRegistration {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFLocalMFTRegistration_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pmfts: *const MFT_REGISTRATION_INFO, cmfts: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaBuffer(pub ::windows::runtime::IUnknown);
impl IMFMediaBuffer {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Lock(&self, ppbbuffer: *mut *mut u8, pcbmaxlength: *mut u32, pcbcurrentlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(ppbbuffer), ::core::mem::transmute(pcbmaxlength), ::core::mem::transmute(pcbcurrentlength)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Unlock(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCurrentLength(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetCurrentLength(&self, cbcurrentlength: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(cbcurrentlength)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetMaxLength(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaBuffer {
    type Vtable = IMFMediaBuffer_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(73377171, 34713, 17080, [188, 141, 137, 104, 198, 69, 53, 7]);
}
impl ::core::convert::From<IMFMediaBuffer> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaBuffer) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaBuffer> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaBuffer) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaBuffer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaBuffer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaBuffer_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppbbuffer: *mut *mut u8, pcbmaxlength: *mut u32, pcbcurrentlength: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcbcurrentlength: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, cbcurrentlength: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcbmaxlength: *mut u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaEngine(pub ::windows::runtime::IUnknown);
impl IMFMediaEngine {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetError(&self) -> ::windows::runtime::Result<IMFMediaError> {
        let mut result__: <IMFMediaError as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFMediaError>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetErrorCode(&self, error: MF_MEDIA_ENGINE_ERR) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(error)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetSourceElements<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaEngineSrcElements>>(&self, psrcelements: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), psrcelements.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetSource<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>>(&self, purl: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), purl.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetCurrentSource(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetNetworkState(&self) -> u16 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPreload(&self) -> MF_MEDIA_ENGINE_PRELOAD {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPreload(&self, preload: MF_MEDIA_ENGINE_PRELOAD) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(preload)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBuffered(&self) -> ::windows::runtime::Result<IMFMediaTimeRange> {
        let mut result__: <IMFMediaTimeRange as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFMediaTimeRange>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Load(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn CanPlayType<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>>(&self, r#type: Param0) -> ::windows::runtime::Result<MF_MEDIA_ENGINE_CANPLAY> {
        let mut result__: <MF_MEDIA_ENGINE_CANPLAY as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), r#type.into_param().abi(), &mut result__).from_abi::<MF_MEDIA_ENGINE_CANPLAY>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetReadyState(&self) -> u16 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn IsSeeking(&self) -> super::super::Foundation::BOOL {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCurrentTime(&self) -> f64 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).16)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetCurrentTime(&self, seektime: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self), ::core::mem::transmute(seektime)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStartTime(&self) -> f64 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).18)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDuration(&self) -> f64 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).19)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn IsPaused(&self) -> super::super::Foundation::BOOL {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).20)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDefaultPlaybackRate(&self) -> f64 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).21)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetDefaultPlaybackRate(&self, rate: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::core::mem::transmute_copy(self), ::core::mem::transmute(rate)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPlaybackRate(&self) -> f64 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).23)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPlaybackRate(&self, rate: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::core::mem::transmute_copy(self), ::core::mem::transmute(rate)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPlayed(&self) -> ::windows::runtime::Result<IMFMediaTimeRange> {
        let mut result__: <IMFMediaTimeRange as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).25)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFMediaTimeRange>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSeekable(&self) -> ::windows::runtime::Result<IMFMediaTimeRange> {
        let mut result__: <IMFMediaTimeRange as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).26)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFMediaTimeRange>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn IsEnded(&self) -> super::super::Foundation::BOOL {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).27)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetAutoPlay(&self) -> super::super::Foundation::BOOL {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).28)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetAutoPlay<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, autoplay: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(::core::mem::transmute_copy(self), autoplay.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetLoop(&self) -> super::super::Foundation::BOOL {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).30)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetLoop<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, r#loop: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).31)(::core::mem::transmute_copy(self), r#loop.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Play(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Pause(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).33)(::core::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetMuted(&self) -> super::super::Foundation::BOOL {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).34)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetMuted<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, muted: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).35)(::core::mem::transmute_copy(self), muted.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetVolume(&self) -> f64 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).36)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetVolume(&self, volume: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).37)(::core::mem::transmute_copy(self), ::core::mem::transmute(volume)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn HasVideo(&self) -> super::super::Foundation::BOOL {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).38)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn HasAudio(&self) -> super::super::Foundation::BOOL {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).39)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetNativeVideoSize(&self, cx: *mut u32, cy: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).40)(::core::mem::transmute_copy(self), ::core::mem::transmute(cx), ::core::mem::transmute(cy)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetVideoAspectRatio(&self, cx: *mut u32, cy: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).41)(::core::mem::transmute_copy(self), ::core::mem::transmute(cx), ::core::mem::transmute(cy)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Shutdown(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).42)(::core::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn TransferVideoFrame<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, pdstsurf: Param0, psrc: *const MFVideoNormalizedRect, pdst: *const super::super::Foundation::RECT, pborderclr: *const MFARGB) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).43)(::core::mem::transmute_copy(self), pdstsurf.into_param().abi(), ::core::mem::transmute(psrc), ::core::mem::transmute(pdst), ::core::mem::transmute(pborderclr)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnVideoStreamTick(&self) -> ::windows::runtime::Result<i64> {
        let mut result__: <i64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).44)(::core::mem::transmute_copy(self), &mut result__).from_abi::<i64>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaEngine {
    type Vtable = IMFMediaEngine_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2560733371, 1003, 18741, [174, 124, 147, 193, 250, 14, 28, 147]);
}
impl ::core::convert::From<IMFMediaEngine> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaEngine) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaEngine> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaEngine) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaEngine {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaEngine {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaEngine_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pperror: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, error: MF_MEDIA_ENGINE_ERR) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psrcelements: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, purl: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppurl: *mut ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u16,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> MF_MEDIA_ENGINE_PRELOAD,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, preload: MF_MEDIA_ENGINE_PRELOAD) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppbuffered: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, panswer: *mut MF_MEDIA_ENGINE_CANPLAY) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u16,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> f64,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, seektime: f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> f64,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> f64,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> f64,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, rate: f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> f64,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, rate: f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppplayed: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppseekable: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, autoplay: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#loop: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, muted: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> f64,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, volume: f64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, cx: *mut u32, cy: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, cx: *mut u32, cy: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdstsurf: ::windows::runtime::RawPtr, psrc: *const MFVideoNormalizedRect, pdst: *const super::super::Foundation::RECT, pborderclr: *const MFARGB) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppts: *mut i64) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaEngineAudioEndpointId(pub ::windows::runtime::IUnknown);
impl IMFMediaEngineAudioEndpointId {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetAudioEndpointId<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, pszendpointid: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), pszendpointid.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetAudioEndpointId(&self) -> ::windows::runtime::Result<super::super::Foundation::PWSTR> {
        let mut result__: <super::super::Foundation::PWSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::PWSTR>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaEngineAudioEndpointId {
    type Vtable = IMFMediaEngineAudioEndpointId_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2050731160, 3702, 18939, [140, 32, 138, 134, 253, 152, 234, 242]);
}
impl ::core::convert::From<IMFMediaEngineAudioEndpointId> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaEngineAudioEndpointId) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaEngineAudioEndpointId> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaEngineAudioEndpointId) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaEngineAudioEndpointId {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaEngineAudioEndpointId {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaEngineAudioEndpointId_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszendpointid: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppszendpointid: *mut super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaEngineClassFactory(pub ::windows::runtime::IUnknown);
impl IMFMediaEngineClassFactory {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CreateInstance<'a, Param1: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, dwflags: u32, pattr: Param1) -> ::windows::runtime::Result<IMFMediaEngine> {
        let mut result__: <IMFMediaEngine as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwflags), pattr.into_param().abi(), &mut result__).from_abi::<IMFMediaEngine>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CreateTimeRange(&self) -> ::windows::runtime::Result<IMFMediaTimeRange> {
        let mut result__: <IMFMediaTimeRange as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFMediaTimeRange>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CreateError(&self) -> ::windows::runtime::Result<IMFMediaError> {
        let mut result__: <IMFMediaError as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFMediaError>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaEngineClassFactory {
    type Vtable = IMFMediaEngineClassFactory_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1298422478, 9898, 18056, [155, 225, 223, 53, 22, 153, 11, 147]);
}
impl ::core::convert::From<IMFMediaEngineClassFactory> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaEngineClassFactory) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaEngineClassFactory> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaEngineClassFactory) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaEngineClassFactory {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaEngineClassFactory {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaEngineClassFactory_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwflags: u32, pattr: ::windows::runtime::RawPtr, ppplayer: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pptimerange: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pperror: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaEngineClassFactory2(pub ::windows::runtime::IUnknown);
impl IMFMediaEngineClassFactory2 {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn CreateMediaKeys2<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>>(&self, keysystem: Param0, defaultcdmstorepath: Param1, inprivatecdmstorepath: Param2) -> ::windows::runtime::Result<IMFMediaKeys> {
        let mut result__: <IMFMediaKeys as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), keysystem.into_param().abi(), defaultcdmstorepath.into_param().abi(), inprivatecdmstorepath.into_param().abi(), &mut result__).from_abi::<IMFMediaKeys>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaEngineClassFactory2 {
    type Vtable = IMFMediaEngineClassFactory2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(151534831, 34431, 19446, [135, 118, 222, 227, 167, 180, 47, 202]);
}
impl ::core::convert::From<IMFMediaEngineClassFactory2> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaEngineClassFactory2) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaEngineClassFactory2> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaEngineClassFactory2) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaEngineClassFactory2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaEngineClassFactory2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaEngineClassFactory2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, keysystem: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, defaultcdmstorepath: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, inprivatecdmstorepath: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, ppkeys: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaEngineClassFactory3(pub ::windows::runtime::IUnknown);
impl IMFMediaEngineClassFactory3 {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_PropertiesSystem"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_PropertiesSystem`*"]
    pub unsafe fn CreateMediaKeySystemAccess<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>>(&self, keysystem: Param0, ppsupportedconfigurationsarray: *const ::core::option::Option<super::super::System::PropertiesSystem::IPropertyStore>, usize: u32) -> ::windows::runtime::Result<IMFMediaKeySystemAccess> {
        let mut result__: <IMFMediaKeySystemAccess as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), keysystem.into_param().abi(), ::core::mem::transmute(ppsupportedconfigurationsarray), ::core::mem::transmute(usize), &mut result__).from_abi::<IMFMediaKeySystemAccess>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaEngineClassFactory3 {
    type Vtable = IMFMediaEngineClassFactory3_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(931619151, 26103, 16387, [182, 115, 234, 216, 41, 58, 14, 96]);
}
impl ::core::convert::From<IMFMediaEngineClassFactory3> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaEngineClassFactory3) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaEngineClassFactory3> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaEngineClassFactory3) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaEngineClassFactory3 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaEngineClassFactory3 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaEngineClassFactory3_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_PropertiesSystem"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, keysystem: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, ppsupportedconfigurationsarray: *const ::windows::runtime::RawPtr, usize: u32, ppkeyaccess: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_PropertiesSystem")))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaEngineClassFactory4(pub ::windows::runtime::IUnknown);
impl IMFMediaEngineClassFactory4 {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn CreateContentDecryptionModuleFactory<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, keysystem: Param0, riid: *const ::windows::runtime::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), keysystem.into_param().abi(), ::core::mem::transmute(riid), ::core::mem::transmute(ppvobject)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaEngineClassFactory4 {
    type Vtable = IMFMediaEngineClassFactory4_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4225914561, 17359, 19099, [140, 184, 206, 134, 50, 163, 65, 134]);
}
impl ::core::convert::From<IMFMediaEngineClassFactory4> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaEngineClassFactory4) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaEngineClassFactory4> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaEngineClassFactory4) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaEngineClassFactory4 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaEngineClassFactory4 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaEngineClassFactory4_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, keysystem: super::super::Foundation::PWSTR, riid: *const ::windows::runtime::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaEngineClassFactoryEx(pub ::windows::runtime::IUnknown);
impl IMFMediaEngineClassFactoryEx {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CreateInstance<'a, Param1: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, dwflags: u32, pattr: Param1) -> ::windows::runtime::Result<IMFMediaEngine> {
        let mut result__: <IMFMediaEngine as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwflags), pattr.into_param().abi(), &mut result__).from_abi::<IMFMediaEngine>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CreateTimeRange(&self) -> ::windows::runtime::Result<IMFMediaTimeRange> {
        let mut result__: <IMFMediaTimeRange as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFMediaTimeRange>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CreateError(&self) -> ::windows::runtime::Result<IMFMediaError> {
        let mut result__: <IMFMediaError as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFMediaError>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CreateMediaSourceExtension<'a, Param1: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, dwflags: u32, pattr: Param1) -> ::windows::runtime::Result<IMFMediaSourceExtension> {
        let mut result__: <IMFMediaSourceExtension as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwflags), pattr.into_param().abi(), &mut result__).from_abi::<IMFMediaSourceExtension>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn CreateMediaKeys<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>>(&self, keysystem: Param0, cdmstorepath: Param1) -> ::windows::runtime::Result<IMFMediaKeys> {
        let mut result__: <IMFMediaKeys as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), keysystem.into_param().abi(), cdmstorepath.into_param().abi(), &mut result__).from_abi::<IMFMediaKeys>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn IsTypeSupported<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>>(&self, r#type: Param0, keysystem: Param1) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), r#type.into_param().abi(), keysystem.into_param().abi(), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaEngineClassFactoryEx {
    type Vtable = IMFMediaEngineClassFactoryEx_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3311490758, 59995, 18597, [157, 248, 251, 224, 53, 208, 146, 158]);
}
impl ::core::convert::From<IMFMediaEngineClassFactoryEx> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaEngineClassFactoryEx) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaEngineClassFactoryEx> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaEngineClassFactoryEx) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaEngineClassFactoryEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaEngineClassFactoryEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFMediaEngineClassFactoryEx> for IMFMediaEngineClassFactory {
    fn from(value: IMFMediaEngineClassFactoryEx) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFMediaEngineClassFactoryEx> for IMFMediaEngineClassFactory {
    fn from(value: &IMFMediaEngineClassFactoryEx) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaEngineClassFactory> for IMFMediaEngineClassFactoryEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaEngineClassFactory> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaEngineClassFactory> for &IMFMediaEngineClassFactoryEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaEngineClassFactory> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaEngineClassFactoryEx_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwflags: u32, pattr: ::windows::runtime::RawPtr, ppplayer: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pptimerange: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pperror: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwflags: u32, pattr: ::windows::runtime::RawPtr, ppmse: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, keysystem: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, cdmstorepath: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, ppkeys: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, keysystem: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, issupported: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaEngineEME(pub ::windows::runtime::IUnknown);
impl IMFMediaEngineEME {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Keys(&self) -> ::windows::runtime::Result<IMFMediaKeys> {
        let mut result__: <IMFMediaKeys as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFMediaKeys>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetMediaKeys<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaKeys>>(&self, keys: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), keys.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaEngineEME {
    type Vtable = IMFMediaEngineEME_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1356633060, 47695, 17013, [174, 102, 131, 232, 54, 229, 116, 105]);
}
impl ::core::convert::From<IMFMediaEngineEME> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaEngineEME) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaEngineEME> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaEngineEME) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaEngineEME {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaEngineEME {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaEngineEME_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, keys: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, keys: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaEngineEMENotify(pub ::windows::runtime::IUnknown);
impl IMFMediaEngineEMENotify {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn Encrypted<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>>(&self, pbinitdata: *const u8, cb: u32, bstrinitdatatype: Param2) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(pbinitdata), ::core::mem::transmute(cb), bstrinitdatatype.into_param().abi()))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn WaitingForKey(&self) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self)))
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaEngineEMENotify {
    type Vtable = IMFMediaEngineEMENotify_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2652392725, 52663, 20358, [180, 158, 86, 102, 137, 244, 166, 1]);
}
impl ::core::convert::From<IMFMediaEngineEMENotify> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaEngineEMENotify) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaEngineEMENotify> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaEngineEMENotify) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaEngineEMENotify {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaEngineEMENotify {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaEngineEMENotify_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbinitdata: *const u8, cb: u32, bstrinitdatatype: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>),
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaEngineEx(pub ::windows::runtime::IUnknown);
impl IMFMediaEngineEx {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetError(&self) -> ::windows::runtime::Result<IMFMediaError> {
        let mut result__: <IMFMediaError as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFMediaError>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetErrorCode(&self, error: MF_MEDIA_ENGINE_ERR) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(error)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetSourceElements<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaEngineSrcElements>>(&self, psrcelements: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), psrcelements.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetSource<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>>(&self, purl: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), purl.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetCurrentSource(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetNetworkState(&self) -> u16 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPreload(&self) -> MF_MEDIA_ENGINE_PRELOAD {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPreload(&self, preload: MF_MEDIA_ENGINE_PRELOAD) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(preload)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBuffered(&self) -> ::windows::runtime::Result<IMFMediaTimeRange> {
        let mut result__: <IMFMediaTimeRange as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFMediaTimeRange>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Load(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn CanPlayType<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>>(&self, r#type: Param0) -> ::windows::runtime::Result<MF_MEDIA_ENGINE_CANPLAY> {
        let mut result__: <MF_MEDIA_ENGINE_CANPLAY as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), r#type.into_param().abi(), &mut result__).from_abi::<MF_MEDIA_ENGINE_CANPLAY>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetReadyState(&self) -> u16 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn IsSeeking(&self) -> super::super::Foundation::BOOL {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCurrentTime(&self) -> f64 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).16)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetCurrentTime(&self, seektime: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self), ::core::mem::transmute(seektime)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStartTime(&self) -> f64 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).18)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDuration(&self) -> f64 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).19)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn IsPaused(&self) -> super::super::Foundation::BOOL {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).20)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDefaultPlaybackRate(&self) -> f64 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).21)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetDefaultPlaybackRate(&self, rate: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::core::mem::transmute_copy(self), ::core::mem::transmute(rate)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPlaybackRate(&self) -> f64 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).23)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPlaybackRate(&self, rate: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::core::mem::transmute_copy(self), ::core::mem::transmute(rate)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPlayed(&self) -> ::windows::runtime::Result<IMFMediaTimeRange> {
        let mut result__: <IMFMediaTimeRange as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).25)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFMediaTimeRange>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSeekable(&self) -> ::windows::runtime::Result<IMFMediaTimeRange> {
        let mut result__: <IMFMediaTimeRange as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).26)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFMediaTimeRange>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn IsEnded(&self) -> super::super::Foundation::BOOL {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).27)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetAutoPlay(&self) -> super::super::Foundation::BOOL {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).28)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetAutoPlay<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, autoplay: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(::core::mem::transmute_copy(self), autoplay.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetLoop(&self) -> super::super::Foundation::BOOL {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).30)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetLoop<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, r#loop: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).31)(::core::mem::transmute_copy(self), r#loop.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Play(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Pause(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).33)(::core::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetMuted(&self) -> super::super::Foundation::BOOL {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).34)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetMuted<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, muted: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).35)(::core::mem::transmute_copy(self), muted.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetVolume(&self) -> f64 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).36)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetVolume(&self, volume: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).37)(::core::mem::transmute_copy(self), ::core::mem::transmute(volume)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn HasVideo(&self) -> super::super::Foundation::BOOL {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).38)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn HasAudio(&self) -> super::super::Foundation::BOOL {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).39)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetNativeVideoSize(&self, cx: *mut u32, cy: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).40)(::core::mem::transmute_copy(self), ::core::mem::transmute(cx), ::core::mem::transmute(cy)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetVideoAspectRatio(&self, cx: *mut u32, cy: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).41)(::core::mem::transmute_copy(self), ::core::mem::transmute(cx), ::core::mem::transmute(cy)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Shutdown(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).42)(::core::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn TransferVideoFrame<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, pdstsurf: Param0, psrc: *const MFVideoNormalizedRect, pdst: *const super::super::Foundation::RECT, pborderclr: *const MFARGB) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).43)(::core::mem::transmute_copy(self), pdstsurf.into_param().abi(), ::core::mem::transmute(psrc), ::core::mem::transmute(pdst), ::core::mem::transmute(pborderclr)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnVideoStreamTick(&self) -> ::windows::runtime::Result<i64> {
        let mut result__: <i64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).44)(::core::mem::transmute_copy(self), &mut result__).from_abi::<i64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetSourceFromByteStream<'a, Param0: ::windows::runtime::IntoParam<'a, IMFByteStream>, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>>(&self, pbytestream: Param0, purl: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).45)(::core::mem::transmute_copy(self), pbytestream.into_param().abi(), purl.into_param().abi()).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetStatistics(&self, statisticid: MF_MEDIA_ENGINE_STATISTIC) -> ::windows::runtime::Result<super::super::System::Com::StructuredStorage::PROPVARIANT> {
        let mut result__: <super::super::System::Com::StructuredStorage::PROPVARIANT as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).46)(::core::mem::transmute_copy(self), ::core::mem::transmute(statisticid), &mut result__).from_abi::<super::super::System::Com::StructuredStorage::PROPVARIANT>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn UpdateVideoStream(&self, psrc: *const MFVideoNormalizedRect, pdst: *const super::super::Foundation::RECT, pborderclr: *const MFARGB) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).47)(::core::mem::transmute_copy(self), ::core::mem::transmute(psrc), ::core::mem::transmute(pdst), ::core::mem::transmute(pborderclr)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBalance(&self) -> f64 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).48)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetBalance(&self, balance: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).49)(::core::mem::transmute_copy(self), ::core::mem::transmute(balance)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn IsPlaybackRateSupported(&self, rate: f64) -> super::super::Foundation::BOOL {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).50)(::core::mem::transmute_copy(self), ::core::mem::transmute(rate)))
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn FrameStep<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, forward: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).51)(::core::mem::transmute_copy(self), forward.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetResourceCharacteristics(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).52)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetPresentationAttribute(&self, guidmfattribute: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<super::super::System::Com::StructuredStorage::PROPVARIANT> {
        let mut result__: <super::super::System::Com::StructuredStorage::PROPVARIANT as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).53)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidmfattribute), &mut result__).from_abi::<super::super::System::Com::StructuredStorage::PROPVARIANT>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetNumberOfStreams(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).54)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetStreamAttribute(&self, dwstreamindex: u32, guidmfattribute: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<super::super::System::Com::StructuredStorage::PROPVARIANT> {
        let mut result__: <super::super::System::Com::StructuredStorage::PROPVARIANT as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).55)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), ::core::mem::transmute(guidmfattribute), &mut result__).from_abi::<super::super::System::Com::StructuredStorage::PROPVARIANT>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetStreamSelection(&self, dwstreamindex: u32) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).56)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetStreamSelection<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, dwstreamindex: u32, enabled: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).57)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), enabled.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ApplyStreamSelections(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).58)(::core::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn IsProtected(&self) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).59)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn InsertVideoEffect<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, peffect: Param0, foptional: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).60)(::core::mem::transmute_copy(self), peffect.into_param().abi(), foptional.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn InsertAudioEffect<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, peffect: Param0, foptional: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).61)(::core::mem::transmute_copy(self), peffect.into_param().abi(), foptional.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveAllEffects(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).62)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetTimelineMarkerTimer(&self, timetofire: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).63)(::core::mem::transmute_copy(self), ::core::mem::transmute(timetofire)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetTimelineMarkerTimer(&self) -> ::windows::runtime::Result<f64> {
        let mut result__: <f64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).64)(::core::mem::transmute_copy(self), &mut result__).from_abi::<f64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CancelTimelineMarkerTimer(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).65)(::core::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn IsStereo3D(&self) -> super::super::Foundation::BOOL {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).66)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStereo3DFramePackingMode(&self) -> ::windows::runtime::Result<MF_MEDIA_ENGINE_S3D_PACKING_MODE> {
        let mut result__: <MF_MEDIA_ENGINE_S3D_PACKING_MODE as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).67)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MF_MEDIA_ENGINE_S3D_PACKING_MODE>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetStereo3DFramePackingMode(&self, packmode: MF_MEDIA_ENGINE_S3D_PACKING_MODE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).68)(::core::mem::transmute_copy(self), ::core::mem::transmute(packmode)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStereo3DRenderMode(&self) -> ::windows::runtime::Result<MF3DVideoOutputType> {
        let mut result__: <MF3DVideoOutputType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).69)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MF3DVideoOutputType>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetStereo3DRenderMode(&self, outputtype: MF3DVideoOutputType) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).70)(::core::mem::transmute_copy(self), ::core::mem::transmute(outputtype)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn EnableWindowlessSwapchainMode<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, fenable: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).71)(::core::mem::transmute_copy(self), fenable.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetVideoSwapchainHandle(&self) -> ::windows::runtime::Result<super::super::Foundation::HANDLE> {
        let mut result__: <super::super::Foundation::HANDLE as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).72)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::HANDLE>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn EnableHorizontalMirrorMode<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, fenable: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).73)(::core::mem::transmute_copy(self), fenable.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetAudioStreamCategory(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).74)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetAudioStreamCategory(&self, category: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).75)(::core::mem::transmute_copy(self), ::core::mem::transmute(category)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetAudioEndpointRole(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).76)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetAudioEndpointRole(&self, role: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).77)(::core::mem::transmute_copy(self), ::core::mem::transmute(role)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetRealTimeMode(&self) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).78)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetRealTimeMode<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, fenable: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).79)(::core::mem::transmute_copy(self), fenable.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetCurrentTimeEx(&self, seektime: f64, seekmode: MF_MEDIA_ENGINE_SEEK_MODE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).80)(::core::mem::transmute_copy(self), ::core::mem::transmute(seektime), ::core::mem::transmute(seekmode)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn EnableTimeUpdateTimer<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, fenabletimer: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).81)(::core::mem::transmute_copy(self), fenabletimer.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaEngineEx {
    type Vtable = IMFMediaEngineEx_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2197905069, 45542, 16592, [169, 138, 55, 20, 95, 254, 26, 209]);
}
impl ::core::convert::From<IMFMediaEngineEx> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaEngineEx) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaEngineEx> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaEngineEx) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaEngineEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaEngineEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFMediaEngineEx> for IMFMediaEngine {
    fn from(value: IMFMediaEngineEx) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFMediaEngineEx> for IMFMediaEngine {
    fn from(value: &IMFMediaEngineEx) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaEngine> for IMFMediaEngineEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaEngine> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaEngine> for &IMFMediaEngineEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaEngine> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaEngineEx_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pperror: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, error: MF_MEDIA_ENGINE_ERR) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psrcelements: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, purl: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppurl: *mut ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u16,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> MF_MEDIA_ENGINE_PRELOAD,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, preload: MF_MEDIA_ENGINE_PRELOAD) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppbuffered: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, panswer: *mut MF_MEDIA_ENGINE_CANPLAY) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u16,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> f64,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, seektime: f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> f64,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> f64,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> f64,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, rate: f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> f64,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, rate: f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppplayed: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppseekable: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, autoplay: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#loop: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, muted: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> f64,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, volume: f64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, cx: *mut u32, cy: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, cx: *mut u32, cy: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdstsurf: ::windows::runtime::RawPtr, psrc: *const MFVideoNormalizedRect, pdst: *const super::super::Foundation::RECT, pborderclr: *const MFARGB) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppts: *mut i64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbytestream: ::windows::runtime::RawPtr, purl: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, statisticid: MF_MEDIA_ENGINE_STATISTIC, pstatistic: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psrc: *const MFVideoNormalizedRect, pdst: *const super::super::Foundation::RECT, pborderclr: *const MFARGB) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> f64,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, balance: f64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, rate: f64) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, forward: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcharacteristics: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidmfattribute: *const ::windows::runtime::GUID, pvvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwstreamcount: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, guidmfattribute: *const ::windows::runtime::GUID, pvvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, penabled: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, enabled: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pprotected: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, peffect: ::windows::runtime::RawPtr, foptional: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, peffect: ::windows::runtime::RawPtr, foptional: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, timetofire: f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ptimetofire: *mut f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, packmode: *mut MF_MEDIA_ENGINE_S3D_PACKING_MODE) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, packmode: MF_MEDIA_ENGINE_S3D_PACKING_MODE) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputtype: *mut MF3DVideoOutputType) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputtype: MF3DVideoOutputType) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, fenable: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, phswapchain: *mut super::super::Foundation::HANDLE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, fenable: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcategory: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, category: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, prole: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, role: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pfenabled: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, fenable: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, seektime: f64, seekmode: MF_MEDIA_ENGINE_SEEK_MODE) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, fenabletimer: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaEngineExtension(pub ::windows::runtime::IUnknown);
impl IMFMediaEngineExtension {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn CanPlayType<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>>(&self, audioonly: Param0, mimetype: Param1) -> ::windows::runtime::Result<MF_MEDIA_ENGINE_CANPLAY> {
        let mut result__: <MF_MEDIA_ENGINE_CANPLAY as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), audioonly.into_param().abi(), mimetype.into_param().abi(), &mut result__).from_abi::<MF_MEDIA_ENGINE_CANPLAY>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn BeginCreateObject<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>, Param1: ::windows::runtime::IntoParam<'a, IMFByteStream>, Param4: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param5: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(
        &self,
        bstrurl: Param0,
        pbytestream: Param1,
        r#type: MF_OBJECT_TYPE,
        ppiunknowncancelcookie: *mut ::core::option::Option<::windows::runtime::IUnknown>,
        pcallback: Param4,
        punkstate: Param5,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), bstrurl.into_param().abi(), pbytestream.into_param().abi(), ::core::mem::transmute(r#type), ::core::mem::transmute(ppiunknowncancelcookie), pcallback.into_param().abi(), punkstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CancelObjectCreation<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, piunknowncancelcookie: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), piunknowncancelcookie.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndCreateObject<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, presult: Param0) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), presult.into_param().abi(), &mut result__).from_abi::<::windows::runtime::IUnknown>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaEngineExtension {
    type Vtable = IMFMediaEngineExtension_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(795465250, 8373, 16873, [175, 223, 137, 206, 209, 221, 160, 78]);
}
impl ::core::convert::From<IMFMediaEngineExtension> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaEngineExtension) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaEngineExtension> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaEngineExtension) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaEngineExtension {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaEngineExtension {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaEngineExtension_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, audioonly: super::super::Foundation::BOOL, mimetype: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, panswer: *mut MF_MEDIA_ENGINE_CANPLAY) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, bstrurl: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, pbytestream: ::windows::runtime::RawPtr, r#type: MF_OBJECT_TYPE, ppiunknowncancelcookie: *mut ::windows::runtime::RawPtr, pcallback: ::windows::runtime::RawPtr, punkstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, piunknowncancelcookie: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presult: ::windows::runtime::RawPtr, ppobject: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaEngineNeedKeyNotify(pub ::windows::runtime::IUnknown);
impl IMFMediaEngineNeedKeyNotify {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn NeedKey(&self, initdata: *const u8, cb: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(initdata), ::core::mem::transmute(cb)))
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaEngineNeedKeyNotify {
    type Vtable = IMFMediaEngineNeedKeyNotify_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1185088004, 42646, 19224, [136, 4, 36, 107, 143, 3, 27, 177]);
}
impl ::core::convert::From<IMFMediaEngineNeedKeyNotify> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaEngineNeedKeyNotify) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaEngineNeedKeyNotify> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaEngineNeedKeyNotify) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaEngineNeedKeyNotify {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaEngineNeedKeyNotify {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaEngineNeedKeyNotify_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, initdata: *const u8, cb: u32),
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaEngineNotify(pub ::windows::runtime::IUnknown);
impl IMFMediaEngineNotify {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EventNotify(&self, event: u32, param1: usize, param2: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(event), ::core::mem::transmute(param1), ::core::mem::transmute(param2)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaEngineNotify {
    type Vtable = IMFMediaEngineNotify_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4276601106, 59254, 17077, [155, 191, 0, 72, 82, 78, 43, 213]);
}
impl ::core::convert::From<IMFMediaEngineNotify> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaEngineNotify) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaEngineNotify> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaEngineNotify) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaEngineNotify {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaEngineNotify {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaEngineNotify_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, event: u32, param1: usize, param2: u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaEngineOPMInfo(pub ::windows::runtime::IUnknown);
impl IMFMediaEngineOPMInfo {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetOPMInfo(&self, pstatus: *mut MF_MEDIA_ENGINE_OPM_STATUS, pconstricted: *mut super::super::Foundation::BOOL) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(pstatus), ::core::mem::transmute(pconstricted)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaEngineOPMInfo {
    type Vtable = IMFMediaEngineOPMInfo_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1985438694, 27649, 19201, [187, 15, 184, 41, 246, 14, 210, 140]);
}
impl ::core::convert::From<IMFMediaEngineOPMInfo> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaEngineOPMInfo) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaEngineOPMInfo> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaEngineOPMInfo) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaEngineOPMInfo {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaEngineOPMInfo {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaEngineOPMInfo_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstatus: *mut MF_MEDIA_ENGINE_OPM_STATUS, pconstricted: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaEngineProtectedContent(pub ::windows::runtime::IUnknown);
impl IMFMediaEngineProtectedContent {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ShareResources<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, punkdevicecontext: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), punkdevicecontext.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetRequiredProtections(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetOPMWindow<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::HWND>>(&self, hwnd: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), hwnd.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn TransferVideoFrame<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, pdstsurf: Param0, psrc: *const MFVideoNormalizedRect, pdst: *const super::super::Foundation::RECT, pborderclr: *const MFARGB) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), pdstsurf.into_param().abi(), ::core::mem::transmute(psrc), ::core::mem::transmute(pdst), ::core::mem::transmute(pborderclr), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetContentProtectionManager<'a, Param0: ::windows::runtime::IntoParam<'a, IMFContentProtectionManager>>(&self, pcpm: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), pcpm.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetApplicationCertificate(&self, pbblob: *const u8, cbblob: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(pbblob), ::core::mem::transmute(cbblob)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaEngineProtectedContent {
    type Vtable = IMFMediaEngineProtectedContent_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2675974632, 40076, 18558, [187, 92, 121, 170, 71, 121, 147, 140]);
}
impl ::core::convert::From<IMFMediaEngineProtectedContent> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaEngineProtectedContent) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaEngineProtectedContent> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaEngineProtectedContent) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaEngineProtectedContent {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaEngineProtectedContent {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaEngineProtectedContent_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, punkdevicecontext: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pframeprotectionflags: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hwnd: super::super::Foundation::HWND) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdstsurf: ::windows::runtime::RawPtr, psrc: *const MFVideoNormalizedRect, pdst: *const super::super::Foundation::RECT, pborderclr: *const MFARGB, pframeprotectionflags: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcpm: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbblob: *const u8, cbblob: u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaEngineSrcElements(pub ::windows::runtime::IUnknown);
impl IMFMediaEngineSrcElements {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetLength(&self) -> u32 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetURL(&self, index: u32) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(index), &mut result__).from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetType(&self, index: u32) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(index), &mut result__).from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetMedia(&self, index: u32) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(index), &mut result__).from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn AddElement<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>>(&self, purl: Param0, ptype: Param1, pmedia: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), purl.into_param().abi(), ptype.into_param().abi(), pmedia.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveAllElements(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaEngineSrcElements {
    type Vtable = IMFMediaEngineSrcElements_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2053002068, 45332, 19570, [185, 145, 49, 49, 215, 80, 50, 234]);
}
impl ::core::convert::From<IMFMediaEngineSrcElements> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaEngineSrcElements) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaEngineSrcElements> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaEngineSrcElements) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaEngineSrcElements {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaEngineSrcElements {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaEngineSrcElements_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, purl: *mut ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, ptype: *mut ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, pmedia: *mut ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, purl: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, ptype: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, pmedia: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaEngineSrcElementsEx(pub ::windows::runtime::IUnknown);
impl IMFMediaEngineSrcElementsEx {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetLength(&self) -> u32 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetURL(&self, index: u32) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(index), &mut result__).from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetType(&self, index: u32) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(index), &mut result__).from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetMedia(&self, index: u32) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(index), &mut result__).from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn AddElement<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>>(&self, purl: Param0, ptype: Param1, pmedia: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), purl.into_param().abi(), ptype.into_param().abi(), pmedia.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveAllElements(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn AddElementEx<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>>(&self, purl: Param0, ptype: Param1, pmedia: Param2, keysystem: Param3) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), purl.into_param().abi(), ptype.into_param().abi(), pmedia.into_param().abi(), keysystem.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetKeySystem(&self, index: u32) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(index), &mut result__).from_abi::<super::super::Foundation::BSTR>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaEngineSrcElementsEx {
    type Vtable = IMFMediaEngineSrcElementsEx_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1699376051, 57763, 16970, [153, 8, 83, 164, 58, 13, 253, 160]);
}
impl ::core::convert::From<IMFMediaEngineSrcElementsEx> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaEngineSrcElementsEx) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaEngineSrcElementsEx> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaEngineSrcElementsEx) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaEngineSrcElementsEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaEngineSrcElementsEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFMediaEngineSrcElementsEx> for IMFMediaEngineSrcElements {
    fn from(value: IMFMediaEngineSrcElementsEx) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFMediaEngineSrcElementsEx> for IMFMediaEngineSrcElements {
    fn from(value: &IMFMediaEngineSrcElementsEx) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaEngineSrcElements> for IMFMediaEngineSrcElementsEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaEngineSrcElements> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaEngineSrcElements> for &IMFMediaEngineSrcElementsEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaEngineSrcElements> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaEngineSrcElementsEx_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, purl: *mut ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, ptype: *mut ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, pmedia: *mut ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, purl: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, ptype: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, pmedia: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, purl: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, ptype: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, pmedia: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, keysystem: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, ptype: *mut ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaEngineSupportsSourceTransfer(pub ::windows::runtime::IUnknown);
impl IMFMediaEngineSupportsSourceTransfer {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn ShouldTransferSource(&self) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DetachMediaSource(&self, ppbytestream: *mut ::core::option::Option<IMFByteStream>, ppmediasource: *mut ::core::option::Option<IMFMediaSource>, ppmse: *mut ::core::option::Option<IMFMediaSourceExtension>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(ppbytestream), ::core::mem::transmute(ppmediasource), ::core::mem::transmute(ppmse)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AttachMediaSource<'a, Param0: ::windows::runtime::IntoParam<'a, IMFByteStream>, Param1: ::windows::runtime::IntoParam<'a, IMFMediaSource>, Param2: ::windows::runtime::IntoParam<'a, IMFMediaSourceExtension>>(&self, pbytestream: Param0, pmediasource: Param1, pmse: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), pbytestream.into_param().abi(), pmediasource.into_param().abi(), pmse.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaEngineSupportsSourceTransfer {
    type Vtable = IMFMediaEngineSupportsSourceTransfer_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2804199510, 6958, 17986, [166, 243, 219, 148, 32, 197, 41, 8]);
}
impl ::core::convert::From<IMFMediaEngineSupportsSourceTransfer> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaEngineSupportsSourceTransfer) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaEngineSupportsSourceTransfer> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaEngineSupportsSourceTransfer) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaEngineSupportsSourceTransfer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaEngineSupportsSourceTransfer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaEngineSupportsSourceTransfer_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pfshouldtransfer: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppbytestream: *mut ::windows::runtime::RawPtr, ppmediasource: *mut ::windows::runtime::RawPtr, ppmse: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbytestream: ::windows::runtime::RawPtr, pmediasource: ::windows::runtime::RawPtr, pmse: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaEngineTransferSource(pub ::windows::runtime::IUnknown);
impl IMFMediaEngineTransferSource {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn TransferSourceToMediaEngine<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaEngine>>(&self, destination: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), destination.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaEngineTransferSource {
    type Vtable = IMFMediaEngineTransferSource_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(606274642, 65108, 16588, [148, 243, 252, 195, 148, 195, 64, 214]);
}
impl ::core::convert::From<IMFMediaEngineTransferSource> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaEngineTransferSource) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaEngineTransferSource> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaEngineTransferSource) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaEngineTransferSource {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaEngineTransferSource {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaEngineTransferSource_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, destination: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaEngineWebSupport(pub ::windows::runtime::IUnknown);
impl IMFMediaEngineWebSupport {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn ShouldDelayTheLoadEvent(&self) -> super::super::Foundation::BOOL {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ConnectWebAudio(&self, dwsamplerate: u32) -> ::windows::runtime::Result<IAudioSourceProvider> {
        let mut result__: <IAudioSourceProvider as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwsamplerate), &mut result__).from_abi::<IAudioSourceProvider>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DisconnectWebAudio(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaEngineWebSupport {
    type Vtable = IMFMediaEngineWebSupport_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3123135393, 2016, 18671, [132, 182, 154, 46, 208, 35, 202, 108]);
}
impl ::core::convert::From<IMFMediaEngineWebSupport> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaEngineWebSupport) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaEngineWebSupport> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaEngineWebSupport) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaEngineWebSupport {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaEngineWebSupport {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaEngineWebSupport_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwsamplerate: u32, ppsourceprovider: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaError(pub ::windows::runtime::IUnknown);
impl IMFMediaError {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetErrorCode(&self) -> u16 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetExtendedErrorCode(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetErrorCode(&self, error: MF_MEDIA_ENGINE_ERR) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(error)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetExtendedErrorCode(&self, error: ::windows::runtime::HRESULT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(error)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaError {
    type Vtable = IMFMediaError_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4228780242, 43818, 17665, [169, 81, 6, 187, 16, 117, 24, 76]);
}
impl ::core::convert::From<IMFMediaError> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaError) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaError> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaError) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaError {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaError {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaError_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u16,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, error: MF_MEDIA_ENGINE_ERR) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, error: ::windows::runtime::HRESULT) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaEvent(pub ::windows::runtime::IUnknown);
impl IMFMediaEvent {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetItem(&self, guidkey: *const ::windows::runtime::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetItemType(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<MF_ATTRIBUTE_TYPE> {
        let mut result__: <MF_ATTRIBUTE_TYPE as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<MF_ATTRIBUTE_TYPE>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn CompareItem(&self, guidkey: *const ::windows::runtime::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(value), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn Compare<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, ptheirs: Param0, matchtype: MF_ATTRIBUTES_MATCH_TYPE) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ptheirs.into_param().abi(), ::core::mem::transmute(matchtype), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUINT32(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUINT64(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDouble(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<f64> {
        let mut result__: <f64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<f64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetGUID(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStringLength(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetString(&self, guidkey: *const ::windows::runtime::GUID, pwszvalue: super::super::Foundation::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pwszvalue), ::core::mem::transmute(cchbufsize), ::core::mem::transmute(pcchlength)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetAllocatedString(&self, guidkey: *const ::windows::runtime::GUID, ppwszvalue: *mut super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(ppwszvalue), ::core::mem::transmute(pcchlength)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBlobSize(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBlob(&self, guidkey: *const ::windows::runtime::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize), ::core::mem::transmute(pcbblobsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetAllocatedBlob(&self, guidkey: *const ::windows::runtime::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(ppbuf), ::core::mem::transmute(pcbsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUnknown<T: ::windows::runtime::Interface>(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn SetItem(&self, guidkey: *const ::windows::runtime::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(value)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteItem(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteAllItems(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUINT32(&self, guidkey: *const ::windows::runtime::GUID, unvalue: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(unvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUINT64(&self, guidkey: *const ::windows::runtime::GUID, unvalue: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(unvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetDouble(&self, guidkey: *const ::windows::runtime::GUID, fvalue: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(fvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetGUID(&self, guidkey: *const ::windows::runtime::GUID, guidvalue: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(guidvalue)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetString<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, guidkey: *const ::windows::runtime::GUID, wszvalue: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), wszvalue.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetBlob(&self, guidkey: *const ::windows::runtime::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUnknown<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guidkey: *const ::windows::runtime::GUID, punknown: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).27)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), punknown.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn LockStore(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).28)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn UnlockStore(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetItemByIndex(&self, unindex: u32, pguidkey: *mut ::windows::runtime::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).31)(::core::mem::transmute_copy(self), ::core::mem::transmute(unindex), ::core::mem::transmute(pguidkey), ::core::mem::transmute(pvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CopyAllItems<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, pdest: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::core::mem::transmute_copy(self), pdest.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetType(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).33)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetExtendedType(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).34)(::core::mem::transmute_copy(self), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStatus(&self) -> ::windows::runtime::Result<::windows::runtime::HRESULT> {
        let mut result__: <::windows::runtime::HRESULT as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).35)(::core::mem::transmute_copy(self), &mut result__).from_abi::<::windows::runtime::HRESULT>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetValue(&self) -> ::windows::runtime::Result<super::super::System::Com::StructuredStorage::PROPVARIANT> {
        let mut result__: <super::super::System::Com::StructuredStorage::PROPVARIANT as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).36)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::System::Com::StructuredStorage::PROPVARIANT>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaEvent {
    type Vtable = IMFMediaEvent_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3747186994, 61708, 20025, [187, 162, 195, 8, 241, 1, 218, 163]);
}
impl ::core::convert::From<IMFMediaEvent> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaEvent) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaEvent> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaEvent) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaEvent {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaEvent {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFMediaEvent> for IMFAttributes {
    fn from(value: IMFMediaEvent) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFMediaEvent> for IMFAttributes {
    fn from(value: &IMFMediaEvent) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAttributes> for IMFMediaEvent {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAttributes> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAttributes> for &IMFMediaEvent {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAttributes> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaEvent_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ptype: *mut MF_ATTRIBUTE_TYPE) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, value: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>, pbresult: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ptheirs: ::windows::runtime::RawPtr, matchtype: MF_ATTRIBUTES_MATCH_TYPE, pbresult: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punvalue: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punvalue: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pfvalue: *mut f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pguidvalue: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pwszvalue: super::super::Foundation::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ppwszvalue: *mut super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pcbblobsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, value: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, unvalue: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, unvalue: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, fvalue: f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, guidvalue: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, wszvalue: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punknown: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcitems: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, unindex: u32, pguidkey: *mut ::windows::runtime::GUID, pvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdest: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pmet: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pguidextendedtype: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, phrstatus: *mut ::windows::runtime::HRESULT) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pvvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaEventGenerator(pub ::windows::runtime::IUnknown);
impl IMFMediaEventGenerator {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetEvent(&self, dwflags: MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS) -> ::windows::runtime::Result<IMFMediaEvent> {
        let mut result__: <IMFMediaEvent as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwflags), &mut result__).from_abi::<IMFMediaEvent>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BeginGetEvent<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, pcallback: Param0, punkstate: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), pcallback.into_param().abi(), punkstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndGetEvent<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, presult: Param0) -> ::windows::runtime::Result<IMFMediaEvent> {
        let mut result__: <IMFMediaEvent as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), presult.into_param().abi(), &mut result__).from_abi::<IMFMediaEvent>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn QueueEvent(&self, met: u32, guidextendedtype: *const ::windows::runtime::GUID, hrstatus: ::windows::runtime::HRESULT, pvvalue: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(met), ::core::mem::transmute(guidextendedtype), ::core::mem::transmute(hrstatus), ::core::mem::transmute(pvvalue)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaEventGenerator {
    type Vtable = IMFMediaEventGenerator_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(751877458, 48341, 19337, [182, 44, 234, 220, 12, 3, 30, 125]);
}
impl ::core::convert::From<IMFMediaEventGenerator> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaEventGenerator) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaEventGenerator> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaEventGenerator) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaEventGenerator {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaEventGenerator {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaEventGenerator_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwflags: MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, ppevent: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcallback: ::windows::runtime::RawPtr, punkstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presult: ::windows::runtime::RawPtr, ppevent: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, met: u32, guidextendedtype: *const ::windows::runtime::GUID, hrstatus: ::windows::runtime::HRESULT, pvvalue: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaEventQueue(pub ::windows::runtime::IUnknown);
impl IMFMediaEventQueue {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetEvent(&self, dwflags: u32) -> ::windows::runtime::Result<IMFMediaEvent> {
        let mut result__: <IMFMediaEvent as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwflags), &mut result__).from_abi::<IMFMediaEvent>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BeginGetEvent<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, pcallback: Param0, punkstate: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), pcallback.into_param().abi(), punkstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndGetEvent<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, presult: Param0) -> ::windows::runtime::Result<IMFMediaEvent> {
        let mut result__: <IMFMediaEvent as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), presult.into_param().abi(), &mut result__).from_abi::<IMFMediaEvent>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn QueueEvent<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaEvent>>(&self, pevent: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), pevent.into_param().abi()).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn QueueEventParamVar(&self, met: u32, guidextendedtype: *const ::windows::runtime::GUID, hrstatus: ::windows::runtime::HRESULT, pvvalue: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(met), ::core::mem::transmute(guidextendedtype), ::core::mem::transmute(hrstatus), ::core::mem::transmute(pvvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn QueueEventParamUnk<'a, Param3: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, met: u32, guidextendedtype: *const ::windows::runtime::GUID, hrstatus: ::windows::runtime::HRESULT, punk: Param3) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(met), ::core::mem::transmute(guidextendedtype), ::core::mem::transmute(hrstatus), punk.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Shutdown(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaEventQueue {
    type Vtable = IMFMediaEventQueue_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(922240764, 8790, 18614, [181, 142, 226, 182, 56, 49, 101, 129]);
}
impl ::core::convert::From<IMFMediaEventQueue> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaEventQueue) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaEventQueue> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaEventQueue) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaEventQueue {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaEventQueue {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaEventQueue_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwflags: u32, ppevent: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcallback: ::windows::runtime::RawPtr, punkstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presult: ::windows::runtime::RawPtr, ppevent: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pevent: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, met: u32, guidextendedtype: *const ::windows::runtime::GUID, hrstatus: ::windows::runtime::HRESULT, pvvalue: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, met: u32, guidextendedtype: *const ::windows::runtime::GUID, hrstatus: ::windows::runtime::HRESULT, punk: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaKeySession(pub ::windows::runtime::IUnknown);
impl IMFMediaKeySession {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetError(&self, code: *mut u16, systemcode: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(code), ::core::mem::transmute(systemcode)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn KeySystem(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SessionId(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Update(&self, key: *const u8, cb: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(key), ::core::mem::transmute(cb)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Close(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaKeySession {
    type Vtable = IMFMediaKeySession_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(620390357, 53712, 19909, [153, 92, 192, 239, 220, 25, 31, 181]);
}
impl ::core::convert::From<IMFMediaKeySession> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaKeySession) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaKeySession> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaKeySession) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaKeySession {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaKeySession {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaKeySession_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, code: *mut u16, systemcode: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, keysystem: *mut ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, sessionid: *mut ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, key: *const u8, cb: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaKeySession2(pub ::windows::runtime::IUnknown);
impl IMFMediaKeySession2 {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetError(&self, code: *mut u16, systemcode: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(code), ::core::mem::transmute(systemcode)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn KeySystem(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SessionId(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Update(&self, key: *const u8, cb: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(key), ::core::mem::transmute(cb)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Close(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn KeyStatuses(&self, pkeystatusesarray: *mut *mut MFMediaKeyStatus, pusize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(pkeystatusesarray), ::core::mem::transmute(pusize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn Load<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>>(&self, bstrsessionid: Param0) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), bstrsessionid.into_param().abi(), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GenerateRequest<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>>(&self, initdatatype: Param0, pbinitdata: *const u8, cb: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), initdatatype.into_param().abi(), ::core::mem::transmute(pbinitdata), ::core::mem::transmute(cb)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Expiration(&self) -> ::windows::runtime::Result<f64> {
        let mut result__: <f64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), &mut result__).from_abi::<f64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Remove(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Shutdown(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaKeySession2 {
    type Vtable = IMFMediaKeySession2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3916463621, 27989, 17974, [177, 133, 61, 226, 18, 16, 189, 117]);
}
impl ::core::convert::From<IMFMediaKeySession2> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaKeySession2) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaKeySession2> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaKeySession2) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaKeySession2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaKeySession2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFMediaKeySession2> for IMFMediaKeySession {
    fn from(value: IMFMediaKeySession2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFMediaKeySession2> for IMFMediaKeySession {
    fn from(value: &IMFMediaKeySession2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaKeySession> for IMFMediaKeySession2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaKeySession> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaKeySession> for &IMFMediaKeySession2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaKeySession> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaKeySession2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, code: *mut u16, systemcode: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, keysystem: *mut ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, sessionid: *mut ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, key: *const u8, cb: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pkeystatusesarray: *mut *mut MFMediaKeyStatus, pusize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, bstrsessionid: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, pfloaded: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, initdatatype: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, pbinitdata: *const u8, cb: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dblexpiration: *mut f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaKeySessionNotify(pub ::windows::runtime::IUnknown);
impl IMFMediaKeySessionNotify {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn KeyMessage<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>>(&self, destinationurl: Param0, message: *const u8, cb: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), destinationurl.into_param().abi(), ::core::mem::transmute(message), ::core::mem::transmute(cb)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn KeyAdded(&self) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn KeyError(&self, code: u16, systemcode: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(code), ::core::mem::transmute(systemcode)))
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaKeySessionNotify {
    type Vtable = IMFMediaKeySessionNotify_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1778418681, 35143, 19485, [156, 224, 205, 238, 34, 178, 49, 53]);
}
impl ::core::convert::From<IMFMediaKeySessionNotify> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaKeySessionNotify) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaKeySessionNotify> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaKeySessionNotify) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaKeySessionNotify {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaKeySessionNotify {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaKeySessionNotify_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, destinationurl: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, message: *const u8, cb: u32),
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, code: u16, systemcode: u32),
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaKeySessionNotify2(pub ::windows::runtime::IUnknown);
impl IMFMediaKeySessionNotify2 {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn KeyMessage<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>>(&self, destinationurl: Param0, message: *const u8, cb: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), destinationurl.into_param().abi(), ::core::mem::transmute(message), ::core::mem::transmute(cb)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn KeyAdded(&self) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn KeyError(&self, code: u16, systemcode: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(code), ::core::mem::transmute(systemcode)))
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn KeyMessage2<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>>(&self, emessagetype: MF_MEDIAKEYSESSION_MESSAGETYPE, destinationurl: Param1, pbmessage: *const u8, cbmessage: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(emessagetype), destinationurl.into_param().abi(), ::core::mem::transmute(pbmessage), ::core::mem::transmute(cbmessage)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn KeyStatusChange(&self) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self)))
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaKeySessionNotify2 {
    type Vtable = IMFMediaKeySessionNotify2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3282692394, 55944, 18096, [161, 16, 108, 249, 83, 2, 108, 185]);
}
impl ::core::convert::From<IMFMediaKeySessionNotify2> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaKeySessionNotify2) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaKeySessionNotify2> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaKeySessionNotify2) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaKeySessionNotify2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaKeySessionNotify2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFMediaKeySessionNotify2> for IMFMediaKeySessionNotify {
    fn from(value: IMFMediaKeySessionNotify2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFMediaKeySessionNotify2> for IMFMediaKeySessionNotify {
    fn from(value: &IMFMediaKeySessionNotify2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaKeySessionNotify> for IMFMediaKeySessionNotify2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaKeySessionNotify> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaKeySessionNotify> for &IMFMediaKeySessionNotify2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaKeySessionNotify> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaKeySessionNotify2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, destinationurl: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, message: *const u8, cb: u32),
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, code: u16, systemcode: u32),
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, emessagetype: MF_MEDIAKEYSESSION_MESSAGETYPE, destinationurl: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, pbmessage: *const u8, cbmessage: u32),
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaKeySystemAccess(pub ::windows::runtime::IUnknown);
impl IMFMediaKeySystemAccess {
    #[cfg(feature = "Win32_System_PropertiesSystem")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_System_PropertiesSystem`*"]
    pub unsafe fn CreateMediaKeys<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::System::PropertiesSystem::IPropertyStore>>(&self, pcdmcustomconfig: Param0) -> ::windows::runtime::Result<IMFMediaKeys2> {
        let mut result__: <IMFMediaKeys2 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), pcdmcustomconfig.into_param().abi(), &mut result__).from_abi::<IMFMediaKeys2>(result__)
    }
    #[cfg(feature = "Win32_System_PropertiesSystem")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_System_PropertiesSystem`*"]
    pub unsafe fn SupportedConfiguration(&self) -> ::windows::runtime::Result<super::super::System::PropertiesSystem::IPropertyStore> {
        let mut result__: <super::super::System::PropertiesSystem::IPropertyStore as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::System::PropertiesSystem::IPropertyStore>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn KeySystem(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BSTR>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaKeySystemAccess {
    type Vtable = IMFMediaKeySystemAccess_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2932228058, 31383, 18756, [179, 92, 108, 109, 248, 8, 92, 195]);
}
impl ::core::convert::From<IMFMediaKeySystemAccess> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaKeySystemAccess) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaKeySystemAccess> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaKeySystemAccess) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaKeySystemAccess {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaKeySystemAccess {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaKeySystemAccess_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_System_PropertiesSystem")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcdmcustomconfig: ::windows::runtime::RawPtr, ppkeys: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_PropertiesSystem"))] usize,
    #[cfg(feature = "Win32_System_PropertiesSystem")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppsupportedconfiguration: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_PropertiesSystem"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pkeysystem: *mut ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaKeys(pub ::windows::runtime::IUnknown);
impl IMFMediaKeys {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn CreateSession<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>, Param5: ::windows::runtime::IntoParam<'a, IMFMediaKeySessionNotify>>(&self, mimetype: Param0, initdata: *const u8, cb: u32, customdata: *const u8, cbcustomdata: u32, notify: Param5) -> ::windows::runtime::Result<IMFMediaKeySession> {
        let mut result__: <IMFMediaKeySession as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), mimetype.into_param().abi(), ::core::mem::transmute(initdata), ::core::mem::transmute(cb), ::core::mem::transmute(customdata), ::core::mem::transmute(cbcustomdata), notify.into_param().abi(), &mut result__).from_abi::<IMFMediaKeySession>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn KeySystem(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Shutdown(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSuspendNotify(&self) -> ::windows::runtime::Result<IMFCdmSuspendNotify> {
        let mut result__: <IMFCdmSuspendNotify as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFCdmSuspendNotify>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaKeys {
    type Vtable = IMFMediaKeys_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1555241989, 25087, 16783, [175, 218, 202, 175, 65, 66, 26, 56]);
}
impl ::core::convert::From<IMFMediaKeys> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaKeys) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaKeys> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaKeys) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaKeys {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaKeys {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaKeys_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mimetype: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, initdata: *const u8, cb: u32, customdata: *const u8, cbcustomdata: u32, notify: ::windows::runtime::RawPtr, ppsession: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, keysystem: *mut ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, notify: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaKeys2(pub ::windows::runtime::IUnknown);
impl IMFMediaKeys2 {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn CreateSession<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>, Param5: ::windows::runtime::IntoParam<'a, IMFMediaKeySessionNotify>>(&self, mimetype: Param0, initdata: *const u8, cb: u32, customdata: *const u8, cbcustomdata: u32, notify: Param5) -> ::windows::runtime::Result<IMFMediaKeySession> {
        let mut result__: <IMFMediaKeySession as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), mimetype.into_param().abi(), ::core::mem::transmute(initdata), ::core::mem::transmute(cb), ::core::mem::transmute(customdata), ::core::mem::transmute(cbcustomdata), notify.into_param().abi(), &mut result__).from_abi::<IMFMediaKeySession>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn KeySystem(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Shutdown(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSuspendNotify(&self) -> ::windows::runtime::Result<IMFCdmSuspendNotify> {
        let mut result__: <IMFCdmSuspendNotify as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFCdmSuspendNotify>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CreateSession2<'a, Param1: ::windows::runtime::IntoParam<'a, IMFMediaKeySessionNotify2>>(&self, esessiontype: MF_MEDIAKEYSESSION_TYPE, pmfmediakeysessionnotify2: Param1) -> ::windows::runtime::Result<IMFMediaKeySession2> {
        let mut result__: <IMFMediaKeySession2 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(esessiontype), pmfmediakeysessionnotify2.into_param().abi(), &mut result__).from_abi::<IMFMediaKeySession2>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetServerCertificate(&self, pbservercertificate: *const u8, cb: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(pbservercertificate), ::core::mem::transmute(cb)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDOMException(&self, systemcode: ::windows::runtime::HRESULT) -> ::windows::runtime::Result<::windows::runtime::HRESULT> {
        let mut result__: <::windows::runtime::HRESULT as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(systemcode), &mut result__).from_abi::<::windows::runtime::HRESULT>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaKeys2 {
    type Vtable = IMFMediaKeys2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1166615815, 44390, 19938, [131, 162, 172, 187, 19, 205, 141, 67]);
}
impl ::core::convert::From<IMFMediaKeys2> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaKeys2) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaKeys2> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaKeys2) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaKeys2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaKeys2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFMediaKeys2> for IMFMediaKeys {
    fn from(value: IMFMediaKeys2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFMediaKeys2> for IMFMediaKeys {
    fn from(value: &IMFMediaKeys2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaKeys> for IMFMediaKeys2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaKeys> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaKeys> for &IMFMediaKeys2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaKeys> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaKeys2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mimetype: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, initdata: *const u8, cb: u32, customdata: *const u8, cbcustomdata: u32, notify: ::windows::runtime::RawPtr, ppsession: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, keysystem: *mut ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, notify: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, esessiontype: MF_MEDIAKEYSESSION_TYPE, pmfmediakeysessionnotify2: ::windows::runtime::RawPtr, ppsession: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbservercertificate: *const u8, cb: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, systemcode: ::windows::runtime::HRESULT, code: *mut ::windows::runtime::HRESULT) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaSession(pub ::windows::runtime::IUnknown);
impl IMFMediaSession {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetEvent(&self, dwflags: MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS) -> ::windows::runtime::Result<IMFMediaEvent> {
        let mut result__: <IMFMediaEvent as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwflags), &mut result__).from_abi::<IMFMediaEvent>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BeginGetEvent<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, pcallback: Param0, punkstate: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), pcallback.into_param().abi(), punkstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndGetEvent<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, presult: Param0) -> ::windows::runtime::Result<IMFMediaEvent> {
        let mut result__: <IMFMediaEvent as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), presult.into_param().abi(), &mut result__).from_abi::<IMFMediaEvent>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn QueueEvent(&self, met: u32, guidextendedtype: *const ::windows::runtime::GUID, hrstatus: ::windows::runtime::HRESULT, pvvalue: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(met), ::core::mem::transmute(guidextendedtype), ::core::mem::transmute(hrstatus), ::core::mem::transmute(pvvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetTopology<'a, Param1: ::windows::runtime::IntoParam<'a, IMFTopology>>(&self, dwsettopologyflags: u32, ptopology: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwsettopologyflags), ptopology.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ClearTopologies(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn Start(&self, pguidtimeformat: *const ::windows::runtime::GUID, pvarstartposition: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(pguidtimeformat), ::core::mem::transmute(pvarstartposition)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Pause(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Stop(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Close(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Shutdown(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetClock(&self) -> ::windows::runtime::Result<IMFClock> {
        let mut result__: <IMFClock as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFClock>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSessionCapabilities(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetFullTopology(&self, dwgetfulltopologyflags: u32, topoid: u64) -> ::windows::runtime::Result<IMFTopology> {
        let mut result__: <IMFTopology as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).16)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwgetfulltopologyflags), ::core::mem::transmute(topoid), &mut result__).from_abi::<IMFTopology>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaSession {
    type Vtable = IMFMediaSession_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2419554356, 8656, 19950, [130, 20, 186, 46, 62, 108, 17, 39]);
}
impl ::core::convert::From<IMFMediaSession> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaSession) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaSession> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaSession) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaSession {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaSession {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFMediaSession> for IMFMediaEventGenerator {
    fn from(value: IMFMediaSession) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFMediaSession> for IMFMediaEventGenerator {
    fn from(value: &IMFMediaSession) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaEventGenerator> for IMFMediaSession {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaEventGenerator> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaEventGenerator> for &IMFMediaSession {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaEventGenerator> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaSession_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwflags: MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, ppevent: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcallback: ::windows::runtime::RawPtr, punkstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presult: ::windows::runtime::RawPtr, ppevent: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, met: u32, guidextendedtype: *const ::windows::runtime::GUID, hrstatus: ::windows::runtime::HRESULT, pvvalue: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwsettopologyflags: u32, ptopology: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pguidtimeformat: *const ::windows::runtime::GUID, pvarstartposition: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppclock: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwcaps: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwgetfulltopologyflags: u32, topoid: u64, ppfulltopology: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaSharingEngine(pub ::windows::runtime::IUnknown);
impl IMFMediaSharingEngine {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetError(&self) -> ::windows::runtime::Result<IMFMediaError> {
        let mut result__: <IMFMediaError as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFMediaError>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetErrorCode(&self, error: MF_MEDIA_ENGINE_ERR) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(error)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetSourceElements<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaEngineSrcElements>>(&self, psrcelements: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), psrcelements.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetSource<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>>(&self, purl: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), purl.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetCurrentSource(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetNetworkState(&self) -> u16 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPreload(&self) -> MF_MEDIA_ENGINE_PRELOAD {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPreload(&self, preload: MF_MEDIA_ENGINE_PRELOAD) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(preload)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBuffered(&self) -> ::windows::runtime::Result<IMFMediaTimeRange> {
        let mut result__: <IMFMediaTimeRange as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFMediaTimeRange>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Load(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn CanPlayType<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>>(&self, r#type: Param0) -> ::windows::runtime::Result<MF_MEDIA_ENGINE_CANPLAY> {
        let mut result__: <MF_MEDIA_ENGINE_CANPLAY as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), r#type.into_param().abi(), &mut result__).from_abi::<MF_MEDIA_ENGINE_CANPLAY>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetReadyState(&self) -> u16 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn IsSeeking(&self) -> super::super::Foundation::BOOL {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCurrentTime(&self) -> f64 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).16)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetCurrentTime(&self, seektime: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self), ::core::mem::transmute(seektime)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStartTime(&self) -> f64 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).18)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDuration(&self) -> f64 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).19)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn IsPaused(&self) -> super::super::Foundation::BOOL {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).20)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDefaultPlaybackRate(&self) -> f64 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).21)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetDefaultPlaybackRate(&self, rate: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::core::mem::transmute_copy(self), ::core::mem::transmute(rate)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPlaybackRate(&self) -> f64 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).23)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPlaybackRate(&self, rate: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::core::mem::transmute_copy(self), ::core::mem::transmute(rate)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPlayed(&self) -> ::windows::runtime::Result<IMFMediaTimeRange> {
        let mut result__: <IMFMediaTimeRange as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).25)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFMediaTimeRange>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSeekable(&self) -> ::windows::runtime::Result<IMFMediaTimeRange> {
        let mut result__: <IMFMediaTimeRange as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).26)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFMediaTimeRange>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn IsEnded(&self) -> super::super::Foundation::BOOL {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).27)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetAutoPlay(&self) -> super::super::Foundation::BOOL {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).28)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetAutoPlay<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, autoplay: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(::core::mem::transmute_copy(self), autoplay.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetLoop(&self) -> super::super::Foundation::BOOL {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).30)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetLoop<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, r#loop: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).31)(::core::mem::transmute_copy(self), r#loop.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Play(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Pause(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).33)(::core::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetMuted(&self) -> super::super::Foundation::BOOL {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).34)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetMuted<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, muted: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).35)(::core::mem::transmute_copy(self), muted.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetVolume(&self) -> f64 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).36)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetVolume(&self, volume: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).37)(::core::mem::transmute_copy(self), ::core::mem::transmute(volume)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn HasVideo(&self) -> super::super::Foundation::BOOL {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).38)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn HasAudio(&self) -> super::super::Foundation::BOOL {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).39)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetNativeVideoSize(&self, cx: *mut u32, cy: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).40)(::core::mem::transmute_copy(self), ::core::mem::transmute(cx), ::core::mem::transmute(cy)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetVideoAspectRatio(&self, cx: *mut u32, cy: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).41)(::core::mem::transmute_copy(self), ::core::mem::transmute(cx), ::core::mem::transmute(cy)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Shutdown(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).42)(::core::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn TransferVideoFrame<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, pdstsurf: Param0, psrc: *const MFVideoNormalizedRect, pdst: *const super::super::Foundation::RECT, pborderclr: *const MFARGB) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).43)(::core::mem::transmute_copy(self), pdstsurf.into_param().abi(), ::core::mem::transmute(psrc), ::core::mem::transmute(pdst), ::core::mem::transmute(pborderclr)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnVideoStreamTick(&self) -> ::windows::runtime::Result<i64> {
        let mut result__: <i64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).44)(::core::mem::transmute_copy(self), &mut result__).from_abi::<i64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetDevice(&self) -> ::windows::runtime::Result<DEVICE_INFO> {
        let mut result__: <DEVICE_INFO as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).45)(::core::mem::transmute_copy(self), &mut result__).from_abi::<DEVICE_INFO>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaSharingEngine {
    type Vtable = IMFMediaSharingEngine_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2369577407, 9063, 16608, [158, 238, 64, 211, 119, 204, 27, 70]);
}
impl ::core::convert::From<IMFMediaSharingEngine> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaSharingEngine) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaSharingEngine> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaSharingEngine) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaSharingEngine {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaSharingEngine {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFMediaSharingEngine> for IMFMediaEngine {
    fn from(value: IMFMediaSharingEngine) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFMediaSharingEngine> for IMFMediaEngine {
    fn from(value: &IMFMediaSharingEngine) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaEngine> for IMFMediaSharingEngine {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaEngine> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaEngine> for &IMFMediaSharingEngine {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaEngine> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaSharingEngine_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pperror: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, error: MF_MEDIA_ENGINE_ERR) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psrcelements: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, purl: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppurl: *mut ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u16,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> MF_MEDIA_ENGINE_PRELOAD,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, preload: MF_MEDIA_ENGINE_PRELOAD) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppbuffered: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, panswer: *mut MF_MEDIA_ENGINE_CANPLAY) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u16,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> f64,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, seektime: f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> f64,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> f64,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> f64,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, rate: f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> f64,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, rate: f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppplayed: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppseekable: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, autoplay: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#loop: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, muted: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> f64,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, volume: f64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, cx: *mut u32, cy: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, cx: *mut u32, cy: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdstsurf: ::windows::runtime::RawPtr, psrc: *const MFVideoNormalizedRect, pdst: *const super::super::Foundation::RECT, pborderclr: *const MFARGB) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppts: *mut i64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdevice: *mut ::core::mem::ManuallyDrop<DEVICE_INFO>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaSharingEngineClassFactory(pub ::windows::runtime::IUnknown);
impl IMFMediaSharingEngineClassFactory {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CreateInstance<'a, Param1: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, dwflags: u32, pattr: Param1) -> ::windows::runtime::Result<IMFMediaSharingEngine> {
        let mut result__: <IMFMediaSharingEngine as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwflags), pattr.into_param().abi(), &mut result__).from_abi::<IMFMediaSharingEngine>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaSharingEngineClassFactory {
    type Vtable = IMFMediaSharingEngineClassFactory_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1380789188, 45745, 20453, [143, 172, 250, 78, 69, 18, 180, 224]);
}
impl ::core::convert::From<IMFMediaSharingEngineClassFactory> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaSharingEngineClassFactory) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaSharingEngineClassFactory> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaSharingEngineClassFactory) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaSharingEngineClassFactory {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaSharingEngineClassFactory {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaSharingEngineClassFactory_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwflags: u32, pattr: ::windows::runtime::RawPtr, ppengine: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaSink(pub ::windows::runtime::IUnknown);
impl IMFMediaSink {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCharacteristics(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AddStreamSink<'a, Param1: ::windows::runtime::IntoParam<'a, IMFMediaType>>(&self, dwstreamsinkidentifier: u32, pmediatype: Param1) -> ::windows::runtime::Result<IMFStreamSink> {
        let mut result__: <IMFStreamSink as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamsinkidentifier), pmediatype.into_param().abi(), &mut result__).from_abi::<IMFStreamSink>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveStreamSink(&self, dwstreamsinkidentifier: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamsinkidentifier)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamSinkCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamSinkByIndex(&self, dwindex: u32) -> ::windows::runtime::Result<IMFStreamSink> {
        let mut result__: <IMFStreamSink as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwindex), &mut result__).from_abi::<IMFStreamSink>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamSinkById(&self, dwstreamsinkidentifier: u32) -> ::windows::runtime::Result<IMFStreamSink> {
        let mut result__: <IMFStreamSink as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamsinkidentifier), &mut result__).from_abi::<IMFStreamSink>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPresentationClock<'a, Param0: ::windows::runtime::IntoParam<'a, IMFPresentationClock>>(&self, ppresentationclock: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ppresentationclock.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPresentationClock(&self) -> ::windows::runtime::Result<IMFPresentationClock> {
        let mut result__: <IMFPresentationClock as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFPresentationClock>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Shutdown(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaSink {
    type Vtable = IMFMediaSink_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1861396064, 18368, 18022, [177, 61, 203, 183, 23, 242, 250, 44]);
}
impl ::core::convert::From<IMFMediaSink> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaSink) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaSink> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaSink) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaSink {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaSink {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaSink_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwcharacteristics: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamsinkidentifier: u32, pmediatype: ::windows::runtime::RawPtr, ppstreamsink: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamsinkidentifier: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcstreamsinkcount: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwindex: u32, ppstreamsink: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamsinkidentifier: u32, ppstreamsink: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppresentationclock: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pppresentationclock: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaSinkPreroll(pub ::windows::runtime::IUnknown);
impl IMFMediaSinkPreroll {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn NotifyPreroll(&self, hnsupcomingstarttime: i64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(hnsupcomingstarttime)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaSinkPreroll {
    type Vtable = IMFMediaSinkPreroll_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1576880938, 30324, 16656, [164, 230, 138, 104, 253, 95, 54, 136]);
}
impl ::core::convert::From<IMFMediaSinkPreroll> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaSinkPreroll) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaSinkPreroll> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaSinkPreroll) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaSinkPreroll {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaSinkPreroll {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaSinkPreroll_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hnsupcomingstarttime: i64) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaSource(pub ::windows::runtime::IUnknown);
impl IMFMediaSource {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetEvent(&self, dwflags: MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS) -> ::windows::runtime::Result<IMFMediaEvent> {
        let mut result__: <IMFMediaEvent as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwflags), &mut result__).from_abi::<IMFMediaEvent>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BeginGetEvent<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, pcallback: Param0, punkstate: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), pcallback.into_param().abi(), punkstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndGetEvent<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, presult: Param0) -> ::windows::runtime::Result<IMFMediaEvent> {
        let mut result__: <IMFMediaEvent as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), presult.into_param().abi(), &mut result__).from_abi::<IMFMediaEvent>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn QueueEvent(&self, met: u32, guidextendedtype: *const ::windows::runtime::GUID, hrstatus: ::windows::runtime::HRESULT, pvvalue: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(met), ::core::mem::transmute(guidextendedtype), ::core::mem::transmute(hrstatus), ::core::mem::transmute(pvvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCharacteristics(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CreatePresentationDescriptor(&self) -> ::windows::runtime::Result<IMFPresentationDescriptor> {
        let mut result__: <IMFPresentationDescriptor as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFPresentationDescriptor>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn Start<'a, Param0: ::windows::runtime::IntoParam<'a, IMFPresentationDescriptor>>(&self, ppresentationdescriptor: Param0, pguidtimeformat: *const ::windows::runtime::GUID, pvarstartposition: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ppresentationdescriptor.into_param().abi(), ::core::mem::transmute(pguidtimeformat), ::core::mem::transmute(pvarstartposition)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Stop(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Pause(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Shutdown(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaSource {
    type Vtable = IMFMediaSource_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(664436877, 44743, 16584, [156, 107, 166, 180, 146, 199, 138, 102]);
}
impl ::core::convert::From<IMFMediaSource> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaSource) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaSource> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaSource) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaSource {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaSource {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFMediaSource> for IMFMediaEventGenerator {
    fn from(value: IMFMediaSource) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFMediaSource> for IMFMediaEventGenerator {
    fn from(value: &IMFMediaSource) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaEventGenerator> for IMFMediaSource {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaEventGenerator> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaEventGenerator> for &IMFMediaSource {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaEventGenerator> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaSource_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwflags: MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, ppevent: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcallback: ::windows::runtime::RawPtr, punkstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presult: ::windows::runtime::RawPtr, ppevent: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, met: u32, guidextendedtype: *const ::windows::runtime::GUID, hrstatus: ::windows::runtime::HRESULT, pvvalue: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwcharacteristics: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pppresentationdescriptor: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppresentationdescriptor: ::windows::runtime::RawPtr, pguidtimeformat: *const ::windows::runtime::GUID, pvarstartposition: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaSource2(pub ::windows::runtime::IUnknown);
impl IMFMediaSource2 {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetEvent(&self, dwflags: MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS) -> ::windows::runtime::Result<IMFMediaEvent> {
        let mut result__: <IMFMediaEvent as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwflags), &mut result__).from_abi::<IMFMediaEvent>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BeginGetEvent<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, pcallback: Param0, punkstate: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), pcallback.into_param().abi(), punkstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndGetEvent<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, presult: Param0) -> ::windows::runtime::Result<IMFMediaEvent> {
        let mut result__: <IMFMediaEvent as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), presult.into_param().abi(), &mut result__).from_abi::<IMFMediaEvent>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn QueueEvent(&self, met: u32, guidextendedtype: *const ::windows::runtime::GUID, hrstatus: ::windows::runtime::HRESULT, pvvalue: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(met), ::core::mem::transmute(guidextendedtype), ::core::mem::transmute(hrstatus), ::core::mem::transmute(pvvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCharacteristics(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CreatePresentationDescriptor(&self) -> ::windows::runtime::Result<IMFPresentationDescriptor> {
        let mut result__: <IMFPresentationDescriptor as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFPresentationDescriptor>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn Start<'a, Param0: ::windows::runtime::IntoParam<'a, IMFPresentationDescriptor>>(&self, ppresentationdescriptor: Param0, pguidtimeformat: *const ::windows::runtime::GUID, pvarstartposition: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ppresentationdescriptor.into_param().abi(), ::core::mem::transmute(pguidtimeformat), ::core::mem::transmute(pvarstartposition)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Stop(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Pause(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Shutdown(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSourceAttributes(&self) -> ::windows::runtime::Result<IMFAttributes> {
        let mut result__: <IMFAttributes as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFAttributes>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamAttributes(&self, dwstreamidentifier: u32) -> ::windows::runtime::Result<IMFAttributes> {
        let mut result__: <IMFAttributes as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamidentifier), &mut result__).from_abi::<IMFAttributes>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetD3DManager<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, pmanager: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), pmanager.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetMediaType<'a, Param1: ::windows::runtime::IntoParam<'a, IMFMediaType>>(&self, dwstreamid: u32, pmediatype: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamid), pmediatype.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaSource2 {
    type Vtable = IMFMediaSource2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4222628884, 53563, 18310, [131, 25, 90, 197, 31, 192, 161, 54]);
}
impl ::core::convert::From<IMFMediaSource2> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaSource2) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaSource2> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaSource2) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaSource2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaSource2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFMediaSource2> for IMFMediaSourceEx {
    fn from(value: IMFMediaSource2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFMediaSource2> for IMFMediaSourceEx {
    fn from(value: &IMFMediaSource2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaSourceEx> for IMFMediaSource2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaSourceEx> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaSourceEx> for &IMFMediaSource2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaSourceEx> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<IMFMediaSource2> for IMFMediaSource {
    fn from(value: IMFMediaSource2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFMediaSource2> for IMFMediaSource {
    fn from(value: &IMFMediaSource2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaSource> for IMFMediaSource2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaSource> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaSource> for &IMFMediaSource2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaSource> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<IMFMediaSource2> for IMFMediaEventGenerator {
    fn from(value: IMFMediaSource2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFMediaSource2> for IMFMediaEventGenerator {
    fn from(value: &IMFMediaSource2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaEventGenerator> for IMFMediaSource2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaEventGenerator> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaEventGenerator> for &IMFMediaSource2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaEventGenerator> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaSource2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwflags: MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, ppevent: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcallback: ::windows::runtime::RawPtr, punkstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presult: ::windows::runtime::RawPtr, ppevent: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, met: u32, guidextendedtype: *const ::windows::runtime::GUID, hrstatus: ::windows::runtime::HRESULT, pvvalue: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwcharacteristics: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pppresentationdescriptor: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppresentationdescriptor: ::windows::runtime::RawPtr, pguidtimeformat: *const ::windows::runtime::GUID, pvarstartposition: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppattributes: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamidentifier: u32, ppattributes: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pmanager: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamid: u32, pmediatype: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaSourceEx(pub ::windows::runtime::IUnknown);
impl IMFMediaSourceEx {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetEvent(&self, dwflags: MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS) -> ::windows::runtime::Result<IMFMediaEvent> {
        let mut result__: <IMFMediaEvent as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwflags), &mut result__).from_abi::<IMFMediaEvent>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BeginGetEvent<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, pcallback: Param0, punkstate: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), pcallback.into_param().abi(), punkstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndGetEvent<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, presult: Param0) -> ::windows::runtime::Result<IMFMediaEvent> {
        let mut result__: <IMFMediaEvent as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), presult.into_param().abi(), &mut result__).from_abi::<IMFMediaEvent>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn QueueEvent(&self, met: u32, guidextendedtype: *const ::windows::runtime::GUID, hrstatus: ::windows::runtime::HRESULT, pvvalue: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(met), ::core::mem::transmute(guidextendedtype), ::core::mem::transmute(hrstatus), ::core::mem::transmute(pvvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCharacteristics(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CreatePresentationDescriptor(&self) -> ::windows::runtime::Result<IMFPresentationDescriptor> {
        let mut result__: <IMFPresentationDescriptor as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFPresentationDescriptor>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn Start<'a, Param0: ::windows::runtime::IntoParam<'a, IMFPresentationDescriptor>>(&self, ppresentationdescriptor: Param0, pguidtimeformat: *const ::windows::runtime::GUID, pvarstartposition: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ppresentationdescriptor.into_param().abi(), ::core::mem::transmute(pguidtimeformat), ::core::mem::transmute(pvarstartposition)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Stop(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Pause(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Shutdown(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSourceAttributes(&self) -> ::windows::runtime::Result<IMFAttributes> {
        let mut result__: <IMFAttributes as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFAttributes>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamAttributes(&self, dwstreamidentifier: u32) -> ::windows::runtime::Result<IMFAttributes> {
        let mut result__: <IMFAttributes as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamidentifier), &mut result__).from_abi::<IMFAttributes>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetD3DManager<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, pmanager: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), pmanager.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaSourceEx {
    type Vtable = IMFMediaSourceEx_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1016803001, 34517, 17684, [163, 148, 245, 102, 100, 249, 240, 216]);
}
impl ::core::convert::From<IMFMediaSourceEx> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaSourceEx) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaSourceEx> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaSourceEx) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaSourceEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaSourceEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFMediaSourceEx> for IMFMediaSource {
    fn from(value: IMFMediaSourceEx) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFMediaSourceEx> for IMFMediaSource {
    fn from(value: &IMFMediaSourceEx) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaSource> for IMFMediaSourceEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaSource> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaSource> for &IMFMediaSourceEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaSource> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<IMFMediaSourceEx> for IMFMediaEventGenerator {
    fn from(value: IMFMediaSourceEx) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFMediaSourceEx> for IMFMediaEventGenerator {
    fn from(value: &IMFMediaSourceEx) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaEventGenerator> for IMFMediaSourceEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaEventGenerator> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaEventGenerator> for &IMFMediaSourceEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaEventGenerator> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaSourceEx_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwflags: MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, ppevent: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcallback: ::windows::runtime::RawPtr, punkstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presult: ::windows::runtime::RawPtr, ppevent: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, met: u32, guidextendedtype: *const ::windows::runtime::GUID, hrstatus: ::windows::runtime::HRESULT, pvvalue: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwcharacteristics: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pppresentationdescriptor: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppresentationdescriptor: ::windows::runtime::RawPtr, pguidtimeformat: *const ::windows::runtime::GUID, pvarstartposition: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppattributes: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamidentifier: u32, ppattributes: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pmanager: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaSourceExtension(pub ::windows::runtime::IUnknown);
impl IMFMediaSourceExtension {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSourceBuffers(&self) -> ::core::option::Option<IMFSourceBufferList> {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetActiveSourceBuffers(&self) -> ::core::option::Option<IMFSourceBufferList> {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetReadyState(&self) -> MF_MSE_READY {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDuration(&self) -> f64 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetDuration(&self, duration: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(duration)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn AddSourceBuffer<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>, Param1: ::windows::runtime::IntoParam<'a, IMFSourceBufferNotify>>(&self, r#type: Param0, pnotify: Param1) -> ::windows::runtime::Result<IMFSourceBuffer> {
        let mut result__: <IMFSourceBuffer as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), r#type.into_param().abi(), pnotify.into_param().abi(), &mut result__).from_abi::<IMFSourceBuffer>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveSourceBuffer<'a, Param0: ::windows::runtime::IntoParam<'a, IMFSourceBuffer>>(&self, psourcebuffer: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), psourcebuffer.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetEndOfStream(&self, error: MF_MSE_ERROR) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(error)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn IsTypeSupported<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>>(&self, r#type: Param0) -> super::super::Foundation::BOOL {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), r#type.into_param().abi()))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSourceBuffer(&self, dwstreamindex: u32) -> ::core::option::Option<IMFSourceBuffer> {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex)))
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaSourceExtension {
    type Vtable = IMFMediaSourceExtension_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3832002894, 42771, 17762, [168, 2, 129, 106, 66, 233, 0, 138]);
}
impl ::core::convert::From<IMFMediaSourceExtension> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaSourceExtension) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaSourceExtension> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaSourceExtension) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaSourceExtension {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaSourceExtension {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaSourceExtension_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::RawPtr,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::RawPtr,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> MF_MSE_READY,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> f64,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, duration: f64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, pnotify: ::windows::runtime::RawPtr, ppsourcebuffer: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psourcebuffer: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, error: MF_MSE_ERROR) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32) -> ::windows::runtime::RawPtr,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaSourceExtensionLiveSeekableRange(pub ::windows::runtime::IUnknown);
impl IMFMediaSourceExtensionLiveSeekableRange {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetLiveSeekableRange(&self, start: f64, end: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(start), ::core::mem::transmute(end)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ClearLiveSeekableRange(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaSourceExtensionLiveSeekableRange {
    type Vtable = IMFMediaSourceExtensionLiveSeekableRange_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1562034134, 17674, 19858, [158, 252, 214, 182, 203, 193, 244, 218]);
}
impl ::core::convert::From<IMFMediaSourceExtensionLiveSeekableRange> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaSourceExtensionLiveSeekableRange) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaSourceExtensionLiveSeekableRange> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaSourceExtensionLiveSeekableRange) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaSourceExtensionLiveSeekableRange {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaSourceExtensionLiveSeekableRange {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaSourceExtensionLiveSeekableRange_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: f64, end: f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaSourceExtensionNotify(pub ::windows::runtime::IUnknown);
impl IMFMediaSourceExtensionNotify {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnSourceOpen(&self) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnSourceEnded(&self) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnSourceClose(&self) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self)))
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaSourceExtensionNotify {
    type Vtable = IMFMediaSourceExtensionNotify_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2811237159, 1501, 17513, [167, 183, 14, 1, 151, 158, 54, 29]);
}
impl ::core::convert::From<IMFMediaSourceExtensionNotify> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaSourceExtensionNotify) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaSourceExtensionNotify> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaSourceExtensionNotify) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaSourceExtensionNotify {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaSourceExtensionNotify {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaSourceExtensionNotify_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaSourcePresentationProvider(pub ::windows::runtime::IUnknown);
impl IMFMediaSourcePresentationProvider {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ForceEndOfPresentation<'a, Param0: ::windows::runtime::IntoParam<'a, IMFPresentationDescriptor>>(&self, ppresentationdescriptor: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ppresentationdescriptor.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaSourcePresentationProvider {
    type Vtable = IMFMediaSourcePresentationProvider_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(236806154, 51699, 17453, [140, 81, 164, 45, 45, 73, 69, 47]);
}
impl ::core::convert::From<IMFMediaSourcePresentationProvider> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaSourcePresentationProvider) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaSourcePresentationProvider> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaSourcePresentationProvider) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaSourcePresentationProvider {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaSourcePresentationProvider {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaSourcePresentationProvider_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppresentationdescriptor: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaSourceTopologyProvider(pub ::windows::runtime::IUnknown);
impl IMFMediaSourceTopologyProvider {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetMediaSourceTopology<'a, Param0: ::windows::runtime::IntoParam<'a, IMFPresentationDescriptor>>(&self, ppresentationdescriptor: Param0) -> ::windows::runtime::Result<IMFTopology> {
        let mut result__: <IMFTopology as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ppresentationdescriptor.into_param().abi(), &mut result__).from_abi::<IMFTopology>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaSourceTopologyProvider {
    type Vtable = IMFMediaSourceTopologyProvider_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(236806153, 51699, 17453, [140, 81, 164, 45, 45, 73, 69, 47]);
}
impl ::core::convert::From<IMFMediaSourceTopologyProvider> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaSourceTopologyProvider) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaSourceTopologyProvider> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaSourceTopologyProvider) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaSourceTopologyProvider {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaSourceTopologyProvider {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaSourceTopologyProvider_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppresentationdescriptor: ::windows::runtime::RawPtr, pptopology: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaStream(pub ::windows::runtime::IUnknown);
impl IMFMediaStream {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetEvent(&self, dwflags: MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS) -> ::windows::runtime::Result<IMFMediaEvent> {
        let mut result__: <IMFMediaEvent as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwflags), &mut result__).from_abi::<IMFMediaEvent>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BeginGetEvent<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, pcallback: Param0, punkstate: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), pcallback.into_param().abi(), punkstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndGetEvent<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, presult: Param0) -> ::windows::runtime::Result<IMFMediaEvent> {
        let mut result__: <IMFMediaEvent as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), presult.into_param().abi(), &mut result__).from_abi::<IMFMediaEvent>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn QueueEvent(&self, met: u32, guidextendedtype: *const ::windows::runtime::GUID, hrstatus: ::windows::runtime::HRESULT, pvvalue: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(met), ::core::mem::transmute(guidextendedtype), ::core::mem::transmute(hrstatus), ::core::mem::transmute(pvvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetMediaSource(&self) -> ::windows::runtime::Result<IMFMediaSource> {
        let mut result__: <IMFMediaSource as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFMediaSource>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamDescriptor(&self) -> ::windows::runtime::Result<IMFStreamDescriptor> {
        let mut result__: <IMFStreamDescriptor as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFStreamDescriptor>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RequestSample<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, ptoken: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ptoken.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaStream {
    type Vtable = IMFMediaStream_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3514962063, 20166, 17471, [170, 66, 167, 17, 6, 236, 130, 95]);
}
impl ::core::convert::From<IMFMediaStream> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaStream) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaStream> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaStream) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaStream {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaStream {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFMediaStream> for IMFMediaEventGenerator {
    fn from(value: IMFMediaStream) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFMediaStream> for IMFMediaEventGenerator {
    fn from(value: &IMFMediaStream) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaEventGenerator> for IMFMediaStream {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaEventGenerator> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaEventGenerator> for &IMFMediaStream {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaEventGenerator> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaStream_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwflags: MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, ppevent: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcallback: ::windows::runtime::RawPtr, punkstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presult: ::windows::runtime::RawPtr, ppevent: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, met: u32, guidextendedtype: *const ::windows::runtime::GUID, hrstatus: ::windows::runtime::HRESULT, pvvalue: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppmediasource: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppstreamdescriptor: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ptoken: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaStream2(pub ::windows::runtime::IUnknown);
impl IMFMediaStream2 {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetEvent(&self, dwflags: MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS) -> ::windows::runtime::Result<IMFMediaEvent> {
        let mut result__: <IMFMediaEvent as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwflags), &mut result__).from_abi::<IMFMediaEvent>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BeginGetEvent<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, pcallback: Param0, punkstate: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), pcallback.into_param().abi(), punkstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndGetEvent<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, presult: Param0) -> ::windows::runtime::Result<IMFMediaEvent> {
        let mut result__: <IMFMediaEvent as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), presult.into_param().abi(), &mut result__).from_abi::<IMFMediaEvent>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn QueueEvent(&self, met: u32, guidextendedtype: *const ::windows::runtime::GUID, hrstatus: ::windows::runtime::HRESULT, pvvalue: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(met), ::core::mem::transmute(guidextendedtype), ::core::mem::transmute(hrstatus), ::core::mem::transmute(pvvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetMediaSource(&self) -> ::windows::runtime::Result<IMFMediaSource> {
        let mut result__: <IMFMediaSource as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFMediaSource>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamDescriptor(&self) -> ::windows::runtime::Result<IMFStreamDescriptor> {
        let mut result__: <IMFStreamDescriptor as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFStreamDescriptor>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RequestSample<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, ptoken: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ptoken.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetStreamState(&self, value: MF_STREAM_STATE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(value)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamState(&self) -> ::windows::runtime::Result<MF_STREAM_STATE> {
        let mut result__: <MF_STREAM_STATE as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MF_STREAM_STATE>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaStream2 {
    type Vtable = IMFMediaStream2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3317446614, 30151, 18081, [161, 50, 129, 181, 247, 35, 194, 15]);
}
impl ::core::convert::From<IMFMediaStream2> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaStream2) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaStream2> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaStream2) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaStream2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaStream2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFMediaStream2> for IMFMediaStream {
    fn from(value: IMFMediaStream2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFMediaStream2> for IMFMediaStream {
    fn from(value: &IMFMediaStream2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaStream> for IMFMediaStream2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaStream> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaStream> for &IMFMediaStream2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaStream> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<IMFMediaStream2> for IMFMediaEventGenerator {
    fn from(value: IMFMediaStream2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFMediaStream2> for IMFMediaEventGenerator {
    fn from(value: &IMFMediaStream2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaEventGenerator> for IMFMediaStream2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaEventGenerator> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaEventGenerator> for &IMFMediaStream2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaEventGenerator> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaStream2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwflags: MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, ppevent: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcallback: ::windows::runtime::RawPtr, punkstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presult: ::windows::runtime::RawPtr, ppevent: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, met: u32, guidextendedtype: *const ::windows::runtime::GUID, hrstatus: ::windows::runtime::HRESULT, pvvalue: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppmediasource: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppstreamdescriptor: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ptoken: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, value: MF_STREAM_STATE) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, value: *mut MF_STREAM_STATE) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaStreamSourceSampleRequest(pub ::windows::runtime::IUnknown);
impl IMFMediaStreamSourceSampleRequest {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetSample<'a, Param0: ::windows::runtime::IntoParam<'a, IMFSample>>(&self, value: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), value.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaStreamSourceSampleRequest {
    type Vtable = IMFMediaStreamSourceSampleRequest_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(940284665, 43099, 20088, [162, 175, 234, 92, 230, 69, 198, 180]);
}
impl ::core::convert::From<IMFMediaStreamSourceSampleRequest> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaStreamSourceSampleRequest) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaStreamSourceSampleRequest> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaStreamSourceSampleRequest) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaStreamSourceSampleRequest {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaStreamSourceSampleRequest {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaStreamSourceSampleRequest_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, value: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaTimeRange(pub ::windows::runtime::IUnknown);
impl IMFMediaTimeRange {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetLength(&self) -> u32 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStart(&self, index: u32) -> ::windows::runtime::Result<f64> {
        let mut result__: <f64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(index), &mut result__).from_abi::<f64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetEnd(&self, index: u32) -> ::windows::runtime::Result<f64> {
        let mut result__: <f64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(index), &mut result__).from_abi::<f64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn ContainsTime(&self, time: f64) -> super::super::Foundation::BOOL {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(time)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AddRange(&self, starttime: f64, endtime: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(starttime), ::core::mem::transmute(endtime)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Clear(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaTimeRange {
    type Vtable = IMFMediaTimeRange_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3681657596, 1930, 16718, [157, 249, 140, 37, 49, 176, 170, 108]);
}
impl ::core::convert::From<IMFMediaTimeRange> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaTimeRange) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaTimeRange> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaTimeRange) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaTimeRange {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaTimeRange {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaTimeRange_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, pstart: *mut f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, pend: *mut f64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, time: f64) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, starttime: f64, endtime: f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaType(pub ::windows::runtime::IUnknown);
impl IMFMediaType {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetItem(&self, guidkey: *const ::windows::runtime::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetItemType(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<MF_ATTRIBUTE_TYPE> {
        let mut result__: <MF_ATTRIBUTE_TYPE as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<MF_ATTRIBUTE_TYPE>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn CompareItem(&self, guidkey: *const ::windows::runtime::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(value), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn Compare<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, ptheirs: Param0, matchtype: MF_ATTRIBUTES_MATCH_TYPE) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ptheirs.into_param().abi(), ::core::mem::transmute(matchtype), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUINT32(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUINT64(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDouble(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<f64> {
        let mut result__: <f64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<f64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetGUID(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStringLength(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetString(&self, guidkey: *const ::windows::runtime::GUID, pwszvalue: super::super::Foundation::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pwszvalue), ::core::mem::transmute(cchbufsize), ::core::mem::transmute(pcchlength)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetAllocatedString(&self, guidkey: *const ::windows::runtime::GUID, ppwszvalue: *mut super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(ppwszvalue), ::core::mem::transmute(pcchlength)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBlobSize(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBlob(&self, guidkey: *const ::windows::runtime::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize), ::core::mem::transmute(pcbblobsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetAllocatedBlob(&self, guidkey: *const ::windows::runtime::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(ppbuf), ::core::mem::transmute(pcbsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUnknown<T: ::windows::runtime::Interface>(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn SetItem(&self, guidkey: *const ::windows::runtime::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(value)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteItem(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteAllItems(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUINT32(&self, guidkey: *const ::windows::runtime::GUID, unvalue: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(unvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUINT64(&self, guidkey: *const ::windows::runtime::GUID, unvalue: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(unvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetDouble(&self, guidkey: *const ::windows::runtime::GUID, fvalue: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(fvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetGUID(&self, guidkey: *const ::windows::runtime::GUID, guidvalue: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(guidvalue)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetString<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, guidkey: *const ::windows::runtime::GUID, wszvalue: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), wszvalue.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetBlob(&self, guidkey: *const ::windows::runtime::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUnknown<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guidkey: *const ::windows::runtime::GUID, punknown: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).27)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), punknown.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn LockStore(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).28)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn UnlockStore(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetItemByIndex(&self, unindex: u32, pguidkey: *mut ::windows::runtime::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).31)(::core::mem::transmute_copy(self), ::core::mem::transmute(unindex), ::core::mem::transmute(pguidkey), ::core::mem::transmute(pvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CopyAllItems<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, pdest: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::core::mem::transmute_copy(self), pdest.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetMajorType(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).33)(::core::mem::transmute_copy(self), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn IsCompressedFormat(&self) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).34)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn IsEqual<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaType>>(&self, pimediatype: Param0) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).35)(::core::mem::transmute_copy(self), pimediatype.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetRepresentation<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::GUID>>(&self, guidrepresentation: Param0, ppvrepresentation: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).36)(::core::mem::transmute_copy(self), guidrepresentation.into_param().abi(), ::core::mem::transmute(ppvrepresentation)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn FreeRepresentation<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::GUID>>(&self, guidrepresentation: Param0, pvrepresentation: *const ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).37)(::core::mem::transmute_copy(self), guidrepresentation.into_param().abi(), ::core::mem::transmute(pvrepresentation)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaType {
    type Vtable = IMFMediaType_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1152257960, 59953, 16649, [141, 46, 76, 174, 73, 151, 197, 85]);
}
impl ::core::convert::From<IMFMediaType> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaType) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaType> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaType) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaType {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaType {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFMediaType> for IMFAttributes {
    fn from(value: IMFMediaType) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFMediaType> for IMFAttributes {
    fn from(value: &IMFMediaType) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAttributes> for IMFMediaType {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAttributes> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAttributes> for &IMFMediaType {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAttributes> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaType_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ptype: *mut MF_ATTRIBUTE_TYPE) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, value: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>, pbresult: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ptheirs: ::windows::runtime::RawPtr, matchtype: MF_ATTRIBUTES_MATCH_TYPE, pbresult: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punvalue: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punvalue: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pfvalue: *mut f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pguidvalue: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pwszvalue: super::super::Foundation::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ppwszvalue: *mut super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pcbblobsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, value: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, unvalue: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, unvalue: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, fvalue: f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, guidvalue: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, wszvalue: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punknown: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcitems: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, unindex: u32, pguidkey: *mut ::windows::runtime::GUID, pvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdest: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pguidmajortype: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pfcompressed: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pimediatype: ::windows::runtime::RawPtr, pdwflags: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidrepresentation: ::windows::runtime::GUID, ppvrepresentation: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidrepresentation: ::windows::runtime::GUID, pvrepresentation: *const ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMediaTypeHandler(pub ::windows::runtime::IUnknown);
impl IMFMediaTypeHandler {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn IsMediaTypeSupported<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaType>>(&self, pmediatype: Param0) -> ::windows::runtime::Result<IMFMediaType> {
        let mut result__: <IMFMediaType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), pmediatype.into_param().abi(), &mut result__).from_abi::<IMFMediaType>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetMediaTypeCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetMediaTypeByIndex(&self, dwindex: u32) -> ::windows::runtime::Result<IMFMediaType> {
        let mut result__: <IMFMediaType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwindex), &mut result__).from_abi::<IMFMediaType>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetCurrentMediaType<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaType>>(&self, pmediatype: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), pmediatype.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCurrentMediaType(&self) -> ::windows::runtime::Result<IMFMediaType> {
        let mut result__: <IMFMediaType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFMediaType>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetMajorType(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFMediaTypeHandler {
    type Vtable = IMFMediaTypeHandler_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3913142124, 19207, 19998, [129, 35, 170, 22, 237, 110, 173, 245]);
}
impl ::core::convert::From<IMFMediaTypeHandler> for ::windows::runtime::IUnknown {
    fn from(value: IMFMediaTypeHandler) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMediaTypeHandler> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMediaTypeHandler) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMediaTypeHandler {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMediaTypeHandler {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMediaTypeHandler_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pmediatype: ::windows::runtime::RawPtr, ppmediatype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwtypecount: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwindex: u32, pptype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pmediatype: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppmediatype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pguidmajortype: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMetadata(pub ::windows::runtime::IUnknown);
impl IMFMetadata {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetLanguage<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, pwszrfc1766: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), pwszrfc1766.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetLanguage(&self) -> ::windows::runtime::Result<super::super::Foundation::PWSTR> {
        let mut result__: <super::super::Foundation::PWSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::PWSTR>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetAllLanguages(&self) -> ::windows::runtime::Result<super::super::System::Com::StructuredStorage::PROPVARIANT> {
        let mut result__: <super::super::System::Com::StructuredStorage::PROPVARIANT as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::System::Com::StructuredStorage::PROPVARIANT>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn SetProperty<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, pwszname: Param0, ppvvalue: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), pwszname.into_param().abi(), ::core::mem::transmute(ppvvalue)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetProperty<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, pwszname: Param0) -> ::windows::runtime::Result<super::super::System::Com::StructuredStorage::PROPVARIANT> {
        let mut result__: <super::super::System::Com::StructuredStorage::PROPVARIANT as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), pwszname.into_param().abi(), &mut result__).from_abi::<super::super::System::Com::StructuredStorage::PROPVARIANT>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn DeleteProperty<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, pwszname: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), pwszname.into_param().abi()).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetAllPropertyNames(&self) -> ::windows::runtime::Result<super::super::System::Com::StructuredStorage::PROPVARIANT> {
        let mut result__: <super::super::System::Com::StructuredStorage::PROPVARIANT as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::System::Com::StructuredStorage::PROPVARIANT>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFMetadata {
    type Vtable = IMFMetadata_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4169989004, 61206, 18833, [180, 80, 203, 140, 105, 229, 23, 4]);
}
impl ::core::convert::From<IMFMetadata> for ::windows::runtime::IUnknown {
    fn from(value: IMFMetadata) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMetadata> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMetadata) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMetadata {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMetadata {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMetadata_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pwszrfc1766: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppwszrfc1766: *mut super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppvlanguages: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pwszname: super::super::Foundation::PWSTR, ppvvalue: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pwszname: super::super::Foundation::PWSTR, ppvvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pwszname: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppvnames: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMetadataProvider(pub ::windows::runtime::IUnknown);
impl IMFMetadataProvider {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetMFMetadata<'a, Param0: ::windows::runtime::IntoParam<'a, IMFPresentationDescriptor>>(&self, ppresentationdescriptor: Param0, dwstreamidentifier: u32, dwflags: u32) -> ::windows::runtime::Result<IMFMetadata> {
        let mut result__: <IMFMetadata as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ppresentationdescriptor.into_param().abi(), ::core::mem::transmute(dwstreamidentifier), ::core::mem::transmute(dwflags), &mut result__).from_abi::<IMFMetadata>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFMetadataProvider {
    type Vtable = IMFMetadataProvider_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1444420909, 57889, 19163, [177, 200, 60, 238, 106, 83, 247, 111]);
}
impl ::core::convert::From<IMFMetadataProvider> for ::windows::runtime::IUnknown {
    fn from(value: IMFMetadataProvider) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMetadataProvider> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMetadataProvider) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMetadataProvider {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMetadataProvider {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMetadataProvider_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppresentationdescriptor: ::windows::runtime::RawPtr, dwstreamidentifier: u32, dwflags: u32, ppmfmetadata: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMuxStreamAttributesManager(pub ::windows::runtime::IUnknown);
impl IMFMuxStreamAttributesManager {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetAttributes(&self, dwmuxstreamindex: u32) -> ::windows::runtime::Result<IMFAttributes> {
        let mut result__: <IMFAttributes as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwmuxstreamindex), &mut result__).from_abi::<IMFAttributes>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFMuxStreamAttributesManager {
    type Vtable = IMFMuxStreamAttributesManager_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3465270646, 58432, 17331, [190, 52, 30, 83, 245, 101, 247, 232]);
}
impl ::core::convert::From<IMFMuxStreamAttributesManager> for ::windows::runtime::IUnknown {
    fn from(value: IMFMuxStreamAttributesManager) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMuxStreamAttributesManager> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMuxStreamAttributesManager) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMuxStreamAttributesManager {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMuxStreamAttributesManager {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMuxStreamAttributesManager_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwmuxstreamcount: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwmuxstreamindex: u32, ppstreamattributes: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMuxStreamMediaTypeManager(pub ::windows::runtime::IUnknown);
impl IMFMuxStreamMediaTypeManager {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetMediaType(&self, dwmuxstreamindex: u32) -> ::windows::runtime::Result<IMFMediaType> {
        let mut result__: <IMFMediaType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwmuxstreamindex), &mut result__).from_abi::<IMFMediaType>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamConfigurationCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AddStreamConfiguration(&self, ullstreammask: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(ullstreammask)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveStreamConfiguration(&self, ullstreammask: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(ullstreammask)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamConfiguration(&self, ulindex: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(ulindex), &mut result__).from_abi::<u64>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFMuxStreamMediaTypeManager {
    type Vtable = IMFMuxStreamMediaTypeManager_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1348086898, 17143, 18064, [174, 171, 143, 81, 61, 15, 253, 184]);
}
impl ::core::convert::From<IMFMuxStreamMediaTypeManager> for ::windows::runtime::IUnknown {
    fn from(value: IMFMuxStreamMediaTypeManager) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMuxStreamMediaTypeManager> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMuxStreamMediaTypeManager) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMuxStreamMediaTypeManager {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMuxStreamMediaTypeManager {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMuxStreamMediaTypeManager_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwmuxstreamcount: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwmuxstreamindex: u32, ppmediatype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwcount: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ullstreammask: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ullstreammask: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ulindex: u32, pullstreammask: *mut u64) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFMuxStreamSampleManager(pub ::windows::runtime::IUnknown);
impl IMFMuxStreamSampleManager {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSample(&self, dwmuxstreamindex: u32) -> ::windows::runtime::Result<IMFSample> {
        let mut result__: <IMFSample as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwmuxstreamindex), &mut result__).from_abi::<IMFSample>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamConfiguration(&self) -> u64 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self)))
    }
}
unsafe impl ::windows::runtime::Interface for IMFMuxStreamSampleManager {
    type Vtable = IMFMuxStreamSampleManager_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1957411865, 45516, 20033, [187, 139, 157, 155, 134, 168, 246, 202]);
}
impl ::core::convert::From<IMFMuxStreamSampleManager> for ::windows::runtime::IUnknown {
    fn from(value: IMFMuxStreamSampleManager) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFMuxStreamSampleManager> for ::windows::runtime::IUnknown {
    fn from(value: &IMFMuxStreamSampleManager) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFMuxStreamSampleManager {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFMuxStreamSampleManager {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFMuxStreamSampleManager_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwmuxstreamcount: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwmuxstreamindex: u32, ppsample: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u64,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFNetCredential(pub ::windows::runtime::IUnknown);
impl IMFNetCredential {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetUser<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, pbdata: *const u8, cbdata: u32, fdataisencrypted: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(pbdata), ::core::mem::transmute(cbdata), fdataisencrypted.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetPassword<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, pbdata: *const u8, cbdata: u32, fdataisencrypted: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(pbdata), ::core::mem::transmute(cbdata), fdataisencrypted.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetUser<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, pbdata: *mut u8, pcbdata: *mut u32, fencryptdata: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(pbdata), ::core::mem::transmute(pcbdata), fencryptdata.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetPassword<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, pbdata: *mut u8, pcbdata: *mut u32, fencryptdata: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(pbdata), ::core::mem::transmute(pcbdata), fencryptdata.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn LoggedOnUser(&self) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFNetCredential {
    type Vtable = IMFNetCredential_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1535635306, 32472, 17231, [186, 14, 24, 79, 172, 22, 40, 209]);
}
impl ::core::convert::From<IMFNetCredential> for ::windows::runtime::IUnknown {
    fn from(value: IMFNetCredential) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFNetCredential> for ::windows::runtime::IUnknown {
    fn from(value: &IMFNetCredential) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFNetCredential {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFNetCredential {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFNetCredential_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbdata: *const u8, cbdata: u32, fdataisencrypted: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbdata: *const u8, cbdata: u32, fdataisencrypted: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbdata: *mut u8, pcbdata: *mut u32, fencryptdata: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbdata: *mut u8, pcbdata: *mut u32, fencryptdata: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pfloggedonuser: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFNetCredentialCache(pub ::windows::runtime::IUnknown);
impl IMFNetCredentialCache {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetCredential<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, pszurl: Param0, pszrealm: Param1, dwauthenticationflags: u32, ppcred: *mut ::core::option::Option<IMFNetCredential>, pdwrequirementsflags: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), pszurl.into_param().abi(), pszrealm.into_param().abi(), ::core::mem::transmute(dwauthenticationflags), ::core::mem::transmute(ppcred), ::core::mem::transmute(pdwrequirementsflags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetGood<'a, Param0: ::windows::runtime::IntoParam<'a, IMFNetCredential>, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, pcred: Param0, fgood: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), pcred.into_param().abi(), fgood.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUserOptions<'a, Param0: ::windows::runtime::IntoParam<'a, IMFNetCredential>>(&self, pcred: Param0, dwoptionsflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), pcred.into_param().abi(), ::core::mem::transmute(dwoptionsflags)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFNetCredentialCache {
    type Vtable = IMFNetCredentialCache_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1535635308, 32472, 17231, [186, 14, 24, 79, 172, 22, 40, 209]);
}
impl ::core::convert::From<IMFNetCredentialCache> for ::windows::runtime::IUnknown {
    fn from(value: IMFNetCredentialCache) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFNetCredentialCache> for ::windows::runtime::IUnknown {
    fn from(value: &IMFNetCredentialCache) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFNetCredentialCache {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFNetCredentialCache {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFNetCredentialCache_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszurl: super::super::Foundation::PWSTR, pszrealm: super::super::Foundation::PWSTR, dwauthenticationflags: u32, ppcred: *mut ::windows::runtime::RawPtr, pdwrequirementsflags: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcred: ::windows::runtime::RawPtr, fgood: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcred: ::windows::runtime::RawPtr, dwoptionsflags: u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFNetCredentialManager(pub ::windows::runtime::IUnknown);
impl IMFNetCredentialManager {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn BeginGetCredentials<'a, Param1: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param2: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, pparam: *const MFNetCredentialManagerGetParam, pcallback: Param1, pstate: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(pparam), pcallback.into_param().abi(), pstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndGetCredentials<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, presult: Param0) -> ::windows::runtime::Result<IMFNetCredential> {
        let mut result__: <IMFNetCredential as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), presult.into_param().abi(), &mut result__).from_abi::<IMFNetCredential>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetGood<'a, Param0: ::windows::runtime::IntoParam<'a, IMFNetCredential>, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, pcred: Param0, fgood: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), pcred.into_param().abi(), fgood.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFNetCredentialManager {
    type Vtable = IMFNetCredentialManager_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1535635307, 32472, 17231, [186, 14, 24, 79, 172, 22, 40, 209]);
}
impl ::core::convert::From<IMFNetCredentialManager> for ::windows::runtime::IUnknown {
    fn from(value: IMFNetCredentialManager) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFNetCredentialManager> for ::windows::runtime::IUnknown {
    fn from(value: &IMFNetCredentialManager) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFNetCredentialManager {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFNetCredentialManager {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFNetCredentialManager_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pparam: *const MFNetCredentialManagerGetParam, pcallback: ::windows::runtime::RawPtr, pstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presult: ::windows::runtime::RawPtr, ppcred: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcred: ::windows::runtime::RawPtr, fgood: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFNetCrossOriginSupport(pub ::windows::runtime::IUnknown);
impl IMFNetCrossOriginSupport {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCrossOriginPolicy(&self) -> ::windows::runtime::Result<MF_CROSS_ORIGIN_POLICY> {
        let mut result__: <MF_CROSS_ORIGIN_POLICY as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MF_CROSS_ORIGIN_POLICY>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetSourceOrigin(&self) -> ::windows::runtime::Result<super::super::Foundation::PWSTR> {
        let mut result__: <super::super::Foundation::PWSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::PWSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn IsSameOrigin<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, wszurl: Param0) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), wszurl.into_param().abi(), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFNetCrossOriginSupport {
    type Vtable = IMFNetCrossOriginSupport_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3156966724, 42797, 18901, [131, 118, 20, 128, 222, 229, 139, 34]);
}
impl ::core::convert::From<IMFNetCrossOriginSupport> for ::windows::runtime::IUnknown {
    fn from(value: IMFNetCrossOriginSupport) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFNetCrossOriginSupport> for ::windows::runtime::IUnknown {
    fn from(value: &IMFNetCrossOriginSupport) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFNetCrossOriginSupport {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFNetCrossOriginSupport {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFNetCrossOriginSupport_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppolicy: *mut MF_CROSS_ORIGIN_POLICY) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, wszsourceorigin: *mut super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, wszurl: super::super::Foundation::PWSTR, pfissameorigin: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFNetProxyLocator(pub ::windows::runtime::IUnknown);
impl IMFNetProxyLocator {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn FindFirstProxy<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, pszhost: Param0, pszurl: Param1, freserved: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), pszhost.into_param().abi(), pszurl.into_param().abi(), freserved.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn FindNextProxy(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RegisterProxyResult(&self, hrop: ::windows::runtime::HRESULT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(hrop)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetCurrentProxy(&self, pszstr: super::super::Foundation::PWSTR, pcchstr: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(pszstr), ::core::mem::transmute(pcchstr)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Clone(&self) -> ::windows::runtime::Result<IMFNetProxyLocator> {
        let mut result__: <IMFNetProxyLocator as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFNetProxyLocator>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFNetProxyLocator {
    type Vtable = IMFNetProxyLocator_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3922527107, 41576, 19380, [130, 222, 101, 141, 83, 87, 77, 65]);
}
impl ::core::convert::From<IMFNetProxyLocator> for ::windows::runtime::IUnknown {
    fn from(value: IMFNetProxyLocator) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFNetProxyLocator> for ::windows::runtime::IUnknown {
    fn from(value: &IMFNetProxyLocator) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFNetProxyLocator {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFNetProxyLocator {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFNetProxyLocator_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszhost: super::super::Foundation::PWSTR, pszurl: super::super::Foundation::PWSTR, freserved: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hrop: ::windows::runtime::HRESULT) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszstr: super::super::Foundation::PWSTR, pcchstr: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppproxylocator: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFNetProxyLocatorFactory(pub ::windows::runtime::IUnknown);
impl IMFNetProxyLocatorFactory {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn CreateProxyLocator<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, pszprotocol: Param0) -> ::windows::runtime::Result<IMFNetProxyLocator> {
        let mut result__: <IMFNetProxyLocator as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), pszprotocol.into_param().abi(), &mut result__).from_abi::<IMFNetProxyLocator>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFNetProxyLocatorFactory {
    type Vtable = IMFNetProxyLocatorFactory_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3922527108, 41576, 19380, [130, 222, 101, 141, 83, 87, 77, 65]);
}
impl ::core::convert::From<IMFNetProxyLocatorFactory> for ::windows::runtime::IUnknown {
    fn from(value: IMFNetProxyLocatorFactory) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFNetProxyLocatorFactory> for ::windows::runtime::IUnknown {
    fn from(value: &IMFNetProxyLocatorFactory) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFNetProxyLocatorFactory {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFNetProxyLocatorFactory {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFNetProxyLocatorFactory_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszprotocol: super::super::Foundation::PWSTR, ppproxylocator: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFNetResourceFilter(pub ::windows::runtime::IUnknown);
impl IMFNetResourceFilter {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn OnRedirect<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, pszurl: Param0) -> ::windows::runtime::Result<i16> {
        let mut result__: <i16 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), pszurl.into_param().abi(), &mut result__).from_abi::<i16>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn OnSendingRequest<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, pszurl: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), pszurl.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFNetResourceFilter {
    type Vtable = IMFNetResourceFilter_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(152598691, 48913, 19036, [188, 159, 51, 153, 91, 6, 239, 45]);
}
impl ::core::convert::From<IMFNetResourceFilter> for ::windows::runtime::IUnknown {
    fn from(value: IMFNetResourceFilter) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFNetResourceFilter> for ::windows::runtime::IUnknown {
    fn from(value: &IMFNetResourceFilter) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFNetResourceFilter {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFNetResourceFilter {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFNetResourceFilter_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszurl: super::super::Foundation::PWSTR, pvbcancel: *mut i16) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszurl: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFNetSchemeHandlerConfig(pub ::windows::runtime::IUnknown);
impl IMFNetSchemeHandlerConfig {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetNumberOfSupportedProtocols(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSupportedProtocolType(&self, nprotocolindex: u32) -> ::windows::runtime::Result<MFNETSOURCE_PROTOCOL_TYPE> {
        let mut result__: <MFNETSOURCE_PROTOCOL_TYPE as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(nprotocolindex), &mut result__).from_abi::<MFNETSOURCE_PROTOCOL_TYPE>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ResetProtocolRolloverSettings(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFNetSchemeHandlerConfig {
    type Vtable = IMFNetSchemeHandlerConfig_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2078383731, 51647, 18058, [172, 90, 165, 232, 101, 59, 236, 135]);
}
impl ::core::convert::From<IMFNetSchemeHandlerConfig> for ::windows::runtime::IUnknown {
    fn from(value: IMFNetSchemeHandlerConfig) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFNetSchemeHandlerConfig> for ::windows::runtime::IUnknown {
    fn from(value: &IMFNetSchemeHandlerConfig) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFNetSchemeHandlerConfig {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFNetSchemeHandlerConfig {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFNetSchemeHandlerConfig_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcprotocols: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, nprotocolindex: u32, pnprotocoltype: *mut MFNETSOURCE_PROTOCOL_TYPE) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFObjectReferenceStream(pub ::windows::runtime::IUnknown);
impl IMFObjectReferenceStream {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SaveReference<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, riid: *const ::windows::runtime::GUID, punk: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(riid), punk.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn LoadReference(&self, riid: *const ::windows::runtime::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(riid), ::core::mem::transmute(ppv)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFObjectReferenceStream {
    type Vtable = IMFObjectReferenceStream_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(166681571, 51367, 18078, [139, 112, 115, 191, 37, 187, 25, 63]);
}
impl ::core::convert::From<IMFObjectReferenceStream> for ::windows::runtime::IUnknown {
    fn from(value: IMFObjectReferenceStream) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFObjectReferenceStream> for ::windows::runtime::IUnknown {
    fn from(value: &IMFObjectReferenceStream) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFObjectReferenceStream {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFObjectReferenceStream {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFObjectReferenceStream_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, punk: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFOutputPolicy(pub ::windows::runtime::IUnknown);
impl IMFOutputPolicy {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetItem(&self, guidkey: *const ::windows::runtime::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetItemType(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<MF_ATTRIBUTE_TYPE> {
        let mut result__: <MF_ATTRIBUTE_TYPE as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<MF_ATTRIBUTE_TYPE>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn CompareItem(&self, guidkey: *const ::windows::runtime::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(value), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn Compare<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, ptheirs: Param0, matchtype: MF_ATTRIBUTES_MATCH_TYPE) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ptheirs.into_param().abi(), ::core::mem::transmute(matchtype), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUINT32(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUINT64(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDouble(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<f64> {
        let mut result__: <f64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<f64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetGUID(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStringLength(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetString(&self, guidkey: *const ::windows::runtime::GUID, pwszvalue: super::super::Foundation::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pwszvalue), ::core::mem::transmute(cchbufsize), ::core::mem::transmute(pcchlength)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetAllocatedString(&self, guidkey: *const ::windows::runtime::GUID, ppwszvalue: *mut super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(ppwszvalue), ::core::mem::transmute(pcchlength)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBlobSize(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBlob(&self, guidkey: *const ::windows::runtime::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize), ::core::mem::transmute(pcbblobsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetAllocatedBlob(&self, guidkey: *const ::windows::runtime::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(ppbuf), ::core::mem::transmute(pcbsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUnknown<T: ::windows::runtime::Interface>(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn SetItem(&self, guidkey: *const ::windows::runtime::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(value)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteItem(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteAllItems(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUINT32(&self, guidkey: *const ::windows::runtime::GUID, unvalue: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(unvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUINT64(&self, guidkey: *const ::windows::runtime::GUID, unvalue: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(unvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetDouble(&self, guidkey: *const ::windows::runtime::GUID, fvalue: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(fvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetGUID(&self, guidkey: *const ::windows::runtime::GUID, guidvalue: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(guidvalue)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetString<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, guidkey: *const ::windows::runtime::GUID, wszvalue: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), wszvalue.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetBlob(&self, guidkey: *const ::windows::runtime::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUnknown<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guidkey: *const ::windows::runtime::GUID, punknown: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).27)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), punknown.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn LockStore(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).28)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn UnlockStore(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetItemByIndex(&self, unindex: u32, pguidkey: *mut ::windows::runtime::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).31)(::core::mem::transmute_copy(self), ::core::mem::transmute(unindex), ::core::mem::transmute(pguidkey), ::core::mem::transmute(pvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CopyAllItems<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, pdest: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::core::mem::transmute_copy(self), pdest.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GenerateRequiredSchemas<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::GUID>>(&self, dwattributes: u32, guidoutputsubtype: Param1, rgguidprotectionschemassupported: *const ::windows::runtime::GUID, cprotectionschemassupported: u32) -> ::windows::runtime::Result<IMFCollection> {
        let mut result__: <IMFCollection as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).33)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwattributes), guidoutputsubtype.into_param().abi(), ::core::mem::transmute(rgguidprotectionschemassupported), ::core::mem::transmute(cprotectionschemassupported), &mut result__).from_abi::<IMFCollection>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetOriginatorID(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).34)(::core::mem::transmute_copy(self), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetMinimumGRLVersion(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).35)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFOutputPolicy {
    type Vtable = IMFOutputPolicy_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2130768138, 56045, 16815, [171, 38, 95, 223, 164, 223, 186, 60]);
}
impl ::core::convert::From<IMFOutputPolicy> for ::windows::runtime::IUnknown {
    fn from(value: IMFOutputPolicy) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFOutputPolicy> for ::windows::runtime::IUnknown {
    fn from(value: &IMFOutputPolicy) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFOutputPolicy {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFOutputPolicy {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFOutputPolicy> for IMFAttributes {
    fn from(value: IMFOutputPolicy) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFOutputPolicy> for IMFAttributes {
    fn from(value: &IMFOutputPolicy) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAttributes> for IMFOutputPolicy {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAttributes> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAttributes> for &IMFOutputPolicy {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAttributes> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFOutputPolicy_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ptype: *mut MF_ATTRIBUTE_TYPE) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, value: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>, pbresult: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ptheirs: ::windows::runtime::RawPtr, matchtype: MF_ATTRIBUTES_MATCH_TYPE, pbresult: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punvalue: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punvalue: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pfvalue: *mut f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pguidvalue: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pwszvalue: super::super::Foundation::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ppwszvalue: *mut super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pcbblobsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, value: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, unvalue: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, unvalue: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, fvalue: f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, guidvalue: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, wszvalue: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punknown: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcitems: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, unindex: u32, pguidkey: *mut ::windows::runtime::GUID, pvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdest: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwattributes: u32, guidoutputsubtype: ::windows::runtime::GUID, rgguidprotectionschemassupported: *const ::windows::runtime::GUID, cprotectionschemassupported: u32, pprequiredprotectionschemas: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pguidoriginatorid: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwminimumgrlversion: *mut u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFOutputSchema(pub ::windows::runtime::IUnknown);
impl IMFOutputSchema {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetItem(&self, guidkey: *const ::windows::runtime::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetItemType(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<MF_ATTRIBUTE_TYPE> {
        let mut result__: <MF_ATTRIBUTE_TYPE as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<MF_ATTRIBUTE_TYPE>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn CompareItem(&self, guidkey: *const ::windows::runtime::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(value), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn Compare<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, ptheirs: Param0, matchtype: MF_ATTRIBUTES_MATCH_TYPE) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ptheirs.into_param().abi(), ::core::mem::transmute(matchtype), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUINT32(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUINT64(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDouble(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<f64> {
        let mut result__: <f64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<f64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetGUID(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStringLength(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetString(&self, guidkey: *const ::windows::runtime::GUID, pwszvalue: super::super::Foundation::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pwszvalue), ::core::mem::transmute(cchbufsize), ::core::mem::transmute(pcchlength)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetAllocatedString(&self, guidkey: *const ::windows::runtime::GUID, ppwszvalue: *mut super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(ppwszvalue), ::core::mem::transmute(pcchlength)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBlobSize(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBlob(&self, guidkey: *const ::windows::runtime::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize), ::core::mem::transmute(pcbblobsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetAllocatedBlob(&self, guidkey: *const ::windows::runtime::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(ppbuf), ::core::mem::transmute(pcbsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUnknown<T: ::windows::runtime::Interface>(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn SetItem(&self, guidkey: *const ::windows::runtime::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(value)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteItem(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteAllItems(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUINT32(&self, guidkey: *const ::windows::runtime::GUID, unvalue: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(unvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUINT64(&self, guidkey: *const ::windows::runtime::GUID, unvalue: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(unvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetDouble(&self, guidkey: *const ::windows::runtime::GUID, fvalue: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(fvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetGUID(&self, guidkey: *const ::windows::runtime::GUID, guidvalue: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(guidvalue)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetString<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, guidkey: *const ::windows::runtime::GUID, wszvalue: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), wszvalue.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetBlob(&self, guidkey: *const ::windows::runtime::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUnknown<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guidkey: *const ::windows::runtime::GUID, punknown: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).27)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), punknown.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn LockStore(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).28)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn UnlockStore(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetItemByIndex(&self, unindex: u32, pguidkey: *mut ::windows::runtime::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).31)(::core::mem::transmute_copy(self), ::core::mem::transmute(unindex), ::core::mem::transmute(pguidkey), ::core::mem::transmute(pvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CopyAllItems<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, pdest: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::core::mem::transmute_copy(self), pdest.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSchemaType(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).33)(::core::mem::transmute_copy(self), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetConfigurationData(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).34)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetOriginatorID(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).35)(::core::mem::transmute_copy(self), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFOutputSchema {
    type Vtable = IMFOutputSchema_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2078342235, 43993, 17659, [165, 200, 245, 1, 54, 231, 21, 153]);
}
impl ::core::convert::From<IMFOutputSchema> for ::windows::runtime::IUnknown {
    fn from(value: IMFOutputSchema) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFOutputSchema> for ::windows::runtime::IUnknown {
    fn from(value: &IMFOutputSchema) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFOutputSchema {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFOutputSchema {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFOutputSchema> for IMFAttributes {
    fn from(value: IMFOutputSchema) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFOutputSchema> for IMFAttributes {
    fn from(value: &IMFOutputSchema) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAttributes> for IMFOutputSchema {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAttributes> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAttributes> for &IMFOutputSchema {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAttributes> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFOutputSchema_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ptype: *mut MF_ATTRIBUTE_TYPE) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, value: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>, pbresult: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ptheirs: ::windows::runtime::RawPtr, matchtype: MF_ATTRIBUTES_MATCH_TYPE, pbresult: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punvalue: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punvalue: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pfvalue: *mut f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pguidvalue: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pwszvalue: super::super::Foundation::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ppwszvalue: *mut super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pcbblobsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, value: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, unvalue: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, unvalue: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, fvalue: f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, guidvalue: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, wszvalue: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punknown: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcitems: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, unindex: u32, pguidkey: *mut ::windows::runtime::GUID, pvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdest: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pguidschematype: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwval: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pguidoriginatorid: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFOutputTrustAuthority(pub ::windows::runtime::IUnknown);
impl IMFOutputTrustAuthority {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetAction(&self) -> ::windows::runtime::Result<MFPOLICYMANAGER_ACTION> {
        let mut result__: <MFPOLICYMANAGER_ACTION as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MFPOLICYMANAGER_ACTION>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPolicy(&self, pppolicy: *const ::core::option::Option<IMFOutputPolicy>, npolicy: u32, ppbticket: *mut *mut u8, pcbticket: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(pppolicy), ::core::mem::transmute(npolicy), ::core::mem::transmute(ppbticket), ::core::mem::transmute(pcbticket)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFOutputTrustAuthority {
    type Vtable = IMFOutputTrustAuthority_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3516894868, 45350, 17478, [137, 12, 93, 203, 122, 215, 20, 83]);
}
impl ::core::convert::From<IMFOutputTrustAuthority> for ::windows::runtime::IUnknown {
    fn from(value: IMFOutputTrustAuthority) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFOutputTrustAuthority> for ::windows::runtime::IUnknown {
    fn from(value: &IMFOutputTrustAuthority) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFOutputTrustAuthority {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFOutputTrustAuthority {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFOutputTrustAuthority_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, paction: *mut MFPOLICYMANAGER_ACTION) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pppolicy: *const ::windows::runtime::RawPtr, npolicy: u32, ppbticket: *mut *mut u8, pcbticket: *mut u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFPMPClient(pub ::windows::runtime::IUnknown);
impl IMFPMPClient {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPMPHost<'a, Param0: ::windows::runtime::IntoParam<'a, IMFPMPHost>>(&self, ppmphost: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ppmphost.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFPMPClient {
    type Vtable = IMFPMPClient_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1817077085, 60120, 17441, [182, 185, 84, 220, 219, 189, 248, 32]);
}
impl ::core::convert::From<IMFPMPClient> for ::windows::runtime::IUnknown {
    fn from(value: IMFPMPClient) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFPMPClient> for ::windows::runtime::IUnknown {
    fn from(value: &IMFPMPClient) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFPMPClient {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFPMPClient {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFPMPClient_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppmphost: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFPMPClientApp(pub ::windows::runtime::IUnknown);
impl IMFPMPClientApp {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPMPHost<'a, Param0: ::windows::runtime::IntoParam<'a, IMFPMPHostApp>>(&self, ppmphost: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ppmphost.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFPMPClientApp {
    type Vtable = IMFPMPClientApp_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3221550662, 48684, 18675, [147, 162, 160, 152, 62, 186, 17, 8]);
}
impl ::core::convert::From<IMFPMPClientApp> for ::windows::runtime::IUnknown {
    fn from(value: IMFPMPClientApp) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFPMPClientApp> for ::windows::runtime::IUnknown {
    fn from(value: &IMFPMPClientApp) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFPMPClientApp {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFPMPClientApp {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFPMPClientApp_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppmphost: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFPMPHost(pub ::windows::runtime::IUnknown);
impl IMFPMPHost {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn LockProcess(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn UnlockProcess(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_System_Com")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_System_Com`*"]
    pub unsafe fn CreateObjectByCLSID<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::System::Com::IStream>, T: ::windows::runtime::Interface>(&self, clsid: *const ::windows::runtime::GUID, pstream: Param1) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(clsid), pstream.into_param().abi(), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFPMPHost {
    type Vtable = IMFPMPHost_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4144800169, 64967, 18306, [185, 148, 173, 255, 177, 201, 134, 6]);
}
impl ::core::convert::From<IMFPMPHost> for ::windows::runtime::IUnknown {
    fn from(value: IMFPMPHost) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFPMPHost> for ::windows::runtime::IUnknown {
    fn from(value: &IMFPMPHost) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFPMPHost {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFPMPHost {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFPMPHost_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Com")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, clsid: *const ::windows::runtime::GUID, pstream: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFPMPHostApp(pub ::windows::runtime::IUnknown);
impl IMFPMPHostApp {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn LockProcess(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn UnlockProcess(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`*"]
    pub unsafe fn ActivateClassById<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::System::Com::IStream>, T: ::windows::runtime::Interface>(&self, id: Param0, pstream: Param1) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), id.into_param().abi(), pstream.into_param().abi(), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFPMPHostApp {
    type Vtable = IMFPMPHostApp_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2228356426, 15009, 18216, [163, 176, 68, 10, 65, 140, 244, 156]);
}
impl ::core::convert::From<IMFPMPHostApp> for ::windows::runtime::IUnknown {
    fn from(value: IMFPMPHostApp) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFPMPHostApp> for ::windows::runtime::IUnknown {
    fn from(value: &IMFPMPHostApp) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFPMPHostApp {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFPMPHostApp {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFPMPHostApp_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: super::super::Foundation::PWSTR, pstream: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com")))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFPMPServer(pub ::windows::runtime::IUnknown);
impl IMFPMPServer {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn LockProcess(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn UnlockProcess(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CreateObjectByCLSID<T: ::windows::runtime::Interface>(&self, clsid: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(clsid), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFPMPServer {
    type Vtable = IMFPMPServer_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2572034991, 7362, 18748, [185, 250, 70, 241, 203, 4, 15, 164]);
}
impl ::core::convert::From<IMFPMPServer> for ::windows::runtime::IUnknown {
    fn from(value: IMFPMPServer) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFPMPServer> for ::windows::runtime::IUnknown {
    fn from(value: &IMFPMPServer) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFPMPServer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFPMPServer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFPMPServer_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, clsid: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppobject: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFPMediaItem(pub ::windows::runtime::IUnknown);
impl IMFPMediaItem {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetMediaPlayer(&self) -> ::windows::runtime::Result<IMFPMediaPlayer> {
        let mut result__: <IMFPMediaPlayer as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFPMediaPlayer>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetURL(&self) -> ::windows::runtime::Result<super::super::Foundation::PWSTR> {
        let mut result__: <super::super::Foundation::PWSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::PWSTR>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetObject(&self) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), &mut result__).from_abi::<::windows::runtime::IUnknown>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUserData(&self) -> ::windows::runtime::Result<usize> {
        let mut result__: <usize as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), &mut result__).from_abi::<usize>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUserData(&self, dwuserdata: usize) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwuserdata)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetStartStopPosition(&self, pguidstartpositiontype: *mut ::windows::runtime::GUID, pvstartvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT, pguidstoppositiontype: *mut ::windows::runtime::GUID, pvstopvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(pguidstartpositiontype), ::core::mem::transmute(pvstartvalue), ::core::mem::transmute(pguidstoppositiontype), ::core::mem::transmute(pvstopvalue)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn SetStartStopPosition(&self, pguidstartpositiontype: *const ::windows::runtime::GUID, pvstartvalue: *const super::super::System::Com::StructuredStorage::PROPVARIANT, pguidstoppositiontype: *const ::windows::runtime::GUID, pvstopvalue: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(pguidstartpositiontype), ::core::mem::transmute(pvstartvalue), ::core::mem::transmute(pguidstoppositiontype), ::core::mem::transmute(pvstopvalue)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn HasVideo(&self, pfhasvideo: *mut super::super::Foundation::BOOL, pfselected: *mut super::super::Foundation::BOOL) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(pfhasvideo), ::core::mem::transmute(pfselected)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn HasAudio(&self, pfhasaudio: *mut super::super::Foundation::BOOL, pfselected: *mut super::super::Foundation::BOOL) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(pfhasaudio), ::core::mem::transmute(pfselected)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn IsProtected(&self) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetDuration(&self, guidpositiontype: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<super::super::System::Com::StructuredStorage::PROPVARIANT> {
        let mut result__: <super::super::System::Com::StructuredStorage::PROPVARIANT as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidpositiontype), &mut result__).from_abi::<super::super::System::Com::StructuredStorage::PROPVARIANT>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetNumberOfStreams(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetStreamSelection(&self, dwstreamindex: u32) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetStreamSelection<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, dwstreamindex: u32, fenabled: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), fenabled.into_param().abi()).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetStreamAttribute(&self, dwstreamindex: u32, guidmfattribute: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<super::super::System::Com::StructuredStorage::PROPVARIANT> {
        let mut result__: <super::super::System::Com::StructuredStorage::PROPVARIANT as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), ::core::mem::transmute(guidmfattribute), &mut result__).from_abi::<super::super::System::Com::StructuredStorage::PROPVARIANT>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetPresentationAttribute(&self, guidmfattribute: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<super::super::System::Com::StructuredStorage::PROPVARIANT> {
        let mut result__: <super::super::System::Com::StructuredStorage::PROPVARIANT as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).18)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidmfattribute), &mut result__).from_abi::<super::super::System::Com::StructuredStorage::PROPVARIANT>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCharacteristics(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).19)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetStreamSink<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, dwstreamindex: u32, pmediasink: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), pmediasink.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_System_PropertiesSystem")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_System_PropertiesSystem`*"]
    pub unsafe fn GetMetadata(&self) -> ::windows::runtime::Result<super::super::System::PropertiesSystem::IPropertyStore> {
        let mut result__: <super::super::System::PropertiesSystem::IPropertyStore as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).21)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::System::PropertiesSystem::IPropertyStore>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFPMediaItem {
    type Vtable = IMFPMediaItem_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2431336043, 60607, 17868, [177, 218, 198, 254, 62, 167, 13, 87]);
}
impl ::core::convert::From<IMFPMediaItem> for ::windows::runtime::IUnknown {
    fn from(value: IMFPMediaItem) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFPMediaItem> for ::windows::runtime::IUnknown {
    fn from(value: &IMFPMediaItem) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFPMediaItem {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFPMediaItem {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFPMediaItem_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppmediaplayer: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppwszurl: *mut super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppiunknown: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwuserdata: *mut usize) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwuserdata: usize) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    pub  unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pguidstartpositiontype: *mut ::windows::runtime::GUID, pvstartvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>, pguidstoppositiontype: *mut ::windows::runtime::GUID, pvstopvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    pub  unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pguidstartpositiontype: *const ::windows::runtime::GUID, pvstartvalue: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>, pguidstoppositiontype: *const ::windows::runtime::GUID, pvstopvalue: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pfhasvideo: *mut super::super::Foundation::BOOL, pfselected: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pfhasaudio: *mut super::super::Foundation::BOOL, pfselected: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pfprotected: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidpositiontype: *const ::windows::runtime::GUID, pvdurationvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwstreamcount: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, pfenabled: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, fenabled: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, guidmfattribute: *const ::windows::runtime::GUID, pvvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidmfattribute: *const ::windows::runtime::GUID, pvvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcharacteristics: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, pmediasink: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_PropertiesSystem")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppmetadatastore: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_PropertiesSystem"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFPMediaPlayer(pub ::windows::runtime::IUnknown);
impl IMFPMediaPlayer {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Play(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Pause(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Stop(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn FrameStep(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn SetPosition(&self, guidpositiontype: *const ::windows::runtime::GUID, pvpositionvalue: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidpositiontype), ::core::mem::transmute(pvpositionvalue)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetPosition(&self, guidpositiontype: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<super::super::System::Com::StructuredStorage::PROPVARIANT> {
        let mut result__: <super::super::System::Com::StructuredStorage::PROPVARIANT as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidpositiontype), &mut result__).from_abi::<super::super::System::Com::StructuredStorage::PROPVARIANT>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetDuration(&self, guidpositiontype: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<super::super::System::Com::StructuredStorage::PROPVARIANT> {
        let mut result__: <super::super::System::Com::StructuredStorage::PROPVARIANT as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidpositiontype), &mut result__).from_abi::<super::super::System::Com::StructuredStorage::PROPVARIANT>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetRate(&self, flrate: f32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(flrate)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetRate(&self) -> ::windows::runtime::Result<f32> {
        let mut result__: <f32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), &mut result__).from_abi::<f32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetSupportedRates<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, fforwarddirection: Param0, pflslowestrate: *mut f32, pflfastestrate: *mut f32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), fforwarddirection.into_param().abi(), ::core::mem::transmute(pflslowestrate), ::core::mem::transmute(pflfastestrate)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetState(&self) -> ::windows::runtime::Result<MFP_MEDIAPLAYER_STATE> {
        let mut result__: <MFP_MEDIAPLAYER_STATE as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MFP_MEDIAPLAYER_STATE>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn CreateMediaItemFromURL<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, pwszurl: Param0, fsync: Param1, dwuserdata: usize) -> ::windows::runtime::Result<IMFPMediaItem> {
        let mut result__: <IMFPMediaItem as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), pwszurl.into_param().abi(), fsync.into_param().abi(), ::core::mem::transmute(dwuserdata), &mut result__).from_abi::<IMFPMediaItem>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn CreateMediaItemFromObject<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, piunknownobj: Param0, fsync: Param1, dwuserdata: usize) -> ::windows::runtime::Result<IMFPMediaItem> {
        let mut result__: <IMFPMediaItem as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), piunknownobj.into_param().abi(), fsync.into_param().abi(), ::core::mem::transmute(dwuserdata), &mut result__).from_abi::<IMFPMediaItem>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetMediaItem<'a, Param0: ::windows::runtime::IntoParam<'a, IMFPMediaItem>>(&self, pimfpmediaitem: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::core::mem::transmute_copy(self), pimfpmediaitem.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ClearMediaItem(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetMediaItem(&self) -> ::windows::runtime::Result<IMFPMediaItem> {
        let mut result__: <IMFPMediaItem as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).18)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFPMediaItem>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetVolume(&self) -> ::windows::runtime::Result<f32> {
        let mut result__: <f32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).19)(::core::mem::transmute_copy(self), &mut result__).from_abi::<f32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetVolume(&self, flvolume: f32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::core::mem::transmute_copy(self), ::core::mem::transmute(flvolume)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBalance(&self) -> ::windows::runtime::Result<f32> {
        let mut result__: <f32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).21)(::core::mem::transmute_copy(self), &mut result__).from_abi::<f32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetBalance(&self, flbalance: f32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::core::mem::transmute_copy(self), ::core::mem::transmute(flbalance)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetMute(&self) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).23)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetMute<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, fmute: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::core::mem::transmute_copy(self), fmute.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetNativeVideoSize(&self, pszvideo: *mut super::super::Foundation::SIZE, pszarvideo: *mut super::super::Foundation::SIZE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::core::mem::transmute_copy(self), ::core::mem::transmute(pszvideo), ::core::mem::transmute(pszarvideo)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetIdealVideoSize(&self, pszmin: *mut super::super::Foundation::SIZE, pszmax: *mut super::super::Foundation::SIZE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::core::mem::transmute_copy(self), ::core::mem::transmute(pszmin), ::core::mem::transmute(pszmax)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetVideoSourceRect(&self, pnrcsource: *const MFVideoNormalizedRect) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).27)(::core::mem::transmute_copy(self), ::core::mem::transmute(pnrcsource)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetVideoSourceRect(&self) -> ::windows::runtime::Result<MFVideoNormalizedRect> {
        let mut result__: <MFVideoNormalizedRect as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).28)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MFVideoNormalizedRect>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetAspectRatioMode(&self, dwaspectratiomode: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwaspectratiomode)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetAspectRatioMode(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetVideoWindow(&self) -> ::windows::runtime::Result<super::super::Foundation::HWND> {
        let mut result__: <super::super::Foundation::HWND as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).31)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::HWND>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn UpdateVideo(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetBorderColor(&self, clr: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).33)(::core::mem::transmute_copy(self), ::core::mem::transmute(clr)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBorderColor(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).34)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn InsertEffect<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, peffect: Param0, foptional: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).35)(::core::mem::transmute_copy(self), peffect.into_param().abi(), foptional.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveEffect<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, peffect: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).36)(::core::mem::transmute_copy(self), peffect.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveAllEffects(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).37)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Shutdown(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).38)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFPMediaPlayer {
    type Vtable = IMFPMediaPlayer_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2803128586, 22703, 17162, [133, 191, 68, 245, 236, 131, 141, 133]);
}
impl ::core::convert::From<IMFPMediaPlayer> for ::windows::runtime::IUnknown {
    fn from(value: IMFPMediaPlayer) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFPMediaPlayer> for ::windows::runtime::IUnknown {
    fn from(value: &IMFPMediaPlayer) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFPMediaPlayer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFPMediaPlayer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFPMediaPlayer_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidpositiontype: *const ::windows::runtime::GUID, pvpositionvalue: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidpositiontype: *const ::windows::runtime::GUID, pvpositionvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidpositiontype: *const ::windows::runtime::GUID, pvdurationvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flrate: f32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pflrate: *mut f32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, fforwarddirection: super::super::Foundation::BOOL, pflslowestrate: *mut f32, pflfastestrate: *mut f32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pestate: *mut MFP_MEDIAPLAYER_STATE) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pwszurl: super::super::Foundation::PWSTR, fsync: super::super::Foundation::BOOL, dwuserdata: usize, ppmediaitem: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, piunknownobj: ::windows::runtime::RawPtr, fsync: super::super::Foundation::BOOL, dwuserdata: usize, ppmediaitem: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pimfpmediaitem: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppimfpmediaitem: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pflvolume: *mut f32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flvolume: f32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pflbalance: *mut f32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flbalance: f32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pfmute: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, fmute: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszvideo: *mut super::super::Foundation::SIZE, pszarvideo: *mut super::super::Foundation::SIZE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszmin: *mut super::super::Foundation::SIZE, pszmax: *mut super::super::Foundation::SIZE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pnrcsource: *const MFVideoNormalizedRect) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pnrcsource: *mut MFVideoNormalizedRect) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwaspectratiomode: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwaspectratiomode: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, phwndvideo: *mut super::super::Foundation::HWND) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, clr: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pclr: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, peffect: ::windows::runtime::RawPtr, foptional: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, peffect: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFPMediaPlayerCallback(pub ::windows::runtime::IUnknown);
impl IMFPMediaPlayerCallback {
    #[cfg(feature = "Win32_System_PropertiesSystem")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_System_PropertiesSystem`*"]
    pub unsafe fn OnMediaPlayerEvent(&self, peventheader: *const MFP_EVENT_HEADER) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(peventheader)))
    }
}
unsafe impl ::windows::runtime::Interface for IMFPMediaPlayerCallback {
    type Vtable = IMFPMediaPlayerCallback_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1986826235, 24539, 20458, [162, 141, 185, 18, 153, 111, 81, 189]);
}
impl ::core::convert::From<IMFPMediaPlayerCallback> for ::windows::runtime::IUnknown {
    fn from(value: IMFPMediaPlayerCallback) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFPMediaPlayerCallback> for ::windows::runtime::IUnknown {
    fn from(value: &IMFPMediaPlayerCallback) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFPMediaPlayerCallback {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFPMediaPlayerCallback {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFPMediaPlayerCallback_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_System_PropertiesSystem")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, peventheader: *const ::core::mem::ManuallyDrop<MFP_EVENT_HEADER>),
    #[cfg(not(feature = "Win32_System_PropertiesSystem"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFPluginControl(pub ::windows::runtime::IUnknown);
impl IMFPluginControl {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetPreferredClsid<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, plugintype: u32, selector: Param1) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(plugintype), selector.into_param().abi(), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetPreferredClsidByIndex(&self, plugintype: u32, index: u32, selector: *mut super::super::Foundation::PWSTR, clsid: *mut ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(plugintype), ::core::mem::transmute(index), ::core::mem::transmute(selector), ::core::mem::transmute(clsid)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetPreferredClsid<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, plugintype: u32, selector: Param1, clsid: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(plugintype), selector.into_param().abi(), ::core::mem::transmute(clsid)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn IsDisabled(&self, plugintype: u32, clsid: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(plugintype), ::core::mem::transmute(clsid)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDisabledByIndex(&self, plugintype: u32, index: u32) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(plugintype), ::core::mem::transmute(index), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetDisabled<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, plugintype: u32, clsid: *const ::windows::runtime::GUID, disabled: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(plugintype), ::core::mem::transmute(clsid), disabled.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFPluginControl {
    type Vtable = IMFPluginControl_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1550599359, 7606, 17243, [146, 73, 232, 205, 16, 253, 236, 150]);
}
impl ::core::convert::From<IMFPluginControl> for ::windows::runtime::IUnknown {
    fn from(value: IMFPluginControl) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFPluginControl> for ::windows::runtime::IUnknown {
    fn from(value: &IMFPluginControl) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFPluginControl {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFPluginControl {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFPluginControl_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, plugintype: u32, selector: super::super::Foundation::PWSTR, clsid: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, plugintype: u32, index: u32, selector: *mut super::super::Foundation::PWSTR, clsid: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, plugintype: u32, selector: super::super::Foundation::PWSTR, clsid: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, plugintype: u32, clsid: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, plugintype: u32, index: u32, clsid: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, plugintype: u32, clsid: *const ::windows::runtime::GUID, disabled: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFPluginControl2(pub ::windows::runtime::IUnknown);
impl IMFPluginControl2 {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetPreferredClsid<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, plugintype: u32, selector: Param1) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(plugintype), selector.into_param().abi(), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetPreferredClsidByIndex(&self, plugintype: u32, index: u32, selector: *mut super::super::Foundation::PWSTR, clsid: *mut ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(plugintype), ::core::mem::transmute(index), ::core::mem::transmute(selector), ::core::mem::transmute(clsid)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetPreferredClsid<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, plugintype: u32, selector: Param1, clsid: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(plugintype), selector.into_param().abi(), ::core::mem::transmute(clsid)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn IsDisabled(&self, plugintype: u32, clsid: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(plugintype), ::core::mem::transmute(clsid)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDisabledByIndex(&self, plugintype: u32, index: u32) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(plugintype), ::core::mem::transmute(index), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetDisabled<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, plugintype: u32, clsid: *const ::windows::runtime::GUID, disabled: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(plugintype), ::core::mem::transmute(clsid), disabled.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetPolicy(&self, policy: MF_PLUGIN_CONTROL_POLICY) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(policy)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFPluginControl2 {
    type Vtable = IMFPluginControl2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3331858563, 15836, 17867, [175, 94, 15, 122, 140, 228, 222, 119]);
}
impl ::core::convert::From<IMFPluginControl2> for ::windows::runtime::IUnknown {
    fn from(value: IMFPluginControl2) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFPluginControl2> for ::windows::runtime::IUnknown {
    fn from(value: &IMFPluginControl2) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFPluginControl2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFPluginControl2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFPluginControl2> for IMFPluginControl {
    fn from(value: IMFPluginControl2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFPluginControl2> for IMFPluginControl {
    fn from(value: &IMFPluginControl2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFPluginControl> for IMFPluginControl2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFPluginControl> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFPluginControl> for &IMFPluginControl2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFPluginControl> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFPluginControl2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, plugintype: u32, selector: super::super::Foundation::PWSTR, clsid: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, plugintype: u32, index: u32, selector: *mut super::super::Foundation::PWSTR, clsid: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, plugintype: u32, selector: super::super::Foundation::PWSTR, clsid: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, plugintype: u32, clsid: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, plugintype: u32, index: u32, clsid: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, plugintype: u32, clsid: *const ::windows::runtime::GUID, disabled: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, policy: MF_PLUGIN_CONTROL_POLICY) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFPresentationClock(pub ::windows::runtime::IUnknown);
impl IMFPresentationClock {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetClockCharacteristics(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCorrelatedTime(&self, dwreserved: u32, pllclocktime: *mut i64, phnssystemtime: *mut i64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwreserved), ::core::mem::transmute(pllclocktime), ::core::mem::transmute(phnssystemtime)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetContinuityKey(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetState(&self, dwreserved: u32) -> ::windows::runtime::Result<MFCLOCK_STATE> {
        let mut result__: <MFCLOCK_STATE as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwreserved), &mut result__).from_abi::<MFCLOCK_STATE>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetProperties(&self) -> ::windows::runtime::Result<MFCLOCK_PROPERTIES> {
        let mut result__: <MFCLOCK_PROPERTIES as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MFCLOCK_PROPERTIES>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetTimeSource<'a, Param0: ::windows::runtime::IntoParam<'a, IMFPresentationTimeSource>>(&self, ptimesource: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ptimesource.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetTimeSource(&self) -> ::windows::runtime::Result<IMFPresentationTimeSource> {
        let mut result__: <IMFPresentationTimeSource as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFPresentationTimeSource>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetTime(&self) -> ::windows::runtime::Result<i64> {
        let mut result__: <i64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), &mut result__).from_abi::<i64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AddClockStateSink<'a, Param0: ::windows::runtime::IntoParam<'a, IMFClockStateSink>>(&self, pstatesink: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), pstatesink.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveClockStateSink<'a, Param0: ::windows::runtime::IntoParam<'a, IMFClockStateSink>>(&self, pstatesink: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), pstatesink.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Start(&self, llclockstartoffset: i64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), ::core::mem::transmute(llclockstartoffset)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Stop(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Pause(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFPresentationClock {
    type Vtable = IMFPresentationClock_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2257381468, 36521, 20309, [171, 130, 176, 9, 169, 16, 168, 5]);
}
impl ::core::convert::From<IMFPresentationClock> for ::windows::runtime::IUnknown {
    fn from(value: IMFPresentationClock) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFPresentationClock> for ::windows::runtime::IUnknown {
    fn from(value: &IMFPresentationClock) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFPresentationClock {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFPresentationClock {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFPresentationClock> for IMFClock {
    fn from(value: IMFPresentationClock) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFPresentationClock> for IMFClock {
    fn from(value: &IMFPresentationClock) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFClock> for IMFPresentationClock {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFClock> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFClock> for &IMFPresentationClock {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFClock> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFPresentationClock_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwcharacteristics: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwreserved: u32, pllclocktime: *mut i64, phnssystemtime: *mut i64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwcontinuitykey: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwreserved: u32, peclockstate: *mut MFCLOCK_STATE) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pclockproperties: *mut MFCLOCK_PROPERTIES) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ptimesource: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pptimesource: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, phnsclocktime: *mut i64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstatesink: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstatesink: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, llclockstartoffset: i64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFPresentationDescriptor(pub ::windows::runtime::IUnknown);
impl IMFPresentationDescriptor {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetItem(&self, guidkey: *const ::windows::runtime::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetItemType(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<MF_ATTRIBUTE_TYPE> {
        let mut result__: <MF_ATTRIBUTE_TYPE as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<MF_ATTRIBUTE_TYPE>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn CompareItem(&self, guidkey: *const ::windows::runtime::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(value), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn Compare<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, ptheirs: Param0, matchtype: MF_ATTRIBUTES_MATCH_TYPE) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ptheirs.into_param().abi(), ::core::mem::transmute(matchtype), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUINT32(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUINT64(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDouble(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<f64> {
        let mut result__: <f64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<f64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetGUID(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStringLength(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetString(&self, guidkey: *const ::windows::runtime::GUID, pwszvalue: super::super::Foundation::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pwszvalue), ::core::mem::transmute(cchbufsize), ::core::mem::transmute(pcchlength)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetAllocatedString(&self, guidkey: *const ::windows::runtime::GUID, ppwszvalue: *mut super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(ppwszvalue), ::core::mem::transmute(pcchlength)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBlobSize(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBlob(&self, guidkey: *const ::windows::runtime::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize), ::core::mem::transmute(pcbblobsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetAllocatedBlob(&self, guidkey: *const ::windows::runtime::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(ppbuf), ::core::mem::transmute(pcbsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUnknown<T: ::windows::runtime::Interface>(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn SetItem(&self, guidkey: *const ::windows::runtime::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(value)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteItem(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteAllItems(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUINT32(&self, guidkey: *const ::windows::runtime::GUID, unvalue: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(unvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUINT64(&self, guidkey: *const ::windows::runtime::GUID, unvalue: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(unvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetDouble(&self, guidkey: *const ::windows::runtime::GUID, fvalue: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(fvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetGUID(&self, guidkey: *const ::windows::runtime::GUID, guidvalue: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(guidvalue)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetString<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, guidkey: *const ::windows::runtime::GUID, wszvalue: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), wszvalue.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetBlob(&self, guidkey: *const ::windows::runtime::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUnknown<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guidkey: *const ::windows::runtime::GUID, punknown: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).27)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), punknown.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn LockStore(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).28)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn UnlockStore(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetItemByIndex(&self, unindex: u32, pguidkey: *mut ::windows::runtime::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).31)(::core::mem::transmute_copy(self), ::core::mem::transmute(unindex), ::core::mem::transmute(pguidkey), ::core::mem::transmute(pvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CopyAllItems<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, pdest: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::core::mem::transmute_copy(self), pdest.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamDescriptorCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).33)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetStreamDescriptorByIndex(&self, dwindex: u32, pfselected: *mut super::super::Foundation::BOOL, ppdescriptor: *mut ::core::option::Option<IMFStreamDescriptor>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).34)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwindex), ::core::mem::transmute(pfselected), ::core::mem::transmute(ppdescriptor)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SelectStream(&self, dwdescriptorindex: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).35)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwdescriptorindex)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeselectStream(&self, dwdescriptorindex: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).36)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwdescriptorindex)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Clone(&self) -> ::windows::runtime::Result<IMFPresentationDescriptor> {
        let mut result__: <IMFPresentationDescriptor as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).37)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFPresentationDescriptor>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFPresentationDescriptor {
    type Vtable = IMFPresentationDescriptor_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(63645457, 9431, 19894, [161, 127, 243, 167, 164, 121, 165, 54]);
}
impl ::core::convert::From<IMFPresentationDescriptor> for ::windows::runtime::IUnknown {
    fn from(value: IMFPresentationDescriptor) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFPresentationDescriptor> for ::windows::runtime::IUnknown {
    fn from(value: &IMFPresentationDescriptor) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFPresentationDescriptor {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFPresentationDescriptor {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFPresentationDescriptor> for IMFAttributes {
    fn from(value: IMFPresentationDescriptor) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFPresentationDescriptor> for IMFAttributes {
    fn from(value: &IMFPresentationDescriptor) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAttributes> for IMFPresentationDescriptor {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAttributes> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAttributes> for &IMFPresentationDescriptor {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAttributes> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFPresentationDescriptor_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ptype: *mut MF_ATTRIBUTE_TYPE) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, value: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>, pbresult: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ptheirs: ::windows::runtime::RawPtr, matchtype: MF_ATTRIBUTES_MATCH_TYPE, pbresult: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punvalue: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punvalue: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pfvalue: *mut f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pguidvalue: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pwszvalue: super::super::Foundation::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ppwszvalue: *mut super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pcbblobsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, value: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, unvalue: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, unvalue: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, fvalue: f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, guidvalue: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, wszvalue: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punknown: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcitems: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, unindex: u32, pguidkey: *mut ::windows::runtime::GUID, pvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdest: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwdescriptorcount: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwindex: u32, pfselected: *mut super::super::Foundation::BOOL, ppdescriptor: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwdescriptorindex: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwdescriptorindex: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pppresentationdescriptor: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFPresentationTimeSource(pub ::windows::runtime::IUnknown);
impl IMFPresentationTimeSource {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetClockCharacteristics(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCorrelatedTime(&self, dwreserved: u32, pllclocktime: *mut i64, phnssystemtime: *mut i64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwreserved), ::core::mem::transmute(pllclocktime), ::core::mem::transmute(phnssystemtime)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetContinuityKey(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetState(&self, dwreserved: u32) -> ::windows::runtime::Result<MFCLOCK_STATE> {
        let mut result__: <MFCLOCK_STATE as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwreserved), &mut result__).from_abi::<MFCLOCK_STATE>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetProperties(&self) -> ::windows::runtime::Result<MFCLOCK_PROPERTIES> {
        let mut result__: <MFCLOCK_PROPERTIES as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MFCLOCK_PROPERTIES>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUnderlyingClock(&self) -> ::windows::runtime::Result<IMFClock> {
        let mut result__: <IMFClock as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFClock>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFPresentationTimeSource {
    type Vtable = IMFPresentationTimeSource_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2146512078, 63343, 16834, [134, 59, 22, 102, 200, 229, 225, 57]);
}
impl ::core::convert::From<IMFPresentationTimeSource> for ::windows::runtime::IUnknown {
    fn from(value: IMFPresentationTimeSource) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFPresentationTimeSource> for ::windows::runtime::IUnknown {
    fn from(value: &IMFPresentationTimeSource) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFPresentationTimeSource {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFPresentationTimeSource {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFPresentationTimeSource> for IMFClock {
    fn from(value: IMFPresentationTimeSource) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFPresentationTimeSource> for IMFClock {
    fn from(value: &IMFPresentationTimeSource) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFClock> for IMFPresentationTimeSource {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFClock> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFClock> for &IMFPresentationTimeSource {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFClock> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFPresentationTimeSource_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwcharacteristics: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwreserved: u32, pllclocktime: *mut i64, phnssystemtime: *mut i64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwcontinuitykey: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwreserved: u32, peclockstate: *mut MFCLOCK_STATE) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pclockproperties: *mut MFCLOCK_PROPERTIES) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppclock: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFProtectedEnvironmentAccess(pub ::windows::runtime::IUnknown);
impl IMFProtectedEnvironmentAccess {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Call(&self, inputlength: u32, input: *const u8, outputlength: u32) -> ::windows::runtime::Result<u8> {
        let mut result__: <u8 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(inputlength), ::core::mem::transmute(input), ::core::mem::transmute(outputlength), &mut result__).from_abi::<u8>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ReadGRL(&self, outputlength: *mut u32, output: *mut *mut u8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(outputlength), ::core::mem::transmute(output)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFProtectedEnvironmentAccess {
    type Vtable = IMFProtectedEnvironmentAccess_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4015900741, 61657, 20169, [176, 12, 203, 81, 131, 211, 132, 52]);
}
impl ::core::convert::From<IMFProtectedEnvironmentAccess> for ::windows::runtime::IUnknown {
    fn from(value: IMFProtectedEnvironmentAccess) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFProtectedEnvironmentAccess> for ::windows::runtime::IUnknown {
    fn from(value: &IMFProtectedEnvironmentAccess) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFProtectedEnvironmentAccess {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFProtectedEnvironmentAccess {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFProtectedEnvironmentAccess_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, inputlength: u32, input: *const u8, outputlength: u32, output: *mut u8) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputlength: *mut u32, output: *mut *mut u8) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFQualityAdvise(pub ::windows::runtime::IUnknown);
impl IMFQualityAdvise {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetDropMode(&self, edropmode: MF_QUALITY_DROP_MODE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(edropmode)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetQualityLevel(&self, equalitylevel: MF_QUALITY_LEVEL) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(equalitylevel)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDropMode(&self) -> ::windows::runtime::Result<MF_QUALITY_DROP_MODE> {
        let mut result__: <MF_QUALITY_DROP_MODE as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MF_QUALITY_DROP_MODE>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetQualityLevel(&self) -> ::windows::runtime::Result<MF_QUALITY_LEVEL> {
        let mut result__: <MF_QUALITY_LEVEL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MF_QUALITY_LEVEL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DropTime(&self, hnsamounttodrop: i64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(hnsamounttodrop)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFQualityAdvise {
    type Vtable = IMFQualityAdvise_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3960857321, 58219, 20348, [135, 88, 119, 212, 82, 239, 76, 231]);
}
impl ::core::convert::From<IMFQualityAdvise> for ::windows::runtime::IUnknown {
    fn from(value: IMFQualityAdvise) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFQualityAdvise> for ::windows::runtime::IUnknown {
    fn from(value: &IMFQualityAdvise) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFQualityAdvise {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFQualityAdvise {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFQualityAdvise_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, edropmode: MF_QUALITY_DROP_MODE) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, equalitylevel: MF_QUALITY_LEVEL) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pedropmode: *mut MF_QUALITY_DROP_MODE) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pequalitylevel: *mut MF_QUALITY_LEVEL) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hnsamounttodrop: i64) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFQualityAdvise2(pub ::windows::runtime::IUnknown);
impl IMFQualityAdvise2 {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetDropMode(&self, edropmode: MF_QUALITY_DROP_MODE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(edropmode)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetQualityLevel(&self, equalitylevel: MF_QUALITY_LEVEL) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(equalitylevel)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDropMode(&self) -> ::windows::runtime::Result<MF_QUALITY_DROP_MODE> {
        let mut result__: <MF_QUALITY_DROP_MODE as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MF_QUALITY_DROP_MODE>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetQualityLevel(&self) -> ::windows::runtime::Result<MF_QUALITY_LEVEL> {
        let mut result__: <MF_QUALITY_LEVEL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MF_QUALITY_LEVEL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DropTime(&self, hnsamounttodrop: i64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(hnsamounttodrop)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn NotifyQualityEvent<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaEvent>>(&self, pevent: Param0) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), pevent.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFQualityAdvise2 {
    type Vtable = IMFQualityAdvise2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4084231949, 36514, 18566, [128, 0, 113, 85, 233, 236, 46, 174]);
}
impl ::core::convert::From<IMFQualityAdvise2> for ::windows::runtime::IUnknown {
    fn from(value: IMFQualityAdvise2) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFQualityAdvise2> for ::windows::runtime::IUnknown {
    fn from(value: &IMFQualityAdvise2) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFQualityAdvise2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFQualityAdvise2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFQualityAdvise2> for IMFQualityAdvise {
    fn from(value: IMFQualityAdvise2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFQualityAdvise2> for IMFQualityAdvise {
    fn from(value: &IMFQualityAdvise2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFQualityAdvise> for IMFQualityAdvise2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFQualityAdvise> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFQualityAdvise> for &IMFQualityAdvise2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFQualityAdvise> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFQualityAdvise2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, edropmode: MF_QUALITY_DROP_MODE) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, equalitylevel: MF_QUALITY_LEVEL) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pedropmode: *mut MF_QUALITY_DROP_MODE) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pequalitylevel: *mut MF_QUALITY_LEVEL) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hnsamounttodrop: i64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pevent: ::windows::runtime::RawPtr, pdwflags: *mut u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFQualityAdviseLimits(pub ::windows::runtime::IUnknown);
impl IMFQualityAdviseLimits {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetMaximumDropMode(&self) -> ::windows::runtime::Result<MF_QUALITY_DROP_MODE> {
        let mut result__: <MF_QUALITY_DROP_MODE as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MF_QUALITY_DROP_MODE>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetMinimumQualityLevel(&self) -> ::windows::runtime::Result<MF_QUALITY_LEVEL> {
        let mut result__: <MF_QUALITY_LEVEL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MF_QUALITY_LEVEL>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFQualityAdviseLimits {
    type Vtable = IMFQualityAdviseLimits_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3754790477, 12469, 17767, [172, 170, 142, 181, 183, 133, 61, 201]);
}
impl ::core::convert::From<IMFQualityAdviseLimits> for ::windows::runtime::IUnknown {
    fn from(value: IMFQualityAdviseLimits) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFQualityAdviseLimits> for ::windows::runtime::IUnknown {
    fn from(value: &IMFQualityAdviseLimits) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFQualityAdviseLimits {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFQualityAdviseLimits {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFQualityAdviseLimits_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pedropmode: *mut MF_QUALITY_DROP_MODE) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pequalitylevel: *mut MF_QUALITY_LEVEL) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFQualityManager(pub ::windows::runtime::IUnknown);
impl IMFQualityManager {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn NotifyTopology<'a, Param0: ::windows::runtime::IntoParam<'a, IMFTopology>>(&self, ptopology: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ptopology.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn NotifyPresentationClock<'a, Param0: ::windows::runtime::IntoParam<'a, IMFPresentationClock>>(&self, pclock: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), pclock.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn NotifyProcessInput<'a, Param0: ::windows::runtime::IntoParam<'a, IMFTopologyNode>, Param2: ::windows::runtime::IntoParam<'a, IMFSample>>(&self, pnode: Param0, linputindex: i32, psample: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), pnode.into_param().abi(), ::core::mem::transmute(linputindex), psample.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn NotifyProcessOutput<'a, Param0: ::windows::runtime::IntoParam<'a, IMFTopologyNode>, Param2: ::windows::runtime::IntoParam<'a, IMFSample>>(&self, pnode: Param0, loutputindex: i32, psample: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), pnode.into_param().abi(), ::core::mem::transmute(loutputindex), psample.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn NotifyQualityEvent<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>, Param1: ::windows::runtime::IntoParam<'a, IMFMediaEvent>>(&self, pobject: Param0, pevent: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), pobject.into_param().abi(), pevent.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Shutdown(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFQualityManager {
    type Vtable = IMFQualityManager_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2365627782, 23455, 16661, [177, 252, 159, 128, 213, 42, 184, 171]);
}
impl ::core::convert::From<IMFQualityManager> for ::windows::runtime::IUnknown {
    fn from(value: IMFQualityManager) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFQualityManager> for ::windows::runtime::IUnknown {
    fn from(value: &IMFQualityManager) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFQualityManager {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFQualityManager {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFQualityManager_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ptopology: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pclock: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pnode: ::windows::runtime::RawPtr, linputindex: i32, psample: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pnode: ::windows::runtime::RawPtr, loutputindex: i32, psample: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pobject: ::windows::runtime::RawPtr, pevent: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFRateControl(pub ::windows::runtime::IUnknown);
impl IMFRateControl {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetRate<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, fthin: Param0, flrate: f32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), fthin.into_param().abi(), ::core::mem::transmute(flrate)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetRate(&self, pfthin: *mut super::super::Foundation::BOOL, pflrate: *mut f32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(pfthin), ::core::mem::transmute(pflrate)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFRateControl {
    type Vtable = IMFRateControl_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2296237345, 963, 17013, [145, 237, 85, 238, 57, 41, 50, 143]);
}
impl ::core::convert::From<IMFRateControl> for ::windows::runtime::IUnknown {
    fn from(value: IMFRateControl) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFRateControl> for ::windows::runtime::IUnknown {
    fn from(value: &IMFRateControl) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFRateControl {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFRateControl {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFRateControl_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, fthin: super::super::Foundation::BOOL, flrate: f32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pfthin: *mut super::super::Foundation::BOOL, pflrate: *mut f32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFRateSupport(pub ::windows::runtime::IUnknown);
impl IMFRateSupport {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetSlowestRate<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, edirection: MFRATE_DIRECTION, fthin: Param1) -> ::windows::runtime::Result<f32> {
        let mut result__: <f32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(edirection), fthin.into_param().abi(), &mut result__).from_abi::<f32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetFastestRate<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, edirection: MFRATE_DIRECTION, fthin: Param1) -> ::windows::runtime::Result<f32> {
        let mut result__: <f32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(edirection), fthin.into_param().abi(), &mut result__).from_abi::<f32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn IsRateSupported<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, fthin: Param0, flrate: f32, pflnearestsupportedrate: *mut f32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), fthin.into_param().abi(), ::core::mem::transmute(flrate), ::core::mem::transmute(pflnearestsupportedrate)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFRateSupport {
    type Vtable = IMFRateSupport_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(178048444, 55191, 17763, [150, 103, 148, 236, 93, 121, 41, 45]);
}
impl ::core::convert::From<IMFRateSupport> for ::windows::runtime::IUnknown {
    fn from(value: IMFRateSupport) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFRateSupport> for ::windows::runtime::IUnknown {
    fn from(value: &IMFRateSupport) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFRateSupport {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFRateSupport {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFRateSupport_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, edirection: MFRATE_DIRECTION, fthin: super::super::Foundation::BOOL, pflrate: *mut f32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, edirection: MFRATE_DIRECTION, fthin: super::super::Foundation::BOOL, pflrate: *mut f32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, fthin: super::super::Foundation::BOOL, flrate: f32, pflnearestsupportedrate: *mut f32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFReadWriteClassFactory(pub ::windows::runtime::IUnknown);
impl IMFReadWriteClassFactory {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn CreateInstanceFromURL<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, clsid: *const ::windows::runtime::GUID, pwszurl: Param1, pattributes: Param2, riid: *const ::windows::runtime::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(clsid), pwszurl.into_param().abi(), pattributes.into_param().abi(), ::core::mem::transmute(riid), ::core::mem::transmute(ppvobject)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CreateInstanceFromObject<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>, Param2: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, clsid: *const ::windows::runtime::GUID, punkobject: Param1, pattributes: Param2, riid: *const ::windows::runtime::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(clsid), punkobject.into_param().abi(), pattributes.into_param().abi(), ::core::mem::transmute(riid), ::core::mem::transmute(ppvobject)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFReadWriteClassFactory {
    type Vtable = IMFReadWriteClassFactory_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3892194834, 26140, 16602, [146, 249, 79, 0, 42, 182, 118, 39]);
}
impl ::core::convert::From<IMFReadWriteClassFactory> for ::windows::runtime::IUnknown {
    fn from(value: IMFReadWriteClassFactory) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFReadWriteClassFactory> for ::windows::runtime::IUnknown {
    fn from(value: &IMFReadWriteClassFactory) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFReadWriteClassFactory {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFReadWriteClassFactory {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFReadWriteClassFactory_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, clsid: *const ::windows::runtime::GUID, pwszurl: super::super::Foundation::PWSTR, pattributes: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, clsid: *const ::windows::runtime::GUID, punkobject: ::windows::runtime::RawPtr, pattributes: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFRealTimeClient(pub ::windows::runtime::IUnknown);
impl IMFRealTimeClient {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn RegisterThreads<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, dwtaskindex: u32, wszclass: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwtaskindex), wszclass.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn UnregisterThreads(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetWorkQueue(&self, dwworkqueueid: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwworkqueueid)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFRealTimeClient {
    type Vtable = IMFRealTimeClient_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(591910411, 16309, 18444, [136, 3, 141, 243, 173, 205, 62, 240]);
}
impl ::core::convert::From<IMFRealTimeClient> for ::windows::runtime::IUnknown {
    fn from(value: IMFRealTimeClient) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFRealTimeClient> for ::windows::runtime::IUnknown {
    fn from(value: &IMFRealTimeClient) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFRealTimeClient {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFRealTimeClient {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFRealTimeClient_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwtaskindex: u32, wszclass: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwworkqueueid: u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFRealTimeClientEx(pub ::windows::runtime::IUnknown);
impl IMFRealTimeClientEx {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn RegisterThreadsEx<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, pdwtaskindex: *mut u32, wszclassname: Param1, lbasepriority: i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdwtaskindex), wszclassname.into_param().abi(), ::core::mem::transmute(lbasepriority)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn UnregisterThreads(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetWorkQueueEx(&self, dwmultithreadedworkqueueid: u32, lworkitembasepriority: i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwmultithreadedworkqueueid), ::core::mem::transmute(lworkitembasepriority)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFRealTimeClientEx {
    type Vtable = IMFRealTimeClientEx_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(59836488, 43798, 17937, [177, 0, 23, 184, 138, 226, 242, 72]);
}
impl ::core::convert::From<IMFRealTimeClientEx> for ::windows::runtime::IUnknown {
    fn from(value: IMFRealTimeClientEx) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFRealTimeClientEx> for ::windows::runtime::IUnknown {
    fn from(value: &IMFRealTimeClientEx) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFRealTimeClientEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFRealTimeClientEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFRealTimeClientEx_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwtaskindex: *mut u32, wszclassname: super::super::Foundation::PWSTR, lbasepriority: i32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwmultithreadedworkqueueid: u32, lworkitembasepriority: i32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFRelativePanelReport(pub ::windows::runtime::IUnknown);
impl IMFRelativePanelReport {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetRelativePanel(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFRelativePanelReport {
    type Vtable = IMFRelativePanelReport_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4065551082, 11278, 17535, [129, 226, 117, 89, 20, 205, 192, 195]);
}
impl ::core::convert::From<IMFRelativePanelReport> for ::windows::runtime::IUnknown {
    fn from(value: IMFRelativePanelReport) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFRelativePanelReport> for ::windows::runtime::IUnknown {
    fn from(value: &IMFRelativePanelReport) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFRelativePanelReport {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFRelativePanelReport {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFRelativePanelReport_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, panel: *mut u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFRelativePanelWatcher(pub ::windows::runtime::IUnknown);
impl IMFRelativePanelWatcher {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Shutdown(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetShutdownStatus(&self) -> ::windows::runtime::Result<MFSHUTDOWN_STATUS> {
        let mut result__: <MFSHUTDOWN_STATUS as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MFSHUTDOWN_STATUS>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BeginGetReport<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, pcallback: Param0, pstate: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), pcallback.into_param().abi(), pstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndGetReport<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, presult: Param0) -> ::windows::runtime::Result<IMFRelativePanelReport> {
        let mut result__: <IMFRelativePanelReport as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), presult.into_param().abi(), &mut result__).from_abi::<IMFRelativePanelReport>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetReport(&self) -> ::windows::runtime::Result<IMFRelativePanelReport> {
        let mut result__: <IMFRelativePanelReport as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFRelativePanelReport>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFRelativePanelWatcher {
    type Vtable = IMFRelativePanelWatcher_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1109063670, 22334, 19152, [143, 218, 46, 87, 206, 219, 24, 198]);
}
impl ::core::convert::From<IMFRelativePanelWatcher> for ::windows::runtime::IUnknown {
    fn from(value: IMFRelativePanelWatcher) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFRelativePanelWatcher> for ::windows::runtime::IUnknown {
    fn from(value: &IMFRelativePanelWatcher) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFRelativePanelWatcher {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFRelativePanelWatcher {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFRelativePanelWatcher> for IMFShutdown {
    fn from(value: IMFRelativePanelWatcher) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFRelativePanelWatcher> for IMFShutdown {
    fn from(value: &IMFRelativePanelWatcher) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFShutdown> for IMFRelativePanelWatcher {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFShutdown> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFShutdown> for &IMFRelativePanelWatcher {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFShutdown> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFRelativePanelWatcher_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstatus: *mut MFSHUTDOWN_STATUS) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcallback: ::windows::runtime::RawPtr, pstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presult: ::windows::runtime::RawPtr, pprelativepanelreport: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pprelativepanelreport: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFRemoteAsyncCallback(pub ::windows::runtime::IUnknown);
impl IMFRemoteAsyncCallback {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Invoke<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, hr: ::windows::runtime::HRESULT, premoteresult: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(hr), premoteresult.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFRemoteAsyncCallback {
    type Vtable = IMFRemoteAsyncCallback_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2725250000, 9044, 20266, [141, 106, 171, 124, 255, 21, 67, 126]);
}
impl ::core::convert::From<IMFRemoteAsyncCallback> for ::windows::runtime::IUnknown {
    fn from(value: IMFRemoteAsyncCallback) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFRemoteAsyncCallback> for ::windows::runtime::IUnknown {
    fn from(value: &IMFRemoteAsyncCallback) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFRemoteAsyncCallback {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFRemoteAsyncCallback {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFRemoteAsyncCallback_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hr: ::windows::runtime::HRESULT, premoteresult: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFRemoteDesktopPlugin(pub ::windows::runtime::IUnknown);
impl IMFRemoteDesktopPlugin {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn UpdateTopology<'a, Param0: ::windows::runtime::IntoParam<'a, IMFTopology>>(&self, ptopology: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ptopology.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFRemoteDesktopPlugin {
    type Vtable = IMFRemoteDesktopPlugin_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(484336393, 51936, 18752, [144, 126, 193, 236, 156, 61, 29, 74]);
}
impl ::core::convert::From<IMFRemoteDesktopPlugin> for ::windows::runtime::IUnknown {
    fn from(value: IMFRemoteDesktopPlugin) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFRemoteDesktopPlugin> for ::windows::runtime::IUnknown {
    fn from(value: &IMFRemoteDesktopPlugin) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFRemoteDesktopPlugin {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFRemoteDesktopPlugin {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFRemoteDesktopPlugin_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ptopology: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFRemoteProxy(pub ::windows::runtime::IUnknown);
impl IMFRemoteProxy {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetRemoteObject(&self, riid: *const ::windows::runtime::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(riid), ::core::mem::transmute(ppv)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetRemoteHost(&self, riid: *const ::windows::runtime::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(riid), ::core::mem::transmute(ppv)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFRemoteProxy {
    type Vtable = IMFRemoteProxy_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2572034989, 7362, 18748, [185, 250, 70, 241, 203, 4, 15, 164]);
}
impl ::core::convert::From<IMFRemoteProxy> for ::windows::runtime::IUnknown {
    fn from(value: IMFRemoteProxy) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFRemoteProxy> for ::windows::runtime::IUnknown {
    fn from(value: &IMFRemoteProxy) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFRemoteProxy {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFRemoteProxy {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFRemoteProxy_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSAMIStyle(pub ::windows::runtime::IUnknown);
impl IMFSAMIStyle {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStyleCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetStyles(&self) -> ::windows::runtime::Result<super::super::System::Com::StructuredStorage::PROPVARIANT> {
        let mut result__: <super::super::System::Com::StructuredStorage::PROPVARIANT as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::System::Com::StructuredStorage::PROPVARIANT>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetSelectedStyle<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, pwszstyle: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), pwszstyle.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetSelectedStyle(&self) -> ::windows::runtime::Result<super::super::Foundation::PWSTR> {
        let mut result__: <super::super::Foundation::PWSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::PWSTR>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFSAMIStyle {
    type Vtable = IMFSAMIStyle_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2816484829, 21251, 19042, [137, 214, 231, 71, 225, 239, 172, 115]);
}
impl ::core::convert::From<IMFSAMIStyle> for ::windows::runtime::IUnknown {
    fn from(value: IMFSAMIStyle) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSAMIStyle> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSAMIStyle) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSAMIStyle {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSAMIStyle {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSAMIStyle_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwcount: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppropvarstylearray: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pwszstyle: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppwszstyle: *mut super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSSLCertificateManager(pub ::windows::runtime::IUnknown);
impl IMFSSLCertificateManager {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetClientCertificate<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, pszurl: Param0, ppbdata: *mut *mut u8, pcbdata: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), pszurl.into_param().abi(), ::core::mem::transmute(ppbdata), ::core::mem::transmute(pcbdata)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn BeginGetClientCertificate<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param2: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, pszurl: Param0, pcallback: Param1, pstate: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), pszurl.into_param().abi(), pcallback.into_param().abi(), pstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndGetClientCertificate<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, presult: Param0, ppbdata: *mut *mut u8, pcbdata: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), presult.into_param().abi(), ::core::mem::transmute(ppbdata), ::core::mem::transmute(pcbdata)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetCertificatePolicy<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, pszurl: Param0, pfoverrideautomaticcheck: *mut super::super::Foundation::BOOL, pfclientcertificateavailable: *mut super::super::Foundation::BOOL) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), pszurl.into_param().abi(), ::core::mem::transmute(pfoverrideautomaticcheck), ::core::mem::transmute(pfclientcertificateavailable)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn OnServerCertificate<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, pszurl: Param0, pbdata: *const u8, cbdata: u32) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), pszurl.into_param().abi(), ::core::mem::transmute(pbdata), ::core::mem::transmute(cbdata), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFSSLCertificateManager {
    type Vtable = IMFSSLCertificateManager_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1643632775, 4656, 19083, [174, 186, 138, 212, 52, 209, 166, 77]);
}
impl ::core::convert::From<IMFSSLCertificateManager> for ::windows::runtime::IUnknown {
    fn from(value: IMFSSLCertificateManager) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSSLCertificateManager> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSSLCertificateManager) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSSLCertificateManager {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSSLCertificateManager {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSSLCertificateManager_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszurl: super::super::Foundation::PWSTR, ppbdata: *mut *mut u8, pcbdata: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszurl: super::super::Foundation::PWSTR, pcallback: ::windows::runtime::RawPtr, pstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presult: ::windows::runtime::RawPtr, ppbdata: *mut *mut u8, pcbdata: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszurl: super::super::Foundation::PWSTR, pfoverrideautomaticcheck: *mut super::super::Foundation::BOOL, pfclientcertificateavailable: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszurl: super::super::Foundation::PWSTR, pbdata: *const u8, cbdata: u32, pfisgood: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSample(pub ::windows::runtime::IUnknown);
impl IMFSample {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetItem(&self, guidkey: *const ::windows::runtime::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetItemType(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<MF_ATTRIBUTE_TYPE> {
        let mut result__: <MF_ATTRIBUTE_TYPE as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<MF_ATTRIBUTE_TYPE>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn CompareItem(&self, guidkey: *const ::windows::runtime::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(value), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn Compare<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, ptheirs: Param0, matchtype: MF_ATTRIBUTES_MATCH_TYPE) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ptheirs.into_param().abi(), ::core::mem::transmute(matchtype), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUINT32(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUINT64(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDouble(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<f64> {
        let mut result__: <f64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<f64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetGUID(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStringLength(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetString(&self, guidkey: *const ::windows::runtime::GUID, pwszvalue: super::super::Foundation::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pwszvalue), ::core::mem::transmute(cchbufsize), ::core::mem::transmute(pcchlength)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetAllocatedString(&self, guidkey: *const ::windows::runtime::GUID, ppwszvalue: *mut super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(ppwszvalue), ::core::mem::transmute(pcchlength)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBlobSize(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBlob(&self, guidkey: *const ::windows::runtime::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize), ::core::mem::transmute(pcbblobsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetAllocatedBlob(&self, guidkey: *const ::windows::runtime::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(ppbuf), ::core::mem::transmute(pcbsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUnknown<T: ::windows::runtime::Interface>(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn SetItem(&self, guidkey: *const ::windows::runtime::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(value)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteItem(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteAllItems(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUINT32(&self, guidkey: *const ::windows::runtime::GUID, unvalue: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(unvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUINT64(&self, guidkey: *const ::windows::runtime::GUID, unvalue: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(unvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetDouble(&self, guidkey: *const ::windows::runtime::GUID, fvalue: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(fvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetGUID(&self, guidkey: *const ::windows::runtime::GUID, guidvalue: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(guidvalue)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetString<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, guidkey: *const ::windows::runtime::GUID, wszvalue: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), wszvalue.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetBlob(&self, guidkey: *const ::windows::runtime::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUnknown<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guidkey: *const ::windows::runtime::GUID, punknown: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).27)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), punknown.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn LockStore(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).28)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn UnlockStore(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetItemByIndex(&self, unindex: u32, pguidkey: *mut ::windows::runtime::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).31)(::core::mem::transmute_copy(self), ::core::mem::transmute(unindex), ::core::mem::transmute(pguidkey), ::core::mem::transmute(pvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CopyAllItems<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, pdest: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::core::mem::transmute_copy(self), pdest.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSampleFlags(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).33)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetSampleFlags(&self, dwsampleflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).34)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwsampleflags)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSampleTime(&self) -> ::windows::runtime::Result<i64> {
        let mut result__: <i64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).35)(::core::mem::transmute_copy(self), &mut result__).from_abi::<i64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetSampleTime(&self, hnssampletime: i64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).36)(::core::mem::transmute_copy(self), ::core::mem::transmute(hnssampletime)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSampleDuration(&self) -> ::windows::runtime::Result<i64> {
        let mut result__: <i64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).37)(::core::mem::transmute_copy(self), &mut result__).from_abi::<i64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetSampleDuration(&self, hnssampleduration: i64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).38)(::core::mem::transmute_copy(self), ::core::mem::transmute(hnssampleduration)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBufferCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).39)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBufferByIndex(&self, dwindex: u32) -> ::windows::runtime::Result<IMFMediaBuffer> {
        let mut result__: <IMFMediaBuffer as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).40)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwindex), &mut result__).from_abi::<IMFMediaBuffer>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ConvertToContiguousBuffer(&self) -> ::windows::runtime::Result<IMFMediaBuffer> {
        let mut result__: <IMFMediaBuffer as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).41)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFMediaBuffer>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AddBuffer<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaBuffer>>(&self, pbuffer: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).42)(::core::mem::transmute_copy(self), pbuffer.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveBufferByIndex(&self, dwindex: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).43)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwindex)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveAllBuffers(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).44)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetTotalLength(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).45)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CopyToBuffer<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaBuffer>>(&self, pbuffer: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).46)(::core::mem::transmute_copy(self), pbuffer.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFSample {
    type Vtable = IMFSample_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3288989938, 47418, 19840, [174, 140, 90, 28, 99, 79, 88, 228]);
}
impl ::core::convert::From<IMFSample> for ::windows::runtime::IUnknown {
    fn from(value: IMFSample) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSample> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSample) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSample {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSample {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFSample> for IMFAttributes {
    fn from(value: IMFSample) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFSample> for IMFAttributes {
    fn from(value: &IMFSample) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAttributes> for IMFSample {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAttributes> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAttributes> for &IMFSample {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAttributes> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSample_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ptype: *mut MF_ATTRIBUTE_TYPE) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, value: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>, pbresult: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ptheirs: ::windows::runtime::RawPtr, matchtype: MF_ATTRIBUTES_MATCH_TYPE, pbresult: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punvalue: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punvalue: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pfvalue: *mut f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pguidvalue: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pwszvalue: super::super::Foundation::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ppwszvalue: *mut super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pcbblobsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, value: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, unvalue: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, unvalue: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, fvalue: f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, guidvalue: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, wszvalue: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punknown: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcitems: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, unindex: u32, pguidkey: *mut ::windows::runtime::GUID, pvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdest: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwsampleflags: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwsampleflags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, phnssampletime: *mut i64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hnssampletime: i64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, phnssampleduration: *mut i64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hnssampleduration: i64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwbuffercount: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwindex: u32, ppbuffer: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppbuffer: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbuffer: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwindex: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcbtotallength: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbuffer: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSampleAllocatorControl(pub ::windows::runtime::IUnknown);
impl IMFSampleAllocatorControl {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetDefaultAllocator<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, dwoutputstreamid: u32, pallocator: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwoutputstreamid), pallocator.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetAllocatorUsage(&self, dwoutputstreamid: u32, pdwinputstreamid: *mut u32, peusage: *mut MFSampleAllocatorUsage) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwoutputstreamid), ::core::mem::transmute(pdwinputstreamid), ::core::mem::transmute(peusage)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFSampleAllocatorControl {
    type Vtable = IMFSampleAllocatorControl_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3663903064, 14904, 19095, [189, 39, 20, 156, 100, 12, 7, 113]);
}
impl ::core::convert::From<IMFSampleAllocatorControl> for ::windows::runtime::IUnknown {
    fn from(value: IMFSampleAllocatorControl) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSampleAllocatorControl> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSampleAllocatorControl) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSampleAllocatorControl {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSampleAllocatorControl {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSampleAllocatorControl_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwoutputstreamid: u32, pallocator: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwoutputstreamid: u32, pdwinputstreamid: *mut u32, peusage: *mut MFSampleAllocatorUsage) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSampleGrabberSinkCallback(pub ::windows::runtime::IUnknown);
impl IMFSampleGrabberSinkCallback {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnClockStart(&self, hnssystemtime: i64, llclockstartoffset: i64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(hnssystemtime), ::core::mem::transmute(llclockstartoffset)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnClockStop(&self, hnssystemtime: i64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(hnssystemtime)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnClockPause(&self, hnssystemtime: i64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(hnssystemtime)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnClockRestart(&self, hnssystemtime: i64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(hnssystemtime)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnClockSetRate(&self, hnssystemtime: i64, flrate: f32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(hnssystemtime), ::core::mem::transmute(flrate)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnSetPresentationClock<'a, Param0: ::windows::runtime::IntoParam<'a, IMFPresentationClock>>(&self, ppresentationclock: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ppresentationclock.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnProcessSample(&self, guidmajormediatype: *const ::windows::runtime::GUID, dwsampleflags: u32, llsampletime: i64, llsampleduration: i64, psamplebuffer: *const u8, dwsamplesize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidmajormediatype), ::core::mem::transmute(dwsampleflags), ::core::mem::transmute(llsampletime), ::core::mem::transmute(llsampleduration), ::core::mem::transmute(psamplebuffer), ::core::mem::transmute(dwsamplesize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnShutdown(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFSampleGrabberSinkCallback {
    type Vtable = IMFSampleGrabberSinkCallback_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2356904127, 60994, 19289, [177, 223, 85, 102, 142, 27, 220, 168]);
}
impl ::core::convert::From<IMFSampleGrabberSinkCallback> for ::windows::runtime::IUnknown {
    fn from(value: IMFSampleGrabberSinkCallback) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSampleGrabberSinkCallback> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSampleGrabberSinkCallback) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSampleGrabberSinkCallback {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSampleGrabberSinkCallback {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFSampleGrabberSinkCallback> for IMFClockStateSink {
    fn from(value: IMFSampleGrabberSinkCallback) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFSampleGrabberSinkCallback> for IMFClockStateSink {
    fn from(value: &IMFSampleGrabberSinkCallback) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFClockStateSink> for IMFSampleGrabberSinkCallback {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFClockStateSink> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFClockStateSink> for &IMFSampleGrabberSinkCallback {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFClockStateSink> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSampleGrabberSinkCallback_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hnssystemtime: i64, llclockstartoffset: i64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hnssystemtime: i64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hnssystemtime: i64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hnssystemtime: i64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hnssystemtime: i64, flrate: f32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppresentationclock: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidmajormediatype: *const ::windows::runtime::GUID, dwsampleflags: u32, llsampletime: i64, llsampleduration: i64, psamplebuffer: *const u8, dwsamplesize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSampleGrabberSinkCallback2(pub ::windows::runtime::IUnknown);
impl IMFSampleGrabberSinkCallback2 {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnClockStart(&self, hnssystemtime: i64, llclockstartoffset: i64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(hnssystemtime), ::core::mem::transmute(llclockstartoffset)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnClockStop(&self, hnssystemtime: i64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(hnssystemtime)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnClockPause(&self, hnssystemtime: i64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(hnssystemtime)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnClockRestart(&self, hnssystemtime: i64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(hnssystemtime)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnClockSetRate(&self, hnssystemtime: i64, flrate: f32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(hnssystemtime), ::core::mem::transmute(flrate)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnSetPresentationClock<'a, Param0: ::windows::runtime::IntoParam<'a, IMFPresentationClock>>(&self, ppresentationclock: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ppresentationclock.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnProcessSample(&self, guidmajormediatype: *const ::windows::runtime::GUID, dwsampleflags: u32, llsampletime: i64, llsampleduration: i64, psamplebuffer: *const u8, dwsamplesize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidmajormediatype), ::core::mem::transmute(dwsampleflags), ::core::mem::transmute(llsampletime), ::core::mem::transmute(llsampleduration), ::core::mem::transmute(psamplebuffer), ::core::mem::transmute(dwsamplesize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnShutdown(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnProcessSampleEx<'a, Param6: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, guidmajormediatype: *const ::windows::runtime::GUID, dwsampleflags: u32, llsampletime: i64, llsampleduration: i64, psamplebuffer: *const u8, dwsamplesize: u32, pattributes: Param6) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(guidmajormediatype),
            ::core::mem::transmute(dwsampleflags),
            ::core::mem::transmute(llsampletime),
            ::core::mem::transmute(llsampleduration),
            ::core::mem::transmute(psamplebuffer),
            ::core::mem::transmute(dwsamplesize),
            pattributes.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFSampleGrabberSinkCallback2 {
    type Vtable = IMFSampleGrabberSinkCallback2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3397823056, 50286, 17054, [171, 39, 22, 214, 172, 104, 68, 203]);
}
impl ::core::convert::From<IMFSampleGrabberSinkCallback2> for ::windows::runtime::IUnknown {
    fn from(value: IMFSampleGrabberSinkCallback2) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSampleGrabberSinkCallback2> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSampleGrabberSinkCallback2) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSampleGrabberSinkCallback2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSampleGrabberSinkCallback2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFSampleGrabberSinkCallback2> for IMFSampleGrabberSinkCallback {
    fn from(value: IMFSampleGrabberSinkCallback2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFSampleGrabberSinkCallback2> for IMFSampleGrabberSinkCallback {
    fn from(value: &IMFSampleGrabberSinkCallback2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFSampleGrabberSinkCallback> for IMFSampleGrabberSinkCallback2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFSampleGrabberSinkCallback> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFSampleGrabberSinkCallback> for &IMFSampleGrabberSinkCallback2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFSampleGrabberSinkCallback> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<IMFSampleGrabberSinkCallback2> for IMFClockStateSink {
    fn from(value: IMFSampleGrabberSinkCallback2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFSampleGrabberSinkCallback2> for IMFClockStateSink {
    fn from(value: &IMFSampleGrabberSinkCallback2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFClockStateSink> for IMFSampleGrabberSinkCallback2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFClockStateSink> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFClockStateSink> for &IMFSampleGrabberSinkCallback2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFClockStateSink> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSampleGrabberSinkCallback2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hnssystemtime: i64, llclockstartoffset: i64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hnssystemtime: i64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hnssystemtime: i64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hnssystemtime: i64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hnssystemtime: i64, flrate: f32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppresentationclock: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidmajormediatype: *const ::windows::runtime::GUID, dwsampleflags: u32, llsampletime: i64, llsampleduration: i64, psamplebuffer: *const u8, dwsamplesize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidmajormediatype: *const ::windows::runtime::GUID, dwsampleflags: u32, llsampletime: i64, llsampleduration: i64, psamplebuffer: *const u8, dwsamplesize: u32, pattributes: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSampleOutputStream(pub ::windows::runtime::IUnknown);
impl IMFSampleOutputStream {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BeginWriteSample<'a, Param0: ::windows::runtime::IntoParam<'a, IMFSample>, Param1: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param2: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, psample: Param0, pcallback: Param1, punkstate: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), psample.into_param().abi(), pcallback.into_param().abi(), punkstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndWriteSample<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, presult: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), presult.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Close(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFSampleOutputStream {
    type Vtable = IMFSampleOutputStream_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2414793832, 28542, 17421, [134, 154, 73, 189, 210, 131, 173, 13]);
}
impl ::core::convert::From<IMFSampleOutputStream> for ::windows::runtime::IUnknown {
    fn from(value: IMFSampleOutputStream) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSampleOutputStream> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSampleOutputStream) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSampleOutputStream {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSampleOutputStream {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSampleOutputStream_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psample: ::windows::runtime::RawPtr, pcallback: ::windows::runtime::RawPtr, punkstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presult: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSampleProtection(pub ::windows::runtime::IUnknown);
impl IMFSampleProtection {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetInputProtectionVersion(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetOutputProtectionVersion(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetProtectionCertificate(&self, dwversion: u32, ppcert: *mut *mut u8, pcbcert: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwversion), ::core::mem::transmute(ppcert), ::core::mem::transmute(pcbcert)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn InitOutputProtection(&self, dwversion: u32, dwoutputid: u32, pbcert: *const u8, cbcert: u32, ppbseed: *mut *mut u8, pcbseed: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwversion), ::core::mem::transmute(dwoutputid), ::core::mem::transmute(pbcert), ::core::mem::transmute(cbcert), ::core::mem::transmute(ppbseed), ::core::mem::transmute(pcbseed)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn InitInputProtection(&self, dwversion: u32, dwinputid: u32, pbseed: *const u8, cbseed: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwversion), ::core::mem::transmute(dwinputid), ::core::mem::transmute(pbseed), ::core::mem::transmute(cbseed)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFSampleProtection {
    type Vtable = IMFSampleProtection_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2385918303, 51129, 17348, [165, 77, 81, 43, 74, 246, 60, 149]);
}
impl ::core::convert::From<IMFSampleProtection> for ::windows::runtime::IUnknown {
    fn from(value: IMFSampleProtection) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSampleProtection> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSampleProtection) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSampleProtection {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSampleProtection {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSampleProtection_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwversion: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwversion: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwversion: u32, ppcert: *mut *mut u8, pcbcert: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwversion: u32, dwoutputid: u32, pbcert: *const u8, cbcert: u32, ppbseed: *mut *mut u8, pcbseed: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwversion: u32, dwinputid: u32, pbseed: *const u8, cbseed: u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSaveJob(pub ::windows::runtime::IUnknown);
impl IMFSaveJob {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BeginSave<'a, Param0: ::windows::runtime::IntoParam<'a, IMFByteStream>, Param1: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param2: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, pstream: Param0, pcallback: Param1, pstate: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), pstream.into_param().abi(), pcallback.into_param().abi(), pstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndSave<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, presult: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), presult.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CancelSave(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetProgress(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFSaveJob {
    type Vtable = IMFSaveJob_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3918730851, 32959, 19566, [152, 175, 93, 207, 88, 116, 125, 31]);
}
impl ::core::convert::From<IMFSaveJob> for ::windows::runtime::IUnknown {
    fn from(value: IMFSaveJob) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSaveJob> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSaveJob) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSaveJob {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSaveJob {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSaveJob_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstream: ::windows::runtime::RawPtr, pcallback: ::windows::runtime::RawPtr, pstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presult: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwpercentcomplete: *mut u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSchemeHandler(pub ::windows::runtime::IUnknown);
impl IMFSchemeHandler {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_PropertiesSystem"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_PropertiesSystem`*"]
    pub unsafe fn BeginCreateObject<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::System::PropertiesSystem::IPropertyStore>, Param4: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param5: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(
        &self,
        pwszurl: Param0,
        dwflags: u32,
        pprops: Param2,
        ppiunknowncancelcookie: *mut ::core::option::Option<::windows::runtime::IUnknown>,
        pcallback: Param4,
        punkstate: Param5,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), pwszurl.into_param().abi(), ::core::mem::transmute(dwflags), pprops.into_param().abi(), ::core::mem::transmute(ppiunknowncancelcookie), pcallback.into_param().abi(), punkstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndCreateObject<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, presult: Param0, pobjecttype: *mut MF_OBJECT_TYPE, ppobject: *mut ::core::option::Option<::windows::runtime::IUnknown>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), presult.into_param().abi(), ::core::mem::transmute(pobjecttype), ::core::mem::transmute(ppobject)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CancelObjectCreation<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, piunknowncancelcookie: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), piunknowncancelcookie.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFSchemeHandler {
    type Vtable = IMFSchemeHandler_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1833728884, 21152, 19383, [176, 219, 85, 242, 159, 71, 166, 104]);
}
impl ::core::convert::From<IMFSchemeHandler> for ::windows::runtime::IUnknown {
    fn from(value: IMFSchemeHandler) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSchemeHandler> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSchemeHandler) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSchemeHandler {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSchemeHandler {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSchemeHandler_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_PropertiesSystem"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pwszurl: super::super::Foundation::PWSTR, dwflags: u32, pprops: ::windows::runtime::RawPtr, ppiunknowncancelcookie: *mut ::windows::runtime::RawPtr, pcallback: ::windows::runtime::RawPtr, punkstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_PropertiesSystem")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presult: ::windows::runtime::RawPtr, pobjecttype: *mut MF_OBJECT_TYPE, ppobject: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, piunknowncancelcookie: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSecureBuffer(pub ::windows::runtime::IUnknown);
impl IMFSecureBuffer {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetIdentifier(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFSecureBuffer {
    type Vtable = IMFSecureBuffer_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3240139012, 58756, 18258, [162, 214, 127, 33, 105, 63, 139, 33]);
}
impl ::core::convert::From<IMFSecureBuffer> for ::windows::runtime::IUnknown {
    fn from(value: IMFSecureBuffer) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSecureBuffer> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSecureBuffer) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSecureBuffer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSecureBuffer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSecureBuffer_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pguididentifier: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSecureChannel(pub ::windows::runtime::IUnknown);
impl IMFSecureChannel {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCertificate(&self, ppcert: *mut *mut u8, pcbcert: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(ppcert), ::core::mem::transmute(pcbcert)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetupSession(&self, pbencryptedsessionkey: *const u8, cbsessionkey: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(pbencryptedsessionkey), ::core::mem::transmute(cbsessionkey)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFSecureChannel {
    type Vtable = IMFSecureChannel_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3501086045, 15122, 19863, [176, 96, 9, 144, 188, 90, 235, 103]);
}
impl ::core::convert::From<IMFSecureChannel> for ::windows::runtime::IUnknown {
    fn from(value: IMFSecureChannel) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSecureChannel> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSecureChannel) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSecureChannel {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSecureChannel {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSecureChannel_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppcert: *mut *mut u8, pcbcert: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbencryptedsessionkey: *const u8, cbsessionkey: u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSeekInfo(pub ::windows::runtime::IUnknown);
impl IMFSeekInfo {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetNearestKeyFrames(&self, pguidtimeformat: *const ::windows::runtime::GUID, pvarstartposition: *const super::super::System::Com::StructuredStorage::PROPVARIANT, pvarpreviouskeyframe: *mut super::super::System::Com::StructuredStorage::PROPVARIANT, pvarnextkeyframe: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(pguidtimeformat), ::core::mem::transmute(pvarstartposition), ::core::mem::transmute(pvarpreviouskeyframe), ::core::mem::transmute(pvarnextkeyframe)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFSeekInfo {
    type Vtable = IMFSeekInfo_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(649062995, 55789, 17077, [171, 128, 230, 79, 158, 227, 71, 121]);
}
impl ::core::convert::From<IMFSeekInfo> for ::windows::runtime::IUnknown {
    fn from(value: IMFSeekInfo) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSeekInfo> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSeekInfo) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSeekInfo {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSeekInfo {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSeekInfo_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    pub  unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pguidtimeformat: *const ::windows::runtime::GUID, pvarstartposition: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>, pvarpreviouskeyframe: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>, pvarnextkeyframe: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSensorActivitiesReport(pub ::windows::runtime::IUnknown);
impl IMFSensorActivitiesReport {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetActivityReport(&self, index: u32) -> ::windows::runtime::Result<IMFSensorActivityReport> {
        let mut result__: <IMFSensorActivityReport as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(index), &mut result__).from_abi::<IMFSensorActivityReport>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetActivityReportByDeviceName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, symbolicname: Param0) -> ::windows::runtime::Result<IMFSensorActivityReport> {
        let mut result__: <IMFSensorActivityReport as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), symbolicname.into_param().abi(), &mut result__).from_abi::<IMFSensorActivityReport>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFSensorActivitiesReport {
    type Vtable = IMFSensorActivitiesReport_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1748990558, 18969, 17357, [177, 169, 219, 244, 171, 63, 119, 119]);
}
impl ::core::convert::From<IMFSensorActivitiesReport> for ::windows::runtime::IUnknown {
    fn from(value: IMFSensorActivitiesReport) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSensorActivitiesReport> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSensorActivitiesReport) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSensorActivitiesReport {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSensorActivitiesReport {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSensorActivitiesReport_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pccount: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, sensoractivityreport: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbolicname: super::super::Foundation::PWSTR, sensoractivityreport: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSensorActivitiesReportCallback(pub ::windows::runtime::IUnknown);
impl IMFSensorActivitiesReportCallback {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnActivitiesReport<'a, Param0: ::windows::runtime::IntoParam<'a, IMFSensorActivitiesReport>>(&self, sensoractivitiesreport: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), sensoractivitiesreport.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFSensorActivitiesReportCallback {
    type Vtable = IMFSensorActivitiesReportCallback_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3729814254, 56291, 18140, [138, 135, 182, 246, 49, 25, 71, 81]);
}
impl ::core::convert::From<IMFSensorActivitiesReportCallback> for ::windows::runtime::IUnknown {
    fn from(value: IMFSensorActivitiesReportCallback) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSensorActivitiesReportCallback> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSensorActivitiesReportCallback) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSensorActivitiesReportCallback {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSensorActivitiesReportCallback {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSensorActivitiesReportCallback_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, sensoractivitiesreport: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSensorActivityMonitor(pub ::windows::runtime::IUnknown);
impl IMFSensorActivityMonitor {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Start(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Stop(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFSensorActivityMonitor {
    type Vtable = IMFSensorActivityMonitor_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3503223109, 46068, 17216, [162, 229, 122, 80, 128, 202, 5, 203]);
}
impl ::core::convert::From<IMFSensorActivityMonitor> for ::windows::runtime::IUnknown {
    fn from(value: IMFSensorActivityMonitor) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSensorActivityMonitor> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSensorActivityMonitor) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSensorActivityMonitor {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSensorActivityMonitor {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSensorActivityMonitor_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSensorActivityReport(pub ::windows::runtime::IUnknown);
impl IMFSensorActivityReport {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetFriendlyName(&self, friendlyname: super::super::Foundation::PWSTR, cchfriendlyname: u32, pcchwritten: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(friendlyname), ::core::mem::transmute(cchfriendlyname), ::core::mem::transmute(pcchwritten)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolicLink(&self, symboliclink: super::super::Foundation::PWSTR, cchsymboliclink: u32, pcchwritten: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(symboliclink), ::core::mem::transmute(cchsymboliclink), ::core::mem::transmute(pcchwritten)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetProcessCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetProcessActivity(&self, index: u32) -> ::windows::runtime::Result<IMFSensorProcessActivity> {
        let mut result__: <IMFSensorProcessActivity as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(index), &mut result__).from_abi::<IMFSensorProcessActivity>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFSensorActivityReport {
    type Vtable = IMFSensorActivityReport_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1049381857, 43202, 17704, [144, 222, 40, 81, 189, 229, 254, 173]);
}
impl ::core::convert::From<IMFSensorActivityReport> for ::windows::runtime::IUnknown {
    fn from(value: IMFSensorActivityReport) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSensorActivityReport> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSensorActivityReport) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSensorActivityReport {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSensorActivityReport {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSensorActivityReport_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, friendlyname: super::super::Foundation::PWSTR, cchfriendlyname: u32, pcchwritten: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symboliclink: super::super::Foundation::PWSTR, cchsymboliclink: u32, pcchwritten: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pccount: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, ppprocessactivity: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSensorDevice(pub ::windows::runtime::IUnknown);
impl IMFSensorDevice {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDeviceId(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDeviceType(&self) -> ::windows::runtime::Result<MFSensorDeviceType> {
        let mut result__: <MFSensorDeviceType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MFSensorDeviceType>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetFlags(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolicLink(&self, symboliclink: super::super::Foundation::PWSTR, cchsymboliclink: i32, pcchwritten: *mut i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(symboliclink), ::core::mem::transmute(cchsymboliclink), ::core::mem::transmute(pcchwritten)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDeviceAttributes(&self) -> ::windows::runtime::Result<IMFAttributes> {
        let mut result__: <IMFAttributes as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFAttributes>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamAttributesCount(&self, etype: MFSensorStreamType) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(etype), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamAttributes(&self, etype: MFSensorStreamType, dwindex: u32) -> ::windows::runtime::Result<IMFAttributes> {
        let mut result__: <IMFAttributes as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(etype), ::core::mem::transmute(dwindex), &mut result__).from_abi::<IMFAttributes>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetSensorDeviceMode(&self, emode: MFSensorDeviceMode) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(emode)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSensorDeviceMode(&self) -> ::windows::runtime::Result<MFSensorDeviceMode> {
        let mut result__: <MFSensorDeviceMode as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MFSensorDeviceMode>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFSensorDevice {
    type Vtable = IMFSensorDevice_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4221520114, 10776, 20008, [151, 48, 120, 111, 48, 240, 77, 196]);
}
impl ::core::convert::From<IMFSensorDevice> for ::windows::runtime::IUnknown {
    fn from(value: IMFSensorDevice) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSensorDevice> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSensorDevice) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSensorDevice {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSensorDevice {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSensorDevice_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdeviceid: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ptype: *mut MFSensorDeviceType) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pflags: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symboliclink: super::super::Foundation::PWSTR, cchsymboliclink: i32, pcchwritten: *mut i32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppattributes: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, etype: MFSensorStreamType, pdwcount: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, etype: MFSensorStreamType, dwindex: u32, ppattributes: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, emode: MFSensorDeviceMode) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pemode: *mut MFSensorDeviceMode) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSensorGroup(pub ::windows::runtime::IUnknown);
impl IMFSensorGroup {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolicLink(&self, symboliclink: super::super::Foundation::PWSTR, cchsymboliclink: i32, pcchwritten: *mut i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(symboliclink), ::core::mem::transmute(cchsymboliclink), ::core::mem::transmute(pcchwritten)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetFlags(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSensorGroupAttributes(&self) -> ::windows::runtime::Result<IMFAttributes> {
        let mut result__: <IMFAttributes as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFAttributes>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSensorDeviceCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSensorDevice(&self, dwindex: u32) -> ::windows::runtime::Result<IMFSensorDevice> {
        let mut result__: <IMFSensorDevice as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwindex), &mut result__).from_abi::<IMFSensorDevice>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetDefaultSensorDeviceIndex(&self, dwindex: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwindex)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDefaultSensorDeviceIndex(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CreateMediaSource(&self) -> ::windows::runtime::Result<IMFMediaSource> {
        let mut result__: <IMFMediaSource as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFMediaSource>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFSensorGroup {
    type Vtable = IMFSensorGroup_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1091576890, 38743, 17951, [137, 241, 242, 35, 69, 188, 171, 78]);
}
impl ::core::convert::From<IMFSensorGroup> for ::windows::runtime::IUnknown {
    fn from(value: IMFSensorGroup) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSensorGroup> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSensorGroup) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSensorGroup {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSensorGroup {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSensorGroup_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symboliclink: super::super::Foundation::PWSTR, cchsymboliclink: i32, pcchwritten: *mut i32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pflags: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppattributes: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwcount: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwindex: u32, ppdevice: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwindex: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwindex: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppsource: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSensorProcessActivity(pub ::windows::runtime::IUnknown);
impl IMFSensorProcessActivity {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetProcessId(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetStreamingState(&self) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamingMode(&self) -> ::windows::runtime::Result<MFSensorDeviceMode> {
        let mut result__: <MFSensorDeviceMode as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MFSensorDeviceMode>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetReportTime(&self) -> ::windows::runtime::Result<super::super::Foundation::FILETIME> {
        let mut result__: <super::super::Foundation::FILETIME as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::FILETIME>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFSensorProcessActivity {
    type Vtable = IMFSensorProcessActivity_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(970751818, 45377, 18201, [129, 60, 167, 244, 97, 98, 162, 184]);
}
impl ::core::convert::From<IMFSensorProcessActivity> for ::windows::runtime::IUnknown {
    fn from(value: IMFSensorProcessActivity) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSensorProcessActivity> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSensorProcessActivity) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSensorProcessActivity {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSensorProcessActivity {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSensorProcessActivity_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppid: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pfstreaming: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pmode: *mut MFSensorDeviceMode) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pft: *mut super::super::Foundation::FILETIME) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSensorProfile(pub ::windows::runtime::IUnknown);
impl IMFSensorProfile {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetProfileId(&self) -> ::windows::runtime::Result<SENSORPROFILEID> {
        let mut result__: <SENSORPROFILEID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<SENSORPROFILEID>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn AddProfileFilter<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, streamid: u32, wzfiltersetstring: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(streamid), wzfiltersetstring.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn IsMediaTypeSupported<'a, Param1: ::windows::runtime::IntoParam<'a, IMFMediaType>>(&self, streamid: u32, pmediatype: Param1) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(streamid), pmediatype.into_param().abi(), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn AddBlockedControl<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, wzblockedcontrol: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), wzblockedcontrol.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFSensorProfile {
    type Vtable = IMFSensorProfile_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(586638801, 36267, 16647, [132, 109, 86, 186, 247, 34, 21, 231]);
}
impl ::core::convert::From<IMFSensorProfile> for ::windows::runtime::IUnknown {
    fn from(value: IMFSensorProfile) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSensorProfile> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSensorProfile) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSensorProfile {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSensorProfile {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSensorProfile_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pid: *mut SENSORPROFILEID) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, streamid: u32, wzfiltersetstring: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, streamid: u32, pmediatype: ::windows::runtime::RawPtr, pfsupported: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, wzblockedcontrol: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSensorProfileCollection(pub ::windows::runtime::IUnknown);
impl IMFSensorProfileCollection {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetProfileCount(&self) -> u32 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetProfile(&self, index: u32) -> ::windows::runtime::Result<IMFSensorProfile> {
        let mut result__: <IMFSensorProfile as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(index), &mut result__).from_abi::<IMFSensorProfile>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AddProfile<'a, Param0: ::windows::runtime::IntoParam<'a, IMFSensorProfile>>(&self, pprofile: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), pprofile.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn FindProfile(&self, profileid: *const SENSORPROFILEID) -> ::windows::runtime::Result<IMFSensorProfile> {
        let mut result__: <IMFSensorProfile as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(profileid), &mut result__).from_abi::<IMFSensorProfile>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveProfileByIndex(&self, index: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(index)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveProfile(&self, profileid: *const SENSORPROFILEID) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(profileid)))
    }
}
unsafe impl ::windows::runtime::Interface for IMFSensorProfileCollection {
    type Vtable = IMFSensorProfileCollection_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3378423131, 391, 18622, [147, 83, 141, 37, 7, 102, 35, 81]);
}
impl ::core::convert::From<IMFSensorProfileCollection> for ::windows::runtime::IUnknown {
    fn from(value: IMFSensorProfileCollection) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSensorProfileCollection> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSensorProfileCollection) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSensorProfileCollection {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSensorProfileCollection {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSensorProfileCollection_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, ppprofile: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pprofile: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, profileid: *const SENSORPROFILEID, ppprofile: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, profileid: *const SENSORPROFILEID),
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSensorStream(pub ::windows::runtime::IUnknown);
impl IMFSensorStream {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetItem(&self, guidkey: *const ::windows::runtime::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetItemType(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<MF_ATTRIBUTE_TYPE> {
        let mut result__: <MF_ATTRIBUTE_TYPE as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<MF_ATTRIBUTE_TYPE>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn CompareItem(&self, guidkey: *const ::windows::runtime::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(value), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn Compare<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, ptheirs: Param0, matchtype: MF_ATTRIBUTES_MATCH_TYPE) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ptheirs.into_param().abi(), ::core::mem::transmute(matchtype), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUINT32(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUINT64(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDouble(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<f64> {
        let mut result__: <f64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<f64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetGUID(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStringLength(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetString(&self, guidkey: *const ::windows::runtime::GUID, pwszvalue: super::super::Foundation::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pwszvalue), ::core::mem::transmute(cchbufsize), ::core::mem::transmute(pcchlength)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetAllocatedString(&self, guidkey: *const ::windows::runtime::GUID, ppwszvalue: *mut super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(ppwszvalue), ::core::mem::transmute(pcchlength)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBlobSize(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBlob(&self, guidkey: *const ::windows::runtime::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize), ::core::mem::transmute(pcbblobsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetAllocatedBlob(&self, guidkey: *const ::windows::runtime::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(ppbuf), ::core::mem::transmute(pcbsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUnknown<T: ::windows::runtime::Interface>(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn SetItem(&self, guidkey: *const ::windows::runtime::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(value)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteItem(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteAllItems(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUINT32(&self, guidkey: *const ::windows::runtime::GUID, unvalue: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(unvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUINT64(&self, guidkey: *const ::windows::runtime::GUID, unvalue: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(unvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetDouble(&self, guidkey: *const ::windows::runtime::GUID, fvalue: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(fvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetGUID(&self, guidkey: *const ::windows::runtime::GUID, guidvalue: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(guidvalue)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetString<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, guidkey: *const ::windows::runtime::GUID, wszvalue: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), wszvalue.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetBlob(&self, guidkey: *const ::windows::runtime::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUnknown<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guidkey: *const ::windows::runtime::GUID, punknown: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).27)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), punknown.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn LockStore(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).28)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn UnlockStore(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetItemByIndex(&self, unindex: u32, pguidkey: *mut ::windows::runtime::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).31)(::core::mem::transmute_copy(self), ::core::mem::transmute(unindex), ::core::mem::transmute(pguidkey), ::core::mem::transmute(pvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CopyAllItems<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, pdest: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::core::mem::transmute_copy(self), pdest.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetMediaTypeCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).33)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetMediaType(&self, dwindex: u32) -> ::windows::runtime::Result<IMFMediaType> {
        let mut result__: <IMFMediaType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).34)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwindex), &mut result__).from_abi::<IMFMediaType>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CloneSensorStream(&self) -> ::windows::runtime::Result<IMFSensorStream> {
        let mut result__: <IMFSensorStream as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).35)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFSensorStream>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFSensorStream {
    type Vtable = IMFSensorStream_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3919847793, 50542, 18826, [139, 57, 237, 165, 160, 112, 183, 252]);
}
impl ::core::convert::From<IMFSensorStream> for ::windows::runtime::IUnknown {
    fn from(value: IMFSensorStream) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSensorStream> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSensorStream) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSensorStream {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSensorStream {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFSensorStream> for IMFAttributes {
    fn from(value: IMFSensorStream) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFSensorStream> for IMFAttributes {
    fn from(value: &IMFSensorStream) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAttributes> for IMFSensorStream {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAttributes> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAttributes> for &IMFSensorStream {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAttributes> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSensorStream_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ptype: *mut MF_ATTRIBUTE_TYPE) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, value: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>, pbresult: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ptheirs: ::windows::runtime::RawPtr, matchtype: MF_ATTRIBUTES_MATCH_TYPE, pbresult: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punvalue: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punvalue: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pfvalue: *mut f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pguidvalue: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pwszvalue: super::super::Foundation::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ppwszvalue: *mut super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pcbblobsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, value: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, unvalue: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, unvalue: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, fvalue: f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, guidvalue: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, wszvalue: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punknown: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcitems: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, unindex: u32, pguidkey: *mut ::windows::runtime::GUID, pvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdest: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwcount: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwindex: u32, ppmediatype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppstream: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSensorTransformFactory(pub ::windows::runtime::IUnknown);
impl IMFSensorTransformFactory {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetFactoryAttributes(&self) -> ::windows::runtime::Result<IMFAttributes> {
        let mut result__: <IMFAttributes as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFAttributes>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn InitializeFactory<'a, Param1: ::windows::runtime::IntoParam<'a, IMFCollection>, Param2: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, dwmaxtransformcount: u32, psensordevices: Param1, pattributes: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwmaxtransformcount), psensordevices.into_param().abi(), pattributes.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetTransformCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetTransformInformation(&self, transformindex: u32, pguidtransformid: *mut ::windows::runtime::GUID, ppattributes: *mut ::core::option::Option<IMFAttributes>, ppstreaminformation: *mut ::core::option::Option<IMFCollection>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(transformindex), ::core::mem::transmute(pguidtransformid), ::core::mem::transmute(ppattributes), ::core::mem::transmute(ppstreaminformation)).ok()
    }
    #[cfg(feature = "Win32_Media_Streaming")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Media_Streaming`*"]
    pub unsafe fn CreateTransform<'a, Param1: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, guidsensortransformid: *const ::windows::runtime::GUID, pattributes: Param1) -> ::windows::runtime::Result<super::Streaming::IMFDeviceTransform> {
        let mut result__: <super::Streaming::IMFDeviceTransform as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidsensortransformid), pattributes.into_param().abi(), &mut result__).from_abi::<super::Streaming::IMFDeviceTransform>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFSensorTransformFactory {
    type Vtable = IMFSensorTransformFactory_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4007248622, 26292, 20248, [166, 151, 172, 125, 57, 96, 33, 92]);
}
impl ::core::convert::From<IMFSensorTransformFactory> for ::windows::runtime::IUnknown {
    fn from(value: IMFSensorTransformFactory) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSensorTransformFactory> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSensorTransformFactory) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSensorTransformFactory {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSensorTransformFactory {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSensorTransformFactory_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppattributes: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwmaxtransformcount: u32, psensordevices: ::windows::runtime::RawPtr, pattributes: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwcount: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, transformindex: u32, pguidtransformid: *mut ::windows::runtime::GUID, ppattributes: *mut ::windows::runtime::RawPtr, ppstreaminformation: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Media_Streaming")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidsensortransformid: *const ::windows::runtime::GUID, pattributes: ::windows::runtime::RawPtr, ppdevicemft: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Media_Streaming"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSequencerSource(pub ::windows::runtime::IUnknown);
impl IMFSequencerSource {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AppendTopology<'a, Param0: ::windows::runtime::IntoParam<'a, IMFTopology>>(&self, ptopology: Param0, dwflags: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ptopology.into_param().abi(), ::core::mem::transmute(dwflags), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteTopology(&self, dwid: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwid)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPresentationContext<'a, Param0: ::windows::runtime::IntoParam<'a, IMFPresentationDescriptor>>(&self, ppd: Param0, pid: *mut u32, pptopology: *mut ::core::option::Option<IMFTopology>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ppd.into_param().abi(), ::core::mem::transmute(pid), ::core::mem::transmute(pptopology)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn UpdateTopology<'a, Param1: ::windows::runtime::IntoParam<'a, IMFTopology>>(&self, dwid: u32, ptopology: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwid), ptopology.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn UpdateTopologyFlags(&self, dwid: u32, dwflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwid), ::core::mem::transmute(dwflags)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFSequencerSource {
    type Vtable = IMFSequencerSource_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(427610649, 6603, 19937, [166, 76, 172, 242, 237, 203, 229, 158]);
}
impl ::core::convert::From<IMFSequencerSource> for ::windows::runtime::IUnknown {
    fn from(value: IMFSequencerSource) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSequencerSource> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSequencerSource) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSequencerSource {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSequencerSource {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSequencerSource_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ptopology: ::windows::runtime::RawPtr, dwflags: u32, pdwid: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwid: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppd: ::windows::runtime::RawPtr, pid: *mut u32, pptopology: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwid: u32, ptopology: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwid: u32, dwflags: u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSharingEngineClassFactory(pub ::windows::runtime::IUnknown);
impl IMFSharingEngineClassFactory {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CreateInstance<'a, Param1: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, dwflags: u32, pattr: Param1) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwflags), pattr.into_param().abi(), &mut result__).from_abi::<::windows::runtime::IUnknown>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFSharingEngineClassFactory {
    type Vtable = IMFSharingEngineClassFactory_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(732307346, 33541, 16699, [151, 51, 250, 241, 95, 37, 147, 132]);
}
impl ::core::convert::From<IMFSharingEngineClassFactory> for ::windows::runtime::IUnknown {
    fn from(value: IMFSharingEngineClassFactory) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSharingEngineClassFactory> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSharingEngineClassFactory) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSharingEngineClassFactory {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSharingEngineClassFactory {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSharingEngineClassFactory_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwflags: u32, pattr: ::windows::runtime::RawPtr, ppengine: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFShutdown(pub ::windows::runtime::IUnknown);
impl IMFShutdown {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Shutdown(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetShutdownStatus(&self) -> ::windows::runtime::Result<MFSHUTDOWN_STATUS> {
        let mut result__: <MFSHUTDOWN_STATUS as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MFSHUTDOWN_STATUS>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFShutdown {
    type Vtable = IMFShutdown_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2548838052, 3650, 18743, [151, 172, 157, 109, 50, 136, 36, 225]);
}
impl ::core::convert::From<IMFShutdown> for ::windows::runtime::IUnknown {
    fn from(value: IMFShutdown) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFShutdown> for ::windows::runtime::IUnknown {
    fn from(value: &IMFShutdown) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFShutdown {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFShutdown {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFShutdown_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstatus: *mut MFSHUTDOWN_STATUS) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSignedLibrary(pub ::windows::runtime::IUnknown);
impl IMFSignedLibrary {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetProcedureAddress<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PSTR>>(&self, name: Param0, address: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), name.into_param().abi(), ::core::mem::transmute(address)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFSignedLibrary {
    type Vtable = IMFSignedLibrary_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1249004490, 65386, 19463, [142, 13, 122, 53, 132, 33, 207, 6]);
}
impl ::core::convert::From<IMFSignedLibrary> for ::windows::runtime::IUnknown {
    fn from(value: IMFSignedLibrary) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSignedLibrary> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSignedLibrary) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSignedLibrary {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSignedLibrary {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSignedLibrary_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::Foundation::PSTR, address: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSimpleAudioVolume(pub ::windows::runtime::IUnknown);
impl IMFSimpleAudioVolume {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetMasterVolume(&self, flevel: f32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(flevel)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetMasterVolume(&self) -> ::windows::runtime::Result<f32> {
        let mut result__: <f32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<f32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetMute<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, bmute: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), bmute.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetMute(&self) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFSimpleAudioVolume {
    type Vtable = IMFSimpleAudioVolume_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(144629523, 53105, 17208, [141, 19, 158, 86, 157, 189, 195, 25]);
}
impl ::core::convert::From<IMFSimpleAudioVolume> for ::windows::runtime::IUnknown {
    fn from(value: IMFSimpleAudioVolume) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSimpleAudioVolume> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSimpleAudioVolume) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSimpleAudioVolume {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSimpleAudioVolume {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSimpleAudioVolume_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flevel: f32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pflevel: *mut f32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, bmute: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbmute: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSinkWriter(pub ::windows::runtime::IUnknown);
impl IMFSinkWriter {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AddStream<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaType>>(&self, ptargetmediatype: Param0) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ptargetmediatype.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetInputMediaType<'a, Param1: ::windows::runtime::IntoParam<'a, IMFMediaType>, Param2: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, dwstreamindex: u32, pinputmediatype: Param1, pencodingparameters: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), pinputmediatype.into_param().abi(), pencodingparameters.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BeginWriting(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn WriteSample<'a, Param1: ::windows::runtime::IntoParam<'a, IMFSample>>(&self, dwstreamindex: u32, psample: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), psample.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SendStreamTick(&self, dwstreamindex: u32, lltimestamp: i64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), ::core::mem::transmute(lltimestamp)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn PlaceMarker(&self, dwstreamindex: u32, pvcontext: *const ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), ::core::mem::transmute(pvcontext)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn NotifyEndOfSegment(&self, dwstreamindex: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Flush(&self, dwstreamindex: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Finalize(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetServiceForStream(&self, dwstreamindex: u32, guidservice: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), ::core::mem::transmute(guidservice), ::core::mem::transmute(riid), ::core::mem::transmute(ppvobject)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStatistics(&self, dwstreamindex: u32) -> ::windows::runtime::Result<MF_SINK_WRITER_STATISTICS> {
        let mut result__: <MF_SINK_WRITER_STATISTICS as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), &mut result__).from_abi::<MF_SINK_WRITER_STATISTICS>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFSinkWriter {
    type Vtable = IMFSinkWriter_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(825749965, 65118, 18437, [165, 216, 251, 71, 116, 72, 203, 61]);
}
impl ::core::convert::From<IMFSinkWriter> for ::windows::runtime::IUnknown {
    fn from(value: IMFSinkWriter) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSinkWriter> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSinkWriter) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSinkWriter {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSinkWriter {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSinkWriter_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ptargetmediatype: ::windows::runtime::RawPtr, pdwstreamindex: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, pinputmediatype: ::windows::runtime::RawPtr, pencodingparameters: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, psample: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, lltimestamp: i64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, pvcontext: *const ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, guidservice: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, pstats: *mut MF_SINK_WRITER_STATISTICS) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSinkWriterCallback(pub ::windows::runtime::IUnknown);
impl IMFSinkWriterCallback {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnFinalize(&self, hrstatus: ::windows::runtime::HRESULT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(hrstatus)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnMarker(&self, dwstreamindex: u32, pvcontext: *const ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), ::core::mem::transmute(pvcontext)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFSinkWriterCallback {
    type Vtable = IMFSinkWriterCallback_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1718580958, 13266, 16825, [164, 88, 41, 237, 10, 151, 44, 88]);
}
impl ::core::convert::From<IMFSinkWriterCallback> for ::windows::runtime::IUnknown {
    fn from(value: IMFSinkWriterCallback) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSinkWriterCallback> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSinkWriterCallback) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSinkWriterCallback {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSinkWriterCallback {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSinkWriterCallback_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hrstatus: ::windows::runtime::HRESULT) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, pvcontext: *const ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSinkWriterCallback2(pub ::windows::runtime::IUnknown);
impl IMFSinkWriterCallback2 {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnFinalize(&self, hrstatus: ::windows::runtime::HRESULT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(hrstatus)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnMarker(&self, dwstreamindex: u32, pvcontext: *const ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), ::core::mem::transmute(pvcontext)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnTransformChange(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnStreamError(&self, dwstreamindex: u32, hrstatus: ::windows::runtime::HRESULT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), ::core::mem::transmute(hrstatus)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFSinkWriterCallback2 {
    type Vtable = IMFSinkWriterCallback2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(609664344, 49255, 17683, [132, 254, 141, 12, 136, 255, 220, 97]);
}
impl ::core::convert::From<IMFSinkWriterCallback2> for ::windows::runtime::IUnknown {
    fn from(value: IMFSinkWriterCallback2) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSinkWriterCallback2> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSinkWriterCallback2) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSinkWriterCallback2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSinkWriterCallback2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFSinkWriterCallback2> for IMFSinkWriterCallback {
    fn from(value: IMFSinkWriterCallback2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFSinkWriterCallback2> for IMFSinkWriterCallback {
    fn from(value: &IMFSinkWriterCallback2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFSinkWriterCallback> for IMFSinkWriterCallback2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFSinkWriterCallback> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFSinkWriterCallback> for &IMFSinkWriterCallback2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFSinkWriterCallback> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSinkWriterCallback2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hrstatus: ::windows::runtime::HRESULT) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, pvcontext: *const ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, hrstatus: ::windows::runtime::HRESULT) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSinkWriterEncoderConfig(pub ::windows::runtime::IUnknown);
impl IMFSinkWriterEncoderConfig {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetTargetMediaType<'a, Param1: ::windows::runtime::IntoParam<'a, IMFMediaType>, Param2: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, dwstreamindex: u32, ptargetmediatype: Param1, pencodingparameters: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), ptargetmediatype.into_param().abi(), pencodingparameters.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn PlaceEncodingParameters<'a, Param1: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, dwstreamindex: u32, pencodingparameters: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), pencodingparameters.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFSinkWriterEncoderConfig {
    type Vtable = IMFSinkWriterEncoderConfig_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(398686110, 15582, 20190, [140, 96, 56, 153, 245, 245, 58, 214]);
}
impl ::core::convert::From<IMFSinkWriterEncoderConfig> for ::windows::runtime::IUnknown {
    fn from(value: IMFSinkWriterEncoderConfig) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSinkWriterEncoderConfig> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSinkWriterEncoderConfig) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSinkWriterEncoderConfig {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSinkWriterEncoderConfig {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSinkWriterEncoderConfig_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, ptargetmediatype: ::windows::runtime::RawPtr, pencodingparameters: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, pencodingparameters: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSinkWriterEx(pub ::windows::runtime::IUnknown);
impl IMFSinkWriterEx {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AddStream<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaType>>(&self, ptargetmediatype: Param0) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ptargetmediatype.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetInputMediaType<'a, Param1: ::windows::runtime::IntoParam<'a, IMFMediaType>, Param2: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, dwstreamindex: u32, pinputmediatype: Param1, pencodingparameters: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), pinputmediatype.into_param().abi(), pencodingparameters.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BeginWriting(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn WriteSample<'a, Param1: ::windows::runtime::IntoParam<'a, IMFSample>>(&self, dwstreamindex: u32, psample: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), psample.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SendStreamTick(&self, dwstreamindex: u32, lltimestamp: i64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), ::core::mem::transmute(lltimestamp)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn PlaceMarker(&self, dwstreamindex: u32, pvcontext: *const ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), ::core::mem::transmute(pvcontext)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn NotifyEndOfSegment(&self, dwstreamindex: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Flush(&self, dwstreamindex: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Finalize(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetServiceForStream(&self, dwstreamindex: u32, guidservice: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), ::core::mem::transmute(guidservice), ::core::mem::transmute(riid), ::core::mem::transmute(ppvobject)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStatistics(&self, dwstreamindex: u32) -> ::windows::runtime::Result<MF_SINK_WRITER_STATISTICS> {
        let mut result__: <MF_SINK_WRITER_STATISTICS as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), &mut result__).from_abi::<MF_SINK_WRITER_STATISTICS>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetTransformForStream(&self, dwstreamindex: u32, dwtransformindex: u32, pguidcategory: *mut ::windows::runtime::GUID, pptransform: *mut ::core::option::Option<IMFTransform>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), ::core::mem::transmute(dwtransformindex), ::core::mem::transmute(pguidcategory), ::core::mem::transmute(pptransform)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFSinkWriterEx {
    type Vtable = IMFSinkWriterEx_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1485664939, 23489, 18794, [135, 20, 183, 6, 23, 20, 27, 37]);
}
impl ::core::convert::From<IMFSinkWriterEx> for ::windows::runtime::IUnknown {
    fn from(value: IMFSinkWriterEx) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSinkWriterEx> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSinkWriterEx) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSinkWriterEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSinkWriterEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFSinkWriterEx> for IMFSinkWriter {
    fn from(value: IMFSinkWriterEx) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFSinkWriterEx> for IMFSinkWriter {
    fn from(value: &IMFSinkWriterEx) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFSinkWriter> for IMFSinkWriterEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFSinkWriter> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFSinkWriter> for &IMFSinkWriterEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFSinkWriter> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSinkWriterEx_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ptargetmediatype: ::windows::runtime::RawPtr, pdwstreamindex: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, pinputmediatype: ::windows::runtime::RawPtr, pencodingparameters: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, psample: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, lltimestamp: i64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, pvcontext: *const ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, guidservice: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, pstats: *mut MF_SINK_WRITER_STATISTICS) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, dwtransformindex: u32, pguidcategory: *mut ::windows::runtime::GUID, pptransform: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSourceBuffer(pub ::windows::runtime::IUnknown);
impl IMFSourceBuffer {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetUpdating(&self) -> super::super::Foundation::BOOL {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBuffered(&self) -> ::windows::runtime::Result<IMFMediaTimeRange> {
        let mut result__: <IMFMediaTimeRange as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFMediaTimeRange>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetTimeStampOffset(&self) -> f64 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetTimeStampOffset(&self, offset: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(offset)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetAppendWindowStart(&self) -> f64 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetAppendWindowStart(&self, time: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(time)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetAppendWindowEnd(&self) -> f64 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetAppendWindowEnd(&self, time: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(time)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Append(&self, pdata: *const u8, len: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdata), ::core::mem::transmute(len)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AppendByteStream<'a, Param0: ::windows::runtime::IntoParam<'a, IMFByteStream>>(&self, pstream: Param0, pmaxlen: *const u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), pstream.into_param().abi(), ::core::mem::transmute(pmaxlen)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Abort(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Remove(&self, start: f64, end: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), ::core::mem::transmute(start), ::core::mem::transmute(end)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFSourceBuffer {
    type Vtable = IMFSourceBuffer_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3805100619, 44837, 19773, [145, 16, 218, 14, 111, 142, 232, 119]);
}
impl ::core::convert::From<IMFSourceBuffer> for ::windows::runtime::IUnknown {
    fn from(value: IMFSourceBuffer) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSourceBuffer> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSourceBuffer) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSourceBuffer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSourceBuffer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSourceBuffer_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppbuffered: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> f64,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> f64,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, time: f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> f64,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, time: f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdata: *const u8, len: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstream: ::windows::runtime::RawPtr, pmaxlen: *const u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: f64, end: f64) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSourceBufferAppendMode(pub ::windows::runtime::IUnknown);
impl IMFSourceBufferAppendMode {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetAppendMode(&self) -> MF_MSE_APPEND_MODE {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetAppendMode(&self, mode: MF_MSE_APPEND_MODE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(mode)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFSourceBufferAppendMode {
    type Vtable = IMFSourceBufferAppendMode_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(426143668, 47806, 19541, [188, 3, 10, 7, 77, 163, 126, 42]);
}
impl ::core::convert::From<IMFSourceBufferAppendMode> for ::windows::runtime::IUnknown {
    fn from(value: IMFSourceBufferAppendMode) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSourceBufferAppendMode> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSourceBufferAppendMode) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSourceBufferAppendMode {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSourceBufferAppendMode {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSourceBufferAppendMode_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> MF_MSE_APPEND_MODE,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mode: MF_MSE_APPEND_MODE) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSourceBufferList(pub ::windows::runtime::IUnknown);
impl IMFSourceBufferList {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetLength(&self) -> u32 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSourceBuffer(&self, index: u32) -> ::core::option::Option<IMFSourceBuffer> {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(index)))
    }
}
unsafe impl ::windows::runtime::Interface for IMFSourceBufferList {
    type Vtable = IMFSourceBufferList_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(614040056, 33573, 16883, [184, 12, 59, 158, 58, 173, 12, 190]);
}
impl ::core::convert::From<IMFSourceBufferList> for ::windows::runtime::IUnknown {
    fn from(value: IMFSourceBufferList) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSourceBufferList> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSourceBufferList) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSourceBufferList {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSourceBufferList {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSourceBufferList_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32) -> ::windows::runtime::RawPtr,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSourceBufferNotify(pub ::windows::runtime::IUnknown);
impl IMFSourceBufferNotify {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnUpdateStart(&self) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnAbort(&self) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnError(&self, hr: ::windows::runtime::HRESULT) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(hr)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnUpdate(&self) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnUpdateEnd(&self) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self)))
    }
}
unsafe impl ::windows::runtime::Interface for IMFSourceBufferNotify {
    type Vtable = IMFSourceBufferNotify_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2279896611, 11499, 17878, [155, 136, 216, 82, 12, 77, 203, 188]);
}
impl ::core::convert::From<IMFSourceBufferNotify> for ::windows::runtime::IUnknown {
    fn from(value: IMFSourceBufferNotify) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSourceBufferNotify> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSourceBufferNotify) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSourceBufferNotify {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSourceBufferNotify {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSourceBufferNotify_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hr: ::windows::runtime::HRESULT),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSourceOpenMonitor(pub ::windows::runtime::IUnknown);
impl IMFSourceOpenMonitor {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnSourceEvent<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaEvent>>(&self, pevent: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), pevent.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFSourceOpenMonitor {
    type Vtable = IMFSourceOpenMonitor_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(93344947, 636, 18764, [162, 125, 145, 19, 41, 28, 248, 127]);
}
impl ::core::convert::From<IMFSourceOpenMonitor> for ::windows::runtime::IUnknown {
    fn from(value: IMFSourceOpenMonitor) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSourceOpenMonitor> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSourceOpenMonitor) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSourceOpenMonitor {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSourceOpenMonitor {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSourceOpenMonitor_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pevent: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSourceReader(pub ::windows::runtime::IUnknown);
impl IMFSourceReader {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetStreamSelection(&self, dwstreamindex: u32) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetStreamSelection<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, dwstreamindex: u32, fselected: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), fselected.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetNativeMediaType(&self, dwstreamindex: u32, dwmediatypeindex: u32) -> ::windows::runtime::Result<IMFMediaType> {
        let mut result__: <IMFMediaType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), ::core::mem::transmute(dwmediatypeindex), &mut result__).from_abi::<IMFMediaType>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCurrentMediaType(&self, dwstreamindex: u32) -> ::windows::runtime::Result<IMFMediaType> {
        let mut result__: <IMFMediaType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), &mut result__).from_abi::<IMFMediaType>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetCurrentMediaType<'a, Param2: ::windows::runtime::IntoParam<'a, IMFMediaType>>(&self, dwstreamindex: u32, pdwreserved: *mut u32, pmediatype: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), ::core::mem::transmute(pdwreserved), pmediatype.into_param().abi()).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn SetCurrentPosition(&self, guidtimeformat: *const ::windows::runtime::GUID, varposition: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidtimeformat), ::core::mem::transmute(varposition)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ReadSample(&self, dwstreamindex: u32, dwcontrolflags: u32, pdwactualstreamindex: *mut u32, pdwstreamflags: *mut u32, plltimestamp: *mut i64, ppsample: *mut ::core::option::Option<IMFSample>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), ::core::mem::transmute(dwcontrolflags), ::core::mem::transmute(pdwactualstreamindex), ::core::mem::transmute(pdwstreamflags), ::core::mem::transmute(plltimestamp), ::core::mem::transmute(ppsample)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Flush(&self, dwstreamindex: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetServiceForStream(&self, dwstreamindex: u32, guidservice: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), ::core::mem::transmute(guidservice), ::core::mem::transmute(riid), ::core::mem::transmute(ppvobject)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetPresentationAttribute(&self, dwstreamindex: u32, guidattribute: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<super::super::System::Com::StructuredStorage::PROPVARIANT> {
        let mut result__: <super::super::System::Com::StructuredStorage::PROPVARIANT as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), ::core::mem::transmute(guidattribute), &mut result__).from_abi::<super::super::System::Com::StructuredStorage::PROPVARIANT>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFSourceReader {
    type Vtable = IMFSourceReader_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1890477810, 51209, 20047, [137, 21, 189, 203, 64, 107, 121, 147]);
}
impl ::core::convert::From<IMFSourceReader> for ::windows::runtime::IUnknown {
    fn from(value: IMFSourceReader) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSourceReader> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSourceReader) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSourceReader {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSourceReader {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSourceReader_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, pfselected: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, fselected: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, dwmediatypeindex: u32, ppmediatype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, ppmediatype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, pdwreserved: *mut u32, pmediatype: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidtimeformat: *const ::windows::runtime::GUID, varposition: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, dwcontrolflags: u32, pdwactualstreamindex: *mut u32, pdwstreamflags: *mut u32, plltimestamp: *mut i64, ppsample: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, guidservice: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, guidattribute: *const ::windows::runtime::GUID, pvarattribute: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSourceReaderCallback(pub ::windows::runtime::IUnknown);
impl IMFSourceReaderCallback {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnReadSample<'a, Param4: ::windows::runtime::IntoParam<'a, IMFSample>>(&self, hrstatus: ::windows::runtime::HRESULT, dwstreamindex: u32, dwstreamflags: u32, lltimestamp: i64, psample: Param4) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(hrstatus), ::core::mem::transmute(dwstreamindex), ::core::mem::transmute(dwstreamflags), ::core::mem::transmute(lltimestamp), psample.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnFlush(&self, dwstreamindex: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnEvent<'a, Param1: ::windows::runtime::IntoParam<'a, IMFMediaEvent>>(&self, dwstreamindex: u32, pevent: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), pevent.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFSourceReaderCallback {
    type Vtable = IMFSourceReaderCallback_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3740044697, 64029, 19842, [132, 194, 44, 137, 105, 148, 72, 103]);
}
impl ::core::convert::From<IMFSourceReaderCallback> for ::windows::runtime::IUnknown {
    fn from(value: IMFSourceReaderCallback) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSourceReaderCallback> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSourceReaderCallback) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSourceReaderCallback {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSourceReaderCallback {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSourceReaderCallback_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hrstatus: ::windows::runtime::HRESULT, dwstreamindex: u32, dwstreamflags: u32, lltimestamp: i64, psample: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, pevent: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSourceReaderCallback2(pub ::windows::runtime::IUnknown);
impl IMFSourceReaderCallback2 {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnReadSample<'a, Param4: ::windows::runtime::IntoParam<'a, IMFSample>>(&self, hrstatus: ::windows::runtime::HRESULT, dwstreamindex: u32, dwstreamflags: u32, lltimestamp: i64, psample: Param4) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(hrstatus), ::core::mem::transmute(dwstreamindex), ::core::mem::transmute(dwstreamflags), ::core::mem::transmute(lltimestamp), psample.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnFlush(&self, dwstreamindex: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnEvent<'a, Param1: ::windows::runtime::IntoParam<'a, IMFMediaEvent>>(&self, dwstreamindex: u32, pevent: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), pevent.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnTransformChange(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnStreamError(&self, dwstreamindex: u32, hrstatus: ::windows::runtime::HRESULT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), ::core::mem::transmute(hrstatus)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFSourceReaderCallback2 {
    type Vtable = IMFSourceReaderCallback2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3481509862, 35882, 19922, [182, 234, 194, 45, 105, 97, 175, 5]);
}
impl ::core::convert::From<IMFSourceReaderCallback2> for ::windows::runtime::IUnknown {
    fn from(value: IMFSourceReaderCallback2) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSourceReaderCallback2> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSourceReaderCallback2) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSourceReaderCallback2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSourceReaderCallback2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFSourceReaderCallback2> for IMFSourceReaderCallback {
    fn from(value: IMFSourceReaderCallback2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFSourceReaderCallback2> for IMFSourceReaderCallback {
    fn from(value: &IMFSourceReaderCallback2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFSourceReaderCallback> for IMFSourceReaderCallback2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFSourceReaderCallback> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFSourceReaderCallback> for &IMFSourceReaderCallback2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFSourceReaderCallback> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSourceReaderCallback2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hrstatus: ::windows::runtime::HRESULT, dwstreamindex: u32, dwstreamflags: u32, lltimestamp: i64, psample: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, pevent: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, hrstatus: ::windows::runtime::HRESULT) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSourceReaderEx(pub ::windows::runtime::IUnknown);
impl IMFSourceReaderEx {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetStreamSelection(&self, dwstreamindex: u32) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetStreamSelection<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, dwstreamindex: u32, fselected: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), fselected.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetNativeMediaType(&self, dwstreamindex: u32, dwmediatypeindex: u32) -> ::windows::runtime::Result<IMFMediaType> {
        let mut result__: <IMFMediaType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), ::core::mem::transmute(dwmediatypeindex), &mut result__).from_abi::<IMFMediaType>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCurrentMediaType(&self, dwstreamindex: u32) -> ::windows::runtime::Result<IMFMediaType> {
        let mut result__: <IMFMediaType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), &mut result__).from_abi::<IMFMediaType>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetCurrentMediaType<'a, Param2: ::windows::runtime::IntoParam<'a, IMFMediaType>>(&self, dwstreamindex: u32, pdwreserved: *mut u32, pmediatype: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), ::core::mem::transmute(pdwreserved), pmediatype.into_param().abi()).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn SetCurrentPosition(&self, guidtimeformat: *const ::windows::runtime::GUID, varposition: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidtimeformat), ::core::mem::transmute(varposition)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ReadSample(&self, dwstreamindex: u32, dwcontrolflags: u32, pdwactualstreamindex: *mut u32, pdwstreamflags: *mut u32, plltimestamp: *mut i64, ppsample: *mut ::core::option::Option<IMFSample>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), ::core::mem::transmute(dwcontrolflags), ::core::mem::transmute(pdwactualstreamindex), ::core::mem::transmute(pdwstreamflags), ::core::mem::transmute(plltimestamp), ::core::mem::transmute(ppsample)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Flush(&self, dwstreamindex: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetServiceForStream(&self, dwstreamindex: u32, guidservice: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), ::core::mem::transmute(guidservice), ::core::mem::transmute(riid), ::core::mem::transmute(ppvobject)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetPresentationAttribute(&self, dwstreamindex: u32, guidattribute: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<super::super::System::Com::StructuredStorage::PROPVARIANT> {
        let mut result__: <super::super::System::Com::StructuredStorage::PROPVARIANT as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), ::core::mem::transmute(guidattribute), &mut result__).from_abi::<super::super::System::Com::StructuredStorage::PROPVARIANT>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetNativeMediaType<'a, Param1: ::windows::runtime::IntoParam<'a, IMFMediaType>>(&self, dwstreamindex: u32, pmediatype: Param1) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), pmediatype.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AddTransformForStream<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, dwstreamindex: u32, ptransformoractivate: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), ptransformoractivate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveAllTransformsForStream(&self, dwstreamindex: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetTransformForStream(&self, dwstreamindex: u32, dwtransformindex: u32, pguidcategory: *mut ::windows::runtime::GUID, pptransform: *mut ::core::option::Option<IMFTransform>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamindex), ::core::mem::transmute(dwtransformindex), ::core::mem::transmute(pguidcategory), ::core::mem::transmute(pptransform)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFSourceReaderEx {
    type Vtable = IMFSourceReaderEx_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2073566448, 22030, 16662, [152, 117, 176, 153, 137, 95, 35, 215]);
}
impl ::core::convert::From<IMFSourceReaderEx> for ::windows::runtime::IUnknown {
    fn from(value: IMFSourceReaderEx) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSourceReaderEx> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSourceReaderEx) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSourceReaderEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSourceReaderEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFSourceReaderEx> for IMFSourceReader {
    fn from(value: IMFSourceReaderEx) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFSourceReaderEx> for IMFSourceReader {
    fn from(value: &IMFSourceReaderEx) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFSourceReader> for IMFSourceReaderEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFSourceReader> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFSourceReader> for &IMFSourceReaderEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFSourceReader> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSourceReaderEx_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, pfselected: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, fselected: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, dwmediatypeindex: u32, ppmediatype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, ppmediatype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, pdwreserved: *mut u32, pmediatype: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidtimeformat: *const ::windows::runtime::GUID, varposition: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, dwcontrolflags: u32, pdwactualstreamindex: *mut u32, pdwstreamflags: *mut u32, plltimestamp: *mut i64, ppsample: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, guidservice: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, guidattribute: *const ::windows::runtime::GUID, pvarattribute: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, pmediatype: ::windows::runtime::RawPtr, pdwstreamflags: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, ptransformoractivate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamindex: u32, dwtransformindex: u32, pguidcategory: *mut ::windows::runtime::GUID, pptransform: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSourceResolver(pub ::windows::runtime::IUnknown);
impl IMFSourceResolver {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_PropertiesSystem"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_PropertiesSystem`*"]
    pub unsafe fn CreateObjectFromURL<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::System::PropertiesSystem::IPropertyStore>>(&self, pwszurl: Param0, dwflags: u32, pprops: Param2, pobjecttype: *mut MF_OBJECT_TYPE, ppobject: *mut ::core::option::Option<::windows::runtime::IUnknown>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), pwszurl.into_param().abi(), ::core::mem::transmute(dwflags), pprops.into_param().abi(), ::core::mem::transmute(pobjecttype), ::core::mem::transmute(ppobject)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_PropertiesSystem"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_PropertiesSystem`*"]
    pub unsafe fn CreateObjectFromByteStream<'a, Param0: ::windows::runtime::IntoParam<'a, IMFByteStream>, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::System::PropertiesSystem::IPropertyStore>>(&self, pbytestream: Param0, pwszurl: Param1, dwflags: u32, pprops: Param3, pobjecttype: *mut MF_OBJECT_TYPE, ppobject: *mut ::core::option::Option<::windows::runtime::IUnknown>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), pbytestream.into_param().abi(), pwszurl.into_param().abi(), ::core::mem::transmute(dwflags), pprops.into_param().abi(), ::core::mem::transmute(pobjecttype), ::core::mem::transmute(ppobject)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_PropertiesSystem"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_PropertiesSystem`*"]
    pub unsafe fn BeginCreateObjectFromURL<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::System::PropertiesSystem::IPropertyStore>, Param4: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param5: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(
        &self,
        pwszurl: Param0,
        dwflags: u32,
        pprops: Param2,
        ppiunknowncancelcookie: *mut ::core::option::Option<::windows::runtime::IUnknown>,
        pcallback: Param4,
        punkstate: Param5,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), pwszurl.into_param().abi(), ::core::mem::transmute(dwflags), pprops.into_param().abi(), ::core::mem::transmute(ppiunknowncancelcookie), pcallback.into_param().abi(), punkstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndCreateObjectFromURL<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, presult: Param0, pobjecttype: *mut MF_OBJECT_TYPE, ppobject: *mut ::core::option::Option<::windows::runtime::IUnknown>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), presult.into_param().abi(), ::core::mem::transmute(pobjecttype), ::core::mem::transmute(ppobject)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_PropertiesSystem"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_PropertiesSystem`*"]
    pub unsafe fn BeginCreateObjectFromByteStream<'a, Param0: ::windows::runtime::IntoParam<'a, IMFByteStream>, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::System::PropertiesSystem::IPropertyStore>, Param5: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param6: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(
        &self,
        pbytestream: Param0,
        pwszurl: Param1,
        dwflags: u32,
        pprops: Param3,
        ppiunknowncancelcookie: *mut ::core::option::Option<::windows::runtime::IUnknown>,
        pcallback: Param5,
        punkstate: Param6,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), pbytestream.into_param().abi(), pwszurl.into_param().abi(), ::core::mem::transmute(dwflags), pprops.into_param().abi(), ::core::mem::transmute(ppiunknowncancelcookie), pcallback.into_param().abi(), punkstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndCreateObjectFromByteStream<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, presult: Param0, pobjecttype: *mut MF_OBJECT_TYPE, ppobject: *mut ::core::option::Option<::windows::runtime::IUnknown>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), presult.into_param().abi(), ::core::mem::transmute(pobjecttype), ::core::mem::transmute(ppobject)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CancelObjectCreation<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, piunknowncancelcookie: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), piunknowncancelcookie.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFSourceResolver {
    type Vtable = IMFSourceResolver_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4226130733, 42135, 19297, [187, 133, 151, 177, 168, 72, 166, 227]);
}
impl ::core::convert::From<IMFSourceResolver> for ::windows::runtime::IUnknown {
    fn from(value: IMFSourceResolver) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSourceResolver> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSourceResolver) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSourceResolver {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSourceResolver {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSourceResolver_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_PropertiesSystem"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pwszurl: super::super::Foundation::PWSTR, dwflags: u32, pprops: ::windows::runtime::RawPtr, pobjecttype: *mut MF_OBJECT_TYPE, ppobject: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_PropertiesSystem")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_PropertiesSystem"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbytestream: ::windows::runtime::RawPtr, pwszurl: super::super::Foundation::PWSTR, dwflags: u32, pprops: ::windows::runtime::RawPtr, pobjecttype: *mut MF_OBJECT_TYPE, ppobject: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_PropertiesSystem")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_PropertiesSystem"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pwszurl: super::super::Foundation::PWSTR, dwflags: u32, pprops: ::windows::runtime::RawPtr, ppiunknowncancelcookie: *mut ::windows::runtime::RawPtr, pcallback: ::windows::runtime::RawPtr, punkstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_PropertiesSystem")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presult: ::windows::runtime::RawPtr, pobjecttype: *mut MF_OBJECT_TYPE, ppobject: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_PropertiesSystem"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbytestream: ::windows::runtime::RawPtr, pwszurl: super::super::Foundation::PWSTR, dwflags: u32, pprops: ::windows::runtime::RawPtr, ppiunknowncancelcookie: *mut ::windows::runtime::RawPtr, pcallback: ::windows::runtime::RawPtr, punkstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_PropertiesSystem")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presult: ::windows::runtime::RawPtr, pobjecttype: *mut MF_OBJECT_TYPE, ppobject: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, piunknowncancelcookie: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSpatialAudioObjectBuffer(pub ::windows::runtime::IUnknown);
impl IMFSpatialAudioObjectBuffer {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Lock(&self, ppbbuffer: *mut *mut u8, pcbmaxlength: *mut u32, pcbcurrentlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(ppbbuffer), ::core::mem::transmute(pcbmaxlength), ::core::mem::transmute(pcbcurrentlength)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Unlock(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCurrentLength(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetCurrentLength(&self, cbcurrentlength: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(cbcurrentlength)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetMaxLength(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetID(&self, u32id: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(u32id)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetID(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Media_Audio_CoreAudio")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Media_Audio_CoreAudio`*"]
    pub unsafe fn SetType(&self, r#type: super::Audio::CoreAudio::AudioObjectType) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(r#type)).ok()
    }
    #[cfg(feature = "Win32_Media_Audio_CoreAudio")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Media_Audio_CoreAudio`*"]
    pub unsafe fn GetType(&self) -> ::windows::runtime::Result<super::Audio::CoreAudio::AudioObjectType> {
        let mut result__: <super::Audio::CoreAudio::AudioObjectType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::Audio::CoreAudio::AudioObjectType>(result__)
    }
    #[cfg(feature = "Win32_Media_Audio_CoreAudio")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Media_Audio_CoreAudio`*"]
    pub unsafe fn GetMetadataItems(&self) -> ::windows::runtime::Result<super::Audio::CoreAudio::ISpatialAudioMetadataItems> {
        let mut result__: <super::Audio::CoreAudio::ISpatialAudioMetadataItems as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::Audio::CoreAudio::ISpatialAudioMetadataItems>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFSpatialAudioObjectBuffer {
    type Vtable = IMFSpatialAudioObjectBuffer_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3549883532, 24670, 16969, [151, 141, 114, 173, 28, 49, 40, 114]);
}
impl ::core::convert::From<IMFSpatialAudioObjectBuffer> for ::windows::runtime::IUnknown {
    fn from(value: IMFSpatialAudioObjectBuffer) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSpatialAudioObjectBuffer> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSpatialAudioObjectBuffer) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSpatialAudioObjectBuffer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSpatialAudioObjectBuffer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFSpatialAudioObjectBuffer> for IMFMediaBuffer {
    fn from(value: IMFSpatialAudioObjectBuffer) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFSpatialAudioObjectBuffer> for IMFMediaBuffer {
    fn from(value: &IMFSpatialAudioObjectBuffer) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaBuffer> for IMFSpatialAudioObjectBuffer {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaBuffer> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaBuffer> for &IMFSpatialAudioObjectBuffer {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaBuffer> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSpatialAudioObjectBuffer_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppbbuffer: *mut *mut u8, pcbmaxlength: *mut u32, pcbcurrentlength: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcbcurrentlength: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, cbcurrentlength: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcbmaxlength: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, u32id: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pu32id: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Media_Audio_CoreAudio")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: super::Audio::CoreAudio::AudioObjectType) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Media_Audio_CoreAudio"))] usize,
    #[cfg(feature = "Win32_Media_Audio_CoreAudio")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ptype: *mut super::Audio::CoreAudio::AudioObjectType) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Media_Audio_CoreAudio"))] usize,
    #[cfg(feature = "Win32_Media_Audio_CoreAudio")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppmetadataitems: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Media_Audio_CoreAudio"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSpatialAudioSample(pub ::windows::runtime::IUnknown);
impl IMFSpatialAudioSample {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetItem(&self, guidkey: *const ::windows::runtime::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetItemType(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<MF_ATTRIBUTE_TYPE> {
        let mut result__: <MF_ATTRIBUTE_TYPE as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<MF_ATTRIBUTE_TYPE>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn CompareItem(&self, guidkey: *const ::windows::runtime::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(value), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn Compare<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, ptheirs: Param0, matchtype: MF_ATTRIBUTES_MATCH_TYPE) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ptheirs.into_param().abi(), ::core::mem::transmute(matchtype), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUINT32(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUINT64(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDouble(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<f64> {
        let mut result__: <f64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<f64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetGUID(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStringLength(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetString(&self, guidkey: *const ::windows::runtime::GUID, pwszvalue: super::super::Foundation::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pwszvalue), ::core::mem::transmute(cchbufsize), ::core::mem::transmute(pcchlength)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetAllocatedString(&self, guidkey: *const ::windows::runtime::GUID, ppwszvalue: *mut super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(ppwszvalue), ::core::mem::transmute(pcchlength)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBlobSize(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBlob(&self, guidkey: *const ::windows::runtime::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize), ::core::mem::transmute(pcbblobsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetAllocatedBlob(&self, guidkey: *const ::windows::runtime::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(ppbuf), ::core::mem::transmute(pcbsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUnknown<T: ::windows::runtime::Interface>(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn SetItem(&self, guidkey: *const ::windows::runtime::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(value)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteItem(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteAllItems(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUINT32(&self, guidkey: *const ::windows::runtime::GUID, unvalue: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(unvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUINT64(&self, guidkey: *const ::windows::runtime::GUID, unvalue: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(unvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetDouble(&self, guidkey: *const ::windows::runtime::GUID, fvalue: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(fvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetGUID(&self, guidkey: *const ::windows::runtime::GUID, guidvalue: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(guidvalue)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetString<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, guidkey: *const ::windows::runtime::GUID, wszvalue: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), wszvalue.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetBlob(&self, guidkey: *const ::windows::runtime::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUnknown<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guidkey: *const ::windows::runtime::GUID, punknown: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).27)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), punknown.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn LockStore(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).28)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn UnlockStore(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetItemByIndex(&self, unindex: u32, pguidkey: *mut ::windows::runtime::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).31)(::core::mem::transmute_copy(self), ::core::mem::transmute(unindex), ::core::mem::transmute(pguidkey), ::core::mem::transmute(pvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CopyAllItems<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, pdest: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::core::mem::transmute_copy(self), pdest.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSampleFlags(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).33)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetSampleFlags(&self, dwsampleflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).34)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwsampleflags)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSampleTime(&self) -> ::windows::runtime::Result<i64> {
        let mut result__: <i64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).35)(::core::mem::transmute_copy(self), &mut result__).from_abi::<i64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetSampleTime(&self, hnssampletime: i64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).36)(::core::mem::transmute_copy(self), ::core::mem::transmute(hnssampletime)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSampleDuration(&self) -> ::windows::runtime::Result<i64> {
        let mut result__: <i64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).37)(::core::mem::transmute_copy(self), &mut result__).from_abi::<i64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetSampleDuration(&self, hnssampleduration: i64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).38)(::core::mem::transmute_copy(self), ::core::mem::transmute(hnssampleduration)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBufferCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).39)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBufferByIndex(&self, dwindex: u32) -> ::windows::runtime::Result<IMFMediaBuffer> {
        let mut result__: <IMFMediaBuffer as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).40)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwindex), &mut result__).from_abi::<IMFMediaBuffer>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ConvertToContiguousBuffer(&self) -> ::windows::runtime::Result<IMFMediaBuffer> {
        let mut result__: <IMFMediaBuffer as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).41)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFMediaBuffer>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AddBuffer<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaBuffer>>(&self, pbuffer: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).42)(::core::mem::transmute_copy(self), pbuffer.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveBufferByIndex(&self, dwindex: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).43)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwindex)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveAllBuffers(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).44)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetTotalLength(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).45)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CopyToBuffer<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaBuffer>>(&self, pbuffer: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).46)(::core::mem::transmute_copy(self), pbuffer.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetObjectCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).47)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AddSpatialAudioObject<'a, Param0: ::windows::runtime::IntoParam<'a, IMFSpatialAudioObjectBuffer>>(&self, paudioobjbuffer: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).48)(::core::mem::transmute_copy(self), paudioobjbuffer.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSpatialAudioObjectByIndex(&self, dwindex: u32) -> ::windows::runtime::Result<IMFSpatialAudioObjectBuffer> {
        let mut result__: <IMFSpatialAudioObjectBuffer as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).49)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwindex), &mut result__).from_abi::<IMFSpatialAudioObjectBuffer>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFSpatialAudioSample {
    type Vtable = IMFSpatialAudioSample_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2884799131, 13203, 17040, [186, 121, 95, 252, 70, 217, 134, 178]);
}
impl ::core::convert::From<IMFSpatialAudioSample> for ::windows::runtime::IUnknown {
    fn from(value: IMFSpatialAudioSample) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSpatialAudioSample> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSpatialAudioSample) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSpatialAudioSample {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSpatialAudioSample {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFSpatialAudioSample> for IMFSample {
    fn from(value: IMFSpatialAudioSample) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFSpatialAudioSample> for IMFSample {
    fn from(value: &IMFSpatialAudioSample) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFSample> for IMFSpatialAudioSample {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFSample> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFSample> for &IMFSpatialAudioSample {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFSample> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<IMFSpatialAudioSample> for IMFAttributes {
    fn from(value: IMFSpatialAudioSample) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFSpatialAudioSample> for IMFAttributes {
    fn from(value: &IMFSpatialAudioSample) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAttributes> for IMFSpatialAudioSample {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAttributes> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAttributes> for &IMFSpatialAudioSample {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAttributes> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSpatialAudioSample_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ptype: *mut MF_ATTRIBUTE_TYPE) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, value: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>, pbresult: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ptheirs: ::windows::runtime::RawPtr, matchtype: MF_ATTRIBUTES_MATCH_TYPE, pbresult: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punvalue: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punvalue: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pfvalue: *mut f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pguidvalue: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pwszvalue: super::super::Foundation::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ppwszvalue: *mut super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pcbblobsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, value: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, unvalue: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, unvalue: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, fvalue: f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, guidvalue: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, wszvalue: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punknown: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcitems: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, unindex: u32, pguidkey: *mut ::windows::runtime::GUID, pvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdest: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwsampleflags: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwsampleflags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, phnssampletime: *mut i64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hnssampletime: i64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, phnssampleduration: *mut i64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hnssampleduration: i64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwbuffercount: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwindex: u32, ppbuffer: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppbuffer: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbuffer: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwindex: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcbtotallength: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbuffer: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwobjectcount: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, paudioobjbuffer: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwindex: u32, ppaudioobjbuffer: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFStreamDescriptor(pub ::windows::runtime::IUnknown);
impl IMFStreamDescriptor {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetItem(&self, guidkey: *const ::windows::runtime::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetItemType(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<MF_ATTRIBUTE_TYPE> {
        let mut result__: <MF_ATTRIBUTE_TYPE as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<MF_ATTRIBUTE_TYPE>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn CompareItem(&self, guidkey: *const ::windows::runtime::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(value), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn Compare<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, ptheirs: Param0, matchtype: MF_ATTRIBUTES_MATCH_TYPE) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ptheirs.into_param().abi(), ::core::mem::transmute(matchtype), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUINT32(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUINT64(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDouble(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<f64> {
        let mut result__: <f64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<f64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetGUID(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStringLength(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetString(&self, guidkey: *const ::windows::runtime::GUID, pwszvalue: super::super::Foundation::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pwszvalue), ::core::mem::transmute(cchbufsize), ::core::mem::transmute(pcchlength)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetAllocatedString(&self, guidkey: *const ::windows::runtime::GUID, ppwszvalue: *mut super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(ppwszvalue), ::core::mem::transmute(pcchlength)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBlobSize(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBlob(&self, guidkey: *const ::windows::runtime::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize), ::core::mem::transmute(pcbblobsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetAllocatedBlob(&self, guidkey: *const ::windows::runtime::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(ppbuf), ::core::mem::transmute(pcbsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUnknown<T: ::windows::runtime::Interface>(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn SetItem(&self, guidkey: *const ::windows::runtime::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(value)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteItem(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteAllItems(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUINT32(&self, guidkey: *const ::windows::runtime::GUID, unvalue: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(unvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUINT64(&self, guidkey: *const ::windows::runtime::GUID, unvalue: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(unvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetDouble(&self, guidkey: *const ::windows::runtime::GUID, fvalue: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(fvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetGUID(&self, guidkey: *const ::windows::runtime::GUID, guidvalue: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(guidvalue)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetString<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, guidkey: *const ::windows::runtime::GUID, wszvalue: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), wszvalue.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetBlob(&self, guidkey: *const ::windows::runtime::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUnknown<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guidkey: *const ::windows::runtime::GUID, punknown: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).27)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), punknown.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn LockStore(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).28)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn UnlockStore(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetItemByIndex(&self, unindex: u32, pguidkey: *mut ::windows::runtime::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).31)(::core::mem::transmute_copy(self), ::core::mem::transmute(unindex), ::core::mem::transmute(pguidkey), ::core::mem::transmute(pvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CopyAllItems<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, pdest: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::core::mem::transmute_copy(self), pdest.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamIdentifier(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).33)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetMediaTypeHandler(&self) -> ::windows::runtime::Result<IMFMediaTypeHandler> {
        let mut result__: <IMFMediaTypeHandler as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).34)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFMediaTypeHandler>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFStreamDescriptor {
    type Vtable = IMFStreamDescriptor_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1455439260, 40379, 17909, [171, 75, 216, 15, 71, 192, 89, 56]);
}
impl ::core::convert::From<IMFStreamDescriptor> for ::windows::runtime::IUnknown {
    fn from(value: IMFStreamDescriptor) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFStreamDescriptor> for ::windows::runtime::IUnknown {
    fn from(value: &IMFStreamDescriptor) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFStreamDescriptor {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFStreamDescriptor {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFStreamDescriptor> for IMFAttributes {
    fn from(value: IMFStreamDescriptor) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFStreamDescriptor> for IMFAttributes {
    fn from(value: &IMFStreamDescriptor) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAttributes> for IMFStreamDescriptor {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAttributes> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAttributes> for &IMFStreamDescriptor {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAttributes> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFStreamDescriptor_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ptype: *mut MF_ATTRIBUTE_TYPE) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, value: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>, pbresult: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ptheirs: ::windows::runtime::RawPtr, matchtype: MF_ATTRIBUTES_MATCH_TYPE, pbresult: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punvalue: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punvalue: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pfvalue: *mut f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pguidvalue: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pwszvalue: super::super::Foundation::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ppwszvalue: *mut super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pcbblobsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, value: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, unvalue: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, unvalue: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, fvalue: f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, guidvalue: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, wszvalue: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punknown: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcitems: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, unindex: u32, pguidkey: *mut ::windows::runtime::GUID, pvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdest: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwstreamidentifier: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppmediatypehandler: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFStreamSink(pub ::windows::runtime::IUnknown);
impl IMFStreamSink {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetEvent(&self, dwflags: MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS) -> ::windows::runtime::Result<IMFMediaEvent> {
        let mut result__: <IMFMediaEvent as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwflags), &mut result__).from_abi::<IMFMediaEvent>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BeginGetEvent<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, pcallback: Param0, punkstate: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), pcallback.into_param().abi(), punkstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndGetEvent<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, presult: Param0) -> ::windows::runtime::Result<IMFMediaEvent> {
        let mut result__: <IMFMediaEvent as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), presult.into_param().abi(), &mut result__).from_abi::<IMFMediaEvent>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn QueueEvent(&self, met: u32, guidextendedtype: *const ::windows::runtime::GUID, hrstatus: ::windows::runtime::HRESULT, pvvalue: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(met), ::core::mem::transmute(guidextendedtype), ::core::mem::transmute(hrstatus), ::core::mem::transmute(pvvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetMediaSink(&self) -> ::windows::runtime::Result<IMFMediaSink> {
        let mut result__: <IMFMediaSink as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFMediaSink>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetIdentifier(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetMediaTypeHandler(&self) -> ::windows::runtime::Result<IMFMediaTypeHandler> {
        let mut result__: <IMFMediaTypeHandler as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFMediaTypeHandler>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ProcessSample<'a, Param0: ::windows::runtime::IntoParam<'a, IMFSample>>(&self, psample: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), psample.into_param().abi()).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn PlaceMarker(&self, emarkertype: MFSTREAMSINK_MARKER_TYPE, pvarmarkervalue: *const super::super::System::Com::StructuredStorage::PROPVARIANT, pvarcontextvalue: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(emarkertype), ::core::mem::transmute(pvarmarkervalue), ::core::mem::transmute(pvarcontextvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Flush(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFStreamSink {
    type Vtable = IMFStreamSink_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(177714127, 36476, 19005, [143, 140, 12, 132, 61, 194, 71, 251]);
}
impl ::core::convert::From<IMFStreamSink> for ::windows::runtime::IUnknown {
    fn from(value: IMFStreamSink) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFStreamSink> for ::windows::runtime::IUnknown {
    fn from(value: &IMFStreamSink) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFStreamSink {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFStreamSink {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFStreamSink> for IMFMediaEventGenerator {
    fn from(value: IMFStreamSink) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFStreamSink> for IMFMediaEventGenerator {
    fn from(value: &IMFStreamSink) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaEventGenerator> for IMFStreamSink {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaEventGenerator> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaEventGenerator> for &IMFStreamSink {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaEventGenerator> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFStreamSink_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwflags: MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, ppevent: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcallback: ::windows::runtime::RawPtr, punkstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presult: ::windows::runtime::RawPtr, ppevent: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, met: u32, guidextendedtype: *const ::windows::runtime::GUID, hrstatus: ::windows::runtime::HRESULT, pvvalue: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppmediasink: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwidentifier: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pphandler: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psample: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    pub  unsafe extern "system" fn(this: ::windows::runtime::RawPtr, emarkertype: MFSTREAMSINK_MARKER_TYPE, pvarmarkervalue: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>, pvarcontextvalue: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFStreamingSinkConfig(pub ::windows::runtime::IUnknown);
impl IMFStreamingSinkConfig {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn StartStreaming<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, fseekoffsetisbyteoffset: Param0, qwseekoffset: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), fseekoffsetisbyteoffset.into_param().abi(), ::core::mem::transmute(qwseekoffset)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFStreamingSinkConfig {
    type Vtable = IMFStreamingSinkConfig_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2646059585, 15557, 16596, [133, 9, 85, 88, 4, 173, 52, 204]);
}
impl ::core::convert::From<IMFStreamingSinkConfig> for ::windows::runtime::IUnknown {
    fn from(value: IMFStreamingSinkConfig) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFStreamingSinkConfig> for ::windows::runtime::IUnknown {
    fn from(value: &IMFStreamingSinkConfig) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFStreamingSinkConfig {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFStreamingSinkConfig {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFStreamingSinkConfig_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, fseekoffsetisbyteoffset: super::super::Foundation::BOOL, qwseekoffset: u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFSystemId(pub ::windows::runtime::IUnknown);
impl IMFSystemId {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetData(&self, size: *mut u32, data: *mut *mut u8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(size), ::core::mem::transmute(data)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Setup(&self, stage: u32, cbin: u32, pbin: *const u8, pcbout: *mut u32, ppbout: *mut *mut u8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(stage), ::core::mem::transmute(cbin), ::core::mem::transmute(pbin), ::core::mem::transmute(pcbout), ::core::mem::transmute(ppbout)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFSystemId {
    type Vtable = IMFSystemId_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4294225722, 8129, 20217, [162, 155, 210, 108, 73, 226, 243, 26]);
}
impl ::core::convert::From<IMFSystemId> for ::windows::runtime::IUnknown {
    fn from(value: IMFSystemId) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFSystemId> for ::windows::runtime::IUnknown {
    fn from(value: &IMFSystemId) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFSystemId {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFSystemId {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFSystemId_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, size: *mut u32, data: *mut *mut u8) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, stage: u32, cbin: u32, pbin: *const u8, pcbout: *mut u32, ppbout: *mut *mut u8) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFTimecodeTranslate(pub ::windows::runtime::IUnknown);
impl IMFTimecodeTranslate {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn BeginConvertTimecodeToHNS<'a, Param1: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param2: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, ppropvartimecode: *const super::super::System::Com::StructuredStorage::PROPVARIANT, pcallback: Param1, punkstate: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(ppropvartimecode), pcallback.into_param().abi(), punkstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndConvertTimecodeToHNS<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, presult: Param0) -> ::windows::runtime::Result<i64> {
        let mut result__: <i64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), presult.into_param().abi(), &mut result__).from_abi::<i64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BeginConvertHNSToTimecode<'a, Param1: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param2: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, hnstime: i64, pcallback: Param1, punkstate: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(hnstime), pcallback.into_param().abi(), punkstate.into_param().abi()).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn EndConvertHNSToTimecode<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, presult: Param0) -> ::windows::runtime::Result<super::super::System::Com::StructuredStorage::PROPVARIANT> {
        let mut result__: <super::super::System::Com::StructuredStorage::PROPVARIANT as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), presult.into_param().abi(), &mut result__).from_abi::<super::super::System::Com::StructuredStorage::PROPVARIANT>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFTimecodeTranslate {
    type Vtable = IMFTimecodeTranslate_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2879227489, 63464, 20212, [152, 97, 137, 243, 52, 249, 78, 116]);
}
impl ::core::convert::From<IMFTimecodeTranslate> for ::windows::runtime::IUnknown {
    fn from(value: IMFTimecodeTranslate) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFTimecodeTranslate> for ::windows::runtime::IUnknown {
    fn from(value: &IMFTimecodeTranslate) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFTimecodeTranslate {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFTimecodeTranslate {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFTimecodeTranslate_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppropvartimecode: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>, pcallback: ::windows::runtime::RawPtr, punkstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presult: ::windows::runtime::RawPtr, phnstime: *mut i64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hnstime: i64, pcallback: ::windows::runtime::RawPtr, punkstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presult: ::windows::runtime::RawPtr, ppropvartimecode: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFTimedText(pub ::windows::runtime::IUnknown);
impl IMFTimedText {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RegisterNotifications<'a, Param0: ::windows::runtime::IntoParam<'a, IMFTimedTextNotify>>(&self, notify: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), notify.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SelectTrack<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, trackid: u32, selected: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(trackid), selected.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn AddDataSource<'a, Param0: ::windows::runtime::IntoParam<'a, IMFByteStream>, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, bytestream: Param0, label: Param1, language: Param2, kind: MF_TIMED_TEXT_TRACK_KIND, isdefault: Param4) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), bytestream.into_param().abi(), label.into_param().abi(), language.into_param().abi(), ::core::mem::transmute(kind), isdefault.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn AddDataSourceFromUrl<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, url: Param0, label: Param1, language: Param2, kind: MF_TIMED_TEXT_TRACK_KIND, isdefault: Param4) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), url.into_param().abi(), label.into_param().abi(), language.into_param().abi(), ::core::mem::transmute(kind), isdefault.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn AddTrack<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, label: Param0, language: Param1, kind: MF_TIMED_TEXT_TRACK_KIND) -> ::windows::runtime::Result<IMFTimedTextTrack> {
        let mut result__: <IMFTimedTextTrack as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), label.into_param().abi(), language.into_param().abi(), ::core::mem::transmute(kind), &mut result__).from_abi::<IMFTimedTextTrack>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveTrack<'a, Param0: ::windows::runtime::IntoParam<'a, IMFTimedTextTrack>>(&self, track: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), track.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCueTimeOffset(&self) -> ::windows::runtime::Result<f64> {
        let mut result__: <f64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), &mut result__).from_abi::<f64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetCueTimeOffset(&self, offset: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(offset)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetTracks(&self) -> ::windows::runtime::Result<IMFTimedTextTrackList> {
        let mut result__: <IMFTimedTextTrackList as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFTimedTextTrackList>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetActiveTracks(&self) -> ::windows::runtime::Result<IMFTimedTextTrackList> {
        let mut result__: <IMFTimedTextTrackList as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFTimedTextTrackList>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetTextTracks(&self) -> ::windows::runtime::Result<IMFTimedTextTrackList> {
        let mut result__: <IMFTimedTextTrackList as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFTimedTextTrackList>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetMetadataTracks(&self) -> ::windows::runtime::Result<IMFTimedTextTrackList> {
        let mut result__: <IMFTimedTextTrackList as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFTimedTextTrackList>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetInBandEnabled<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, enabled: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), enabled.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn IsInBandEnabled(&self) -> super::super::Foundation::BOOL {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).16)(::core::mem::transmute_copy(self)))
    }
}
unsafe impl ::windows::runtime::Interface for IMFTimedText {
    type Vtable = IMFTimedText_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(522884297, 41951, 17165, [157, 15, 172, 216, 93, 220, 41, 175]);
}
impl ::core::convert::From<IMFTimedText> for ::windows::runtime::IUnknown {
    fn from(value: IMFTimedText) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFTimedText> for ::windows::runtime::IUnknown {
    fn from(value: &IMFTimedText) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFTimedText {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFTimedText {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFTimedText_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, notify: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, trackid: u32, selected: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, bytestream: ::windows::runtime::RawPtr, label: super::super::Foundation::PWSTR, language: super::super::Foundation::PWSTR, kind: MF_TIMED_TEXT_TRACK_KIND, isdefault: super::super::Foundation::BOOL, trackid: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, url: super::super::Foundation::PWSTR, label: super::super::Foundation::PWSTR, language: super::super::Foundation::PWSTR, kind: MF_TIMED_TEXT_TRACK_KIND, isdefault: super::super::Foundation::BOOL, trackid: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, label: super::super::Foundation::PWSTR, language: super::super::Foundation::PWSTR, kind: MF_TIMED_TEXT_TRACK_KIND, track: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, track: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, tracks: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, activetracks: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, texttracks: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, metadatatracks: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, enabled: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFTimedTextBinary(pub ::windows::runtime::IUnknown);
impl IMFTimedTextBinary {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetData(&self, data: *mut *mut u8, length: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(data), ::core::mem::transmute(length)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFTimedTextBinary {
    type Vtable = IMFTimedTextBinary_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1256432658, 1349, 17348, [191, 111, 107, 151, 165, 198, 196, 50]);
}
impl ::core::convert::From<IMFTimedTextBinary> for ::windows::runtime::IUnknown {
    fn from(value: IMFTimedTextBinary) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFTimedTextBinary> for ::windows::runtime::IUnknown {
    fn from(value: &IMFTimedTextBinary) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFTimedTextBinary {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFTimedTextBinary {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFTimedTextBinary_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, data: *mut *mut u8, length: *mut u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFTimedTextBouten(pub ::windows::runtime::IUnknown);
impl IMFTimedTextBouten {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBoutenType(&self) -> ::windows::runtime::Result<MF_TIMED_TEXT_BOUTEN_TYPE> {
        let mut result__: <MF_TIMED_TEXT_BOUTEN_TYPE as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MF_TIMED_TEXT_BOUTEN_TYPE>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBoutenColor(&self) -> ::windows::runtime::Result<MFARGB> {
        let mut result__: <MFARGB as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MFARGB>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBoutenPosition(&self) -> ::windows::runtime::Result<MF_TIMED_TEXT_BOUTEN_POSITION> {
        let mut result__: <MF_TIMED_TEXT_BOUTEN_POSITION as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MF_TIMED_TEXT_BOUTEN_POSITION>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFTimedTextBouten {
    type Vtable = IMFTimedTextBouten_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1012874890, 37056, 17998, [129, 54, 137, 141, 41, 117, 248, 71]);
}
impl ::core::convert::From<IMFTimedTextBouten> for ::windows::runtime::IUnknown {
    fn from(value: IMFTimedTextBouten) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFTimedTextBouten> for ::windows::runtime::IUnknown {
    fn from(value: &IMFTimedTextBouten) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFTimedTextBouten {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFTimedTextBouten {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFTimedTextBouten_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, value: *mut MF_TIMED_TEXT_BOUTEN_TYPE) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, value: *mut MFARGB) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, value: *mut MF_TIMED_TEXT_BOUTEN_POSITION) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFTimedTextCue(pub ::windows::runtime::IUnknown);
impl IMFTimedTextCue {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetId(&self) -> u32 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetOriginalId(&self) -> ::windows::runtime::Result<super::super::Foundation::PWSTR> {
        let mut result__: <super::super::Foundation::PWSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::PWSTR>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCueKind(&self) -> MF_TIMED_TEXT_TRACK_KIND {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStartTime(&self) -> f64 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDuration(&self) -> f64 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetTrackId(&self) -> u32 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetData(&self) -> ::windows::runtime::Result<IMFTimedTextBinary> {
        let mut result__: <IMFTimedTextBinary as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFTimedTextBinary>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetRegion(&self) -> ::windows::runtime::Result<IMFTimedTextRegion> {
        let mut result__: <IMFTimedTextRegion as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFTimedTextRegion>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStyle(&self) -> ::windows::runtime::Result<IMFTimedTextStyle> {
        let mut result__: <IMFTimedTextStyle as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFTimedTextStyle>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetLineCount(&self) -> u32 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetLine(&self, index: u32) -> ::windows::runtime::Result<IMFTimedTextFormattedText> {
        let mut result__: <IMFTimedTextFormattedText as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), ::core::mem::transmute(index), &mut result__).from_abi::<IMFTimedTextFormattedText>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFTimedTextCue {
    type Vtable = IMFTimedTextCue_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(508953671, 39467, 17377, [169, 76, 176, 170, 171, 251, 251, 201]);
}
impl ::core::convert::From<IMFTimedTextCue> for ::windows::runtime::IUnknown {
    fn from(value: IMFTimedTextCue) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFTimedTextCue> for ::windows::runtime::IUnknown {
    fn from(value: &IMFTimedTextCue) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFTimedTextCue {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFTimedTextCue {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFTimedTextCue_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, originalid: *mut super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> MF_TIMED_TEXT_TRACK_KIND,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> f64,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> f64,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, data: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, region: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, style: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, line: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFTimedTextCueList(pub ::windows::runtime::IUnknown);
impl IMFTimedTextCueList {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetLength(&self) -> u32 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCueByIndex(&self, index: u32) -> ::windows::runtime::Result<IMFTimedTextCue> {
        let mut result__: <IMFTimedTextCue as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(index), &mut result__).from_abi::<IMFTimedTextCue>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCueById(&self, id: u32) -> ::windows::runtime::Result<IMFTimedTextCue> {
        let mut result__: <IMFTimedTextCue as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(id), &mut result__).from_abi::<IMFTimedTextCue>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetCueByOriginalId<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, originalid: Param0) -> ::windows::runtime::Result<IMFTimedTextCue> {
        let mut result__: <IMFTimedTextCue as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), originalid.into_param().abi(), &mut result__).from_abi::<IMFTimedTextCue>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn AddTextCue<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, start: f64, duration: f64, text: Param2) -> ::windows::runtime::Result<IMFTimedTextCue> {
        let mut result__: <IMFTimedTextCue as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(start), ::core::mem::transmute(duration), text.into_param().abi(), &mut result__).from_abi::<IMFTimedTextCue>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AddDataCue(&self, start: f64, duration: f64, data: *const u8, datasize: u32) -> ::windows::runtime::Result<IMFTimedTextCue> {
        let mut result__: <IMFTimedTextCue as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(start), ::core::mem::transmute(duration), ::core::mem::transmute(data), ::core::mem::transmute(datasize), &mut result__).from_abi::<IMFTimedTextCue>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveCue<'a, Param0: ::windows::runtime::IntoParam<'a, IMFTimedTextCue>>(&self, cue: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), cue.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFTimedTextCueList {
    type Vtable = IMFTimedTextCueList_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2903672645, 8475, 16544, [153, 129, 254, 101, 241, 102, 208, 253]);
}
impl ::core::convert::From<IMFTimedTextCueList> for ::windows::runtime::IUnknown {
    fn from(value: IMFTimedTextCueList) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFTimedTextCueList> for ::windows::runtime::IUnknown {
    fn from(value: &IMFTimedTextCueList) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFTimedTextCueList {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFTimedTextCueList {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFTimedTextCueList_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, cue: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: u32, cue: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, originalid: super::super::Foundation::PWSTR, cue: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: f64, duration: f64, text: super::super::Foundation::PWSTR, cue: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: f64, duration: f64, data: *const u8, datasize: u32, cue: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, cue: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFTimedTextFormattedText(pub ::windows::runtime::IUnknown);
impl IMFTimedTextFormattedText {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetText(&self) -> ::windows::runtime::Result<super::super::Foundation::PWSTR> {
        let mut result__: <super::super::Foundation::PWSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::PWSTR>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSubformattingCount(&self) -> u32 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSubformatting(&self, index: u32, firstchar: *mut u32, charlength: *mut u32, style: *mut ::core::option::Option<IMFTimedTextStyle>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(index), ::core::mem::transmute(firstchar), ::core::mem::transmute(charlength), ::core::mem::transmute(style)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFTimedTextFormattedText {
    type Vtable = IMFTimedTextFormattedText_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3778737089, 19783, 17236, [177, 245, 232, 58, 224, 236, 174, 96]);
}
impl ::core::convert::From<IMFTimedTextFormattedText> for ::windows::runtime::IUnknown {
    fn from(value: IMFTimedTextFormattedText) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFTimedTextFormattedText> for ::windows::runtime::IUnknown {
    fn from(value: &IMFTimedTextFormattedText) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFTimedTextFormattedText {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFTimedTextFormattedText {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFTimedTextFormattedText_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, text: *mut super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, firstchar: *mut u32, charlength: *mut u32, style: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFTimedTextNotify(pub ::windows::runtime::IUnknown);
impl IMFTimedTextNotify {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn TrackAdded(&self, trackid: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(trackid)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn TrackRemoved(&self, trackid: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(trackid)))
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn TrackSelected<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, trackid: u32, selected: Param1) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(trackid), selected.into_param().abi()))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn TrackReadyStateChanged(&self, trackid: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(trackid)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Error(&self, errorcode: MF_TIMED_TEXT_ERROR_CODE, extendederrorcode: ::windows::runtime::HRESULT, sourcetrackid: u32) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(errorcode), ::core::mem::transmute(extendederrorcode), ::core::mem::transmute(sourcetrackid)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Cue<'a, Param2: ::windows::runtime::IntoParam<'a, IMFTimedTextCue>>(&self, cueevent: MF_TIMED_TEXT_CUE_EVENT, currenttime: f64, cue: Param2) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(cueevent), ::core::mem::transmute(currenttime), cue.into_param().abi()))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Reset(&self) {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self)))
    }
}
unsafe impl ::windows::runtime::Interface for IMFTimedTextNotify {
    type Vtable = IMFTimedTextNotify_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3748366262, 52754, 17883, [171, 167, 67, 47, 224, 84, 229, 125]);
}
impl ::core::convert::From<IMFTimedTextNotify> for ::windows::runtime::IUnknown {
    fn from(value: IMFTimedTextNotify) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFTimedTextNotify> for ::windows::runtime::IUnknown {
    fn from(value: &IMFTimedTextNotify) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFTimedTextNotify {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFTimedTextNotify {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFTimedTextNotify_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, trackid: u32),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, trackid: u32),
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, trackid: u32, selected: super::super::Foundation::BOOL),
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, trackid: u32),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, errorcode: MF_TIMED_TEXT_ERROR_CODE, extendederrorcode: ::windows::runtime::HRESULT, sourcetrackid: u32),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, cueevent: MF_TIMED_TEXT_CUE_EVENT, currenttime: f64, cue: ::windows::runtime::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFTimedTextRegion(pub ::windows::runtime::IUnknown);
impl IMFTimedTextRegion {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetName(&self) -> ::windows::runtime::Result<super::super::Foundation::PWSTR> {
        let mut result__: <super::super::Foundation::PWSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::PWSTR>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPosition(&self, px: *mut f64, py: *mut f64, unittype: *mut MF_TIMED_TEXT_UNIT_TYPE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(px), ::core::mem::transmute(py), ::core::mem::transmute(unittype)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetExtent(&self, pwidth: *mut f64, pheight: *mut f64, unittype: *mut MF_TIMED_TEXT_UNIT_TYPE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(pwidth), ::core::mem::transmute(pheight), ::core::mem::transmute(unittype)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBackgroundColor(&self) -> ::windows::runtime::Result<MFARGB> {
        let mut result__: <MFARGB as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MFARGB>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetWritingMode(&self) -> ::windows::runtime::Result<MF_TIMED_TEXT_WRITING_MODE> {
        let mut result__: <MF_TIMED_TEXT_WRITING_MODE as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MF_TIMED_TEXT_WRITING_MODE>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDisplayAlignment(&self) -> ::windows::runtime::Result<MF_TIMED_TEXT_DISPLAY_ALIGNMENT> {
        let mut result__: <MF_TIMED_TEXT_DISPLAY_ALIGNMENT as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MF_TIMED_TEXT_DISPLAY_ALIGNMENT>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetLineHeight(&self, plineheight: *mut f64, unittype: *mut MF_TIMED_TEXT_UNIT_TYPE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(plineheight), ::core::mem::transmute(unittype)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetClipOverflow(&self) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPadding(&self, before: *mut f64, start: *mut f64, after: *mut f64, end: *mut f64, unittype: *mut MF_TIMED_TEXT_UNIT_TYPE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(before), ::core::mem::transmute(start), ::core::mem::transmute(after), ::core::mem::transmute(end), ::core::mem::transmute(unittype)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetWrap(&self) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetZIndex(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), &mut result__).from_abi::<i32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetScrollMode(&self) -> ::windows::runtime::Result<MF_TIMED_TEXT_SCROLL_MODE> {
        let mut result__: <MF_TIMED_TEXT_SCROLL_MODE as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MF_TIMED_TEXT_SCROLL_MODE>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFTimedTextRegion {
    type Vtable = IMFTimedTextRegion_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3369216764, 48199, 19423, [155, 4, 120, 126, 73, 206, 63, 88]);
}
impl ::core::convert::From<IMFTimedTextRegion> for ::windows::runtime::IUnknown {
    fn from(value: IMFTimedTextRegion) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFTimedTextRegion> for ::windows::runtime::IUnknown {
    fn from(value: &IMFTimedTextRegion) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFTimedTextRegion {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFTimedTextRegion {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFTimedTextRegion_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: *mut super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, px: *mut f64, py: *mut f64, unittype: *mut MF_TIMED_TEXT_UNIT_TYPE) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pwidth: *mut f64, pheight: *mut f64, unittype: *mut MF_TIMED_TEXT_UNIT_TYPE) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, bgcolor: *mut MFARGB) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, writingmode: *mut MF_TIMED_TEXT_WRITING_MODE) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, displayalign: *mut MF_TIMED_TEXT_DISPLAY_ALIGNMENT) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, plineheight: *mut f64, unittype: *mut MF_TIMED_TEXT_UNIT_TYPE) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, clipoverflow: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, before: *mut f64, start: *mut f64, after: *mut f64, end: *mut f64, unittype: *mut MF_TIMED_TEXT_UNIT_TYPE) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, wrap: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, zindex: *mut i32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, scrollmode: *mut MF_TIMED_TEXT_SCROLL_MODE) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFTimedTextRuby(pub ::windows::runtime::IUnknown);
impl IMFTimedTextRuby {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetRubyText(&self) -> ::windows::runtime::Result<super::super::Foundation::PWSTR> {
        let mut result__: <super::super::Foundation::PWSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::PWSTR>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetRubyPosition(&self) -> ::windows::runtime::Result<MF_TIMED_TEXT_RUBY_POSITION> {
        let mut result__: <MF_TIMED_TEXT_RUBY_POSITION as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MF_TIMED_TEXT_RUBY_POSITION>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetRubyAlign(&self) -> ::windows::runtime::Result<MF_TIMED_TEXT_RUBY_ALIGN> {
        let mut result__: <MF_TIMED_TEXT_RUBY_ALIGN as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MF_TIMED_TEXT_RUBY_ALIGN>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetRubyReserve(&self) -> ::windows::runtime::Result<MF_TIMED_TEXT_RUBY_RESERVE> {
        let mut result__: <MF_TIMED_TEXT_RUBY_RESERVE as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MF_TIMED_TEXT_RUBY_RESERVE>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFTimedTextRuby {
    type Vtable = IMFTimedTextRuby_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1992730357, 18773, 19941, [178, 123, 20, 183, 52, 204, 20, 180]);
}
impl ::core::convert::From<IMFTimedTextRuby> for ::windows::runtime::IUnknown {
    fn from(value: IMFTimedTextRuby) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFTimedTextRuby> for ::windows::runtime::IUnknown {
    fn from(value: &IMFTimedTextRuby) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFTimedTextRuby {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFTimedTextRuby {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFTimedTextRuby_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, rubytext: *mut super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, value: *mut MF_TIMED_TEXT_RUBY_POSITION) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, value: *mut MF_TIMED_TEXT_RUBY_ALIGN) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, value: *mut MF_TIMED_TEXT_RUBY_RESERVE) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFTimedTextStyle(pub ::windows::runtime::IUnknown);
impl IMFTimedTextStyle {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetName(&self) -> ::windows::runtime::Result<super::super::Foundation::PWSTR> {
        let mut result__: <super::super::Foundation::PWSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::PWSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn IsExternal(&self) -> super::super::Foundation::BOOL {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetFontFamily(&self) -> ::windows::runtime::Result<super::super::Foundation::PWSTR> {
        let mut result__: <super::super::Foundation::PWSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::PWSTR>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetFontSize(&self, fontsize: *mut f64, unittype: *mut MF_TIMED_TEXT_UNIT_TYPE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(fontsize), ::core::mem::transmute(unittype)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetColor(&self) -> ::windows::runtime::Result<MFARGB> {
        let mut result__: <MFARGB as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MFARGB>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBackgroundColor(&self) -> ::windows::runtime::Result<MFARGB> {
        let mut result__: <MFARGB as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MFARGB>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetShowBackgroundAlways(&self) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetFontStyle(&self) -> ::windows::runtime::Result<MF_TIMED_TEXT_FONT_STYLE> {
        let mut result__: <MF_TIMED_TEXT_FONT_STYLE as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MF_TIMED_TEXT_FONT_STYLE>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetBold(&self) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetRightToLeft(&self) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetTextAlignment(&self) -> ::windows::runtime::Result<MF_TIMED_TEXT_ALIGNMENT> {
        let mut result__: <MF_TIMED_TEXT_ALIGNMENT as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MF_TIMED_TEXT_ALIGNMENT>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetTextDecoration(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetTextOutline(&self, color: *mut MFARGB, thickness: *mut f64, blurradius: *mut f64, unittype: *mut MF_TIMED_TEXT_UNIT_TYPE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), ::core::mem::transmute(color), ::core::mem::transmute(thickness), ::core::mem::transmute(blurradius), ::core::mem::transmute(unittype)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFTimedTextStyle {
    type Vtable = IMFTimedTextStyle_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(162678109, 47156, 20225, [163, 71, 144, 82, 226, 28, 69, 14]);
}
impl ::core::convert::From<IMFTimedTextStyle> for ::windows::runtime::IUnknown {
    fn from(value: IMFTimedTextStyle) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFTimedTextStyle> for ::windows::runtime::IUnknown {
    fn from(value: &IMFTimedTextStyle) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFTimedTextStyle {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFTimedTextStyle {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFTimedTextStyle_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: *mut super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, fontfamily: *mut super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, fontsize: *mut f64, unittype: *mut MF_TIMED_TEXT_UNIT_TYPE) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, color: *mut MFARGB) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, bgcolor: *mut MFARGB) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, showbackgroundalways: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, fontstyle: *mut MF_TIMED_TEXT_FONT_STYLE) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, bold: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, righttoleft: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, textalign: *mut MF_TIMED_TEXT_ALIGNMENT) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, textdecoration: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, color: *mut MFARGB, thickness: *mut f64, blurradius: *mut f64, unittype: *mut MF_TIMED_TEXT_UNIT_TYPE) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFTimedTextStyle2(pub ::windows::runtime::IUnknown);
impl IMFTimedTextStyle2 {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetRuby(&self) -> ::windows::runtime::Result<IMFTimedTextRuby> {
        let mut result__: <IMFTimedTextRuby as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFTimedTextRuby>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBouten(&self) -> ::windows::runtime::Result<IMFTimedTextBouten> {
        let mut result__: <IMFTimedTextBouten as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFTimedTextBouten>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn IsTextCombined(&self) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetFontAngleInDegrees(&self) -> ::windows::runtime::Result<f64> {
        let mut result__: <f64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), &mut result__).from_abi::<f64>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFTimedTextStyle2 {
    type Vtable = IMFTimedTextStyle2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3680735641, 51209, 19593, [191, 202, 208, 187, 185, 114, 157, 110]);
}
impl ::core::convert::From<IMFTimedTextStyle2> for ::windows::runtime::IUnknown {
    fn from(value: IMFTimedTextStyle2) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFTimedTextStyle2> for ::windows::runtime::IUnknown {
    fn from(value: &IMFTimedTextStyle2) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFTimedTextStyle2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFTimedTextStyle2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFTimedTextStyle2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ruby: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, bouten: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, value: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, value: *mut f64) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFTimedTextTrack(pub ::windows::runtime::IUnknown);
impl IMFTimedTextTrack {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetId(&self) -> u32 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetLabel(&self) -> ::windows::runtime::Result<super::super::Foundation::PWSTR> {
        let mut result__: <super::super::Foundation::PWSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::PWSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetLabel<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, label: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), label.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetLanguage(&self) -> ::windows::runtime::Result<super::super::Foundation::PWSTR> {
        let mut result__: <super::super::Foundation::PWSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::PWSTR>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetTrackKind(&self) -> MF_TIMED_TEXT_TRACK_KIND {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn IsInBand(&self) -> super::super::Foundation::BOOL {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetInBandMetadataTrackDispatchType(&self) -> ::windows::runtime::Result<super::super::Foundation::PWSTR> {
        let mut result__: <super::super::Foundation::PWSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::PWSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn IsActive(&self) -> super::super::Foundation::BOOL {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetErrorCode(&self) -> MF_TIMED_TEXT_ERROR_CODE {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetExtendedErrorCode(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDataFormat(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetReadyState(&self) -> MF_TIMED_TEXT_TRACK_READY_STATE {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCueList(&self) -> ::windows::runtime::Result<IMFTimedTextCueList> {
        let mut result__: <IMFTimedTextCueList as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFTimedTextCueList>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFTimedTextTrack {
    type Vtable = IMFTimedTextTrack_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2283979565, 25934, 16947, [191, 33, 215, 242, 230, 125, 48, 212]);
}
impl ::core::convert::From<IMFTimedTextTrack> for ::windows::runtime::IUnknown {
    fn from(value: IMFTimedTextTrack) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFTimedTextTrack> for ::windows::runtime::IUnknown {
    fn from(value: &IMFTimedTextTrack) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFTimedTextTrack {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFTimedTextTrack {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFTimedTextTrack_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, label: *mut super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, label: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, language: *mut super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> MF_TIMED_TEXT_TRACK_KIND,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dispatchtype: *mut super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> MF_TIMED_TEXT_ERROR_CODE,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, format: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> MF_TIMED_TEXT_TRACK_READY_STATE,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, cues: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFTimedTextTrackList(pub ::windows::runtime::IUnknown);
impl IMFTimedTextTrackList {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetLength(&self) -> u32 {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetTrack(&self, index: u32) -> ::windows::runtime::Result<IMFTimedTextTrack> {
        let mut result__: <IMFTimedTextTrack as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(index), &mut result__).from_abi::<IMFTimedTextTrack>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetTrackById(&self, trackid: u32) -> ::windows::runtime::Result<IMFTimedTextTrack> {
        let mut result__: <IMFTimedTextTrack as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(trackid), &mut result__).from_abi::<IMFTimedTextTrack>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFTimedTextTrackList {
    type Vtable = IMFTimedTextTrackList_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(603927372, 17452, 17503, [188, 204, 237, 196, 56, 170, 17, 226]);
}
impl ::core::convert::From<IMFTimedTextTrackList> for ::windows::runtime::IUnknown {
    fn from(value: IMFTimedTextTrackList) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFTimedTextTrackList> for ::windows::runtime::IUnknown {
    fn from(value: &IMFTimedTextTrackList) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFTimedTextTrackList {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFTimedTextTrackList {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFTimedTextTrackList_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, track: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, trackid: u32, track: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFTimer(pub ::windows::runtime::IUnknown);
impl IMFTimer {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetTimer<'a, Param2: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param3: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, dwflags: u32, llclocktime: i64, pcallback: Param2, punkstate: Param3) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwflags), ::core::mem::transmute(llclocktime), pcallback.into_param().abi(), punkstate.into_param().abi(), &mut result__).from_abi::<::windows::runtime::IUnknown>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CancelTimer<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, punkkey: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), punkkey.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFTimer {
    type Vtable = IMFTimer_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3849211069, 36720, 18904, [160, 248, 237, 179, 214, 171, 155, 242]);
}
impl ::core::convert::From<IMFTimer> for ::windows::runtime::IUnknown {
    fn from(value: IMFTimer) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFTimer> for ::windows::runtime::IUnknown {
    fn from(value: &IMFTimer) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFTimer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFTimer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFTimer_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwflags: u32, llclocktime: i64, pcallback: ::windows::runtime::RawPtr, punkstate: ::windows::runtime::RawPtr, ppunkkey: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, punkkey: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFTopoLoader(pub ::windows::runtime::IUnknown);
impl IMFTopoLoader {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Load<'a, Param0: ::windows::runtime::IntoParam<'a, IMFTopology>, Param2: ::windows::runtime::IntoParam<'a, IMFTopology>>(&self, pinputtopo: Param0, ppoutputtopo: *mut ::core::option::Option<IMFTopology>, pcurrenttopo: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), pinputtopo.into_param().abi(), ::core::mem::transmute(ppoutputtopo), pcurrenttopo.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFTopoLoader {
    type Vtable = IMFTopoLoader_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3734659415, 63072, 17987, [181, 106, 223, 159, 121, 152, 199, 205]);
}
impl ::core::convert::From<IMFTopoLoader> for ::windows::runtime::IUnknown {
    fn from(value: IMFTopoLoader) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFTopoLoader> for ::windows::runtime::IUnknown {
    fn from(value: &IMFTopoLoader) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFTopoLoader {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFTopoLoader {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFTopoLoader_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pinputtopo: ::windows::runtime::RawPtr, ppoutputtopo: *mut ::windows::runtime::RawPtr, pcurrenttopo: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFTopology(pub ::windows::runtime::IUnknown);
impl IMFTopology {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetItem(&self, guidkey: *const ::windows::runtime::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetItemType(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<MF_ATTRIBUTE_TYPE> {
        let mut result__: <MF_ATTRIBUTE_TYPE as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<MF_ATTRIBUTE_TYPE>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn CompareItem(&self, guidkey: *const ::windows::runtime::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(value), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn Compare<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, ptheirs: Param0, matchtype: MF_ATTRIBUTES_MATCH_TYPE) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ptheirs.into_param().abi(), ::core::mem::transmute(matchtype), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUINT32(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUINT64(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDouble(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<f64> {
        let mut result__: <f64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<f64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetGUID(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStringLength(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetString(&self, guidkey: *const ::windows::runtime::GUID, pwszvalue: super::super::Foundation::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pwszvalue), ::core::mem::transmute(cchbufsize), ::core::mem::transmute(pcchlength)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetAllocatedString(&self, guidkey: *const ::windows::runtime::GUID, ppwszvalue: *mut super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(ppwszvalue), ::core::mem::transmute(pcchlength)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBlobSize(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBlob(&self, guidkey: *const ::windows::runtime::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize), ::core::mem::transmute(pcbblobsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetAllocatedBlob(&self, guidkey: *const ::windows::runtime::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(ppbuf), ::core::mem::transmute(pcbsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUnknown<T: ::windows::runtime::Interface>(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn SetItem(&self, guidkey: *const ::windows::runtime::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(value)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteItem(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteAllItems(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUINT32(&self, guidkey: *const ::windows::runtime::GUID, unvalue: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(unvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUINT64(&self, guidkey: *const ::windows::runtime::GUID, unvalue: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(unvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetDouble(&self, guidkey: *const ::windows::runtime::GUID, fvalue: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(fvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetGUID(&self, guidkey: *const ::windows::runtime::GUID, guidvalue: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(guidvalue)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetString<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, guidkey: *const ::windows::runtime::GUID, wszvalue: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), wszvalue.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetBlob(&self, guidkey: *const ::windows::runtime::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUnknown<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guidkey: *const ::windows::runtime::GUID, punknown: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).27)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), punknown.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn LockStore(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).28)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn UnlockStore(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetItemByIndex(&self, unindex: u32, pguidkey: *mut ::windows::runtime::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).31)(::core::mem::transmute_copy(self), ::core::mem::transmute(unindex), ::core::mem::transmute(pguidkey), ::core::mem::transmute(pvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CopyAllItems<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, pdest: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::core::mem::transmute_copy(self), pdest.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetTopologyID(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).33)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AddNode<'a, Param0: ::windows::runtime::IntoParam<'a, IMFTopologyNode>>(&self, pnode: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).34)(::core::mem::transmute_copy(self), pnode.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveNode<'a, Param0: ::windows::runtime::IntoParam<'a, IMFTopologyNode>>(&self, pnode: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).35)(::core::mem::transmute_copy(self), pnode.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetNodeCount(&self) -> ::windows::runtime::Result<u16> {
        let mut result__: <u16 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).36)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u16>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetNode(&self, windex: u16) -> ::windows::runtime::Result<IMFTopologyNode> {
        let mut result__: <IMFTopologyNode as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).37)(::core::mem::transmute_copy(self), ::core::mem::transmute(windex), &mut result__).from_abi::<IMFTopologyNode>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Clear(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).38)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CloneFrom<'a, Param0: ::windows::runtime::IntoParam<'a, IMFTopology>>(&self, ptopology: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).39)(::core::mem::transmute_copy(self), ptopology.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetNodeByID(&self, qwtoponodeid: u64) -> ::windows::runtime::Result<IMFTopologyNode> {
        let mut result__: <IMFTopologyNode as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).40)(::core::mem::transmute_copy(self), ::core::mem::transmute(qwtoponodeid), &mut result__).from_abi::<IMFTopologyNode>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSourceNodeCollection(&self) -> ::windows::runtime::Result<IMFCollection> {
        let mut result__: <IMFCollection as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).41)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFCollection>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetOutputNodeCollection(&self) -> ::windows::runtime::Result<IMFCollection> {
        let mut result__: <IMFCollection as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).42)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFCollection>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFTopology {
    type Vtable = IMFTopology_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2211415866, 63194, 19400, [130, 63, 186, 207, 213, 93, 196, 51]);
}
impl ::core::convert::From<IMFTopology> for ::windows::runtime::IUnknown {
    fn from(value: IMFTopology) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFTopology> for ::windows::runtime::IUnknown {
    fn from(value: &IMFTopology) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFTopology {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFTopology {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFTopology> for IMFAttributes {
    fn from(value: IMFTopology) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFTopology> for IMFAttributes {
    fn from(value: &IMFTopology) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAttributes> for IMFTopology {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAttributes> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAttributes> for &IMFTopology {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAttributes> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFTopology_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ptype: *mut MF_ATTRIBUTE_TYPE) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, value: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>, pbresult: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ptheirs: ::windows::runtime::RawPtr, matchtype: MF_ATTRIBUTES_MATCH_TYPE, pbresult: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punvalue: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punvalue: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pfvalue: *mut f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pguidvalue: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pwszvalue: super::super::Foundation::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ppwszvalue: *mut super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pcbblobsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, value: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, unvalue: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, unvalue: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, fvalue: f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, guidvalue: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, wszvalue: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punknown: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcitems: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, unindex: u32, pguidkey: *mut ::windows::runtime::GUID, pvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdest: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pid: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pnode: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pnode: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pwnodes: *mut u16) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, windex: u16, ppnode: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ptopology: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, qwtoponodeid: u64, ppnode: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppcollection: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppcollection: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFTopologyNode(pub ::windows::runtime::IUnknown);
impl IMFTopologyNode {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetItem(&self, guidkey: *const ::windows::runtime::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetItemType(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<MF_ATTRIBUTE_TYPE> {
        let mut result__: <MF_ATTRIBUTE_TYPE as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<MF_ATTRIBUTE_TYPE>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn CompareItem(&self, guidkey: *const ::windows::runtime::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(value), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn Compare<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, ptheirs: Param0, matchtype: MF_ATTRIBUTES_MATCH_TYPE) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ptheirs.into_param().abi(), ::core::mem::transmute(matchtype), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUINT32(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUINT64(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDouble(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<f64> {
        let mut result__: <f64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<f64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetGUID(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStringLength(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetString(&self, guidkey: *const ::windows::runtime::GUID, pwszvalue: super::super::Foundation::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pwszvalue), ::core::mem::transmute(cchbufsize), ::core::mem::transmute(pcchlength)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetAllocatedString(&self, guidkey: *const ::windows::runtime::GUID, ppwszvalue: *mut super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(ppwszvalue), ::core::mem::transmute(pcchlength)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBlobSize(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBlob(&self, guidkey: *const ::windows::runtime::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize), ::core::mem::transmute(pcbblobsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetAllocatedBlob(&self, guidkey: *const ::windows::runtime::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(ppbuf), ::core::mem::transmute(pcbsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUnknown<T: ::windows::runtime::Interface>(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn SetItem(&self, guidkey: *const ::windows::runtime::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(value)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteItem(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteAllItems(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUINT32(&self, guidkey: *const ::windows::runtime::GUID, unvalue: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(unvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUINT64(&self, guidkey: *const ::windows::runtime::GUID, unvalue: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(unvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetDouble(&self, guidkey: *const ::windows::runtime::GUID, fvalue: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(fvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetGUID(&self, guidkey: *const ::windows::runtime::GUID, guidvalue: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(guidvalue)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetString<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, guidkey: *const ::windows::runtime::GUID, wszvalue: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), wszvalue.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetBlob(&self, guidkey: *const ::windows::runtime::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUnknown<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guidkey: *const ::windows::runtime::GUID, punknown: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).27)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), punknown.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn LockStore(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).28)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn UnlockStore(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetItemByIndex(&self, unindex: u32, pguidkey: *mut ::windows::runtime::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).31)(::core::mem::transmute_copy(self), ::core::mem::transmute(unindex), ::core::mem::transmute(pguidkey), ::core::mem::transmute(pvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CopyAllItems<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, pdest: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::core::mem::transmute_copy(self), pdest.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetObject<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, pobject: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).33)(::core::mem::transmute_copy(self), pobject.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetObject(&self) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).34)(::core::mem::transmute_copy(self), &mut result__).from_abi::<::windows::runtime::IUnknown>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetNodeType(&self) -> ::windows::runtime::Result<MF_TOPOLOGY_TYPE> {
        let mut result__: <MF_TOPOLOGY_TYPE as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).35)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MF_TOPOLOGY_TYPE>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetTopoNodeID(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).36)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetTopoNodeID(&self, ulltopoid: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).37)(::core::mem::transmute_copy(self), ::core::mem::transmute(ulltopoid)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetInputCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).38)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetOutputCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).39)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ConnectOutput<'a, Param1: ::windows::runtime::IntoParam<'a, IMFTopologyNode>>(&self, dwoutputindex: u32, pdownstreamnode: Param1, dwinputindexondownstreamnode: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).40)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwoutputindex), pdownstreamnode.into_param().abi(), ::core::mem::transmute(dwinputindexondownstreamnode)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DisconnectOutput(&self, dwoutputindex: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).41)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwoutputindex)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetInput(&self, dwinputindex: u32, ppupstreamnode: *mut ::core::option::Option<IMFTopologyNode>, pdwoutputindexonupstreamnode: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).42)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwinputindex), ::core::mem::transmute(ppupstreamnode), ::core::mem::transmute(pdwoutputindexonupstreamnode)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetOutput(&self, dwoutputindex: u32, ppdownstreamnode: *mut ::core::option::Option<IMFTopologyNode>, pdwinputindexondownstreamnode: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).43)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwoutputindex), ::core::mem::transmute(ppdownstreamnode), ::core::mem::transmute(pdwinputindexondownstreamnode)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetOutputPrefType<'a, Param1: ::windows::runtime::IntoParam<'a, IMFMediaType>>(&self, dwoutputindex: u32, ptype: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).44)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwoutputindex), ptype.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetOutputPrefType(&self, dwoutputindex: u32) -> ::windows::runtime::Result<IMFMediaType> {
        let mut result__: <IMFMediaType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).45)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwoutputindex), &mut result__).from_abi::<IMFMediaType>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetInputPrefType<'a, Param1: ::windows::runtime::IntoParam<'a, IMFMediaType>>(&self, dwinputindex: u32, ptype: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).46)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwinputindex), ptype.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetInputPrefType(&self, dwinputindex: u32) -> ::windows::runtime::Result<IMFMediaType> {
        let mut result__: <IMFMediaType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).47)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwinputindex), &mut result__).from_abi::<IMFMediaType>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CloneFrom<'a, Param0: ::windows::runtime::IntoParam<'a, IMFTopologyNode>>(&self, pnode: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).48)(::core::mem::transmute_copy(self), pnode.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFTopologyNode {
    type Vtable = IMFTopologyNode_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2211415866, 63194, 19400, [130, 63, 186, 207, 213, 93, 196, 48]);
}
impl ::core::convert::From<IMFTopologyNode> for ::windows::runtime::IUnknown {
    fn from(value: IMFTopologyNode) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFTopologyNode> for ::windows::runtime::IUnknown {
    fn from(value: &IMFTopologyNode) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFTopologyNode {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFTopologyNode {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFTopologyNode> for IMFAttributes {
    fn from(value: IMFTopologyNode) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFTopologyNode> for IMFAttributes {
    fn from(value: &IMFTopologyNode) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAttributes> for IMFTopologyNode {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAttributes> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAttributes> for &IMFTopologyNode {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAttributes> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFTopologyNode_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ptype: *mut MF_ATTRIBUTE_TYPE) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, value: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>, pbresult: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ptheirs: ::windows::runtime::RawPtr, matchtype: MF_ATTRIBUTES_MATCH_TYPE, pbresult: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punvalue: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punvalue: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pfvalue: *mut f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pguidvalue: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pwszvalue: super::super::Foundation::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ppwszvalue: *mut super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pcbblobsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, value: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, unvalue: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, unvalue: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, fvalue: f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, guidvalue: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, wszvalue: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punknown: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcitems: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, unindex: u32, pguidkey: *mut ::windows::runtime::GUID, pvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdest: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pobject: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppobject: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ptype: *mut MF_TOPOLOGY_TYPE) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pid: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ulltopoid: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcinputs: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcoutputs: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwoutputindex: u32, pdownstreamnode: ::windows::runtime::RawPtr, dwinputindexondownstreamnode: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwoutputindex: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwinputindex: u32, ppupstreamnode: *mut ::windows::runtime::RawPtr, pdwoutputindexonupstreamnode: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwoutputindex: u32, ppdownstreamnode: *mut ::windows::runtime::RawPtr, pdwinputindexondownstreamnode: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwoutputindex: u32, ptype: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwoutputindex: u32, pptype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwinputindex: u32, ptype: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwinputindex: u32, pptype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pnode: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFTopologyNodeAttributeEditor(pub ::windows::runtime::IUnknown);
impl IMFTopologyNodeAttributeEditor {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn UpdateNodeAttributes(&self, topoid: u64, cupdates: u32, pupdates: *const MFTOPONODE_ATTRIBUTE_UPDATE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(topoid), ::core::mem::transmute(cupdates), ::core::mem::transmute(pupdates)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFTopologyNodeAttributeEditor {
    type Vtable = IMFTopologyNodeAttributeEditor_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1735042781, 9098, 16653, [187, 153, 101, 102, 141, 1, 96, 90]);
}
impl ::core::convert::From<IMFTopologyNodeAttributeEditor> for ::windows::runtime::IUnknown {
    fn from(value: IMFTopologyNodeAttributeEditor) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFTopologyNodeAttributeEditor> for ::windows::runtime::IUnknown {
    fn from(value: &IMFTopologyNodeAttributeEditor) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFTopologyNodeAttributeEditor {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFTopologyNodeAttributeEditor {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFTopologyNodeAttributeEditor_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, topoid: u64, cupdates: u32, pupdates: *const MFTOPONODE_ATTRIBUTE_UPDATE) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFTopologyServiceLookup(pub ::windows::runtime::IUnknown);
impl IMFTopologyServiceLookup {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn LookupService(&self, r#type: MF_SERVICE_LOOKUP_TYPE, dwindex: u32, guidservice: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppvobjects: *mut *mut ::core::ffi::c_void, pnobjects: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(r#type), ::core::mem::transmute(dwindex), ::core::mem::transmute(guidservice), ::core::mem::transmute(riid), ::core::mem::transmute(ppvobjects), ::core::mem::transmute(pnobjects)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFTopologyServiceLookup {
    type Vtable = IMFTopologyServiceLookup_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4204345481, 17283, 16730, [169, 48, 221, 71, 42, 140, 246, 247]);
}
impl ::core::convert::From<IMFTopologyServiceLookup> for ::windows::runtime::IUnknown {
    fn from(value: IMFTopologyServiceLookup) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFTopologyServiceLookup> for ::windows::runtime::IUnknown {
    fn from(value: &IMFTopologyServiceLookup) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFTopologyServiceLookup {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFTopologyServiceLookup {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFTopologyServiceLookup_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: MF_SERVICE_LOOKUP_TYPE, dwindex: u32, guidservice: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppvobjects: *mut *mut ::core::ffi::c_void, pnobjects: *mut u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFTopologyServiceLookupClient(pub ::windows::runtime::IUnknown);
impl IMFTopologyServiceLookupClient {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn InitServicePointers<'a, Param0: ::windows::runtime::IntoParam<'a, IMFTopologyServiceLookup>>(&self, plookup: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), plookup.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ReleaseServicePointers(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFTopologyServiceLookupClient {
    type Vtable = IMFTopologyServiceLookupClient_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4204345482, 17283, 16730, [169, 48, 221, 71, 42, 140, 246, 247]);
}
impl ::core::convert::From<IMFTopologyServiceLookupClient> for ::windows::runtime::IUnknown {
    fn from(value: IMFTopologyServiceLookupClient) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFTopologyServiceLookupClient> for ::windows::runtime::IUnknown {
    fn from(value: &IMFTopologyServiceLookupClient) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFTopologyServiceLookupClient {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFTopologyServiceLookupClient {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFTopologyServiceLookupClient_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, plookup: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFTrackedSample(pub ::windows::runtime::IUnknown);
impl IMFTrackedSample {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetAllocator<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, psampleallocator: Param0, punkstate: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), psampleallocator.into_param().abi(), punkstate.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFTrackedSample {
    type Vtable = IMFTrackedSample_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(610007273, 1877, 16631, [136, 165, 174, 15, 24, 213, 94, 23]);
}
impl ::core::convert::From<IMFTrackedSample> for ::windows::runtime::IUnknown {
    fn from(value: IMFTrackedSample) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFTrackedSample> for ::windows::runtime::IUnknown {
    fn from(value: &IMFTrackedSample) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFTrackedSample {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFTrackedSample {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFTrackedSample_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psampleallocator: ::windows::runtime::RawPtr, punkstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFTranscodeProfile(pub ::windows::runtime::IUnknown);
impl IMFTranscodeProfile {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetAudioAttributes<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, pattrs: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), pattrs.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetAudioAttributes(&self) -> ::windows::runtime::Result<IMFAttributes> {
        let mut result__: <IMFAttributes as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFAttributes>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetVideoAttributes<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, pattrs: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), pattrs.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetVideoAttributes(&self) -> ::windows::runtime::Result<IMFAttributes> {
        let mut result__: <IMFAttributes as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFAttributes>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetContainerAttributes<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, pattrs: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), pattrs.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetContainerAttributes(&self) -> ::windows::runtime::Result<IMFAttributes> {
        let mut result__: <IMFAttributes as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFAttributes>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFTranscodeProfile {
    type Vtable = IMFTranscodeProfile_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1256184739, 31408, 18771, [166, 43, 70, 30, 127, 243, 218, 30]);
}
impl ::core::convert::From<IMFTranscodeProfile> for ::windows::runtime::IUnknown {
    fn from(value: IMFTranscodeProfile) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFTranscodeProfile> for ::windows::runtime::IUnknown {
    fn from(value: &IMFTranscodeProfile) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFTranscodeProfile {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFTranscodeProfile {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFTranscodeProfile_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pattrs: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppattrs: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pattrs: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppattrs: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pattrs: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppattrs: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFTranscodeSinkInfoProvider(pub ::windows::runtime::IUnknown);
impl IMFTranscodeSinkInfoProvider {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetOutputFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, pwszfilename: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), pwszfilename.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetOutputByteStream<'a, Param0: ::windows::runtime::IntoParam<'a, IMFActivate>>(&self, pbytestreamactivate: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), pbytestreamactivate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetProfile<'a, Param0: ::windows::runtime::IntoParam<'a, IMFTranscodeProfile>>(&self, pprofile: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), pprofile.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSinkInfo(&self) -> ::windows::runtime::Result<MF_TRANSCODE_SINK_INFO> {
        let mut result__: <MF_TRANSCODE_SINK_INFO as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MF_TRANSCODE_SINK_INFO>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFTranscodeSinkInfoProvider {
    type Vtable = IMFTranscodeSinkInfoProvider_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2365574446, 23043, 19002, [175, 247, 237, 205, 16, 124, 98, 14]);
}
impl ::core::convert::From<IMFTranscodeSinkInfoProvider> for ::windows::runtime::IUnknown {
    fn from(value: IMFTranscodeSinkInfoProvider) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFTranscodeSinkInfoProvider> for ::windows::runtime::IUnknown {
    fn from(value: &IMFTranscodeSinkInfoProvider) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFTranscodeSinkInfoProvider {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFTranscodeSinkInfoProvider {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFTranscodeSinkInfoProvider_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pwszfilename: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbytestreamactivate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pprofile: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psinkinfo: *mut ::core::mem::ManuallyDrop<MF_TRANSCODE_SINK_INFO>) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFTransform(pub ::windows::runtime::IUnknown);
impl IMFTransform {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamLimits(&self, pdwinputminimum: *mut u32, pdwinputmaximum: *mut u32, pdwoutputminimum: *mut u32, pdwoutputmaximum: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdwinputminimum), ::core::mem::transmute(pdwinputmaximum), ::core::mem::transmute(pdwoutputminimum), ::core::mem::transmute(pdwoutputmaximum)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamCount(&self, pcinputstreams: *mut u32, pcoutputstreams: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(pcinputstreams), ::core::mem::transmute(pcoutputstreams)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamIDs(&self, dwinputidarraysize: u32, pdwinputids: *mut u32, dwoutputidarraysize: u32, pdwoutputids: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwinputidarraysize), ::core::mem::transmute(pdwinputids), ::core::mem::transmute(dwoutputidarraysize), ::core::mem::transmute(pdwoutputids)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetInputStreamInfo(&self, dwinputstreamid: u32) -> ::windows::runtime::Result<MFT_INPUT_STREAM_INFO> {
        let mut result__: <MFT_INPUT_STREAM_INFO as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwinputstreamid), &mut result__).from_abi::<MFT_INPUT_STREAM_INFO>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetOutputStreamInfo(&self, dwoutputstreamid: u32) -> ::windows::runtime::Result<MFT_OUTPUT_STREAM_INFO> {
        let mut result__: <MFT_OUTPUT_STREAM_INFO as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwoutputstreamid), &mut result__).from_abi::<MFT_OUTPUT_STREAM_INFO>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetAttributes(&self) -> ::windows::runtime::Result<IMFAttributes> {
        let mut result__: <IMFAttributes as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFAttributes>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetInputStreamAttributes(&self, dwinputstreamid: u32) -> ::windows::runtime::Result<IMFAttributes> {
        let mut result__: <IMFAttributes as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwinputstreamid), &mut result__).from_abi::<IMFAttributes>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetOutputStreamAttributes(&self, dwoutputstreamid: u32) -> ::windows::runtime::Result<IMFAttributes> {
        let mut result__: <IMFAttributes as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwoutputstreamid), &mut result__).from_abi::<IMFAttributes>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteInputStream(&self, dwstreamid: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamid)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AddInputStreams(&self, cstreams: u32, adwstreamids: *const u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(cstreams), ::core::mem::transmute(adwstreamids)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetInputAvailableType(&self, dwinputstreamid: u32, dwtypeindex: u32) -> ::windows::runtime::Result<IMFMediaType> {
        let mut result__: <IMFMediaType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwinputstreamid), ::core::mem::transmute(dwtypeindex), &mut result__).from_abi::<IMFMediaType>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetOutputAvailableType(&self, dwoutputstreamid: u32, dwtypeindex: u32) -> ::windows::runtime::Result<IMFMediaType> {
        let mut result__: <IMFMediaType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwoutputstreamid), ::core::mem::transmute(dwtypeindex), &mut result__).from_abi::<IMFMediaType>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetInputType<'a, Param1: ::windows::runtime::IntoParam<'a, IMFMediaType>>(&self, dwinputstreamid: u32, ptype: Param1, dwflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwinputstreamid), ptype.into_param().abi(), ::core::mem::transmute(dwflags)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetOutputType<'a, Param1: ::windows::runtime::IntoParam<'a, IMFMediaType>>(&self, dwoutputstreamid: u32, ptype: Param1, dwflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwoutputstreamid), ptype.into_param().abi(), ::core::mem::transmute(dwflags)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetInputCurrentType(&self, dwinputstreamid: u32) -> ::windows::runtime::Result<IMFMediaType> {
        let mut result__: <IMFMediaType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwinputstreamid), &mut result__).from_abi::<IMFMediaType>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetOutputCurrentType(&self, dwoutputstreamid: u32) -> ::windows::runtime::Result<IMFMediaType> {
        let mut result__: <IMFMediaType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).18)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwoutputstreamid), &mut result__).from_abi::<IMFMediaType>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetInputStatus(&self, dwinputstreamid: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).19)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwinputstreamid), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetOutputStatus(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).20)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetOutputBounds(&self, hnslowerbound: i64, hnsupperbound: i64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::core::mem::transmute_copy(self), ::core::mem::transmute(hnslowerbound), ::core::mem::transmute(hnsupperbound)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ProcessEvent<'a, Param1: ::windows::runtime::IntoParam<'a, IMFMediaEvent>>(&self, dwinputstreamid: u32, pevent: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwinputstreamid), pevent.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ProcessMessage(&self, emessage: MFT_MESSAGE_TYPE, ulparam: usize) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(::core::mem::transmute_copy(self), ::core::mem::transmute(emessage), ::core::mem::transmute(ulparam)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ProcessInput<'a, Param1: ::windows::runtime::IntoParam<'a, IMFSample>>(&self, dwinputstreamid: u32, psample: Param1, dwflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwinputstreamid), psample.into_param().abi(), ::core::mem::transmute(dwflags)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ProcessOutput(&self, dwflags: u32, coutputbuffercount: u32, poutputsamples: *mut MFT_OUTPUT_DATA_BUFFER, pdwstatus: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwflags), ::core::mem::transmute(coutputbuffercount), ::core::mem::transmute(poutputsamples), ::core::mem::transmute(pdwstatus)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFTransform {
    type Vtable = IMFTransform_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3214197025, 23301, 20079, [128, 0, 186, 89, 137, 97, 65, 77]);
}
impl ::core::convert::From<IMFTransform> for ::windows::runtime::IUnknown {
    fn from(value: IMFTransform) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFTransform> for ::windows::runtime::IUnknown {
    fn from(value: &IMFTransform) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFTransform {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFTransform {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFTransform_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwinputminimum: *mut u32, pdwinputmaximum: *mut u32, pdwoutputminimum: *mut u32, pdwoutputmaximum: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcinputstreams: *mut u32, pcoutputstreams: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwinputidarraysize: u32, pdwinputids: *mut u32, dwoutputidarraysize: u32, pdwoutputids: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwinputstreamid: u32, pstreaminfo: *mut MFT_INPUT_STREAM_INFO) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwoutputstreamid: u32, pstreaminfo: *mut MFT_OUTPUT_STREAM_INFO) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pattributes: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwinputstreamid: u32, pattributes: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwoutputstreamid: u32, pattributes: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamid: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, cstreams: u32, adwstreamids: *const u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwinputstreamid: u32, dwtypeindex: u32, pptype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwoutputstreamid: u32, dwtypeindex: u32, pptype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwinputstreamid: u32, ptype: ::windows::runtime::RawPtr, dwflags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwoutputstreamid: u32, ptype: ::windows::runtime::RawPtr, dwflags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwinputstreamid: u32, pptype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwoutputstreamid: u32, pptype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwinputstreamid: u32, pdwflags: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwflags: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hnslowerbound: i64, hnsupperbound: i64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwinputstreamid: u32, pevent: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, emessage: MFT_MESSAGE_TYPE, ulparam: usize) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwinputstreamid: u32, psample: ::windows::runtime::RawPtr, dwflags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwflags: u32, coutputbuffercount: u32, poutputsamples: *mut ::core::mem::ManuallyDrop<MFT_OUTPUT_DATA_BUFFER>, pdwstatus: *mut u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFTrustedInput(pub ::windows::runtime::IUnknown);
impl IMFTrustedInput {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetInputTrustAuthority(&self, dwstreamid: u32, riid: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamid), ::core::mem::transmute(riid), &mut result__).from_abi::<::windows::runtime::IUnknown>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFTrustedInput {
    type Vtable = IMFTrustedInput_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1411781316, 41400, 17970, [181, 33, 222, 17, 234, 100, 160, 176]);
}
impl ::core::convert::From<IMFTrustedInput> for ::windows::runtime::IUnknown {
    fn from(value: IMFTrustedInput) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFTrustedInput> for ::windows::runtime::IUnknown {
    fn from(value: &IMFTrustedInput) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFTrustedInput {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFTrustedInput {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFTrustedInput_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamid: u32, riid: *const ::windows::runtime::GUID, ppunkobject: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFTrustedOutput(pub ::windows::runtime::IUnknown);
impl IMFTrustedOutput {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetOutputTrustAuthorityCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetOutputTrustAuthorityByIndex(&self, dwindex: u32) -> ::windows::runtime::Result<IMFOutputTrustAuthority> {
        let mut result__: <IMFOutputTrustAuthority as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwindex), &mut result__).from_abi::<IMFOutputTrustAuthority>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn IsFinal(&self) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFTrustedOutput {
    type Vtable = IMFTrustedOutput_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3516894869, 45350, 17478, [137, 12, 93, 203, 122, 215, 20, 83]);
}
impl ::core::convert::From<IMFTrustedOutput> for ::windows::runtime::IUnknown {
    fn from(value: IMFTrustedOutput) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFTrustedOutput> for ::windows::runtime::IUnknown {
    fn from(value: &IMFTrustedOutput) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFTrustedOutput {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFTrustedOutput {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFTrustedOutput_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcoutputtrustauthorities: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwindex: u32, ppauthority: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pfisfinal: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFVideoCaptureSampleAllocator(pub ::windows::runtime::IUnknown);
impl IMFVideoCaptureSampleAllocator {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetDirectXManager<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, pmanager: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), pmanager.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn UninitializeSampleAllocator(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn InitializeSampleAllocator<'a, Param1: ::windows::runtime::IntoParam<'a, IMFMediaType>>(&self, crequestedframes: u32, pmediatype: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(crequestedframes), pmediatype.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AllocateSample(&self) -> ::windows::runtime::Result<IMFSample> {
        let mut result__: <IMFSample as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFSample>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn InitializeCaptureSampleAllocator<'a, Param4: ::windows::runtime::IntoParam<'a, IMFAttributes>, Param5: ::windows::runtime::IntoParam<'a, IMFMediaType>>(&self, cbsamplesize: u32, cbcapturemetadatasize: u32, cbalignment: u32, cminimumsamples: u32, pattributes: Param4, pmediatype: Param5) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(cbsamplesize), ::core::mem::transmute(cbcapturemetadatasize), ::core::mem::transmute(cbalignment), ::core::mem::transmute(cminimumsamples), pattributes.into_param().abi(), pmediatype.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFVideoCaptureSampleAllocator {
    type Vtable = IMFVideoCaptureSampleAllocator_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1918597063, 51871, 20453, [157, 114, 153, 70, 191, 155, 60, 112]);
}
impl ::core::convert::From<IMFVideoCaptureSampleAllocator> for ::windows::runtime::IUnknown {
    fn from(value: IMFVideoCaptureSampleAllocator) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFVideoCaptureSampleAllocator> for ::windows::runtime::IUnknown {
    fn from(value: &IMFVideoCaptureSampleAllocator) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFVideoCaptureSampleAllocator {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFVideoCaptureSampleAllocator {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFVideoCaptureSampleAllocator> for IMFVideoSampleAllocator {
    fn from(value: IMFVideoCaptureSampleAllocator) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFVideoCaptureSampleAllocator> for IMFVideoSampleAllocator {
    fn from(value: &IMFVideoCaptureSampleAllocator) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFVideoSampleAllocator> for IMFVideoCaptureSampleAllocator {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFVideoSampleAllocator> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFVideoSampleAllocator> for &IMFVideoCaptureSampleAllocator {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFVideoSampleAllocator> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFVideoCaptureSampleAllocator_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pmanager: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, crequestedframes: u32, pmediatype: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppsample: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, cbsamplesize: u32, cbcapturemetadatasize: u32, cbalignment: u32, cminimumsamples: u32, pattributes: ::windows::runtime::RawPtr, pmediatype: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFVideoDeviceID(pub ::windows::runtime::IUnknown);
impl IMFVideoDeviceID {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDeviceID(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFVideoDeviceID {
    type Vtable = IMFVideoDeviceID_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2743965031, 23196, 20284, [178, 147, 142, 180, 21, 178, 121, 186]);
}
impl ::core::convert::From<IMFVideoDeviceID> for ::windows::runtime::IUnknown {
    fn from(value: IMFVideoDeviceID) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFVideoDeviceID> for ::windows::runtime::IUnknown {
    fn from(value: &IMFVideoDeviceID) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFVideoDeviceID {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFVideoDeviceID {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFVideoDeviceID_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdeviceid: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFVideoDisplayControl(pub ::windows::runtime::IUnknown);
impl IMFVideoDisplayControl {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetNativeVideoSize(&self, pszvideo: *mut super::super::Foundation::SIZE, pszarvideo: *mut super::super::Foundation::SIZE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(pszvideo), ::core::mem::transmute(pszarvideo)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetIdealVideoSize(&self, pszmin: *mut super::super::Foundation::SIZE, pszmax: *mut super::super::Foundation::SIZE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(pszmin), ::core::mem::transmute(pszmax)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetVideoPosition(&self, pnrcsource: *const MFVideoNormalizedRect, prcdest: *const super::super::Foundation::RECT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(pnrcsource), ::core::mem::transmute(prcdest)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetVideoPosition(&self, pnrcsource: *mut MFVideoNormalizedRect, prcdest: *mut super::super::Foundation::RECT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(pnrcsource), ::core::mem::transmute(prcdest)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetAspectRatioMode(&self, dwaspectratiomode: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwaspectratiomode)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetAspectRatioMode(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetVideoWindow<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::HWND>>(&self, hwndvideo: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), hwndvideo.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetVideoWindow(&self) -> ::windows::runtime::Result<super::super::Foundation::HWND> {
        let mut result__: <super::super::Foundation::HWND as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::HWND>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RepaintVideo(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Graphics_Gdi")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Gdi`*"]
    pub unsafe fn GetCurrentImage(&self, pbih: *mut super::super::Graphics::Gdi::BITMAPINFOHEADER, pdib: *mut *mut u8, pcbdib: *mut u32, ptimestamp: *mut i64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(pbih), ::core::mem::transmute(pdib), ::core::mem::transmute(pcbdib), ::core::mem::transmute(ptimestamp)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetBorderColor(&self, clr: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), ::core::mem::transmute(clr)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBorderColor(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetRenderingPrefs(&self, dwrenderflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwrenderflags)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetRenderingPrefs(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).16)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetFullscreen<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, ffullscreen: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self), ffullscreen.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetFullscreen(&self) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).18)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFVideoDisplayControl {
    type Vtable = IMFVideoDisplayControl_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2760946148, 43908, 19761, [161, 178, 24, 30, 3, 177, 7, 122]);
}
impl ::core::convert::From<IMFVideoDisplayControl> for ::windows::runtime::IUnknown {
    fn from(value: IMFVideoDisplayControl) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFVideoDisplayControl> for ::windows::runtime::IUnknown {
    fn from(value: &IMFVideoDisplayControl) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFVideoDisplayControl {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFVideoDisplayControl {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFVideoDisplayControl_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszvideo: *mut super::super::Foundation::SIZE, pszarvideo: *mut super::super::Foundation::SIZE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszmin: *mut super::super::Foundation::SIZE, pszmax: *mut super::super::Foundation::SIZE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pnrcsource: *const MFVideoNormalizedRect, prcdest: *const super::super::Foundation::RECT) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pnrcsource: *mut MFVideoNormalizedRect, prcdest: *mut super::super::Foundation::RECT) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwaspectratiomode: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwaspectratiomode: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hwndvideo: super::super::Foundation::HWND) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, phwndvideo: *mut super::super::Foundation::HWND) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Gdi")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbih: *mut super::super::Graphics::Gdi::BITMAPINFOHEADER, pdib: *mut *mut u8, pcbdib: *mut u32, ptimestamp: *mut i64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Gdi"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, clr: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pclr: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwrenderflags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwrenderflags: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ffullscreen: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pffullscreen: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFVideoMediaType(pub ::windows::runtime::IUnknown);
impl IMFVideoMediaType {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetItem(&self, guidkey: *const ::windows::runtime::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetItemType(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<MF_ATTRIBUTE_TYPE> {
        let mut result__: <MF_ATTRIBUTE_TYPE as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<MF_ATTRIBUTE_TYPE>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn CompareItem(&self, guidkey: *const ::windows::runtime::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(value), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn Compare<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, ptheirs: Param0, matchtype: MF_ATTRIBUTES_MATCH_TYPE) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ptheirs.into_param().abi(), ::core::mem::transmute(matchtype), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUINT32(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUINT64(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDouble(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<f64> {
        let mut result__: <f64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<f64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetGUID(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStringLength(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetString(&self, guidkey: *const ::windows::runtime::GUID, pwszvalue: super::super::Foundation::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pwszvalue), ::core::mem::transmute(cchbufsize), ::core::mem::transmute(pcchlength)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetAllocatedString(&self, guidkey: *const ::windows::runtime::GUID, ppwszvalue: *mut super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(ppwszvalue), ::core::mem::transmute(pcchlength)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBlobSize(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBlob(&self, guidkey: *const ::windows::runtime::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize), ::core::mem::transmute(pcbblobsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetAllocatedBlob(&self, guidkey: *const ::windows::runtime::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(ppbuf), ::core::mem::transmute(pcbsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUnknown<T: ::windows::runtime::Interface>(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn SetItem(&self, guidkey: *const ::windows::runtime::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(value)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteItem(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteAllItems(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUINT32(&self, guidkey: *const ::windows::runtime::GUID, unvalue: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(unvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUINT64(&self, guidkey: *const ::windows::runtime::GUID, unvalue: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(unvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetDouble(&self, guidkey: *const ::windows::runtime::GUID, fvalue: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(fvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetGUID(&self, guidkey: *const ::windows::runtime::GUID, guidvalue: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(guidvalue)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetString<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, guidkey: *const ::windows::runtime::GUID, wszvalue: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), wszvalue.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetBlob(&self, guidkey: *const ::windows::runtime::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUnknown<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guidkey: *const ::windows::runtime::GUID, punknown: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).27)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), punknown.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn LockStore(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).28)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn UnlockStore(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetItemByIndex(&self, unindex: u32, pguidkey: *mut ::windows::runtime::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).31)(::core::mem::transmute_copy(self), ::core::mem::transmute(unindex), ::core::mem::transmute(pguidkey), ::core::mem::transmute(pvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CopyAllItems<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, pdest: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::core::mem::transmute_copy(self), pdest.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetMajorType(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).33)(::core::mem::transmute_copy(self), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn IsCompressedFormat(&self) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).34)(::core::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn IsEqual<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaType>>(&self, pimediatype: Param0) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).35)(::core::mem::transmute_copy(self), pimediatype.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetRepresentation<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::GUID>>(&self, guidrepresentation: Param0, ppvrepresentation: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).36)(::core::mem::transmute_copy(self), guidrepresentation.into_param().abi(), ::core::mem::transmute(ppvrepresentation)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn FreeRepresentation<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::GUID>>(&self, guidrepresentation: Param0, pvrepresentation: *const ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).37)(::core::mem::transmute_copy(self), guidrepresentation.into_param().abi(), ::core::mem::transmute(pvrepresentation)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetVideoFormat(&self) -> *mut MFVIDEOFORMAT {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).38)(::core::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetVideoRepresentation<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::GUID>>(&self, guidrepresentation: Param0, ppvrepresentation: *mut *mut ::core::ffi::c_void, lstride: i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).39)(::core::mem::transmute_copy(self), guidrepresentation.into_param().abi(), ::core::mem::transmute(ppvrepresentation), ::core::mem::transmute(lstride)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFVideoMediaType {
    type Vtable = IMFVideoMediaType_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3114219551, 43257, 18338, [165, 175, 202, 58, 34, 90, 56, 144]);
}
impl ::core::convert::From<IMFVideoMediaType> for ::windows::runtime::IUnknown {
    fn from(value: IMFVideoMediaType) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFVideoMediaType> for ::windows::runtime::IUnknown {
    fn from(value: &IMFVideoMediaType) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFVideoMediaType {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFVideoMediaType {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFVideoMediaType> for IMFMediaType {
    fn from(value: IMFVideoMediaType) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFVideoMediaType> for IMFMediaType {
    fn from(value: &IMFVideoMediaType) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaType> for IMFVideoMediaType {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaType> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFMediaType> for &IMFVideoMediaType {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFMediaType> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<IMFVideoMediaType> for IMFAttributes {
    fn from(value: IMFVideoMediaType) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFVideoMediaType> for IMFAttributes {
    fn from(value: &IMFVideoMediaType) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAttributes> for IMFVideoMediaType {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAttributes> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAttributes> for &IMFVideoMediaType {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAttributes> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFVideoMediaType_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ptype: *mut MF_ATTRIBUTE_TYPE) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, value: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>, pbresult: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ptheirs: ::windows::runtime::RawPtr, matchtype: MF_ATTRIBUTES_MATCH_TYPE, pbresult: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punvalue: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punvalue: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pfvalue: *mut f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pguidvalue: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pwszvalue: super::super::Foundation::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ppwszvalue: *mut super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pcbblobsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, value: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, unvalue: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, unvalue: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, fvalue: f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, guidvalue: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, wszvalue: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punknown: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcitems: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, unindex: u32, pguidkey: *mut ::windows::runtime::GUID, pvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdest: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pguidmajortype: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pfcompressed: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pimediatype: ::windows::runtime::RawPtr, pdwflags: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidrepresentation: ::windows::runtime::GUID, ppvrepresentation: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidrepresentation: ::windows::runtime::GUID, pvrepresentation: *const ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> *mut MFVIDEOFORMAT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidrepresentation: ::windows::runtime::GUID, ppvrepresentation: *mut *mut ::core::ffi::c_void, lstride: i32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFVideoMixerBitmap(pub ::windows::runtime::IUnknown);
impl IMFVideoMixerBitmap {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9", feature = "Win32_Graphics_Gdi"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D9`, `Win32_Graphics_Gdi`*"]
    pub unsafe fn SetAlphaBitmap(&self, pbmpparms: *const MFVideoAlphaBitmap) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(pbmpparms)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ClearAlphaBitmap(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn UpdateAlphaBitmapParameters(&self, pbmpparms: *const MFVideoAlphaBitmapParams) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(pbmpparms)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetAlphaBitmapParameters(&self) -> ::windows::runtime::Result<MFVideoAlphaBitmapParams> {
        let mut result__: <MFVideoAlphaBitmapParams as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), &mut result__).from_abi::<MFVideoAlphaBitmapParams>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFVideoMixerBitmap {
    type Vtable = IMFVideoMixerBitmap_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2169273120, 4059, 20204, [175, 143, 249, 87, 200, 246, 158, 220]);
}
impl ::core::convert::From<IMFVideoMixerBitmap> for ::windows::runtime::IUnknown {
    fn from(value: IMFVideoMixerBitmap) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFVideoMixerBitmap> for ::windows::runtime::IUnknown {
    fn from(value: &IMFVideoMixerBitmap) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFVideoMixerBitmap {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFVideoMixerBitmap {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFVideoMixerBitmap_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9", feature = "Win32_Graphics_Gdi"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbmpparms: *const ::core::mem::ManuallyDrop<MFVideoAlphaBitmap>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9", feature = "Win32_Graphics_Gdi")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbmpparms: *const MFVideoAlphaBitmapParams) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbmpparms: *mut MFVideoAlphaBitmapParams) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFVideoMixerControl(pub ::windows::runtime::IUnknown);
impl IMFVideoMixerControl {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetStreamZOrder(&self, dwstreamid: u32, dwz: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamid), ::core::mem::transmute(dwz)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamZOrder(&self, dwstreamid: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamid), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetStreamOutputRect(&self, dwstreamid: u32, pnrcoutput: *const MFVideoNormalizedRect) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamid), ::core::mem::transmute(pnrcoutput)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamOutputRect(&self, dwstreamid: u32) -> ::windows::runtime::Result<MFVideoNormalizedRect> {
        let mut result__: <MFVideoNormalizedRect as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamid), &mut result__).from_abi::<MFVideoNormalizedRect>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFVideoMixerControl {
    type Vtable = IMFVideoMixerControl_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2781267263, 49666, 19109, [150, 149, 23, 91, 168, 197, 8, 165]);
}
impl ::core::convert::From<IMFVideoMixerControl> for ::windows::runtime::IUnknown {
    fn from(value: IMFVideoMixerControl) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFVideoMixerControl> for ::windows::runtime::IUnknown {
    fn from(value: &IMFVideoMixerControl) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFVideoMixerControl {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFVideoMixerControl {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFVideoMixerControl_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamid: u32, dwz: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamid: u32, pdwz: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamid: u32, pnrcoutput: *const MFVideoNormalizedRect) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamid: u32, pnrcoutput: *mut MFVideoNormalizedRect) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFVideoMixerControl2(pub ::windows::runtime::IUnknown);
impl IMFVideoMixerControl2 {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetStreamZOrder(&self, dwstreamid: u32, dwz: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamid), ::core::mem::transmute(dwz)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamZOrder(&self, dwstreamid: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamid), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetStreamOutputRect(&self, dwstreamid: u32, pnrcoutput: *const MFVideoNormalizedRect) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamid), ::core::mem::transmute(pnrcoutput)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStreamOutputRect(&self, dwstreamid: u32) -> ::windows::runtime::Result<MFVideoNormalizedRect> {
        let mut result__: <MFVideoNormalizedRect as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwstreamid), &mut result__).from_abi::<MFVideoNormalizedRect>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetMixingPrefs(&self, dwmixflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwmixflags)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetMixingPrefs(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFVideoMixerControl2 {
    type Vtable = IMFVideoMixerControl2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2220450157, 38510, 18736, [182, 88, 84, 250, 126, 90, 22, 211]);
}
impl ::core::convert::From<IMFVideoMixerControl2> for ::windows::runtime::IUnknown {
    fn from(value: IMFVideoMixerControl2) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFVideoMixerControl2> for ::windows::runtime::IUnknown {
    fn from(value: &IMFVideoMixerControl2) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFVideoMixerControl2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFVideoMixerControl2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFVideoMixerControl2> for IMFVideoMixerControl {
    fn from(value: IMFVideoMixerControl2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFVideoMixerControl2> for IMFVideoMixerControl {
    fn from(value: &IMFVideoMixerControl2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFVideoMixerControl> for IMFVideoMixerControl2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFVideoMixerControl> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFVideoMixerControl> for &IMFVideoMixerControl2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFVideoMixerControl> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFVideoMixerControl2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamid: u32, dwz: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamid: u32, pdwz: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamid: u32, pnrcoutput: *const MFVideoNormalizedRect) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwstreamid: u32, pnrcoutput: *mut MFVideoNormalizedRect) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwmixflags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwmixflags: *mut u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFVideoPositionMapper(pub ::windows::runtime::IUnknown);
impl IMFVideoPositionMapper {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn MapOutputCoordinateToInputStream(&self, xout: f32, yout: f32, dwoutputstreamindex: u32, dwinputstreamindex: u32, pxin: *mut f32, pyin: *mut f32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(xout), ::core::mem::transmute(yout), ::core::mem::transmute(dwoutputstreamindex), ::core::mem::transmute(dwinputstreamindex), ::core::mem::transmute(pxin), ::core::mem::transmute(pyin)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFVideoPositionMapper {
    type Vtable = IMFVideoPositionMapper_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(527081239, 59147, 20004, [138, 228, 11, 44, 59, 167, 164, 174]);
}
impl ::core::convert::From<IMFVideoPositionMapper> for ::windows::runtime::IUnknown {
    fn from(value: IMFVideoPositionMapper) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFVideoPositionMapper> for ::windows::runtime::IUnknown {
    fn from(value: &IMFVideoPositionMapper) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFVideoPositionMapper {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFVideoPositionMapper {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFVideoPositionMapper_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, xout: f32, yout: f32, dwoutputstreamindex: u32, dwinputstreamindex: u32, pxin: *mut f32, pyin: *mut f32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFVideoPresenter(pub ::windows::runtime::IUnknown);
impl IMFVideoPresenter {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnClockStart(&self, hnssystemtime: i64, llclockstartoffset: i64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(hnssystemtime), ::core::mem::transmute(llclockstartoffset)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnClockStop(&self, hnssystemtime: i64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(hnssystemtime)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnClockPause(&self, hnssystemtime: i64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(hnssystemtime)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnClockRestart(&self, hnssystemtime: i64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(hnssystemtime)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnClockSetRate(&self, hnssystemtime: i64, flrate: f32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(hnssystemtime), ::core::mem::transmute(flrate)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn ProcessMessage(&self, emessage: MFVP_MESSAGE_TYPE, ulparam: usize) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(emessage), ::core::mem::transmute(ulparam)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCurrentMediaType(&self) -> ::windows::runtime::Result<IMFVideoMediaType> {
        let mut result__: <IMFVideoMediaType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFVideoMediaType>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFVideoPresenter {
    type Vtable = IMFVideoPresenter_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(699396224, 6186, 19037, [175, 59, 68, 143, 58, 99, 70, 203]);
}
impl ::core::convert::From<IMFVideoPresenter> for ::windows::runtime::IUnknown {
    fn from(value: IMFVideoPresenter) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFVideoPresenter> for ::windows::runtime::IUnknown {
    fn from(value: &IMFVideoPresenter) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFVideoPresenter {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFVideoPresenter {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFVideoPresenter> for IMFClockStateSink {
    fn from(value: IMFVideoPresenter) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFVideoPresenter> for IMFClockStateSink {
    fn from(value: &IMFVideoPresenter) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFClockStateSink> for IMFVideoPresenter {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFClockStateSink> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFClockStateSink> for &IMFVideoPresenter {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFClockStateSink> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFVideoPresenter_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hnssystemtime: i64, llclockstartoffset: i64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hnssystemtime: i64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hnssystemtime: i64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hnssystemtime: i64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hnssystemtime: i64, flrate: f32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, emessage: MFVP_MESSAGE_TYPE, ulparam: usize) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppmediatype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFVideoProcessor(pub ::windows::runtime::IUnknown);
impl IMFVideoProcessor {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetAvailableVideoProcessorModes(&self, lpdwnumprocessingmodes: *mut u32, ppvideoprocessingmodes: *mut *mut ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(lpdwnumprocessingmodes), ::core::mem::transmute(ppvideoprocessingmodes)).ok()
    }
    #[cfg(feature = "Win32_Graphics_Direct3D9")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
    pub unsafe fn GetVideoProcessorCaps(&self, lpvideoprocessormode: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<DXVA2_VideoProcessorCaps> {
        let mut result__: <DXVA2_VideoProcessorCaps as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(lpvideoprocessormode), &mut result__).from_abi::<DXVA2_VideoProcessorCaps>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetVideoProcessorMode(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetVideoProcessorMode(&self, lpmode: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(lpmode)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetProcAmpRange(&self, dwproperty: u32) -> ::windows::runtime::Result<DXVA2_ValueRange> {
        let mut result__: <DXVA2_ValueRange as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwproperty), &mut result__).from_abi::<DXVA2_ValueRange>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetProcAmpValues(&self, dwflags: u32) -> ::windows::runtime::Result<DXVA2_ProcAmpValues> {
        let mut result__: <DXVA2_ProcAmpValues as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwflags), &mut result__).from_abi::<DXVA2_ProcAmpValues>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetProcAmpValues(&self, dwflags: u32, pvalues: *const DXVA2_ProcAmpValues) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwflags), ::core::mem::transmute(pvalues)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetFilteringRange(&self, dwproperty: u32) -> ::windows::runtime::Result<DXVA2_ValueRange> {
        let mut result__: <DXVA2_ValueRange as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwproperty), &mut result__).from_abi::<DXVA2_ValueRange>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetFilteringValue(&self, dwproperty: u32) -> ::windows::runtime::Result<DXVA2_Fixed32> {
        let mut result__: <DXVA2_Fixed32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwproperty), &mut result__).from_abi::<DXVA2_Fixed32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetFilteringValue(&self, dwproperty: u32, pvalue: *const DXVA2_Fixed32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwproperty), ::core::mem::transmute(pvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBackgroundColor(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetBackgroundColor(&self, clrbkg: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), ::core::mem::transmute(clrbkg)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFVideoProcessor {
    type Vtable = IMFVideoProcessor_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1789919244, 65230, 19743, [162, 172, 169, 87, 53, 48, 101, 110]);
}
impl ::core::convert::From<IMFVideoProcessor> for ::windows::runtime::IUnknown {
    fn from(value: IMFVideoProcessor) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFVideoProcessor> for ::windows::runtime::IUnknown {
    fn from(value: &IMFVideoProcessor) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFVideoProcessor {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFVideoProcessor {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFVideoProcessor_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, lpdwnumprocessingmodes: *mut u32, ppvideoprocessingmodes: *mut *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Direct3D9")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, lpvideoprocessormode: *const ::windows::runtime::GUID, lpvideoprocessorcaps: *mut DXVA2_VideoProcessorCaps) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Direct3D9"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, lpmode: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, lpmode: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwproperty: u32, pproprange: *mut DXVA2_ValueRange) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwflags: u32, values: *mut DXVA2_ProcAmpValues) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwflags: u32, pvalues: *const DXVA2_ProcAmpValues) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwproperty: u32, pproprange: *mut DXVA2_ValueRange) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwproperty: u32, pvalue: *mut DXVA2_Fixed32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwproperty: u32, pvalue: *const DXVA2_Fixed32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, lpclrbkg: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, clrbkg: u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFVideoProcessorControl(pub ::windows::runtime::IUnknown);
impl IMFVideoProcessorControl {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetBorderColor(&self, pbordercolor: *const MFARGB) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(pbordercolor)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetSourceRectangle(&self, psrcrect: *const super::super::Foundation::RECT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(psrcrect)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetDestinationRectangle(&self, pdstrect: *const super::super::Foundation::RECT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdstrect)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetMirror(&self, emirror: MF_VIDEO_PROCESSOR_MIRROR) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(emirror)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetRotation(&self, erotation: MF_VIDEO_PROCESSOR_ROTATION) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(erotation)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetConstrictionSize(&self, pconstrictionsize: *const super::super::Foundation::SIZE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(pconstrictionsize)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFVideoProcessorControl {
    type Vtable = IMFVideoProcessorControl_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2750838229, 24857, 20351, [161, 0, 29, 139, 40, 15, 14, 251]);
}
impl ::core::convert::From<IMFVideoProcessorControl> for ::windows::runtime::IUnknown {
    fn from(value: IMFVideoProcessorControl) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFVideoProcessorControl> for ::windows::runtime::IUnknown {
    fn from(value: &IMFVideoProcessorControl) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFVideoProcessorControl {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFVideoProcessorControl {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFVideoProcessorControl_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbordercolor: *const MFARGB) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psrcrect: *const super::super::Foundation::RECT) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdstrect: *const super::super::Foundation::RECT) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, emirror: MF_VIDEO_PROCESSOR_MIRROR) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, erotation: MF_VIDEO_PROCESSOR_ROTATION) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pconstrictionsize: *const super::super::Foundation::SIZE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFVideoProcessorControl2(pub ::windows::runtime::IUnknown);
impl IMFVideoProcessorControl2 {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetBorderColor(&self, pbordercolor: *const MFARGB) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(pbordercolor)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetSourceRectangle(&self, psrcrect: *const super::super::Foundation::RECT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(psrcrect)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetDestinationRectangle(&self, pdstrect: *const super::super::Foundation::RECT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdstrect)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetMirror(&self, emirror: MF_VIDEO_PROCESSOR_MIRROR) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(emirror)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetRotation(&self, erotation: MF_VIDEO_PROCESSOR_ROTATION) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(erotation)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetConstrictionSize(&self, pconstrictionsize: *const super::super::Foundation::SIZE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(pconstrictionsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetRotationOverride(&self, uirotation: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(uirotation)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn EnableHardwareEffects<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, fenabled: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), fenabled.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSupportedHardwareEffects(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFVideoProcessorControl2 {
    type Vtable = IMFVideoProcessorControl2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3185980371, 57820, 19071, [166, 147, 187, 174, 57, 156, 74, 32]);
}
impl ::core::convert::From<IMFVideoProcessorControl2> for ::windows::runtime::IUnknown {
    fn from(value: IMFVideoProcessorControl2) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFVideoProcessorControl2> for ::windows::runtime::IUnknown {
    fn from(value: &IMFVideoProcessorControl2) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFVideoProcessorControl2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFVideoProcessorControl2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFVideoProcessorControl2> for IMFVideoProcessorControl {
    fn from(value: IMFVideoProcessorControl2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFVideoProcessorControl2> for IMFVideoProcessorControl {
    fn from(value: &IMFVideoProcessorControl2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFVideoProcessorControl> for IMFVideoProcessorControl2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFVideoProcessorControl> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFVideoProcessorControl> for &IMFVideoProcessorControl2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFVideoProcessorControl> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFVideoProcessorControl2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbordercolor: *const MFARGB) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psrcrect: *const super::super::Foundation::RECT) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdstrect: *const super::super::Foundation::RECT) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, emirror: MF_VIDEO_PROCESSOR_MIRROR) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, erotation: MF_VIDEO_PROCESSOR_ROTATION) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pconstrictionsize: *const super::super::Foundation::SIZE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, uirotation: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, fenabled: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, puisupport: *mut u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFVideoProcessorControl3(pub ::windows::runtime::IUnknown);
impl IMFVideoProcessorControl3 {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetBorderColor(&self, pbordercolor: *const MFARGB) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(pbordercolor)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetSourceRectangle(&self, psrcrect: *const super::super::Foundation::RECT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(psrcrect)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetDestinationRectangle(&self, pdstrect: *const super::super::Foundation::RECT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdstrect)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetMirror(&self, emirror: MF_VIDEO_PROCESSOR_MIRROR) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(emirror)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetRotation(&self, erotation: MF_VIDEO_PROCESSOR_ROTATION) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(erotation)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetConstrictionSize(&self, pconstrictionsize: *const super::super::Foundation::SIZE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(pconstrictionsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetRotationOverride(&self, uirotation: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(uirotation)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn EnableHardwareEffects<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, fenabled: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), fenabled.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSupportedHardwareEffects(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetNaturalOutputType(&self) -> ::windows::runtime::Result<IMFMediaType> {
        let mut result__: <IMFMediaType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFMediaType>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn EnableSphericalVideoProcessing<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, fenable: Param0, eformat: MFVideoSphericalFormat, eprojectionmode: MFVideoSphericalProjectionMode) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), fenable.into_param().abi(), ::core::mem::transmute(eformat), ::core::mem::transmute(eprojectionmode)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetSphericalVideoProperties(&self, x: f32, y: f32, z: f32, w: f32, fieldofview: f32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), ::core::mem::transmute(x), ::core::mem::transmute(y), ::core::mem::transmute(z), ::core::mem::transmute(w), ::core::mem::transmute(fieldofview)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetOutputDevice<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, poutputdevice: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), poutputdevice.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFVideoProcessorControl3 {
    type Vtable = IMFVideoProcessorControl3_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(606385138, 60195, 16625, [145, 170, 116, 189, 222, 234, 8, 131]);
}
impl ::core::convert::From<IMFVideoProcessorControl3> for ::windows::runtime::IUnknown {
    fn from(value: IMFVideoProcessorControl3) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFVideoProcessorControl3> for ::windows::runtime::IUnknown {
    fn from(value: &IMFVideoProcessorControl3) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFVideoProcessorControl3 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFVideoProcessorControl3 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFVideoProcessorControl3> for IMFVideoProcessorControl2 {
    fn from(value: IMFVideoProcessorControl3) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFVideoProcessorControl3> for IMFVideoProcessorControl2 {
    fn from(value: &IMFVideoProcessorControl3) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFVideoProcessorControl2> for IMFVideoProcessorControl3 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFVideoProcessorControl2> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFVideoProcessorControl2> for &IMFVideoProcessorControl3 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFVideoProcessorControl2> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<IMFVideoProcessorControl3> for IMFVideoProcessorControl {
    fn from(value: IMFVideoProcessorControl3) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFVideoProcessorControl3> for IMFVideoProcessorControl {
    fn from(value: &IMFVideoProcessorControl3) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFVideoProcessorControl> for IMFVideoProcessorControl3 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFVideoProcessorControl> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFVideoProcessorControl> for &IMFVideoProcessorControl3 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFVideoProcessorControl> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFVideoProcessorControl3_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbordercolor: *const MFARGB) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psrcrect: *const super::super::Foundation::RECT) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdstrect: *const super::super::Foundation::RECT) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, emirror: MF_VIDEO_PROCESSOR_MIRROR) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, erotation: MF_VIDEO_PROCESSOR_ROTATION) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pconstrictionsize: *const super::super::Foundation::SIZE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, uirotation: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, fenabled: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, puisupport: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pptype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, fenable: super::super::Foundation::BOOL, eformat: MFVideoSphericalFormat, eprojectionmode: MFVideoSphericalProjectionMode) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, x: f32, y: f32, z: f32, w: f32, fieldofview: f32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, poutputdevice: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFVideoRenderer(pub ::windows::runtime::IUnknown);
impl IMFVideoRenderer {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn InitializeRenderer<'a, Param0: ::windows::runtime::IntoParam<'a, IMFTransform>, Param1: ::windows::runtime::IntoParam<'a, IMFVideoPresenter>>(&self, pvideomixer: Param0, pvideopresenter: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), pvideomixer.into_param().abi(), pvideopresenter.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFVideoRenderer {
    type Vtable = IMFVideoRenderer_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3755987351, 43466, 17368, [179, 65, 106, 243, 80, 55, 146, 205]);
}
impl ::core::convert::From<IMFVideoRenderer> for ::windows::runtime::IUnknown {
    fn from(value: IMFVideoRenderer) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFVideoRenderer> for ::windows::runtime::IUnknown {
    fn from(value: &IMFVideoRenderer) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFVideoRenderer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFVideoRenderer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFVideoRenderer_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pvideomixer: ::windows::runtime::RawPtr, pvideopresenter: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFVideoRendererEffectControl(pub ::windows::runtime::IUnknown);
impl IMFVideoRendererEffectControl {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn OnAppServiceConnectionEstablished<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, pappserviceconnection: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), pappserviceconnection.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFVideoRendererEffectControl {
    type Vtable = IMFVideoRendererEffectControl_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1615672279, 53027, 16853, [130, 36, 91, 187, 177, 168, 116, 117]);
}
impl ::core::convert::From<IMFVideoRendererEffectControl> for ::windows::runtime::IUnknown {
    fn from(value: IMFVideoRendererEffectControl) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFVideoRendererEffectControl> for ::windows::runtime::IUnknown {
    fn from(value: &IMFVideoRendererEffectControl) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFVideoRendererEffectControl {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFVideoRendererEffectControl {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFVideoRendererEffectControl_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pappserviceconnection: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFVideoSampleAllocator(pub ::windows::runtime::IUnknown);
impl IMFVideoSampleAllocator {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetDirectXManager<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, pmanager: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), pmanager.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn UninitializeSampleAllocator(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn InitializeSampleAllocator<'a, Param1: ::windows::runtime::IntoParam<'a, IMFMediaType>>(&self, crequestedframes: u32, pmediatype: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(crequestedframes), pmediatype.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AllocateSample(&self) -> ::windows::runtime::Result<IMFSample> {
        let mut result__: <IMFSample as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFSample>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFVideoSampleAllocator {
    type Vtable = IMFVideoSampleAllocator_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2261502224, 58675, 18257, [142, 59, 241, 155, 91, 128, 106, 3]);
}
impl ::core::convert::From<IMFVideoSampleAllocator> for ::windows::runtime::IUnknown {
    fn from(value: IMFVideoSampleAllocator) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFVideoSampleAllocator> for ::windows::runtime::IUnknown {
    fn from(value: &IMFVideoSampleAllocator) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFVideoSampleAllocator {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFVideoSampleAllocator {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFVideoSampleAllocator_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pmanager: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, crequestedframes: u32, pmediatype: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppsample: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFVideoSampleAllocatorCallback(pub ::windows::runtime::IUnknown);
impl IMFVideoSampleAllocatorCallback {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetCallback<'a, Param0: ::windows::runtime::IntoParam<'a, IMFVideoSampleAllocatorNotify>>(&self, pnotify: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), pnotify.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetFreeSampleCount(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), &mut result__).from_abi::<i32>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFVideoSampleAllocatorCallback {
    type Vtable = IMFVideoSampleAllocatorCallback_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2569242804, 13170, 20327, [139, 111, 200, 76, 7, 31, 71, 81]);
}
impl ::core::convert::From<IMFVideoSampleAllocatorCallback> for ::windows::runtime::IUnknown {
    fn from(value: IMFVideoSampleAllocatorCallback) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFVideoSampleAllocatorCallback> for ::windows::runtime::IUnknown {
    fn from(value: &IMFVideoSampleAllocatorCallback) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFVideoSampleAllocatorCallback {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFVideoSampleAllocatorCallback {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFVideoSampleAllocatorCallback_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pnotify: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, plsamples: *mut i32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFVideoSampleAllocatorEx(pub ::windows::runtime::IUnknown);
impl IMFVideoSampleAllocatorEx {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetDirectXManager<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, pmanager: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), pmanager.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn UninitializeSampleAllocator(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn InitializeSampleAllocator<'a, Param1: ::windows::runtime::IntoParam<'a, IMFMediaType>>(&self, crequestedframes: u32, pmediatype: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(crequestedframes), pmediatype.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AllocateSample(&self) -> ::windows::runtime::Result<IMFSample> {
        let mut result__: <IMFSample as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFSample>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn InitializeSampleAllocatorEx<'a, Param2: ::windows::runtime::IntoParam<'a, IMFAttributes>, Param3: ::windows::runtime::IntoParam<'a, IMFMediaType>>(&self, cinitialsamples: u32, cmaximumsamples: u32, pattributes: Param2, pmediatype: Param3) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(cinitialsamples), ::core::mem::transmute(cmaximumsamples), pattributes.into_param().abi(), pmediatype.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFVideoSampleAllocatorEx {
    type Vtable = IMFVideoSampleAllocatorEx_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1415264840, 12931, 20322, [134, 111, 166, 45, 143, 89, 143, 159]);
}
impl ::core::convert::From<IMFVideoSampleAllocatorEx> for ::windows::runtime::IUnknown {
    fn from(value: IMFVideoSampleAllocatorEx) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFVideoSampleAllocatorEx> for ::windows::runtime::IUnknown {
    fn from(value: &IMFVideoSampleAllocatorEx) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFVideoSampleAllocatorEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFVideoSampleAllocatorEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFVideoSampleAllocatorEx> for IMFVideoSampleAllocator {
    fn from(value: IMFVideoSampleAllocatorEx) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFVideoSampleAllocatorEx> for IMFVideoSampleAllocator {
    fn from(value: &IMFVideoSampleAllocatorEx) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFVideoSampleAllocator> for IMFVideoSampleAllocatorEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFVideoSampleAllocator> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFVideoSampleAllocator> for &IMFVideoSampleAllocatorEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFVideoSampleAllocator> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFVideoSampleAllocatorEx_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pmanager: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, crequestedframes: u32, pmediatype: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppsample: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, cinitialsamples: u32, cmaximumsamples: u32, pattributes: ::windows::runtime::RawPtr, pmediatype: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFVideoSampleAllocatorNotify(pub ::windows::runtime::IUnknown);
impl IMFVideoSampleAllocatorNotify {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn NotifyRelease(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFVideoSampleAllocatorNotify {
    type Vtable = IMFVideoSampleAllocatorNotify_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2811415998, 50036, 20105, [131, 53, 39, 142, 123, 153, 86, 164]);
}
impl ::core::convert::From<IMFVideoSampleAllocatorNotify> for ::windows::runtime::IUnknown {
    fn from(value: IMFVideoSampleAllocatorNotify) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFVideoSampleAllocatorNotify> for ::windows::runtime::IUnknown {
    fn from(value: &IMFVideoSampleAllocatorNotify) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFVideoSampleAllocatorNotify {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFVideoSampleAllocatorNotify {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFVideoSampleAllocatorNotify_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFVideoSampleAllocatorNotifyEx(pub ::windows::runtime::IUnknown);
impl IMFVideoSampleAllocatorNotifyEx {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn NotifyRelease(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn NotifyPrune<'a, Param0: ::windows::runtime::IntoParam<'a, IMFSample>>(&self, __midl__imfvideosampleallocatornotifyex0000: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), __midl__imfvideosampleallocatornotifyex0000.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFVideoSampleAllocatorNotifyEx {
    type Vtable = IMFVideoSampleAllocatorNotifyEx_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(964209178, 27995, 19327, [163, 64, 144, 137, 145, 137, 174, 52]);
}
impl ::core::convert::From<IMFVideoSampleAllocatorNotifyEx> for ::windows::runtime::IUnknown {
    fn from(value: IMFVideoSampleAllocatorNotifyEx) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFVideoSampleAllocatorNotifyEx> for ::windows::runtime::IUnknown {
    fn from(value: &IMFVideoSampleAllocatorNotifyEx) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFVideoSampleAllocatorNotifyEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFVideoSampleAllocatorNotifyEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFVideoSampleAllocatorNotifyEx> for IMFVideoSampleAllocatorNotify {
    fn from(value: IMFVideoSampleAllocatorNotifyEx) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFVideoSampleAllocatorNotifyEx> for IMFVideoSampleAllocatorNotify {
    fn from(value: &IMFVideoSampleAllocatorNotifyEx) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFVideoSampleAllocatorNotify> for IMFVideoSampleAllocatorNotifyEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFVideoSampleAllocatorNotify> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFVideoSampleAllocatorNotify> for &IMFVideoSampleAllocatorNotifyEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFVideoSampleAllocatorNotify> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFVideoSampleAllocatorNotifyEx_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, __midl__imfvideosampleallocatornotifyex0000: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFVirtualCamera(pub ::windows::runtime::IUnknown);
impl IMFVirtualCamera {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetItem(&self, guidkey: *const ::windows::runtime::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetItemType(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<MF_ATTRIBUTE_TYPE> {
        let mut result__: <MF_ATTRIBUTE_TYPE as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<MF_ATTRIBUTE_TYPE>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn CompareItem(&self, guidkey: *const ::windows::runtime::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(value), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn Compare<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, ptheirs: Param0, matchtype: MF_ATTRIBUTES_MATCH_TYPE) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ptheirs.into_param().abi(), ::core::mem::transmute(matchtype), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUINT32(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUINT64(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDouble(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<f64> {
        let mut result__: <f64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<f64>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetGUID(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStringLength(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetString(&self, guidkey: *const ::windows::runtime::GUID, pwszvalue: super::super::Foundation::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pwszvalue), ::core::mem::transmute(cchbufsize), ::core::mem::transmute(pcchlength)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetAllocatedString(&self, guidkey: *const ::windows::runtime::GUID, ppwszvalue: *mut super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(ppwszvalue), ::core::mem::transmute(pcchlength)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBlobSize(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBlob(&self, guidkey: *const ::windows::runtime::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize), ::core::mem::transmute(pcbblobsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetAllocatedBlob(&self, guidkey: *const ::windows::runtime::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(ppbuf), ::core::mem::transmute(pcbsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetUnknown<T: ::windows::runtime::Interface>(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<T> {
        let mut result__ = ::core::option::Option::None;
        (::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn SetItem(&self, guidkey: *const ::windows::runtime::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(value)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteItem(&self, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn DeleteAllItems(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUINT32(&self, guidkey: *const ::windows::runtime::GUID, unvalue: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(unvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUINT64(&self, guidkey: *const ::windows::runtime::GUID, unvalue: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(unvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetDouble(&self, guidkey: *const ::windows::runtime::GUID, fvalue: f64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(fvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetGUID(&self, guidkey: *const ::windows::runtime::GUID, guidvalue: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(guidvalue)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetString<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, guidkey: *const ::windows::runtime::GUID, wszvalue: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), wszvalue.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetBlob(&self, guidkey: *const ::windows::runtime::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUnknown<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, guidkey: *const ::windows::runtime::GUID, punknown: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).27)(::core::mem::transmute_copy(self), ::core::mem::transmute(guidkey), punknown.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn LockStore(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).28)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn UnlockStore(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::core::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetItemByIndex(&self, unindex: u32, pguidkey: *mut ::windows::runtime::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).31)(::core::mem::transmute_copy(self), ::core::mem::transmute(unindex), ::core::mem::transmute(pguidkey), ::core::mem::transmute(pvalue)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CopyAllItems<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(&self, pdest: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::core::mem::transmute_copy(self), pdest.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn AddDeviceSourceInfo<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, devicesourceinfo: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).33)(::core::mem::transmute_copy(self), devicesourceinfo.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_System_SystemServices")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_System_SystemServices`*"]
    pub unsafe fn AddProperty(&self, pkey: *const super::super::System::SystemServices::DEVPROPKEY, r#type: u32, pbdata: *const u8, cbdata: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).34)(::core::mem::transmute_copy(self), ::core::mem::transmute(pkey), ::core::mem::transmute(r#type), ::core::mem::transmute(pbdata), ::core::mem::transmute(cbdata)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn AddRegistryEntry<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, entryname: Param0, subkeypath: Param1, dwregtype: u32, pbdata: *const u8, cbdata: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).35)(::core::mem::transmute_copy(self), entryname.into_param().abi(), subkeypath.into_param().abi(), ::core::mem::transmute(dwregtype), ::core::mem::transmute(pbdata), ::core::mem::transmute(cbdata)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Start<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>>(&self, pcallback: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).36)(::core::mem::transmute_copy(self), pcallback.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Stop(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).37)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Remove(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).38)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetMediaSource(&self) -> ::windows::runtime::Result<IMFMediaSource> {
        let mut result__: <IMFMediaSource as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).39)(::core::mem::transmute_copy(self), &mut result__).from_abi::<IMFMediaSource>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SendCameraProperty(&self, propertyset: *const ::windows::runtime::GUID, propertyid: u32, propertyflags: u32, propertypayload: *mut ::core::ffi::c_void, propertypayloadlength: u32, data: *mut ::core::ffi::c_void, datalength: u32, datawritten: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).40)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(propertyset),
            ::core::mem::transmute(propertyid),
            ::core::mem::transmute(propertyflags),
            ::core::mem::transmute(propertypayload),
            ::core::mem::transmute(propertypayloadlength),
            ::core::mem::transmute(data),
            ::core::mem::transmute(datalength),
            ::core::mem::transmute(datawritten),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn CreateSyncEvent<'a, Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::HANDLE>>(&self, kseventset: *const ::windows::runtime::GUID, kseventid: u32, kseventflags: u32, eventhandle: Param3) -> ::windows::runtime::Result<IMFCameraSyncObject> {
        let mut result__: <IMFCameraSyncObject as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).41)(::core::mem::transmute_copy(self), ::core::mem::transmute(kseventset), ::core::mem::transmute(kseventid), ::core::mem::transmute(kseventflags), eventhandle.into_param().abi(), &mut result__).from_abi::<IMFCameraSyncObject>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn CreateSyncSemaphore<'a, Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::HANDLE>>(&self, kseventset: *const ::windows::runtime::GUID, kseventid: u32, kseventflags: u32, semaphorehandle: Param3, semaphoreadjustment: i32) -> ::windows::runtime::Result<IMFCameraSyncObject> {
        let mut result__: <IMFCameraSyncObject as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).42)(::core::mem::transmute_copy(self), ::core::mem::transmute(kseventset), ::core::mem::transmute(kseventid), ::core::mem::transmute(kseventflags), semaphorehandle.into_param().abi(), ::core::mem::transmute(semaphoreadjustment), &mut result__).from_abi::<IMFCameraSyncObject>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Shutdown(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).43)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMFVirtualCamera {
    type Vtable = IMFVirtualCamera_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(470329444, 61292, 19573, [175, 89, 95, 45, 104, 218, 149, 99]);
}
impl ::core::convert::From<IMFVirtualCamera> for ::windows::runtime::IUnknown {
    fn from(value: IMFVirtualCamera) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFVirtualCamera> for ::windows::runtime::IUnknown {
    fn from(value: &IMFVirtualCamera) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFVirtualCamera {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFVirtualCamera {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFVirtualCamera> for IMFAttributes {
    fn from(value: IMFVirtualCamera) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFVirtualCamera> for IMFAttributes {
    fn from(value: &IMFVirtualCamera) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAttributes> for IMFVirtualCamera {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAttributes> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAttributes> for &IMFVirtualCamera {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAttributes> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFVirtualCamera_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ptype: *mut MF_ATTRIBUTE_TYPE) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, value: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>, pbresult: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ptheirs: ::windows::runtime::RawPtr, matchtype: MF_ATTRIBUTES_MATCH_TYPE, pbresult: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punvalue: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punvalue: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pfvalue: *mut f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pguidvalue: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pwszvalue: super::super::Foundation::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ppwszvalue: *mut super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pcbblobsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, value: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, unvalue: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, unvalue: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, fvalue: f64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, guidvalue: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, wszvalue: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidkey: *const ::windows::runtime::GUID, punknown: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcitems: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, unindex: u32, pguidkey: *mut ::windows::runtime::GUID, pvalue: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdest: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, devicesourceinfo: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_System_SystemServices")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pkey: *const super::super::System::SystemServices::DEVPROPKEY, r#type: u32, pbdata: *const u8, cbdata: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_SystemServices"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, entryname: super::super::Foundation::PWSTR, subkeypath: super::super::Foundation::PWSTR, dwregtype: u32, pbdata: *const u8, cbdata: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcallback: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppmediasource: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, propertyset: *const ::windows::runtime::GUID, propertyid: u32, propertyflags: u32, propertypayload: *mut ::core::ffi::c_void, propertypayloadlength: u32, data: *mut ::core::ffi::c_void, datalength: u32, datawritten: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, kseventset: *const ::windows::runtime::GUID, kseventid: u32, kseventflags: u32, eventhandle: super::super::Foundation::HANDLE, camerasyncobject: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, kseventset: *const ::windows::runtime::GUID, kseventid: u32, kseventflags: u32, semaphorehandle: super::super::Foundation::HANDLE, semaphoreadjustment: i32, camerasyncobject: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFWorkQueueServices(pub ::windows::runtime::IUnknown);
impl IMFWorkQueueServices {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BeginRegisterTopologyWorkQueuesWithMMCSS<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, pcallback: Param0, pstate: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), pcallback.into_param().abi(), pstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndRegisterTopologyWorkQueuesWithMMCSS<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, presult: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), presult.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BeginUnregisterTopologyWorkQueuesWithMMCSS<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, pcallback: Param0, pstate: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), pcallback.into_param().abi(), pstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndUnregisterTopologyWorkQueuesWithMMCSS<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, presult: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), presult.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetTopologyWorkQueueMMCSSClass(&self, dwtopologyworkqueueid: u32, pwszclass: super::super::Foundation::PWSTR, pcchclass: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwtopologyworkqueueid), ::core::mem::transmute(pwszclass), ::core::mem::transmute(pcchclass)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetTopologyWorkQueueMMCSSTaskId(&self, dwtopologyworkqueueid: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwtopologyworkqueueid), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn BeginRegisterPlatformWorkQueueWithMMCSS<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param4: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, dwplatformworkqueue: u32, wszclass: Param1, dwtaskid: u32, pcallback: Param3, pstate: Param4) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwplatformworkqueue), wszclass.into_param().abi(), ::core::mem::transmute(dwtaskid), pcallback.into_param().abi(), pstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndRegisterPlatformWorkQueueWithMMCSS<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, presult: Param0) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), presult.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BeginUnregisterPlatformWorkQueueWithMMCSS<'a, Param1: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param2: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, dwplatformworkqueue: u32, pcallback: Param1, pstate: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwplatformworkqueue), pcallback.into_param().abi(), pstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndUnregisterPlatformWorkQueueWithMMCSS<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, presult: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), presult.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetPlaftormWorkQueueMMCSSClass(&self, dwplatformworkqueueid: u32, pwszclass: super::super::Foundation::PWSTR, pcchclass: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwplatformworkqueueid), ::core::mem::transmute(pwszclass), ::core::mem::transmute(pcchclass)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPlatformWorkQueueMMCSSTaskId(&self, dwplatformworkqueueid: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwplatformworkqueueid), &mut result__).from_abi::<u32>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFWorkQueueServices {
    type Vtable = IMFWorkQueueServices_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(905845688, 41897, 16638, [187, 236, 235, 86, 156, 156, 204, 163]);
}
impl ::core::convert::From<IMFWorkQueueServices> for ::windows::runtime::IUnknown {
    fn from(value: IMFWorkQueueServices) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFWorkQueueServices> for ::windows::runtime::IUnknown {
    fn from(value: &IMFWorkQueueServices) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFWorkQueueServices {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFWorkQueueServices {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFWorkQueueServices_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcallback: ::windows::runtime::RawPtr, pstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presult: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcallback: ::windows::runtime::RawPtr, pstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presult: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwtopologyworkqueueid: u32, pwszclass: super::super::Foundation::PWSTR, pcchclass: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwtopologyworkqueueid: u32, pdwtaskid: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwplatformworkqueue: u32, wszclass: super::super::Foundation::PWSTR, dwtaskid: u32, pcallback: ::windows::runtime::RawPtr, pstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presult: ::windows::runtime::RawPtr, pdwtaskid: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwplatformworkqueue: u32, pcallback: ::windows::runtime::RawPtr, pstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presult: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwplatformworkqueueid: u32, pwszclass: super::super::Foundation::PWSTR, pcchclass: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwplatformworkqueueid: u32, pdwtaskid: *mut u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IMFWorkQueueServicesEx(pub ::windows::runtime::IUnknown);
impl IMFWorkQueueServicesEx {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BeginRegisterTopologyWorkQueuesWithMMCSS<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, pcallback: Param0, pstate: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), pcallback.into_param().abi(), pstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndRegisterTopologyWorkQueuesWithMMCSS<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, presult: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), presult.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BeginUnregisterTopologyWorkQueuesWithMMCSS<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, pcallback: Param0, pstate: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), pcallback.into_param().abi(), pstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndUnregisterTopologyWorkQueuesWithMMCSS<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, presult: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), presult.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetTopologyWorkQueueMMCSSClass(&self, dwtopologyworkqueueid: u32, pwszclass: super::super::Foundation::PWSTR, pcchclass: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwtopologyworkqueueid), ::core::mem::transmute(pwszclass), ::core::mem::transmute(pcchclass)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetTopologyWorkQueueMMCSSTaskId(&self, dwtopologyworkqueueid: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwtopologyworkqueueid), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn BeginRegisterPlatformWorkQueueWithMMCSS<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param4: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, dwplatformworkqueue: u32, wszclass: Param1, dwtaskid: u32, pcallback: Param3, pstate: Param4) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwplatformworkqueue), wszclass.into_param().abi(), ::core::mem::transmute(dwtaskid), pcallback.into_param().abi(), pstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndRegisterPlatformWorkQueueWithMMCSS<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, presult: Param0) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), presult.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn BeginUnregisterPlatformWorkQueueWithMMCSS<'a, Param1: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param2: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, dwplatformworkqueue: u32, pcallback: Param1, pstate: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwplatformworkqueue), pcallback.into_param().abi(), pstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn EndUnregisterPlatformWorkQueueWithMMCSS<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(&self, presult: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), presult.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetPlaftormWorkQueueMMCSSClass(&self, dwplatformworkqueueid: u32, pwszclass: super::super::Foundation::PWSTR, pcchclass: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwplatformworkqueueid), ::core::mem::transmute(pwszclass), ::core::mem::transmute(pcchclass)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPlatformWorkQueueMMCSSTaskId(&self, dwplatformworkqueueid: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwplatformworkqueueid), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetTopologyWorkQueueMMCSSPriority(&self, dwtopologyworkqueueid: u32) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwtopologyworkqueueid), &mut result__).from_abi::<i32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn BeginRegisterPlatformWorkQueueWithMMCSSEx<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param4: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param5: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, dwplatformworkqueue: u32, wszclass: Param1, dwtaskid: u32, lpriority: i32, pcallback: Param4, pstate: Param5) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwplatformworkqueue), wszclass.into_param().abi(), ::core::mem::transmute(dwtaskid), ::core::mem::transmute(lpriority), pcallback.into_param().abi(), pstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPlatformWorkQueueMMCSSPriority(&self, dwplatformworkqueueid: u32) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).17)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwplatformworkqueueid), &mut result__).from_abi::<i32>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMFWorkQueueServicesEx {
    type Vtable = IMFWorkQueueServicesEx_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2529138203, 16638, 17137, [186, 157, 50, 2, 56, 180, 151, 0]);
}
impl ::core::convert::From<IMFWorkQueueServicesEx> for ::windows::runtime::IUnknown {
    fn from(value: IMFWorkQueueServicesEx) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IMFWorkQueueServicesEx> for ::windows::runtime::IUnknown {
    fn from(value: &IMFWorkQueueServicesEx) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMFWorkQueueServicesEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IMFWorkQueueServicesEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IMFWorkQueueServicesEx> for IMFWorkQueueServices {
    fn from(value: IMFWorkQueueServicesEx) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IMFWorkQueueServicesEx> for IMFWorkQueueServices {
    fn from(value: &IMFWorkQueueServicesEx) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFWorkQueueServices> for IMFWorkQueueServicesEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFWorkQueueServices> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFWorkQueueServices> for &IMFWorkQueueServicesEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFWorkQueueServices> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMFWorkQueueServicesEx_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcallback: ::windows::runtime::RawPtr, pstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presult: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcallback: ::windows::runtime::RawPtr, pstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presult: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwtopologyworkqueueid: u32, pwszclass: super::super::Foundation::PWSTR, pcchclass: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwtopologyworkqueueid: u32, pdwtaskid: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwplatformworkqueue: u32, wszclass: super::super::Foundation::PWSTR, dwtaskid: u32, pcallback: ::windows::runtime::RawPtr, pstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presult: ::windows::runtime::RawPtr, pdwtaskid: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwplatformworkqueue: u32, pcallback: ::windows::runtime::RawPtr, pstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, presult: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwplatformworkqueueid: u32, pwszclass: super::super::Foundation::PWSTR, pcchclass: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwplatformworkqueueid: u32, pdwtaskid: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwtopologyworkqueueid: u32, plpriority: *mut i32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwplatformworkqueue: u32, wszclass: super::super::Foundation::PWSTR, dwtaskid: u32, lpriority: i32, pcallback: ::windows::runtime::RawPtr, pstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwplatformworkqueueid: u32, plpriority: *mut i32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IOPMVideoOutput(pub ::windows::runtime::IUnknown);
impl IOPMVideoOutput {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn StartInitialization(&self, prnrandomnumber: *mut OPM_RANDOM_NUMBER, ppbcertificate: *mut *mut u8, pulcertificatelength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(prnrandomnumber), ::core::mem::transmute(ppbcertificate), ::core::mem::transmute(pulcertificatelength)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn FinishInitialization(&self, pparameters: *const OPM_ENCRYPTED_INITIALIZATION_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(pparameters)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetInformation(&self, pparameters: *const OPM_GET_INFO_PARAMETERS) -> ::windows::runtime::Result<OPM_REQUESTED_INFORMATION> {
        let mut result__: <OPM_REQUESTED_INFORMATION as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(pparameters), &mut result__).from_abi::<OPM_REQUESTED_INFORMATION>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn COPPCompatibleGetInformation(&self, pparameters: *const OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS) -> ::windows::runtime::Result<OPM_REQUESTED_INFORMATION> {
        let mut result__: <OPM_REQUESTED_INFORMATION as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(pparameters), &mut result__).from_abi::<OPM_REQUESTED_INFORMATION>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Configure(&self, pparameters: *const OPM_CONFIGURE_PARAMETERS, uladditionalparameterssize: u32, pbadditionalparameters: *const u8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(pparameters), ::core::mem::transmute(uladditionalparameterssize), ::core::mem::transmute(pbadditionalparameters)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IOPMVideoOutput {
    type Vtable = IOPMVideoOutput_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(169153949, 16839, 17494, [147, 225, 40, 76, 214, 29, 78, 141]);
}
impl ::core::convert::From<IOPMVideoOutput> for ::windows::runtime::IUnknown {
    fn from(value: IOPMVideoOutput) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IOPMVideoOutput> for ::windows::runtime::IUnknown {
    fn from(value: &IOPMVideoOutput) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IOPMVideoOutput {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IOPMVideoOutput {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOPMVideoOutput_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, prnrandomnumber: *mut OPM_RANDOM_NUMBER, ppbcertificate: *mut *mut u8, pulcertificatelength: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pparameters: *const OPM_ENCRYPTED_INITIALIZATION_PARAMETERS) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pparameters: *const OPM_GET_INFO_PARAMETERS, prequestedinformation: *mut OPM_REQUESTED_INFORMATION) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pparameters: *const OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS, prequestedinformation: *mut OPM_REQUESTED_INFORMATION) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pparameters: *const OPM_CONFIGURE_PARAMETERS, uladditionalparameterssize: u32, pbadditionalparameters: *const u8) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IPlayToControl(pub ::windows::runtime::IUnknown);
impl IPlayToControl {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Connect<'a, Param0: ::windows::runtime::IntoParam<'a, IMFSharingEngineClassFactory>>(&self, pfactory: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), pfactory.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Disconnect(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IPlayToControl {
    type Vtable = IPlayToControl_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1618310379, 62646, 17857, [176, 140, 203, 113, 81, 34, 144, 29]);
}
impl ::core::convert::From<IPlayToControl> for ::windows::runtime::IUnknown {
    fn from(value: IPlayToControl) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IPlayToControl> for ::windows::runtime::IUnknown {
    fn from(value: &IPlayToControl) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IPlayToControl {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IPlayToControl {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPlayToControl_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pfactory: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IPlayToControlWithCapabilities(pub ::windows::runtime::IUnknown);
impl IPlayToControlWithCapabilities {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Connect<'a, Param0: ::windows::runtime::IntoParam<'a, IMFSharingEngineClassFactory>>(&self, pfactory: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), pfactory.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Disconnect(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetCapabilities(&self) -> ::windows::runtime::Result<PLAYTO_SOURCE_CREATEFLAGS> {
        let mut result__: <PLAYTO_SOURCE_CREATEFLAGS as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), &mut result__).from_abi::<PLAYTO_SOURCE_CREATEFLAGS>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IPlayToControlWithCapabilities {
    type Vtable = IPlayToControlWithCapabilities_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2862471183, 50442, 16928, [145, 193, 51, 34, 135, 248, 42, 52]);
}
impl ::core::convert::From<IPlayToControlWithCapabilities> for ::windows::runtime::IUnknown {
    fn from(value: IPlayToControlWithCapabilities) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IPlayToControlWithCapabilities> for ::windows::runtime::IUnknown {
    fn from(value: &IPlayToControlWithCapabilities) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IPlayToControlWithCapabilities {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IPlayToControlWithCapabilities {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<IPlayToControlWithCapabilities> for IPlayToControl {
    fn from(value: IPlayToControlWithCapabilities) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&IPlayToControlWithCapabilities> for IPlayToControl {
    fn from(value: &IPlayToControlWithCapabilities) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IPlayToControl> for IPlayToControlWithCapabilities {
    fn into_param(self) -> ::windows::runtime::Param<'a, IPlayToControl> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IPlayToControl> for &IPlayToControlWithCapabilities {
    fn into_param(self) -> ::windows::runtime::Param<'a, IPlayToControl> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPlayToControlWithCapabilities_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pfactory: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcapabilities: *mut PLAYTO_SOURCE_CREATEFLAGS) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IPlayToSourceClassFactory(pub ::windows::runtime::IUnknown);
impl IPlayToSourceClassFactory {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn CreateInstance<'a, Param1: ::windows::runtime::IntoParam<'a, IPlayToControl>>(&self, dwflags: u32, pcontrol: Param1) -> ::windows::runtime::Result<::windows::runtime::IInspectable> {
        let mut result__: <::windows::runtime::IInspectable as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwflags), pcontrol.into_param().abi(), &mut result__).from_abi::<::windows::runtime::IInspectable>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IPlayToSourceClassFactory {
    type Vtable = IPlayToSourceClassFactory_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2217423523, 39835, 19740, [179, 243, 73, 25, 50, 72, 165, 84]);
}
impl ::core::convert::From<IPlayToSourceClassFactory> for ::windows::runtime::IUnknown {
    fn from(value: IPlayToSourceClassFactory) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IPlayToSourceClassFactory> for ::windows::runtime::IUnknown {
    fn from(value: &IPlayToSourceClassFactory) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IPlayToSourceClassFactory {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IPlayToSourceClassFactory {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPlayToSourceClassFactory_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwflags: u32, pcontrol: ::windows::runtime::RawPtr, ppsource: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IToc(pub ::windows::runtime::IUnknown);
impl IToc {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetDescriptor(&self, pdescriptor: *mut TOC_DESCRIPTOR) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdescriptor)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDescriptor(&self, pdescriptor: *mut TOC_DESCRIPTOR) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdescriptor)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetDescription<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, pwszdescription: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), pwszdescription.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetDescription(&self, pwdescriptionsize: *mut u16, pwszdescription: super::super::Foundation::PWSTR) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(pwdescriptionsize), ::core::mem::transmute(pwszdescription)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetContext(&self, dwcontextsize: u32, pbtcontext: *mut u8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwcontextsize), ::core::mem::transmute(pbtcontext)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetContext(&self, pdwcontextsize: *mut u32, pbtcontext: *mut u8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdwcontextsize), ::core::mem::transmute(pbtcontext)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetEntryListCount(&self, pwcount: *mut u16) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(pwcount)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetEntryListByIndex(&self, wentrylistindex: u16) -> ::windows::runtime::Result<ITocEntryList> {
        let mut result__: <ITocEntryList as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(wentrylistindex), &mut result__).from_abi::<ITocEntryList>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AddEntryList<'a, Param0: ::windows::runtime::IntoParam<'a, ITocEntryList>>(&self, pentrylist: Param0, pwentrylistindex: *mut u16) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::core::mem::transmute_copy(self), pentrylist.into_param().abi(), ::core::mem::transmute(pwentrylistindex)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AddEntryListByIndex<'a, Param1: ::windows::runtime::IntoParam<'a, ITocEntryList>>(&self, wentrylistindex: u16, pentrylist: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::core::mem::transmute_copy(self), ::core::mem::transmute(wentrylistindex), pentrylist.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveEntryListByIndex(&self, wentrylistindex: u16) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::core::mem::transmute_copy(self), ::core::mem::transmute(wentrylistindex)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IToc {
    type Vtable = IToc_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3606074433, 43289, 16955, [145, 160, 137, 213, 180, 168, 171, 119]);
}
impl ::core::convert::From<IToc> for ::windows::runtime::IUnknown {
    fn from(value: IToc) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IToc> for ::windows::runtime::IUnknown {
    fn from(value: &IToc) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IToc {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IToc {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IToc_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdescriptor: *mut TOC_DESCRIPTOR) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdescriptor: *mut TOC_DESCRIPTOR) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pwszdescription: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pwdescriptionsize: *mut u16, pwszdescription: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwcontextsize: u32, pbtcontext: *mut u8) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwcontextsize: *mut u32, pbtcontext: *mut u8) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pwcount: *mut u16) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, wentrylistindex: u16, ppentrylist: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pentrylist: ::windows::runtime::RawPtr, pwentrylistindex: *mut u16) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, wentrylistindex: u16, pentrylist: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, wentrylistindex: u16) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct ITocCollection(pub ::windows::runtime::IUnknown);
impl ITocCollection {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetEntryCount(&self, pdwentrycount: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdwentrycount)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetEntryByIndex(&self, dwentryindex: u32) -> ::windows::runtime::Result<IToc> {
        let mut result__: <IToc as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwentryindex), &mut result__).from_abi::<IToc>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AddEntry<'a, Param0: ::windows::runtime::IntoParam<'a, IToc>>(&self, ptoc: Param0, pdwentryindex: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ptoc.into_param().abi(), ::core::mem::transmute(pdwentryindex)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AddEntryByIndex<'a, Param1: ::windows::runtime::IntoParam<'a, IToc>>(&self, dwentryindex: u32, ptoc: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwentryindex), ptoc.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveEntryByIndex(&self, dwentryindex: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwentryindex)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for ITocCollection {
    type Vtable = ITocCollection_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(603908145, 44694, 17119, [177, 112, 37, 160, 72, 71, 163, 202]);
}
impl ::core::convert::From<ITocCollection> for ::windows::runtime::IUnknown {
    fn from(value: ITocCollection) -> Self {
        value.0
    }
}
impl ::core::convert::From<&ITocCollection> for ::windows::runtime::IUnknown {
    fn from(value: &ITocCollection) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ITocCollection {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a ITocCollection {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITocCollection_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwentrycount: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwentryindex: u32, pptoc: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ptoc: ::windows::runtime::RawPtr, pdwentryindex: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwentryindex: u32, ptoc: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwentryindex: u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct ITocEntry(pub ::windows::runtime::IUnknown);
impl ITocEntry {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetTitle<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, pwsztitle: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), pwsztitle.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetTitle(&self, pwtitlesize: *mut u16, pwsztitle: super::super::Foundation::PWSTR) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(pwtitlesize), ::core::mem::transmute(pwsztitle)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetDescriptor(&self, pdescriptor: *mut TOC_ENTRY_DESCRIPTOR) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdescriptor)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDescriptor(&self, pdescriptor: *mut TOC_ENTRY_DESCRIPTOR) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdescriptor)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetSubEntries(&self, dwnumsubentries: u32, pwsubentryindices: *mut u16) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwnumsubentries), ::core::mem::transmute(pwsubentryindices)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetSubEntries(&self, pdwnumsubentries: *mut u32, pwsubentryindices: *mut u16) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdwnumsubentries), ::core::mem::transmute(pwsubentryindices)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetDescriptionData(&self, dwdescriptiondatasize: u32, pbtdescriptiondata: *mut u8, pguidtype: *mut ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwdescriptiondatasize), ::core::mem::transmute(pbtdescriptiondata), ::core::mem::transmute(pguidtype)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetDescriptionData(&self, pdwdescriptiondatasize: *mut u32, pbtdescriptiondata: *mut u8, pguidtype: *mut ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdwdescriptiondatasize), ::core::mem::transmute(pbtdescriptiondata), ::core::mem::transmute(pguidtype)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for ITocEntry {
    type Vtable = ITocEntry_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4063190534, 22620, 19951, [133, 35, 101, 85, 207, 188, 12, 179]);
}
impl ::core::convert::From<ITocEntry> for ::windows::runtime::IUnknown {
    fn from(value: ITocEntry) -> Self {
        value.0
    }
}
impl ::core::convert::From<&ITocEntry> for ::windows::runtime::IUnknown {
    fn from(value: &ITocEntry) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ITocEntry {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a ITocEntry {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITocEntry_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pwsztitle: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pwtitlesize: *mut u16, pwsztitle: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdescriptor: *mut TOC_ENTRY_DESCRIPTOR) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdescriptor: *mut TOC_ENTRY_DESCRIPTOR) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwnumsubentries: u32, pwsubentryindices: *mut u16) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwnumsubentries: *mut u32, pwsubentryindices: *mut u16) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwdescriptiondatasize: u32, pbtdescriptiondata: *mut u8, pguidtype: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwdescriptiondatasize: *mut u32, pbtdescriptiondata: *mut u8, pguidtype: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct ITocEntryList(pub ::windows::runtime::IUnknown);
impl ITocEntryList {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetEntryCount(&self, pdwentrycount: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdwentrycount)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetEntryByIndex(&self, dwentryindex: u32) -> ::windows::runtime::Result<ITocEntry> {
        let mut result__: <ITocEntry as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwentryindex), &mut result__).from_abi::<ITocEntry>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AddEntry<'a, Param0: ::windows::runtime::IntoParam<'a, ITocEntry>>(&self, pentry: Param0, pdwentryindex: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), pentry.into_param().abi(), ::core::mem::transmute(pdwentryindex)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AddEntryByIndex<'a, Param1: ::windows::runtime::IntoParam<'a, ITocEntry>>(&self, dwentryindex: u32, pentry: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwentryindex), pentry.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveEntryByIndex(&self, dwentryindex: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwentryindex)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for ITocEntryList {
    type Vtable = ITocEntryList_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(982305981, 3837, 17315, [184, 56, 243, 138, 85, 43, 162, 55]);
}
impl ::core::convert::From<ITocEntryList> for ::windows::runtime::IUnknown {
    fn from(value: ITocEntryList) -> Self {
        value.0
    }
}
impl ::core::convert::From<&ITocEntryList> for ::windows::runtime::IUnknown {
    fn from(value: &ITocEntryList) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ITocEntryList {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a ITocEntryList {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITocEntryList_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwentrycount: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwentryindex: u32, ppentry: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pentry: ::windows::runtime::RawPtr, pdwentryindex: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwentryindex: u32, pentry: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwentryindex: u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct ITocParser(pub ::windows::runtime::IUnknown);
impl ITocParser {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn Init<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, pwszfilename: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), pwszfilename.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetTocCount(&self, enumtocpostype: TOC_POS_TYPE, pdwtoccount: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(enumtocpostype), ::core::mem::transmute(pdwtoccount)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetTocByIndex(&self, enumtocpostype: TOC_POS_TYPE, dwtocindex: u32) -> ::windows::runtime::Result<IToc> {
        let mut result__: <IToc as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(enumtocpostype), ::core::mem::transmute(dwtocindex), &mut result__).from_abi::<IToc>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetTocByType<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::GUID>>(&self, enumtocpostype: TOC_POS_TYPE, guidtoctype: Param1) -> ::windows::runtime::Result<ITocCollection> {
        let mut result__: <ITocCollection as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(enumtocpostype), guidtoctype.into_param().abi(), &mut result__).from_abi::<ITocCollection>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn AddToc<'a, Param1: ::windows::runtime::IntoParam<'a, IToc>>(&self, enumtocpostype: TOC_POS_TYPE, ptoc: Param1, pdwtocindex: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self), ::core::mem::transmute(enumtocpostype), ptoc.into_param().abi(), ::core::mem::transmute(pdwtocindex)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveTocByIndex(&self, enumtocpostype: TOC_POS_TYPE, dwtocindex: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::core::mem::transmute_copy(self), ::core::mem::transmute(enumtocpostype), ::core::mem::transmute(dwtocindex)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn RemoveTocByType<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::GUID>>(&self, enumtocpostype: TOC_POS_TYPE, guidtoctype: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::core::mem::transmute_copy(self), ::core::mem::transmute(enumtocpostype), guidtoctype.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn Commit(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for ITocParser {
    type Vtable = ITocParser_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3975912021, 37528, 20297, [136, 127, 11, 54, 32, 101, 153, 210]);
}
impl ::core::convert::From<ITocParser> for ::windows::runtime::IUnknown {
    fn from(value: ITocParser) -> Self {
        value.0
    }
}
impl ::core::convert::From<&ITocParser> for ::windows::runtime::IUnknown {
    fn from(value: &ITocParser) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ITocParser {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a ITocParser {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITocParser_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pwszfilename: super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, enumtocpostype: TOC_POS_TYPE, pdwtoccount: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, enumtocpostype: TOC_POS_TYPE, dwtocindex: u32, pptoc: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, enumtocpostype: TOC_POS_TYPE, guidtoctype: ::windows::runtime::GUID, pptocs: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, enumtocpostype: TOC_POS_TYPE, ptoc: ::windows::runtime::RawPtr, pdwtocindex: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, enumtocpostype: TOC_POS_TYPE, dwtocindex: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, enumtocpostype: TOC_POS_TYPE, guidtoctype: ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IValidateBinding(pub ::windows::runtime::IUnknown);
impl IValidateBinding {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetIdentifier<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::GUID>>(&self, guidlicensorid: Param0, pbephemeron: *const u8, cbephemeron: u32, ppbblobvalidationid: *mut *mut u8, pcbblobsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), guidlicensorid.into_param().abi(), ::core::mem::transmute(pbephemeron), ::core::mem::transmute(cbephemeron), ::core::mem::transmute(ppbblobvalidationid), ::core::mem::transmute(pcbblobsize)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IValidateBinding {
    type Vtable = IValidateBinding_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(77953202, 59256, 16938, [168, 5, 179, 238, 84, 217, 11, 217]);
}
impl ::core::convert::From<IValidateBinding> for ::windows::runtime::IUnknown {
    fn from(value: IValidateBinding) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IValidateBinding> for ::windows::runtime::IUnknown {
    fn from(value: &IValidateBinding) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IValidateBinding {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IValidateBinding {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IValidateBinding_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidlicensorid: ::windows::runtime::GUID, pbephemeron: *const u8, cbephemeron: u32, ppbblobvalidationid: *mut *mut u8, pcbblobsize: *mut u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IWMCodecLeakyBucket(pub ::windows::runtime::IUnknown);
impl IWMCodecLeakyBucket {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetBufferSizeBits(&self, ulbuffersize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(ulbuffersize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBufferSizeBits(&self, pulbuffersize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(pulbuffersize)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetBufferFullnessBits(&self, ulbufferfullness: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(ulbufferfullness)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetBufferFullnessBits(&self, pulbufferfullness: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(pulbufferfullness)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWMCodecLeakyBucket {
    type Vtable = IWMCodecLeakyBucket_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2820384327, 25127, 17335, [178, 49, 199, 177, 81, 53, 221, 125]);
}
impl ::core::convert::From<IWMCodecLeakyBucket> for ::windows::runtime::IUnknown {
    fn from(value: IWMCodecLeakyBucket) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IWMCodecLeakyBucket> for ::windows::runtime::IUnknown {
    fn from(value: &IWMCodecLeakyBucket) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IWMCodecLeakyBucket {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IWMCodecLeakyBucket {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWMCodecLeakyBucket_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ulbuffersize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pulbuffersize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ulbufferfullness: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pulbufferfullness: *mut u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IWMCodecOutputTimestamp(pub ::windows::runtime::IUnknown);
impl IWMCodecOutputTimestamp {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetNextOutputTime(&self, prttime: *mut i64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(prttime)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWMCodecOutputTimestamp {
    type Vtable = IWMCodecOutputTimestamp_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3073040277, 31452, 19058, [188, 5, 87, 125, 142, 166, 191, 104]);
}
impl ::core::convert::From<IWMCodecOutputTimestamp> for ::windows::runtime::IUnknown {
    fn from(value: IWMCodecOutputTimestamp) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IWMCodecOutputTimestamp> for ::windows::runtime::IUnknown {
    fn from(value: &IWMCodecOutputTimestamp) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IWMCodecOutputTimestamp {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IWMCodecOutputTimestamp {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWMCodecOutputTimestamp_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, prttime: *mut i64) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IWMCodecPrivateData(pub ::windows::runtime::IUnknown);
impl IWMCodecPrivateData {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectShow"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_DirectShow`*"]
    pub unsafe fn SetPartialOutputType(&self, pmt: *mut super::super::Graphics::DirectShow::DMO_MEDIA_TYPE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(pmt)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetPrivateData(&self, pbdata: *mut u8, pcbdata: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(pbdata), ::core::mem::transmute(pcbdata)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWMCodecPrivateData {
    type Vtable = IWMCodecPrivateData_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1945157262, 22519, 20225, [170, 102, 159, 87, 52, 12, 254, 14]);
}
impl ::core::convert::From<IWMCodecPrivateData> for ::windows::runtime::IUnknown {
    fn from(value: IWMCodecPrivateData) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IWMCodecPrivateData> for ::windows::runtime::IUnknown {
    fn from(value: &IWMCodecPrivateData) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IWMCodecPrivateData {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IWMCodecPrivateData {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWMCodecPrivateData_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectShow"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pmt: *mut ::core::mem::ManuallyDrop<super::super::Graphics::DirectShow::DMO_MEDIA_TYPE>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectShow")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbdata: *mut u8, pcbdata: *mut u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IWMCodecProps(pub ::windows::runtime::IUnknown);
impl IWMCodecProps {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectShow"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_DirectShow`*"]
    pub unsafe fn GetFormatProp<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, pmt: *mut super::super::Graphics::DirectShow::DMO_MEDIA_TYPE, pszname: Param1, ptype: *mut WMT_PROP_DATATYPE, pvalue: *mut u8, pdwsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(pmt), pszname.into_param().abi(), ::core::mem::transmute(ptype), ::core::mem::transmute(pvalue), ::core::mem::transmute(pdwsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn GetCodecProp<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(&self, dwformat: u32, pszname: Param1, ptype: *mut WMT_PROP_DATATYPE, pvalue: *mut u8, pdwsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(dwformat), pszname.into_param().abi(), ::core::mem::transmute(ptype), ::core::mem::transmute(pvalue), ::core::mem::transmute(pdwsize)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWMCodecProps {
    type Vtable = IWMCodecProps_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(628351258, 61466, 20445, [169, 141, 99, 184, 224, 186, 149, 137]);
}
impl ::core::convert::From<IWMCodecProps> for ::windows::runtime::IUnknown {
    fn from(value: IWMCodecProps) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IWMCodecProps> for ::windows::runtime::IUnknown {
    fn from(value: &IWMCodecProps) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IWMCodecProps {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IWMCodecProps {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWMCodecProps_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectShow"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pmt: *mut ::core::mem::ManuallyDrop<super::super::Graphics::DirectShow::DMO_MEDIA_TYPE>, pszname: super::super::Foundation::PWSTR, ptype: *mut WMT_PROP_DATATYPE, pvalue: *mut u8, pdwsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectShow")))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwformat: u32, pszname: super::super::Foundation::PWSTR, ptype: *mut WMT_PROP_DATATYPE, pvalue: *mut u8, pdwsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IWMCodecStrings(pub ::windows::runtime::IUnknown);
impl IWMCodecStrings {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectShow"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_DirectShow`*"]
    pub unsafe fn GetName(&self, pmt: *mut super::super::Graphics::DirectShow::DMO_MEDIA_TYPE, cchlength: u32, szname: super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(pmt), ::core::mem::transmute(cchlength), ::core::mem::transmute(szname), ::core::mem::transmute(pcchlength)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectShow"))]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_DirectShow`*"]
    pub unsafe fn GetDescription(&self, pmt: *mut super::super::Graphics::DirectShow::DMO_MEDIA_TYPE, cchlength: u32, szdescription: super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(pmt), ::core::mem::transmute(cchlength), ::core::mem::transmute(szdescription), ::core::mem::transmute(pcchlength)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWMCodecStrings {
    type Vtable = IWMCodecStrings_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2813481035, 58762, 18427, [149, 139, 202, 199, 22, 90, 5, 125]);
}
impl ::core::convert::From<IWMCodecStrings> for ::windows::runtime::IUnknown {
    fn from(value: IWMCodecStrings) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IWMCodecStrings> for ::windows::runtime::IUnknown {
    fn from(value: &IWMCodecStrings) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IWMCodecStrings {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IWMCodecStrings {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWMCodecStrings_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectShow"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pmt: *mut ::core::mem::ManuallyDrop<super::super::Graphics::DirectShow::DMO_MEDIA_TYPE>, cchlength: u32, szname: super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectShow")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectShow"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pmt: *mut ::core::mem::ManuallyDrop<super::super::Graphics::DirectShow::DMO_MEDIA_TYPE>, cchlength: u32, szdescription: super::super::Foundation::PWSTR, pcchlength: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectShow")))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IWMColorConvProps(pub ::windows::runtime::IUnknown);
impl IWMColorConvProps {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetMode(&self, lmode: i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(lmode)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetFullCroppingParam(&self, lsrccropleft: i32, lsrccroptop: i32, ldstcropleft: i32, ldstcroptop: i32, lcropwidth: i32, lcropheight: i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(lsrccropleft), ::core::mem::transmute(lsrccroptop), ::core::mem::transmute(ldstcropleft), ::core::mem::transmute(ldstcroptop), ::core::mem::transmute(lcropwidth), ::core::mem::transmute(lcropheight)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWMColorConvProps {
    type Vtable = IWMColorConvProps_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3869548066, 49305, 16925, [170, 211, 192, 97, 251, 74, 232, 91]);
}
impl ::core::convert::From<IWMColorConvProps> for ::windows::runtime::IUnknown {
    fn from(value: IWMColorConvProps) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IWMColorConvProps> for ::windows::runtime::IUnknown {
    fn from(value: &IWMColorConvProps) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IWMColorConvProps {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IWMColorConvProps {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWMColorConvProps_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, lmode: i32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, lsrccropleft: i32, lsrccroptop: i32, ldstcropleft: i32, ldstcroptop: i32, lcropwidth: i32, lcropheight: i32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IWMColorLegalizerProps(pub ::windows::runtime::IUnknown);
impl IWMColorLegalizerProps {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetColorLegalizerQuality(&self, lquality: i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(lquality)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWMColorLegalizerProps {
    type Vtable = IWMColorLegalizerProps_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2003604403, 46893, 17672, [182, 208, 32, 135, 133, 245, 83, 231]);
}
impl ::core::convert::From<IWMColorLegalizerProps> for ::windows::runtime::IUnknown {
    fn from(value: IWMColorLegalizerProps) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IWMColorLegalizerProps> for ::windows::runtime::IUnknown {
    fn from(value: &IWMColorLegalizerProps) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IWMColorLegalizerProps {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IWMColorLegalizerProps {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWMColorLegalizerProps_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, lquality: i32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IWMFrameInterpProps(pub ::windows::runtime::IUnknown);
impl IWMFrameInterpProps {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetFrameRateIn(&self, lframerate: i32, lscale: i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(lframerate), ::core::mem::transmute(lscale)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetFrameRateOut(&self, lframerate: i32, lscale: i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(lframerate), ::core::mem::transmute(lscale)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetFrameInterpEnabled<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, bfienabled: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), bfienabled.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetComplexityLevel(&self, icomplexity: i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), ::core::mem::transmute(icomplexity)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWMFrameInterpProps {
    type Vtable = IWMFrameInterpProps_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1275509659, 25196, 17940, [131, 41, 204, 106, 33, 185, 63, 160]);
}
impl ::core::convert::From<IWMFrameInterpProps> for ::windows::runtime::IUnknown {
    fn from(value: IWMFrameInterpProps) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IWMFrameInterpProps> for ::windows::runtime::IUnknown {
    fn from(value: &IWMFrameInterpProps) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IWMFrameInterpProps {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IWMFrameInterpProps {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWMFrameInterpProps_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, lframerate: i32, lscale: i32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, lframerate: i32, lscale: i32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, bfienabled: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, icomplexity: i32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IWMInterlaceProps(pub ::windows::runtime::IUnknown);
impl IWMInterlaceProps {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetProcessType(&self, iprocesstype: i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(iprocesstype)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetInitInverseTeleCinePattern(&self, iinitpattern: i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(iinitpattern)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetLastFrame(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWMInterlaceProps {
    type Vtable = IWMInterlaceProps_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2064836049, 48418, 18666, [188, 6, 152, 232, 147, 34, 28, 137]);
}
impl ::core::convert::From<IWMInterlaceProps> for ::windows::runtime::IUnknown {
    fn from(value: IWMInterlaceProps) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IWMInterlaceProps> for ::windows::runtime::IUnknown {
    fn from(value: &IWMInterlaceProps) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IWMInterlaceProps {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IWMInterlaceProps {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWMInterlaceProps_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iprocesstype: i32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iinitpattern: i32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IWMResamplerProps(pub ::windows::runtime::IUnknown);
impl IWMResamplerProps {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetHalfFilterLength(&self, lhalffilterlen: i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(lhalffilterlen)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetUserChannelMtx(&self, userchannelmtx: *mut f32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(userchannelmtx)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWMResamplerProps {
    type Vtable = IWMResamplerProps_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3890845775, 61599, 19876, [144, 63, 110, 46, 14, 254, 86, 181]);
}
impl ::core::convert::From<IWMResamplerProps> for ::windows::runtime::IUnknown {
    fn from(value: IWMResamplerProps) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IWMResamplerProps> for ::windows::runtime::IUnknown {
    fn from(value: &IWMResamplerProps) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IWMResamplerProps {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IWMResamplerProps {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWMResamplerProps_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, lhalffilterlen: i32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, userchannelmtx: *mut f32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IWMResizerProps(pub ::windows::runtime::IUnknown);
impl IWMResizerProps {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetResizerQuality(&self, lquality: i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(lquality)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetInterlaceMode(&self, lmode: i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(lmode)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetClipRegion(&self, lcliporixsrc: i32, lcliporiysrc: i32, lclipwidthsrc: i32, lclipheightsrc: i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(lcliporixsrc), ::core::mem::transmute(lcliporiysrc), ::core::mem::transmute(lclipwidthsrc), ::core::mem::transmute(lclipheightsrc)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetFullCropRegion(&self, lcliporixsrc: i32, lcliporiysrc: i32, lclipwidthsrc: i32, lclipheightsrc: i32, lcliporixdst: i32, lcliporiydst: i32, lclipwidthdst: i32, lclipheightdst: i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(lcliporixsrc),
            ::core::mem::transmute(lcliporiysrc),
            ::core::mem::transmute(lclipwidthsrc),
            ::core::mem::transmute(lclipheightsrc),
            ::core::mem::transmute(lcliporixdst),
            ::core::mem::transmute(lcliporiydst),
            ::core::mem::transmute(lclipwidthdst),
            ::core::mem::transmute(lclipheightdst),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetFullCropRegion(&self, lcliporixsrc: *mut i32, lcliporiysrc: *mut i32, lclipwidthsrc: *mut i32, lclipheightsrc: *mut i32, lcliporixdst: *mut i32, lcliporiydst: *mut i32, lclipwidthdst: *mut i32, lclipheightdst: *mut i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(lcliporixsrc),
            ::core::mem::transmute(lcliporiysrc),
            ::core::mem::transmute(lclipwidthsrc),
            ::core::mem::transmute(lclipheightsrc),
            ::core::mem::transmute(lcliporixdst),
            ::core::mem::transmute(lcliporiydst),
            ::core::mem::transmute(lclipwidthdst),
            ::core::mem::transmute(lclipheightdst),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWMResizerProps {
    type Vtable = IWMResizerProps_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1466326348, 1044, 20394, [144, 91, 16, 229, 70, 248, 28, 51]);
}
impl ::core::convert::From<IWMResizerProps> for ::windows::runtime::IUnknown {
    fn from(value: IWMResizerProps) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IWMResizerProps> for ::windows::runtime::IUnknown {
    fn from(value: &IWMResizerProps) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IWMResizerProps {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IWMResizerProps {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWMResizerProps_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, lquality: i32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, lmode: i32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, lcliporixsrc: i32, lcliporiysrc: i32, lclipwidthsrc: i32, lclipheightsrc: i32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, lcliporixsrc: i32, lcliporiysrc: i32, lclipwidthsrc: i32, lclipheightsrc: i32, lcliporixdst: i32, lcliporiydst: i32, lclipwidthdst: i32, lclipheightdst: i32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, lcliporixsrc: *mut i32, lcliporiysrc: *mut i32, lclipwidthsrc: *mut i32, lclipheightsrc: *mut i32, lcliporixdst: *mut i32, lcliporiydst: *mut i32, lclipwidthdst: *mut i32, lclipheightdst: *mut i32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IWMSampleExtensionSupport(pub ::windows::runtime::IUnknown);
impl IWMSampleExtensionSupport {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
    pub unsafe fn SetUseSampleExtensions<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(&self, fuseextensions: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), fuseextensions.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWMSampleExtensionSupport {
    type Vtable = IWMSampleExtensionSupport_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2613745796, 1540, 19498, [135, 218, 121, 63, 244, 213, 134, 195]);
}
impl ::core::convert::From<IWMSampleExtensionSupport> for ::windows::runtime::IUnknown {
    fn from(value: IWMSampleExtensionSupport) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IWMSampleExtensionSupport> for ::windows::runtime::IUnknown {
    fn from(value: &IWMSampleExtensionSupport) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IWMSampleExtensionSupport {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IWMSampleExtensionSupport {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWMSampleExtensionSupport_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, fuseextensions: super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IWMValidate(pub ::windows::runtime::IUnknown);
impl IWMValidate {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetIdentifier<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::GUID>>(&self, guidvalidationid: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), guidvalidationid.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWMValidate {
    type Vtable = IWMValidate_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3471040242, 14344, 16717, [190, 102, 250, 253, 71, 34, 16, 188]);
}
impl ::core::convert::From<IWMValidate> for ::windows::runtime::IUnknown {
    fn from(value: IWMValidate) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IWMValidate> for ::windows::runtime::IUnknown {
    fn from(value: &IWMValidate) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IWMValidate {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IWMValidate {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWMValidate_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidvalidationid: ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IWMVideoDecoderHurryup(pub ::windows::runtime::IUnknown);
impl IWMVideoDecoderHurryup {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetHurryup(&self, lhurryup: i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(lhurryup)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetHurryup(&self, plhurryup: *mut i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), ::core::mem::transmute(plhurryup)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWMVideoDecoderHurryup {
    type Vtable = IWMVideoDecoderHurryup_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(892056509, 11597, 17187, [158, 113, 220, 220, 251, 213, 60, 166]);
}
impl ::core::convert::From<IWMVideoDecoderHurryup> for ::windows::runtime::IUnknown {
    fn from(value: IWMVideoDecoderHurryup) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IWMVideoDecoderHurryup> for ::windows::runtime::IUnknown {
    fn from(value: &IWMVideoDecoderHurryup) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IWMVideoDecoderHurryup {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IWMVideoDecoderHurryup {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWMVideoDecoderHurryup_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, lhurryup: i32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, plhurryup: *mut i32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IWMVideoDecoderReconBuffer(pub ::windows::runtime::IUnknown);
impl IWMVideoDecoderReconBuffer {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetReconstructedVideoFrameSize(&self, pdwsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), ::core::mem::transmute(pdwsize)).ok()
    }
    #[cfg(feature = "Win32_Graphics_DirectShow")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_DirectShow`*"]
    pub unsafe fn GetReconstructedVideoFrame<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::DirectShow::IMediaBuffer>>(&self, pbuf: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self), pbuf.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Graphics_DirectShow")]
    #[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_DirectShow`*"]
    pub unsafe fn SetReconstructedVideoFrame<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::DirectShow::IMediaBuffer>>(&self, pbuf: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), pbuf.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWMVideoDecoderReconBuffer {
    type Vtable = IWMVideoDecoderReconBuffer_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1170055852, 35042, 18723, [152, 186, 57, 73, 8, 7, 17, 163]);
}
impl ::core::convert::From<IWMVideoDecoderReconBuffer> for ::windows::runtime::IUnknown {
    fn from(value: IWMVideoDecoderReconBuffer) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IWMVideoDecoderReconBuffer> for ::windows::runtime::IUnknown {
    fn from(value: &IWMVideoDecoderReconBuffer) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IWMVideoDecoderReconBuffer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IWMVideoDecoderReconBuffer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWMVideoDecoderReconBuffer_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_DirectShow")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbuf: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_DirectShow"))] usize,
    #[cfg(feature = "Win32_Graphics_DirectShow")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbuf: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_DirectShow"))] usize,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct IWMVideoForceKeyFrame(pub ::windows::runtime::IUnknown);
impl IWMVideoForceKeyFrame {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetKeyFrame(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWMVideoForceKeyFrame {
    type Vtable = IWMVideoForceKeyFrame_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2676266686, 23450, 16825, [169, 232, 242, 28, 216, 5, 150, 194]);
}
impl ::core::convert::From<IWMVideoForceKeyFrame> for ::windows::runtime::IUnknown {
    fn from(value: IWMVideoForceKeyFrame) -> Self {
        value.0
    }
}
impl ::core::convert::From<&IWMVideoForceKeyFrame> for ::windows::runtime::IUnknown {
    fn from(value: &IWMVideoForceKeyFrame) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IWMVideoForceKeyFrame {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a IWMVideoForceKeyFrame {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWMVideoForceKeyFrame_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct KSMETHOD_OPMVIDEOOUTPUT(pub i32);
pub const KSMETHOD_OPMVIDEOOUTPUT_STARTINITIALIZATION: KSMETHOD_OPMVIDEOOUTPUT = KSMETHOD_OPMVIDEOOUTPUT(0i32);
pub const KSMETHOD_OPMVIDEOOUTPUT_FINISHINITIALIZATION: KSMETHOD_OPMVIDEOOUTPUT = KSMETHOD_OPMVIDEOOUTPUT(1i32);
pub const KSMETHOD_OPMVIDEOOUTPUT_GETINFORMATION: KSMETHOD_OPMVIDEOOUTPUT = KSMETHOD_OPMVIDEOOUTPUT(2i32);
impl ::core::convert::From<i32> for KSMETHOD_OPMVIDEOOUTPUT {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for KSMETHOD_OPMVIDEOOUTPUT {
    type Abi = Self;
}
pub const KSPROPSETID_OPMVideoOutput: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(116659387, 62522, 20450, [165, 102, 119, 75, 76, 129, 240, 219]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const LOCAL_D3DFMT_DEFINES: u32 = 1u32;
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MACROBLOCK_DATA {
    pub flags: u32,
    pub motionVectorX: i16,
    pub motionVectorY: i16,
    pub QPDelta: i32,
}
impl MACROBLOCK_DATA {}
impl ::core::default::Default for MACROBLOCK_DATA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MACROBLOCK_DATA {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MACROBLOCK_DATA").field("flags", &self.flags).field("motionVectorX", &self.motionVectorX).field("motionVectorY", &self.motionVectorY).field("QPDelta", &self.QPDelta).finish()
    }
}
impl ::core::cmp::PartialEq for MACROBLOCK_DATA {
    fn eq(&self, other: &Self) -> bool {
        self.flags == other.flags && self.motionVectorX == other.motionVectorX && self.motionVectorY == other.motionVectorY && self.QPDelta == other.QPDelta
    }
}
impl ::core::cmp::Eq for MACROBLOCK_DATA {}
unsafe impl ::windows::runtime::Abi for MACROBLOCK_DATA {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MACROBLOCK_FLAG_DIRTY: u32 = 2u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MACROBLOCK_FLAG_HAS_MOTION_VECTOR: u32 = 16u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MACROBLOCK_FLAG_HAS_QP: u32 = 32u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MACROBLOCK_FLAG_MOTION: u32 = 4u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MACROBLOCK_FLAG_SKIP: u32 = 1u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MACROBLOCK_FLAG_VIDEO: u32 = 8u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MAX_SUBSTREAMS: u32 = 15u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MEDIASINK_CANNOT_MATCH_CLOCK: u32 = 2u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MEDIASINK_CAN_PREROLL: u32 = 16u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MEDIASINK_CLOCK_REQUIRED: u32 = 8u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MEDIASINK_FIXED_STREAMS: u32 = 1u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MEDIASINK_RATELESS: u32 = 4u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MEDIASINK_REQUIRE_REFERENCE_MEDIATYPE: u32 = 32u32;
pub const MEDIASUBTYPE_AVC1: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(826496577, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_DOLBY_DDPLUS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2818279343, 11522, 17147, [164, 212, 5, 205, 147, 132, 59, 221]);
pub const MEDIASUBTYPE_DOLBY_TRUEHD: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3945254596, 5694, 19619, [139, 116, 142, 37, 249, 27, 81, 126]);
pub const MEDIASUBTYPE_DTS2: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(8193, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_DTS_HD: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2732953271, 4009, 18619, [164, 12, 250, 14, 21, 109, 6, 69]);
pub const MEDIASUBTYPE_DTS_HD_HRA: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2786771812, 44302, 18244, [137, 255, 33, 60, 224, 223, 136, 4]);
pub const MEDIASUBTYPE_DVM: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(8192, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_I420: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(808596553, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_M4S2: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(844313677, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_MP42: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(842289229, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_MP43: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(859066445, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_MP4S: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1395937357, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_MPEG_ADTS_AAC: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(5632, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_MPEG_HEAAC: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(5648, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_MPEG_LOAS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(5634, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_MPEG_RAW_AAC: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(5633, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_MPG4: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(877088845, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_MSAUDIO1: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(352, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_MSS1: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(827544397, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_MSS2: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(844321613, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_NOKIA_MPEG_ADTS_AAC: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(5640, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_NOKIA_MPEG_RAW_AAC: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(5641, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_NV11: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(825316942, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_RAW_AAC1: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(255, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_V216: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(909193814, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_V410: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(808531030, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_VODAFONE_MPEG_ADTS_AAC: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(5642, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_VODAFONE_MPEG_RAW_AAC: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(5643, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_WMASPDIF: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(356, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_WMAUDIO2: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(353, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_WMAUDIO3: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(354, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_WMAUDIO4: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(360, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_WMAUDIO_LOSSLESS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(355, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_WMV1: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(827739479, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_WMV2: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(844516695, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_WMV3: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(861293911, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_WMVA: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1096174935, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_WMVB: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1112952151, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_WMVP: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1347833175, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_WMVR: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1381387607, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_WVC1: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(826496599, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_WVP2: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(844125783, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_X264: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(875967064, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_Y41T: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1412510809, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_Y42T: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1412576345, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_h264: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(875967080, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_m4s2: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(846410861, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_mp42: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(842297453, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_mp43: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(859074669, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_mp4s: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1932816493, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_mpg4: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(879194221, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_v210: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(808530550, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_wmv1: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(829844855, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_wmv2: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(846622071, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_wmv3: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(863399287, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_wmva: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1635151223, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_wmvb: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1651928439, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_wmvp: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1886809463, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_wmvr: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1920363895, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_wvc1: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(828601975, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_wvp2: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(846231159, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MEDIASUBTYPE_x264: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(875967096, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS(pub u32);
pub const MF_EVENT_FLAG_NONE: MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS = MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS(0u32);
pub const MF_EVENT_FLAG_NO_WAIT: MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS = MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS(1u32);
impl ::core::convert::From<u32> for MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS {
    type Abi = Self;
}
impl ::core::ops::BitOr for MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::core::ops::BitAnd for MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::core::ops::BitOrAssign for MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::core::ops::BitAndAssign for MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::core::ops::Not for MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
pub const MEDeviceStreamCreated: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(38969807, 13632, 17332, [145, 100, 215, 46, 180, 5, 250, 64]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF2DBuffer_LockFlags(pub i32);
pub const MF2DBuffer_LockFlags_LockTypeMask: MF2DBuffer_LockFlags = MF2DBuffer_LockFlags(3i32);
pub const MF2DBuffer_LockFlags_Read: MF2DBuffer_LockFlags = MF2DBuffer_LockFlags(1i32);
pub const MF2DBuffer_LockFlags_Write: MF2DBuffer_LockFlags = MF2DBuffer_LockFlags(2i32);
pub const MF2DBuffer_LockFlags_ReadWrite: MF2DBuffer_LockFlags = MF2DBuffer_LockFlags(3i32);
pub const MF2DBuffer_LockFlags_ForceDWORD: MF2DBuffer_LockFlags = MF2DBuffer_LockFlags(2147483647i32);
impl ::core::convert::From<i32> for MF2DBuffer_LockFlags {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF2DBuffer_LockFlags {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF3DVideoOutputType(pub i32);
pub const MF3DVideoOutputType_BaseView: MF3DVideoOutputType = MF3DVideoOutputType(0i32);
pub const MF3DVideoOutputType_Stereo: MF3DVideoOutputType = MF3DVideoOutputType(1i32);
impl ::core::convert::From<i32> for MF3DVideoOutputType {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF3DVideoOutputType {
    type Abi = Self;
}
pub const MFAMRNBByteStreamHandler: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4024836234, 2604, 18938, [138, 1, 55, 104, 181, 89, 182, 218]);
pub const MFAMRNBSinkClassFactory: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2955350360, 28882, 19547, [159, 148, 118, 245, 73, 217, 15, 223]);
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MFARGB {
    pub rgbBlue: u8,
    pub rgbGreen: u8,
    pub rgbRed: u8,
    pub rgbAlpha: u8,
}
impl MFARGB {}
impl ::core::default::Default for MFARGB {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MFARGB {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFARGB").field("rgbBlue", &self.rgbBlue).field("rgbGreen", &self.rgbGreen).field("rgbRed", &self.rgbRed).field("rgbAlpha", &self.rgbAlpha).finish()
    }
}
impl ::core::cmp::PartialEq for MFARGB {
    fn eq(&self, other: &Self) -> bool {
        self.rgbBlue == other.rgbBlue && self.rgbGreen == other.rgbGreen && self.rgbRed == other.rgbRed && self.rgbAlpha == other.rgbAlpha
    }
}
impl ::core::cmp::Eq for MFARGB {}
unsafe impl ::windows::runtime::Abi for MFARGB {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFASFINDEXER_APPROX_SEEK_TIME_UNKNOWN: u64 = 18446744073709551615u64;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFASFINDEXER_NO_FIXED_INTERVAL: u32 = 4294967295u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFASFINDEXER_PER_ENTRY_BYTES_DYNAMIC: u32 = 65535u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFASFINDEXER_READ_FOR_REVERSEPLAYBACK_OUTOFDATASEGMENT: u64 = 18446744073709551615u64;
pub const MFASFINDEXER_TYPE_TIMECODE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1233211953, 27565, 17661, [129, 10, 63, 96, 152, 78, 199, 253]);
pub const MFASFMutexType_Bitrate: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1914145836, 58459, 4565, [188, 42, 0, 176, 208, 243, 244, 171]);
pub const MFASFMutexType_Language: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1914145835, 58459, 4565, [188, 42, 0, 176, 208, 243, 244, 171]);
pub const MFASFMutexType_Presentation: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1914145837, 58459, 4565, [188, 42, 0, 176, 208, 243, 244, 171]);
pub const MFASFMutexType_Unknown: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1914145838, 58459, 4565, [188, 42, 0, 176, 208, 243, 244, 171]);
pub const MFASFSPLITTER_PACKET_BOUNDARY: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4267198981, 59606, 17123, [177, 118, 241, 33, 23, 5, 251, 111]);
pub const MFASFSampleExtension_ContentType: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3583040544, 1980, 17260, [156, 247, 243, 187, 251, 241, 164, 220]);
pub const MFASFSampleExtension_Encryption_KeyID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1983341969, 31071, 19873, [134, 237, 157, 70, 236, 161, 9, 169]);
pub const MFASFSampleExtension_Encryption_SampleID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1721284686, 2810, 17200, [174, 178, 28, 10, 152, 215, 164, 77]);
pub const MFASFSampleExtension_FileName: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3781553166, 6637, 17879, [180, 167, 37, 203, 209, 226, 142, 155]);
pub const MFASFSampleExtension_OutputCleanPoint: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4146740335, 28340, 20156, [177, 146, 9, 173, 151, 89, 232, 40]);
pub const MFASFSampleExtension_PixelAspectRatio: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(455009620, 63978, 19400, [130, 26, 55, 107, 116, 228, 196, 184]);
pub const MFASFSampleExtension_SMPTE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(966104556, 34407, 20013, [143, 219, 152, 129, 76, 231, 108, 30]);
pub const MFASFSampleExtension_SampleDuration: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3334313040, 34431, 18695, [131, 163, 199, 121, 33, 183, 51, 173]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFASF_DEFAULT_BUFFER_WINDOW_MS: u32 = 3000u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFASF_INDEXER_FLAGS(pub i32);
pub const MFASF_INDEXER_WRITE_NEW_INDEX: MFASF_INDEXER_FLAGS = MFASF_INDEXER_FLAGS(1i32);
pub const MFASF_INDEXER_READ_FOR_REVERSEPLAYBACK: MFASF_INDEXER_FLAGS = MFASF_INDEXER_FLAGS(2i32);
pub const MFASF_INDEXER_WRITE_FOR_LIVEREAD: MFASF_INDEXER_FLAGS = MFASF_INDEXER_FLAGS(4i32);
impl ::core::convert::From<i32> for MFASF_INDEXER_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFASF_INDEXER_FLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFASF_INVALID_STREAM_NUMBER: u32 = 128u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFASF_MAX_STREAM_NUMBER: u32 = 127u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFASF_MULTIPLEXERFLAGS(pub i32);
pub const MFASF_MULTIPLEXER_AUTOADJUST_BITRATE: MFASF_MULTIPLEXERFLAGS = MFASF_MULTIPLEXERFLAGS(1i32);
impl ::core::convert::From<i32> for MFASF_MULTIPLEXERFLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFASF_MULTIPLEXERFLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFASF_PAYLOADEXTENSION_MAX_SIZE: u32 = 255u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFASF_PAYLOADEXTENSION_VARIABLE_SIZE: u32 = 65535u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFASF_SPLITTERFLAGS(pub i32);
pub const MFASF_SPLITTER_REVERSE: MFASF_SPLITTERFLAGS = MFASF_SPLITTERFLAGS(1i32);
pub const MFASF_SPLITTER_WMDRM: MFASF_SPLITTERFLAGS = MFASF_SPLITTERFLAGS(2i32);
impl ::core::convert::From<i32> for MFASF_SPLITTERFLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFASF_SPLITTERFLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFASF_STREAMSELECTOR_FLAGS(pub i32);
pub const MFASF_STREAMSELECTOR_DISABLE_THINNING: MFASF_STREAMSELECTOR_FLAGS = MFASF_STREAMSELECTOR_FLAGS(1i32);
pub const MFASF_STREAMSELECTOR_USE_AVERAGE_BITRATE: MFASF_STREAMSELECTOR_FLAGS = MFASF_STREAMSELECTOR_FLAGS(2i32);
impl ::core::convert::From<i32> for MFASF_STREAMSELECTOR_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFASF_STREAMSELECTOR_FLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: clone :: Clone, :: core :: fmt :: Debug)]
pub struct MFASYNCRESULT(pub ::windows::runtime::IUnknown);
impl MFASYNCRESULT {
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetState(&self) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::core::mem::transmute_copy(self), &mut result__).from_abi::<::windows::runtime::IUnknown>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStatus(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::core::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn SetStatus(&self, hrstatus: ::windows::runtime::HRESULT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::core::mem::transmute_copy(self), ::core::mem::transmute(hrstatus)).ok()
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetObject(&self) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::core::mem::transmute_copy(self), &mut result__).from_abi::<::windows::runtime::IUnknown>(result__)
    }
    #[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
    pub unsafe fn GetStateNoAddRef(&self) -> ::core::option::Option<::windows::runtime::IUnknown> {
        ::core::mem::transmute((::windows::runtime::Interface::vtable(self).7)(::core::mem::transmute_copy(self)))
    }
}
unsafe impl ::windows::runtime::Interface for MFASYNCRESULT {
    type Vtable = MFASYNCRESULT_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::zeroed();
}
impl ::core::convert::From<MFASYNCRESULT> for ::windows::runtime::IUnknown {
    fn from(value: MFASYNCRESULT) -> Self {
        value.0
    }
}
impl ::core::convert::From<&MFASYNCRESULT> for ::windows::runtime::IUnknown {
    fn from(value: &MFASYNCRESULT) -> Self {
        value.0.clone()
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for MFASYNCRESULT {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(self.0)
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &'a MFASYNCRESULT {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Borrowed(&self.0)
    }
}
impl ::core::convert::From<MFASYNCRESULT> for IMFAsyncResult {
    fn from(value: MFASYNCRESULT) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&MFASYNCRESULT> for IMFAsyncResult {
    fn from(value: &MFASYNCRESULT) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAsyncResult> for MFASYNCRESULT {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAsyncResult> {
        ::windows::runtime::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMFAsyncResult> for &MFASYNCRESULT {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMFAsyncResult> {
        ::windows::runtime::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct MFASYNCRESULT_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppunkstate: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hrstatus: ::windows::runtime::HRESULT) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppobject: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::RawPtr,
);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFASYNC_BLOCKING_CALLBACK: u32 = 4u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFASYNC_CALLBACK_QUEUE_ALL: u32 = 4294967295u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFASYNC_CALLBACK_QUEUE_IO: u32 = 3u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFASYNC_CALLBACK_QUEUE_LONG_FUNCTION: u32 = 7u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFASYNC_CALLBACK_QUEUE_MULTITHREADED: u32 = 5u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFASYNC_CALLBACK_QUEUE_PRIVATE_MASK: u32 = 4294901760u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFASYNC_CALLBACK_QUEUE_RT: u32 = 2u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFASYNC_CALLBACK_QUEUE_STANDARD: u32 = 1u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFASYNC_CALLBACK_QUEUE_TIMER: u32 = 4u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFASYNC_CALLBACK_QUEUE_UNDEFINED: u32 = 0u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFASYNC_FAST_IO_PROCESSING_CALLBACK: u32 = 1u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFASYNC_LOCALIZE_REMOTE_CALLBACK: u32 = 16u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFASYNC_REPLY_CALLBACK: u32 = 8u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFASYNC_SIGNAL_CALLBACK: u32 = 2u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFASYNC_WORKQUEUE_TYPE(pub i32);
pub const MF_STANDARD_WORKQUEUE: MFASYNC_WORKQUEUE_TYPE = MFASYNC_WORKQUEUE_TYPE(0i32);
pub const MF_WINDOW_WORKQUEUE: MFASYNC_WORKQUEUE_TYPE = MFASYNC_WORKQUEUE_TYPE(1i32);
pub const MF_MULTITHREADED_WORKQUEUE: MFASYNC_WORKQUEUE_TYPE = MFASYNC_WORKQUEUE_TYPE(2i32);
impl ::core::convert::From<i32> for MFASYNC_WORKQUEUE_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFASYNC_WORKQUEUE_TYPE {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MFAYUVSample {
    pub bCrValue: u8,
    pub bCbValue: u8,
    pub bYValue: u8,
    pub bSampleAlpha8: u8,
}
impl MFAYUVSample {}
impl ::core::default::Default for MFAYUVSample {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MFAYUVSample {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFAYUVSample").field("bCrValue", &self.bCrValue).field("bCbValue", &self.bCbValue).field("bYValue", &self.bYValue).field("bSampleAlpha8", &self.bSampleAlpha8).finish()
    }
}
impl ::core::cmp::PartialEq for MFAYUVSample {
    fn eq(&self, other: &Self) -> bool {
        self.bCrValue == other.bCrValue && self.bCbValue == other.bCbValue && self.bYValue == other.bYValue && self.bSampleAlpha8 == other.bSampleAlpha8
    }
}
impl ::core::cmp::Eq for MFAYUVSample {}
unsafe impl ::windows::runtime::Abi for MFAYUVSample {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFAddPeriodicCallback<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(callback: ::core::option::Option<MFPERIODICCALLBACK>, pcontext: Param1) -> ::windows::runtime::Result<u32> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFAddPeriodicCallback(callback: ::windows::runtime::RawPtr, pcontext: ::windows::runtime::RawPtr, pdwkey: *mut u32) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFAddPeriodicCallback(::core::mem::transmute(callback), pcontext.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFAllocateSerialWorkQueue(dwworkqueue: u32) -> ::windows::runtime::Result<u32> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFAllocateSerialWorkQueue(dwworkqueue: u32, pdwworkqueue: *mut u32) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFAllocateSerialWorkQueue(::core::mem::transmute(dwworkqueue), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFAllocateWorkQueue() -> ::windows::runtime::Result<u32> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFAllocateWorkQueue(pdwworkqueue: *mut u32) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFAllocateWorkQueue(&mut result__).from_abi::<u32>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFAllocateWorkQueueEx(workqueuetype: MFASYNC_WORKQUEUE_TYPE) -> ::windows::runtime::Result<u32> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFAllocateWorkQueueEx(workqueuetype: MFASYNC_WORKQUEUE_TYPE, pdwworkqueue: *mut u32) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFAllocateWorkQueueEx(::core::mem::transmute(workqueuetype), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFAudioConstriction(pub i32);
pub const MFaudioConstrictionOff: MFAudioConstriction = MFAudioConstriction(0i32);
pub const MFaudioConstriction48_16: MFAudioConstriction = MFAudioConstriction(1i32);
pub const MFaudioConstriction44_16: MFAudioConstriction = MFAudioConstriction(2i32);
pub const MFaudioConstriction14_14: MFAudioConstriction = MFAudioConstriction(3i32);
pub const MFaudioConstrictionMute: MFAudioConstriction = MFAudioConstriction(4i32);
impl ::core::convert::From<i32> for MFAudioConstriction {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFAudioConstriction {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MFAudioDecoderDegradationInfo {
    pub eDegradationReason: MFT_AUDIO_DECODER_DEGRADATION_REASON,
    pub eType: MFT_AUDIO_DECODER_DEGRADATION_TYPE,
}
impl MFAudioDecoderDegradationInfo {}
impl ::core::default::Default for MFAudioDecoderDegradationInfo {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MFAudioDecoderDegradationInfo {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFAudioDecoderDegradationInfo").field("eDegradationReason", &self.eDegradationReason).field("eType", &self.eType).finish()
    }
}
impl ::core::cmp::PartialEq for MFAudioDecoderDegradationInfo {
    fn eq(&self, other: &Self) -> bool {
        self.eDegradationReason == other.eDegradationReason && self.eType == other.eType
    }
}
impl ::core::cmp::Eq for MFAudioDecoderDegradationInfo {}
unsafe impl ::windows::runtime::Abi for MFAudioDecoderDegradationInfo {
    type Abi = Self;
}
pub const MFAudioFormat_AAC: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(5648, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFAudioFormat_AAC_HDCP: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1100729974, 35698, 16399, [173, 235, 132, 181, 125, 99, 72, 77]);
pub const MFAudioFormat_ADTS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(5632, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFAudioFormat_ADTS_HDCP: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3662242723, 5336, 19919, [146, 183, 25, 62, 184, 67, 99, 219]);
pub const MFAudioFormat_ALAC: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(27745, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFAudioFormat_AMR_NB: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(29537, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFAudioFormat_AMR_WB: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(29538, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFAudioFormat_AMR_WP: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(29539, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFAudioFormat_Base: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(0, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFAudioFormat_Base_HDCP: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(948221372, 57975, 17405, [152, 61, 3, 138, 168, 217, 182, 5]);
pub const MFAudioFormat_DRM: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(9, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFAudioFormat_DTS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(8, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFAudioFormat_DTS_HD: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2732953271, 4009, 18619, [164, 12, 250, 14, 21, 109, 6, 69]);
pub const MFAudioFormat_DTS_LBR: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3271454474, 20028, 19953, [155, 96, 80, 134, 48, 145, 228, 185]);
pub const MFAudioFormat_DTS_RAW: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3765272627, 56134, 4559, [180, 209, 0, 128, 95, 108, 187, 234]);
pub const MFAudioFormat_DTS_UHD: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2265055511, 44259, 17118, [183, 62, 198, 86, 112, 98, 99, 248]);
pub const MFAudioFormat_DTS_UHDY: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2610743808, 37305, 19660, [136, 58, 143, 120, 122, 195, 204, 134]);
pub const MFAudioFormat_DTS_XLL: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1169390619, 35952, 20057, [167, 190, 161, 228, 44, 129, 200, 13]);
pub const MFAudioFormat_Dolby_AC3: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3765272620, 56134, 4559, [180, 209, 0, 128, 95, 108, 187, 234]);
pub const MFAudioFormat_Dolby_AC3_HDCP: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2540059264, 36859, 17477, [166, 186, 121, 45, 144, 143, 73, 127]);
pub const MFAudioFormat_Dolby_AC3_SPDIF: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(146, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFAudioFormat_Dolby_AC4: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(44096, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFAudioFormat_Dolby_AC4_V1: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(918000252, 15751, 18986, [145, 150, 162, 26, 217, 233, 53, 230]);
pub const MFAudioFormat_Dolby_AC4_V1_ES: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2643315910, 53590, 20408, [151, 156, 168, 91, 231, 210, 29, 250]);
pub const MFAudioFormat_Dolby_AC4_V2: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2040050336, 6109, 18870, [141, 250, 155, 39, 133, 82, 162, 172]);
pub const MFAudioFormat_Dolby_AC4_V2_ES: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2119748089, 45168, 17908, [140, 205, 169, 154, 4, 23, 193, 172]);
pub const MFAudioFormat_Dolby_DDPlus: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2818279343, 11522, 17147, [164, 212, 5, 205, 147, 132, 59, 221]);
pub const MFAudioFormat_FLAC: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(61868, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFAudioFormat_Float: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFAudioFormat_Float_SpatialObjects: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4198092180, 48228, 19121, [155, 113, 220, 208, 157, 90, 126, 122]);
pub const MFAudioFormat_LPCM: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3765272626, 56134, 4559, [180, 209, 0, 128, 95, 108, 187, 234]);
pub const MFAudioFormat_MP3: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(85, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFAudioFormat_MPEG: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(80, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFAudioFormat_MSP1: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(10, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFAudioFormat_Opus: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(28751, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFAudioFormat_PCM: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFAudioFormat_PCM_HDCP: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2783444737, 33809, 19148, [168, 101, 95, 73, 65, 40, 141, 128]);
pub const MFAudioFormat_Vorbis: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2368721163, 22593, 19051, [137, 5, 88, 143, 236, 26, 222, 217]);
pub const MFAudioFormat_WMASPDIF: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(356, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFAudioFormat_WMAudioV8: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(353, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFAudioFormat_WMAudioV9: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(354, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFAudioFormat_WMAudio_Lossless: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(355, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFAverageTimePerFrameToFrameRate(unaveragetimeperframe: u64, punnumerator: *mut u32, pundenominator: *mut u32) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFAverageTimePerFrameToFrameRate(unaveragetimeperframe: u64, punnumerator: *mut u32, pundenominator: *mut u32) -> ::windows::runtime::HRESULT;
        }
        MFAverageTimePerFrameToFrameRate(::core::mem::transmute(unaveragetimeperframe), ::core::mem::transmute(punnumerator), ::core::mem::transmute(pundenominator)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MFBYTESTREAM_BUFFERING_PARAMS {
    pub cbTotalFileSize: u64,
    pub cbPlayableDataSize: u64,
    pub prgBuckets: *mut MF_LEAKY_BUCKET_PAIR,
    pub cBuckets: u32,
    pub qwNetBufferingTime: u64,
    pub qwExtraBufferingTimeDuringSeek: u64,
    pub qwPlayDuration: u64,
    pub dRate: f32,
}
impl MFBYTESTREAM_BUFFERING_PARAMS {}
impl ::core::default::Default for MFBYTESTREAM_BUFFERING_PARAMS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MFBYTESTREAM_BUFFERING_PARAMS {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFBYTESTREAM_BUFFERING_PARAMS")
            .field("cbTotalFileSize", &self.cbTotalFileSize)
            .field("cbPlayableDataSize", &self.cbPlayableDataSize)
            .field("prgBuckets", &self.prgBuckets)
            .field("cBuckets", &self.cBuckets)
            .field("qwNetBufferingTime", &self.qwNetBufferingTime)
            .field("qwExtraBufferingTimeDuringSeek", &self.qwExtraBufferingTimeDuringSeek)
            .field("qwPlayDuration", &self.qwPlayDuration)
            .field("dRate", &self.dRate)
            .finish()
    }
}
impl ::core::cmp::PartialEq for MFBYTESTREAM_BUFFERING_PARAMS {
    fn eq(&self, other: &Self) -> bool {
        self.cbTotalFileSize == other.cbTotalFileSize && self.cbPlayableDataSize == other.cbPlayableDataSize && self.prgBuckets == other.prgBuckets && self.cBuckets == other.cBuckets && self.qwNetBufferingTime == other.qwNetBufferingTime && self.qwExtraBufferingTimeDuringSeek == other.qwExtraBufferingTimeDuringSeek && self.qwPlayDuration == other.qwPlayDuration && self.dRate == other.dRate
    }
}
impl ::core::cmp::Eq for MFBYTESTREAM_BUFFERING_PARAMS {}
unsafe impl ::windows::runtime::Abi for MFBYTESTREAM_BUFFERING_PARAMS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFBYTESTREAM_DOES_NOT_USE_NETWORK: u32 = 2048u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFBYTESTREAM_HAS_SLOW_SEEK: u32 = 256u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFBYTESTREAM_IS_DIRECTORY: u32 = 128u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFBYTESTREAM_IS_PARTIALLY_DOWNLOADED: u32 = 512u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFBYTESTREAM_IS_READABLE: u32 = 1u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFBYTESTREAM_IS_REMOTE: u32 = 8u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFBYTESTREAM_IS_SEEKABLE: u32 = 4u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFBYTESTREAM_IS_WRITABLE: u32 = 2u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFBYTESTREAM_SEEK_FLAG_CANCEL_PENDING_IO: u32 = 1u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFBYTESTREAM_SEEK_ORIGIN(pub i32);
pub const msoBegin: MFBYTESTREAM_SEEK_ORIGIN = MFBYTESTREAM_SEEK_ORIGIN(0i32);
pub const msoCurrent: MFBYTESTREAM_SEEK_ORIGIN = MFBYTESTREAM_SEEK_ORIGIN(1i32);
impl ::core::convert::From<i32> for MFBYTESTREAM_SEEK_ORIGIN {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFBYTESTREAM_SEEK_ORIGIN {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFBYTESTREAM_SHARE_WRITE: u32 = 1024u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFBeginCreateFile<'a, Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param4: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param5: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(accessmode: MF_FILE_ACCESSMODE, openmode: MF_FILE_OPENMODE, fflags: MF_FILE_FLAGS, pwszfilepath: Param3, pcallback: Param4, pstate: Param5) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFBeginCreateFile(accessmode: MF_FILE_ACCESSMODE, openmode: MF_FILE_OPENMODE, fflags: MF_FILE_FLAGS, pwszfilepath: super::super::Foundation::PWSTR, pcallback: ::windows::runtime::RawPtr, pstate: ::windows::runtime::RawPtr, ppcancelcookie: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFBeginCreateFile(::core::mem::transmute(accessmode), ::core::mem::transmute(openmode), ::core::mem::transmute(fflags), pwszfilepath.into_param().abi(), pcallback.into_param().abi(), pstate.into_param().abi(), &mut result__).from_abi::<::windows::runtime::IUnknown>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFBeginRegisterWorkQueueWithMMCSS<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param4: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(dwworkqueueid: u32, wszclass: Param1, dwtaskid: u32, pdonecallback: Param3, pdonestate: Param4) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFBeginRegisterWorkQueueWithMMCSS(dwworkqueueid: u32, wszclass: super::super::Foundation::PWSTR, dwtaskid: u32, pdonecallback: ::windows::runtime::RawPtr, pdonestate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        MFBeginRegisterWorkQueueWithMMCSS(::core::mem::transmute(dwworkqueueid), wszclass.into_param().abi(), ::core::mem::transmute(dwtaskid), pdonecallback.into_param().abi(), pdonestate.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFBeginRegisterWorkQueueWithMMCSSEx<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param4: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param5: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(dwworkqueueid: u32, wszclass: Param1, dwtaskid: u32, lpriority: i32, pdonecallback: Param4, pdonestate: Param5) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFBeginRegisterWorkQueueWithMMCSSEx(dwworkqueueid: u32, wszclass: super::super::Foundation::PWSTR, dwtaskid: u32, lpriority: i32, pdonecallback: ::windows::runtime::RawPtr, pdonestate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        MFBeginRegisterWorkQueueWithMMCSSEx(::core::mem::transmute(dwworkqueueid), wszclass.into_param().abi(), ::core::mem::transmute(dwtaskid), ::core::mem::transmute(lpriority), pdonecallback.into_param().abi(), pdonestate.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFBeginUnregisterWorkQueueWithMMCSS<'a, Param1: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param2: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(dwworkqueueid: u32, pdonecallback: Param1, pdonestate: Param2) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFBeginUnregisterWorkQueueWithMMCSS(dwworkqueueid: u32, pdonecallback: ::windows::runtime::RawPtr, pdonestate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        MFBeginUnregisterWorkQueueWithMMCSS(::core::mem::transmute(dwworkqueueid), pdonecallback.into_param().abi(), pdonestate.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFCAPTURE_METADATA_SCANLINE_VERTICAL: u32 = 4u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFCAPTURE_METADATA_SCAN_BOTTOM_TOP: u32 = 2u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFCAPTURE_METADATA_SCAN_RIGHT_LEFT: u32 = 1u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFCLOCK_CHARACTERISTICS_FLAGS(pub i32);
pub const MFCLOCK_CHARACTERISTICS_FLAG_FREQUENCY_10MHZ: MFCLOCK_CHARACTERISTICS_FLAGS = MFCLOCK_CHARACTERISTICS_FLAGS(2i32);
pub const MFCLOCK_CHARACTERISTICS_FLAG_ALWAYS_RUNNING: MFCLOCK_CHARACTERISTICS_FLAGS = MFCLOCK_CHARACTERISTICS_FLAGS(4i32);
pub const MFCLOCK_CHARACTERISTICS_FLAG_IS_SYSTEM_CLOCK: MFCLOCK_CHARACTERISTICS_FLAGS = MFCLOCK_CHARACTERISTICS_FLAGS(8i32);
impl ::core::convert::From<i32> for MFCLOCK_CHARACTERISTICS_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFCLOCK_CHARACTERISTICS_FLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFCLOCK_FREQUENCY_HNS: u32 = 10000000u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFCLOCK_JITTER_DPC: u32 = 4000u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFCLOCK_JITTER_ISR: u32 = 1000u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFCLOCK_JITTER_PASSIVE: u32 = 10000u32;
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MFCLOCK_PROPERTIES {
    pub qwCorrelationRate: u64,
    pub guidClockId: ::windows::runtime::GUID,
    pub dwClockFlags: u32,
    pub qwClockFrequency: u64,
    pub dwClockTolerance: u32,
    pub dwClockJitter: u32,
}
impl MFCLOCK_PROPERTIES {}
impl ::core::default::Default for MFCLOCK_PROPERTIES {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MFCLOCK_PROPERTIES {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFCLOCK_PROPERTIES")
            .field("qwCorrelationRate", &self.qwCorrelationRate)
            .field("guidClockId", &self.guidClockId)
            .field("dwClockFlags", &self.dwClockFlags)
            .field("qwClockFrequency", &self.qwClockFrequency)
            .field("dwClockTolerance", &self.dwClockTolerance)
            .field("dwClockJitter", &self.dwClockJitter)
            .finish()
    }
}
impl ::core::cmp::PartialEq for MFCLOCK_PROPERTIES {
    fn eq(&self, other: &Self) -> bool {
        self.qwCorrelationRate == other.qwCorrelationRate && self.guidClockId == other.guidClockId && self.dwClockFlags == other.dwClockFlags && self.qwClockFrequency == other.qwClockFrequency && self.dwClockTolerance == other.dwClockTolerance && self.dwClockJitter == other.dwClockJitter
    }
}
impl ::core::cmp::Eq for MFCLOCK_PROPERTIES {}
unsafe impl ::windows::runtime::Abi for MFCLOCK_PROPERTIES {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFCLOCK_RELATIONAL_FLAGS(pub i32);
pub const MFCLOCK_RELATIONAL_FLAG_JITTER_NEVER_AHEAD: MFCLOCK_RELATIONAL_FLAGS = MFCLOCK_RELATIONAL_FLAGS(1i32);
impl ::core::convert::From<i32> for MFCLOCK_RELATIONAL_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFCLOCK_RELATIONAL_FLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFCLOCK_STATE(pub i32);
pub const MFCLOCK_STATE_INVALID: MFCLOCK_STATE = MFCLOCK_STATE(0i32);
pub const MFCLOCK_STATE_RUNNING: MFCLOCK_STATE = MFCLOCK_STATE(1i32);
pub const MFCLOCK_STATE_STOPPED: MFCLOCK_STATE = MFCLOCK_STATE(2i32);
pub const MFCLOCK_STATE_PAUSED: MFCLOCK_STATE = MFCLOCK_STATE(3i32);
impl ::core::convert::From<i32> for MFCLOCK_STATE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFCLOCK_STATE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFCLOCK_TOLERANCE_UNKNOWN: u32 = 50000u32;
pub const MFCONNECTOR_AGP: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2889543520, 52803, 4569, [146, 219, 0, 11, 219, 40, 255, 152]);
pub const MFCONNECTOR_COMPONENT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1473075563, 52807, 4569, [146, 219, 0, 11, 219, 40, 255, 152]);
pub const MFCONNECTOR_COMPOSITE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1473075562, 52807, 4569, [146, 219, 0, 11, 219, 40, 255, 152]);
pub const MFCONNECTOR_DISPLAYPORT_EMBEDDED: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1473075571, 52807, 4569, [146, 219, 0, 11, 219, 40, 255, 152]);
pub const MFCONNECTOR_DISPLAYPORT_EXTERNAL: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1473075570, 52807, 4569, [146, 219, 0, 11, 219, 40, 255, 152]);
pub const MFCONNECTOR_DVI: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1473075564, 52807, 4569, [146, 219, 0, 11, 219, 40, 255, 152]);
pub const MFCONNECTOR_D_JPN: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1473075568, 52807, 4569, [146, 219, 0, 11, 219, 40, 255, 152]);
pub const MFCONNECTOR_HDMI: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1473075565, 52807, 4569, [146, 219, 0, 11, 219, 40, 255, 152]);
pub const MFCONNECTOR_LVDS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1473075566, 52807, 4569, [146, 219, 0, 11, 219, 40, 255, 152]);
pub const MFCONNECTOR_MIRACAST: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1473075575, 52807, 4569, [146, 219, 0, 11, 219, 40, 255, 152]);
pub const MFCONNECTOR_PCI: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2889543517, 52803, 4569, [146, 219, 0, 11, 219, 40, 255, 152]);
pub const MFCONNECTOR_PCIX: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2889543518, 52803, 4569, [146, 219, 0, 11, 219, 40, 255, 152]);
pub const MFCONNECTOR_PCI_Express: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2889543519, 52803, 4569, [146, 219, 0, 11, 219, 40, 255, 152]);
pub const MFCONNECTOR_SDI: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1473075569, 52807, 4569, [146, 219, 0, 11, 219, 40, 255, 152]);
pub const MFCONNECTOR_SPDIF: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(194291474, 44350, 19694, [131, 206, 206, 50, 227, 219, 101, 34]);
pub const MFCONNECTOR_SVIDEO: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1473075561, 52807, 4569, [146, 219, 0, 11, 219, 40, 255, 152]);
pub const MFCONNECTOR_TRANSPORT_AGNOSTIC_DIGITAL_MODE_A: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1473075576, 52807, 4569, [146, 219, 0, 11, 219, 40, 255, 152]);
pub const MFCONNECTOR_TRANSPORT_AGNOSTIC_DIGITAL_MODE_B: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1473075577, 52807, 4569, [146, 219, 0, 11, 219, 40, 255, 152]);
pub const MFCONNECTOR_UDI_EMBEDDED: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1473075573, 52807, 4569, [146, 219, 0, 11, 219, 40, 255, 152]);
pub const MFCONNECTOR_UDI_EXTERNAL: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1473075572, 52807, 4569, [146, 219, 0, 11, 219, 40, 255, 152]);
pub const MFCONNECTOR_UNKNOWN: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2889543516, 52803, 4569, [146, 219, 0, 11, 219, 40, 255, 152]);
pub const MFCONNECTOR_VGA: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1473075560, 52807, 4569, [146, 219, 0, 11, 219, 40, 255, 152]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFCONTENTPROTECTIONDEVICE_FUNCTIONID_START: u32 = 67108864u32;
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MFCONTENTPROTECTIONDEVICE_INPUT_DATA {
    pub HWProtectionFunctionID: u32,
    pub PrivateDataByteCount: u32,
    pub HWProtectionDataByteCount: u32,
    pub Reserved: u32,
    pub InputData: [u8; 4],
}
impl MFCONTENTPROTECTIONDEVICE_INPUT_DATA {}
impl ::core::default::Default for MFCONTENTPROTECTIONDEVICE_INPUT_DATA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MFCONTENTPROTECTIONDEVICE_INPUT_DATA {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFCONTENTPROTECTIONDEVICE_INPUT_DATA")
            .field("HWProtectionFunctionID", &self.HWProtectionFunctionID)
            .field("PrivateDataByteCount", &self.PrivateDataByteCount)
            .field("HWProtectionDataByteCount", &self.HWProtectionDataByteCount)
            .field("Reserved", &self.Reserved)
            .field("InputData", &self.InputData)
            .finish()
    }
}
impl ::core::cmp::PartialEq for MFCONTENTPROTECTIONDEVICE_INPUT_DATA {
    fn eq(&self, other: &Self) -> bool {
        self.HWProtectionFunctionID == other.HWProtectionFunctionID && self.PrivateDataByteCount == other.PrivateDataByteCount && self.HWProtectionDataByteCount == other.HWProtectionDataByteCount && self.Reserved == other.Reserved && self.InputData == other.InputData
    }
}
impl ::core::cmp::Eq for MFCONTENTPROTECTIONDEVICE_INPUT_DATA {}
unsafe impl ::windows::runtime::Abi for MFCONTENTPROTECTIONDEVICE_INPUT_DATA {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA {
    pub PrivateDataByteCount: u32,
    pub MaxHWProtectionDataByteCount: u32,
    pub HWProtectionDataByteCount: u32,
    pub Status: ::windows::runtime::HRESULT,
    pub TransportTimeInHundredsOfNanoseconds: i64,
    pub ExecutionTimeInHundredsOfNanoseconds: i64,
    pub OutputData: [u8; 4],
}
impl MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA {}
impl ::core::default::Default for MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA")
            .field("PrivateDataByteCount", &self.PrivateDataByteCount)
            .field("MaxHWProtectionDataByteCount", &self.MaxHWProtectionDataByteCount)
            .field("HWProtectionDataByteCount", &self.HWProtectionDataByteCount)
            .field("Status", &self.Status)
            .field("TransportTimeInHundredsOfNanoseconds", &self.TransportTimeInHundredsOfNanoseconds)
            .field("ExecutionTimeInHundredsOfNanoseconds", &self.ExecutionTimeInHundredsOfNanoseconds)
            .field("OutputData", &self.OutputData)
            .finish()
    }
}
impl ::core::cmp::PartialEq for MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA {
    fn eq(&self, other: &Self) -> bool {
        self.PrivateDataByteCount == other.PrivateDataByteCount && self.MaxHWProtectionDataByteCount == other.MaxHWProtectionDataByteCount && self.HWProtectionDataByteCount == other.HWProtectionDataByteCount && self.Status == other.Status && self.TransportTimeInHundredsOfNanoseconds == other.TransportTimeInHundredsOfNanoseconds && self.ExecutionTimeInHundredsOfNanoseconds == other.ExecutionTimeInHundredsOfNanoseconds && self.OutputData == other.OutputData
    }
}
impl ::core::cmp::Eq for MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA {}
unsafe impl ::windows::runtime::Abi for MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA {
    pub TaskIndex: u32,
    pub ClassName: [u16; 260],
    pub BasePriority: i32,
}
impl MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA {}
impl ::core::default::Default for MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA").field("TaskIndex", &self.TaskIndex).field("ClassName", &self.ClassName).field("BasePriority", &self.BasePriority).finish()
    }
}
impl ::core::cmp::PartialEq for MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA {
    fn eq(&self, other: &Self) -> bool {
        self.TaskIndex == other.TaskIndex && self.ClassName == other.ClassName && self.BasePriority == other.BasePriority
    }
}
impl ::core::cmp::Eq for MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA {}
unsafe impl ::windows::runtime::Abi for MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA_FUNCTIONID: u32 = 67108864u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Gdi`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
#[inline]
pub unsafe fn MFCalculateBitmapImageSize(pbmih: *const super::super::Graphics::Gdi::BITMAPINFOHEADER, cbbufsize: u32, pcbimagesize: *mut u32, pbknown: *mut super::super::Foundation::BOOL) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCalculateBitmapImageSize(pbmih: *const super::super::Graphics::Gdi::BITMAPINFOHEADER, cbbufsize: u32, pcbimagesize: *mut u32, pbknown: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT;
        }
        MFCalculateBitmapImageSize(::core::mem::transmute(pbmih), ::core::mem::transmute(cbbufsize), ::core::mem::transmute(pcbimagesize), ::core::mem::transmute(pbknown)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCalculateImageSize(guidsubtype: *const ::windows::runtime::GUID, unwidth: u32, unheight: u32) -> ::windows::runtime::Result<u32> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCalculateImageSize(guidsubtype: *const ::windows::runtime::GUID, unwidth: u32, unheight: u32, pcbimagesize: *mut u32) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCalculateImageSize(::core::mem::transmute(guidsubtype), ::core::mem::transmute(unwidth), ::core::mem::transmute(unheight), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MFCameraExtrinsic_CalibratedTransform {
    pub CalibrationId: ::windows::runtime::GUID,
    pub Position: MF_FLOAT3,
    pub Orientation: MF_QUATERNION,
}
impl MFCameraExtrinsic_CalibratedTransform {}
impl ::core::default::Default for MFCameraExtrinsic_CalibratedTransform {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MFCameraExtrinsic_CalibratedTransform {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFCameraExtrinsic_CalibratedTransform").field("CalibrationId", &self.CalibrationId).field("Position", &self.Position).field("Orientation", &self.Orientation).finish()
    }
}
impl ::core::cmp::PartialEq for MFCameraExtrinsic_CalibratedTransform {
    fn eq(&self, other: &Self) -> bool {
        self.CalibrationId == other.CalibrationId && self.Position == other.Position && self.Orientation == other.Orientation
    }
}
impl ::core::cmp::Eq for MFCameraExtrinsic_CalibratedTransform {}
unsafe impl ::windows::runtime::Abi for MFCameraExtrinsic_CalibratedTransform {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MFCameraExtrinsics {
    pub TransformCount: u32,
    pub CalibratedTransforms: [MFCameraExtrinsic_CalibratedTransform; 1],
}
impl MFCameraExtrinsics {}
impl ::core::default::Default for MFCameraExtrinsics {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MFCameraExtrinsics {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFCameraExtrinsics").field("TransformCount", &self.TransformCount).field("CalibratedTransforms", &self.CalibratedTransforms).finish()
    }
}
impl ::core::cmp::PartialEq for MFCameraExtrinsics {
    fn eq(&self, other: &Self) -> bool {
        self.TransformCount == other.TransformCount && self.CalibratedTransforms == other.CalibratedTransforms
    }
}
impl ::core::cmp::Eq for MFCameraExtrinsics {}
unsafe impl ::windows::runtime::Abi for MFCameraExtrinsics {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MFCameraIntrinsic_CameraModel {
    pub FocalLength_x: f32,
    pub FocalLength_y: f32,
    pub PrincipalPoint_x: f32,
    pub PrincipalPoint_y: f32,
}
impl MFCameraIntrinsic_CameraModel {}
impl ::core::default::Default for MFCameraIntrinsic_CameraModel {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MFCameraIntrinsic_CameraModel {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFCameraIntrinsic_CameraModel").field("FocalLength_x", &self.FocalLength_x).field("FocalLength_y", &self.FocalLength_y).field("PrincipalPoint_x", &self.PrincipalPoint_x).field("PrincipalPoint_y", &self.PrincipalPoint_y).finish()
    }
}
impl ::core::cmp::PartialEq for MFCameraIntrinsic_CameraModel {
    fn eq(&self, other: &Self) -> bool {
        self.FocalLength_x == other.FocalLength_x && self.FocalLength_y == other.FocalLength_y && self.PrincipalPoint_x == other.PrincipalPoint_x && self.PrincipalPoint_y == other.PrincipalPoint_y
    }
}
impl ::core::cmp::Eq for MFCameraIntrinsic_CameraModel {}
unsafe impl ::windows::runtime::Abi for MFCameraIntrinsic_CameraModel {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MFCameraIntrinsic_DistortionModel {
    pub Radial_k1: f32,
    pub Radial_k2: f32,
    pub Radial_k3: f32,
    pub Tangential_p1: f32,
    pub Tangential_p2: f32,
}
impl MFCameraIntrinsic_DistortionModel {}
impl ::core::default::Default for MFCameraIntrinsic_DistortionModel {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MFCameraIntrinsic_DistortionModel {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFCameraIntrinsic_DistortionModel").field("Radial_k1", &self.Radial_k1).field("Radial_k2", &self.Radial_k2).field("Radial_k3", &self.Radial_k3).field("Tangential_p1", &self.Tangential_p1).field("Tangential_p2", &self.Tangential_p2).finish()
    }
}
impl ::core::cmp::PartialEq for MFCameraIntrinsic_DistortionModel {
    fn eq(&self, other: &Self) -> bool {
        self.Radial_k1 == other.Radial_k1 && self.Radial_k2 == other.Radial_k2 && self.Radial_k3 == other.Radial_k3 && self.Tangential_p1 == other.Tangential_p1 && self.Tangential_p2 == other.Tangential_p2
    }
}
impl ::core::cmp::Eq for MFCameraIntrinsic_DistortionModel {}
unsafe impl ::windows::runtime::Abi for MFCameraIntrinsic_DistortionModel {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MFCameraIntrinsic_DistortionModel6KT {
    pub Radial_k1: f32,
    pub Radial_k2: f32,
    pub Radial_k3: f32,
    pub Radial_k4: f32,
    pub Radial_k5: f32,
    pub Radial_k6: f32,
    pub Tangential_p1: f32,
    pub Tangential_p2: f32,
}
impl MFCameraIntrinsic_DistortionModel6KT {}
impl ::core::default::Default for MFCameraIntrinsic_DistortionModel6KT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MFCameraIntrinsic_DistortionModel6KT {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFCameraIntrinsic_DistortionModel6KT")
            .field("Radial_k1", &self.Radial_k1)
            .field("Radial_k2", &self.Radial_k2)
            .field("Radial_k3", &self.Radial_k3)
            .field("Radial_k4", &self.Radial_k4)
            .field("Radial_k5", &self.Radial_k5)
            .field("Radial_k6", &self.Radial_k6)
            .field("Tangential_p1", &self.Tangential_p1)
            .field("Tangential_p2", &self.Tangential_p2)
            .finish()
    }
}
impl ::core::cmp::PartialEq for MFCameraIntrinsic_DistortionModel6KT {
    fn eq(&self, other: &Self) -> bool {
        self.Radial_k1 == other.Radial_k1 && self.Radial_k2 == other.Radial_k2 && self.Radial_k3 == other.Radial_k3 && self.Radial_k4 == other.Radial_k4 && self.Radial_k5 == other.Radial_k5 && self.Radial_k6 == other.Radial_k6 && self.Tangential_p1 == other.Tangential_p1 && self.Tangential_p2 == other.Tangential_p2
    }
}
impl ::core::cmp::Eq for MFCameraIntrinsic_DistortionModel6KT {}
unsafe impl ::windows::runtime::Abi for MFCameraIntrinsic_DistortionModel6KT {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MFCameraIntrinsic_DistortionModelArcTan {
    pub Radial_k0: f32,
    pub DistortionCenter_x: f32,
    pub DistortionCenter_y: f32,
    pub Tangential_x: f32,
    pub Tangential_y: f32,
}
impl MFCameraIntrinsic_DistortionModelArcTan {}
impl ::core::default::Default for MFCameraIntrinsic_DistortionModelArcTan {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MFCameraIntrinsic_DistortionModelArcTan {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFCameraIntrinsic_DistortionModelArcTan").field("Radial_k0", &self.Radial_k0).field("DistortionCenter_x", &self.DistortionCenter_x).field("DistortionCenter_y", &self.DistortionCenter_y).field("Tangential_x", &self.Tangential_x).field("Tangential_y", &self.Tangential_y).finish()
    }
}
impl ::core::cmp::PartialEq for MFCameraIntrinsic_DistortionModelArcTan {
    fn eq(&self, other: &Self) -> bool {
        self.Radial_k0 == other.Radial_k0 && self.DistortionCenter_x == other.DistortionCenter_x && self.DistortionCenter_y == other.DistortionCenter_y && self.Tangential_x == other.Tangential_x && self.Tangential_y == other.Tangential_y
    }
}
impl ::core::cmp::Eq for MFCameraIntrinsic_DistortionModelArcTan {}
unsafe impl ::windows::runtime::Abi for MFCameraIntrinsic_DistortionModelArcTan {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFCameraIntrinsic_DistortionModelType(pub i32);
pub const MFCameraIntrinsic_DistortionModelType_6KT: MFCameraIntrinsic_DistortionModelType = MFCameraIntrinsic_DistortionModelType(0i32);
pub const MFCameraIntrinsic_DistortionModelType_ArcTan: MFCameraIntrinsic_DistortionModelType = MFCameraIntrinsic_DistortionModelType(1i32);
impl ::core::convert::From<i32> for MFCameraIntrinsic_DistortionModelType {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFCameraIntrinsic_DistortionModelType {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MFCameraIntrinsic_PinholeCameraModel {
    pub FocalLength: MF_FLOAT2,
    pub PrincipalPoint: MF_FLOAT2,
}
impl MFCameraIntrinsic_PinholeCameraModel {}
impl ::core::default::Default for MFCameraIntrinsic_PinholeCameraModel {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MFCameraIntrinsic_PinholeCameraModel {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFCameraIntrinsic_PinholeCameraModel").field("FocalLength", &self.FocalLength).field("PrincipalPoint", &self.PrincipalPoint).finish()
    }
}
impl ::core::cmp::PartialEq for MFCameraIntrinsic_PinholeCameraModel {
    fn eq(&self, other: &Self) -> bool {
        self.FocalLength == other.FocalLength && self.PrincipalPoint == other.PrincipalPoint
    }
}
impl ::core::cmp::Eq for MFCameraIntrinsic_PinholeCameraModel {}
unsafe impl ::windows::runtime::Abi for MFCameraIntrinsic_PinholeCameraModel {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFCameraOcclusionState(pub i32);
pub const MFCameraOcclusionState_Open: MFCameraOcclusionState = MFCameraOcclusionState(0i32);
pub const MFCameraOcclusionState_OccludedByLid: MFCameraOcclusionState = MFCameraOcclusionState(1i32);
pub const MFCameraOcclusionState_OccludedByCameraHardware: MFCameraOcclusionState = MFCameraOcclusionState(2i32);
impl ::core::convert::From<i32> for MFCameraOcclusionState {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFCameraOcclusionState {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCancelCreateFile<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(pcancelcookie: Param0) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCancelCreateFile(pcancelcookie: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        MFCancelCreateFile(pcancelcookie.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCancelWorkItem(key: u64) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCancelWorkItem(key: u64) -> ::windows::runtime::HRESULT;
        }
        MFCancelWorkItem(::core::mem::transmute(key)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFCombineSamples<'a, Param0: ::windows::runtime::IntoParam<'a, IMFSample>, Param1: ::windows::runtime::IntoParam<'a, IMFSample>>(psample: Param0, psampletoadd: Param1, dwmaxmergeddurationinms: u32) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCombineSamples(psample: ::windows::runtime::RawPtr, psampletoadd: ::windows::runtime::RawPtr, dwmaxmergeddurationinms: u32, pmerged: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCombineSamples(psample.into_param().abi(), psampletoadd.into_param().abi(), ::core::mem::transmute(dwmaxmergeddurationinms), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFCompareFullToPartialMediaType<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaType>, Param1: ::windows::runtime::IntoParam<'a, IMFMediaType>>(pmftypefull: Param0, pmftypepartial: Param1) -> super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCompareFullToPartialMediaType(pmftypefull: ::windows::runtime::RawPtr, pmftypepartial: ::windows::runtime::RawPtr) -> super::super::Foundation::BOOL;
        }
        ::core::mem::transmute(MFCompareFullToPartialMediaType(pmftypefull.into_param().abi(), pmftypepartial.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFConvertColorInfoFromDXVA(ptoformat: *mut MFVIDEOFORMAT, dwfromdxva: u32) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFConvertColorInfoFromDXVA(ptoformat: *mut MFVIDEOFORMAT, dwfromdxva: u32) -> ::windows::runtime::HRESULT;
        }
        MFConvertColorInfoFromDXVA(::core::mem::transmute(ptoformat), ::core::mem::transmute(dwfromdxva)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFConvertColorInfoToDXVA(pdwtodxva: *mut u32, pfromformat: *const MFVIDEOFORMAT) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFConvertColorInfoToDXVA(pdwtodxva: *mut u32, pfromformat: *const MFVIDEOFORMAT) -> ::windows::runtime::HRESULT;
        }
        MFConvertColorInfoToDXVA(::core::mem::transmute(pdwtodxva), ::core::mem::transmute(pfromformat)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFConvertFromFP16Array(pdest: *mut f32, psrc: *const u16, dwcount: u32) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFConvertFromFP16Array(pdest: *mut f32, psrc: *const u16, dwcount: u32) -> ::windows::runtime::HRESULT;
        }
        MFConvertFromFP16Array(::core::mem::transmute(pdest), ::core::mem::transmute(psrc), ::core::mem::transmute(dwcount)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFConvertToFP16Array(pdest: *mut u16, psrc: *const f32, dwcount: u32) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFConvertToFP16Array(pdest: *mut u16, psrc: *const f32, dwcount: u32) -> ::windows::runtime::HRESULT;
        }
        MFConvertToFP16Array(::core::mem::transmute(pdest), ::core::mem::transmute(psrc), ::core::mem::transmute(dwcount)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCopyImage(pdest: *mut u8, ldeststride: i32, psrc: *const u8, lsrcstride: i32, dwwidthinbytes: u32, dwlines: u32) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCopyImage(pdest: *mut u8, ldeststride: i32, psrc: *const u8, lsrcstride: i32, dwwidthinbytes: u32, dwlines: u32) -> ::windows::runtime::HRESULT;
        }
        MFCopyImage(::core::mem::transmute(pdest), ::core::mem::transmute(ldeststride), ::core::mem::transmute(psrc), ::core::mem::transmute(lsrcstride), ::core::mem::transmute(dwwidthinbytes), ::core::mem::transmute(dwlines)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFCreate2DMediaBuffer<'a, Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(dwwidth: u32, dwheight: u32, dwfourcc: u32, fbottomup: Param3) -> ::windows::runtime::Result<IMFMediaBuffer> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreate2DMediaBuffer(dwwidth: u32, dwheight: u32, dwfourcc: u32, fbottomup: super::super::Foundation::BOOL, ppbuffer: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFMediaBuffer as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreate2DMediaBuffer(::core::mem::transmute(dwwidth), ::core::mem::transmute(dwheight), ::core::mem::transmute(dwfourcc), fbottomup.into_param().abi(), &mut result__).from_abi::<IMFMediaBuffer>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreate3GPMediaSink<'a, Param0: ::windows::runtime::IntoParam<'a, IMFByteStream>, Param1: ::windows::runtime::IntoParam<'a, IMFMediaType>, Param2: ::windows::runtime::IntoParam<'a, IMFMediaType>>(pibytestream: Param0, pvideomediatype: Param1, paudiomediatype: Param2) -> ::windows::runtime::Result<IMFMediaSink> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreate3GPMediaSink(pibytestream: ::windows::runtime::RawPtr, pvideomediatype: ::windows::runtime::RawPtr, paudiomediatype: ::windows::runtime::RawPtr, ppimediasink: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFMediaSink as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreate3GPMediaSink(pibytestream.into_param().abi(), pvideomediatype.into_param().abi(), paudiomediatype.into_param().abi(), &mut result__).from_abi::<IMFMediaSink>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateAC3MediaSink<'a, Param0: ::windows::runtime::IntoParam<'a, IMFByteStream>, Param1: ::windows::runtime::IntoParam<'a, IMFMediaType>>(ptargetbytestream: Param0, paudiomediatype: Param1) -> ::windows::runtime::Result<IMFMediaSink> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateAC3MediaSink(ptargetbytestream: ::windows::runtime::RawPtr, paudiomediatype: ::windows::runtime::RawPtr, ppmediasink: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFMediaSink as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateAC3MediaSink(ptargetbytestream.into_param().abi(), paudiomediatype.into_param().abi(), &mut result__).from_abi::<IMFMediaSink>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateADTSMediaSink<'a, Param0: ::windows::runtime::IntoParam<'a, IMFByteStream>, Param1: ::windows::runtime::IntoParam<'a, IMFMediaType>>(ptargetbytestream: Param0, paudiomediatype: Param1) -> ::windows::runtime::Result<IMFMediaSink> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateADTSMediaSink(ptargetbytestream: ::windows::runtime::RawPtr, paudiomediatype: ::windows::runtime::RawPtr, ppmediasink: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFMediaSink as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateADTSMediaSink(ptargetbytestream.into_param().abi(), paudiomediatype.into_param().abi(), &mut result__).from_abi::<IMFMediaSink>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_DirectShow`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectShow"))]
#[inline]
pub unsafe fn MFCreateAMMediaTypeFromMFMediaType<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaType>, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::GUID>>(pmftype: Param0, guidformatblocktype: Param1, ppamtype: *mut *mut super::super::Graphics::DirectShow::AM_MEDIA_TYPE) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateAMMediaTypeFromMFMediaType(pmftype: ::windows::runtime::RawPtr, guidformatblocktype: ::windows::runtime::GUID, ppamtype: *mut *mut super::super::Graphics::DirectShow::AM_MEDIA_TYPE) -> ::windows::runtime::HRESULT;
        }
        MFCreateAMMediaTypeFromMFMediaType(pmftype.into_param().abi(), guidformatblocktype.into_param().abi(), ::core::mem::transmute(ppamtype)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateASFContentInfo() -> ::windows::runtime::Result<IMFASFContentInfo> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateASFContentInfo(ppicontentinfo: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFASFContentInfo as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateASFContentInfo(&mut result__).from_abi::<IMFASFContentInfo>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateASFIndexer() -> ::windows::runtime::Result<IMFASFIndexer> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateASFIndexer(ppiindexer: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFASFIndexer as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateASFIndexer(&mut result__).from_abi::<IMFASFIndexer>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateASFIndexerByteStream<'a, Param0: ::windows::runtime::IntoParam<'a, IMFByteStream>>(picontentbytestream: Param0, cbindexstartoffset: u64) -> ::windows::runtime::Result<IMFByteStream> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateASFIndexerByteStream(picontentbytestream: ::windows::runtime::RawPtr, cbindexstartoffset: u64, piindexbytestream: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFByteStream as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateASFIndexerByteStream(picontentbytestream.into_param().abi(), ::core::mem::transmute(cbindexstartoffset), &mut result__).from_abi::<IMFByteStream>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateASFMediaSink<'a, Param0: ::windows::runtime::IntoParam<'a, IMFByteStream>>(pibytestream: Param0) -> ::windows::runtime::Result<IMFMediaSink> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateASFMediaSink(pibytestream: ::windows::runtime::RawPtr, ppimediasink: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFMediaSink as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateASFMediaSink(pibytestream.into_param().abi(), &mut result__).from_abi::<IMFMediaSink>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFCreateASFMediaSinkActivate<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, IMFASFContentInfo>>(pwszfilename: Param0, pcontentinfo: Param1) -> ::windows::runtime::Result<IMFActivate> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateASFMediaSinkActivate(pwszfilename: super::super::Foundation::PWSTR, pcontentinfo: ::windows::runtime::RawPtr, ppiactivate: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFActivate as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateASFMediaSinkActivate(pwszfilename.into_param().abi(), pcontentinfo.into_param().abi(), &mut result__).from_abi::<IMFActivate>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateASFMultiplexer() -> ::windows::runtime::Result<IMFASFMultiplexer> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateASFMultiplexer(ppimultiplexer: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFASFMultiplexer as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateASFMultiplexer(&mut result__).from_abi::<IMFASFMultiplexer>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateASFProfile() -> ::windows::runtime::Result<IMFASFProfile> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateASFProfile(ppiprofile: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFASFProfile as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateASFProfile(&mut result__).from_abi::<IMFASFProfile>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateASFProfileFromPresentationDescriptor<'a, Param0: ::windows::runtime::IntoParam<'a, IMFPresentationDescriptor>>(pipd: Param0) -> ::windows::runtime::Result<IMFASFProfile> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateASFProfileFromPresentationDescriptor(pipd: ::windows::runtime::RawPtr, ppiprofile: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFASFProfile as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateASFProfileFromPresentationDescriptor(pipd.into_param().abi(), &mut result__).from_abi::<IMFASFProfile>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateASFSplitter() -> ::windows::runtime::Result<IMFASFSplitter> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateASFSplitter(ppisplitter: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFASFSplitter as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateASFSplitter(&mut result__).from_abi::<IMFASFSplitter>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateASFStreamSelector<'a, Param0: ::windows::runtime::IntoParam<'a, IMFASFProfile>>(piasfprofile: Param0) -> ::windows::runtime::Result<IMFASFStreamSelector> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateASFStreamSelector(piasfprofile: ::windows::runtime::RawPtr, ppselector: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFASFStreamSelector as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateASFStreamSelector(piasfprofile.into_param().abi(), &mut result__).from_abi::<IMFASFStreamSelector>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateASFStreamingMediaSink<'a, Param0: ::windows::runtime::IntoParam<'a, IMFByteStream>>(pibytestream: Param0) -> ::windows::runtime::Result<IMFMediaSink> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateASFStreamingMediaSink(pibytestream: ::windows::runtime::RawPtr, ppimediasink: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFMediaSink as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateASFStreamingMediaSink(pibytestream.into_param().abi(), &mut result__).from_abi::<IMFMediaSink>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateASFStreamingMediaSinkActivate<'a, Param0: ::windows::runtime::IntoParam<'a, IMFActivate>, Param1: ::windows::runtime::IntoParam<'a, IMFASFContentInfo>>(pbytestreamactivate: Param0, pcontentinfo: Param1) -> ::windows::runtime::Result<IMFActivate> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateASFStreamingMediaSinkActivate(pbytestreamactivate: ::windows::runtime::RawPtr, pcontentinfo: ::windows::runtime::RawPtr, ppiactivate: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFActivate as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateASFStreamingMediaSinkActivate(pbytestreamactivate.into_param().abi(), pcontentinfo.into_param().abi(), &mut result__).from_abi::<IMFActivate>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateAVIMediaSink<'a, Param0: ::windows::runtime::IntoParam<'a, IMFByteStream>, Param1: ::windows::runtime::IntoParam<'a, IMFMediaType>, Param2: ::windows::runtime::IntoParam<'a, IMFMediaType>>(pibytestream: Param0, pvideomediatype: Param1, paudiomediatype: Param2) -> ::windows::runtime::Result<IMFMediaSink> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateAVIMediaSink(pibytestream: ::windows::runtime::RawPtr, pvideomediatype: ::windows::runtime::RawPtr, paudiomediatype: ::windows::runtime::RawPtr, ppimediasink: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFMediaSink as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateAVIMediaSink(pibytestream.into_param().abi(), pvideomediatype.into_param().abi(), paudiomediatype.into_param().abi(), &mut result__).from_abi::<IMFMediaSink>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateAggregateSource<'a, Param0: ::windows::runtime::IntoParam<'a, IMFCollection>>(psourcecollection: Param0) -> ::windows::runtime::Result<IMFMediaSource> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateAggregateSource(psourcecollection: ::windows::runtime::RawPtr, ppaggsource: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFMediaSource as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateAggregateSource(psourcecollection.into_param().abi(), &mut result__).from_abi::<IMFMediaSource>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateAlignedMemoryBuffer(cbmaxlength: u32, cbaligment: u32) -> ::windows::runtime::Result<IMFMediaBuffer> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateAlignedMemoryBuffer(cbmaxlength: u32, cbaligment: u32, ppbuffer: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFMediaBuffer as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateAlignedMemoryBuffer(::core::mem::transmute(cbmaxlength), ::core::mem::transmute(cbaligment), &mut result__).from_abi::<IMFMediaBuffer>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateAsyncResult<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>, Param1: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param2: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(punkobject: Param0, pcallback: Param1, punkstate: Param2) -> ::windows::runtime::Result<IMFAsyncResult> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateAsyncResult(punkobject: ::windows::runtime::RawPtr, pcallback: ::windows::runtime::RawPtr, punkstate: ::windows::runtime::RawPtr, ppasyncresult: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFAsyncResult as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateAsyncResult(punkobject.into_param().abi(), pcallback.into_param().abi(), punkstate.into_param().abi(), &mut result__).from_abi::<IMFAsyncResult>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateAttributes(ppmfattributes: *mut ::core::option::Option<IMFAttributes>, cinitialsize: u32) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateAttributes(ppmfattributes: *mut ::windows::runtime::RawPtr, cinitialsize: u32) -> ::windows::runtime::HRESULT;
        }
        MFCreateAttributes(::core::mem::transmute(ppmfattributes), ::core::mem::transmute(cinitialsize)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Media_Multimedia`*"]
#[cfg(feature = "Win32_Media_Multimedia")]
#[inline]
pub unsafe fn MFCreateAudioMediaType(paudioformat: *const super::Multimedia::WAVEFORMATEX) -> ::windows::runtime::Result<IMFAudioMediaType> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateAudioMediaType(paudioformat: *const super::Multimedia::WAVEFORMATEX, ppiaudiomediatype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFAudioMediaType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateAudioMediaType(::core::mem::transmute(paudioformat), &mut result__).from_abi::<IMFAudioMediaType>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateAudioRenderer<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(paudioattributes: Param0) -> ::windows::runtime::Result<IMFMediaSink> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateAudioRenderer(paudioattributes: ::windows::runtime::RawPtr, ppsink: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFMediaSink as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateAudioRenderer(paudioattributes.into_param().abi(), &mut result__).from_abi::<IMFMediaSink>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateAudioRendererActivate() -> ::windows::runtime::Result<IMFActivate> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateAudioRendererActivate(ppactivate: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFActivate as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateAudioRendererActivate(&mut result__).from_abi::<IMFActivate>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFCreateCameraOcclusionStateMonitor<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, IMFCameraOcclusionStateReportCallback>>(symboliclink: Param0, callback: Param1) -> ::windows::runtime::Result<IMFCameraOcclusionStateMonitor> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateCameraOcclusionStateMonitor(symboliclink: super::super::Foundation::PWSTR, callback: ::windows::runtime::RawPtr, occlusionstatemonitor: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFCameraOcclusionStateMonitor as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateCameraOcclusionStateMonitor(symboliclink.into_param().abi(), callback.into_param().abi(), &mut result__).from_abi::<IMFCameraOcclusionStateMonitor>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateCollection() -> ::windows::runtime::Result<IMFCollection> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateCollection(ppimfcollection: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFCollection as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateCollection(&mut result__).from_abi::<IMFCollection>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateContentDecryptorContext<'a, Param1: ::windows::runtime::IntoParam<'a, IMFDXGIDeviceManager>, Param2: ::windows::runtime::IntoParam<'a, IMFContentProtectionDevice>>(guidmediaprotectionsystemid: *const ::windows::runtime::GUID, pd3dmanager: Param1, pcontentprotectiondevice: Param2) -> ::windows::runtime::Result<IMFContentDecryptorContext> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateContentDecryptorContext(guidmediaprotectionsystemid: *const ::windows::runtime::GUID, pd3dmanager: ::windows::runtime::RawPtr, pcontentprotectiondevice: ::windows::runtime::RawPtr, ppcontentdecryptorcontext: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFContentDecryptorContext as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateContentDecryptorContext(::core::mem::transmute(guidmediaprotectionsystemid), pd3dmanager.into_param().abi(), pcontentprotectiondevice.into_param().abi(), &mut result__).from_abi::<IMFContentDecryptorContext>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateContentProtectionDevice(protectionsystemid: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<IMFContentProtectionDevice> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateContentProtectionDevice(protectionsystemid: *const ::windows::runtime::GUID, contentprotectiondevice: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFContentProtectionDevice as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateContentProtectionDevice(::core::mem::transmute(protectionsystemid), &mut result__).from_abi::<IMFContentProtectionDevice>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateCredentialCache() -> ::windows::runtime::Result<IMFNetCredentialCache> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateCredentialCache(ppcache: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFNetCredentialCache as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateCredentialCache(&mut result__).from_abi::<IMFNetCredentialCache>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateDXGIDeviceManager(resettoken: *mut u32, ppdevicemanager: *mut ::core::option::Option<IMFDXGIDeviceManager>) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateDXGIDeviceManager(resettoken: *mut u32, ppdevicemanager: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        MFCreateDXGIDeviceManager(::core::mem::transmute(resettoken), ::core::mem::transmute(ppdevicemanager)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFCreateDXGISurfaceBuffer<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>, Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(riid: *const ::windows::runtime::GUID, punksurface: Param1, usubresourceindex: u32, fbottomupwhenlinear: Param3) -> ::windows::runtime::Result<IMFMediaBuffer> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateDXGISurfaceBuffer(riid: *const ::windows::runtime::GUID, punksurface: ::windows::runtime::RawPtr, usubresourceindex: u32, fbottomupwhenlinear: super::super::Foundation::BOOL, ppbuffer: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFMediaBuffer as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateDXGISurfaceBuffer(::core::mem::transmute(riid), punksurface.into_param().abi(), ::core::mem::transmute(usubresourceindex), fbottomupwhenlinear.into_param().abi(), &mut result__).from_abi::<IMFMediaBuffer>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFCreateDXSurfaceBuffer<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>, Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(riid: *const ::windows::runtime::GUID, punksurface: Param1, fbottomupwhenlinear: Param2) -> ::windows::runtime::Result<IMFMediaBuffer> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateDXSurfaceBuffer(riid: *const ::windows::runtime::GUID, punksurface: ::windows::runtime::RawPtr, fbottomupwhenlinear: super::super::Foundation::BOOL, ppbuffer: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFMediaBuffer as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateDXSurfaceBuffer(::core::mem::transmute(riid), punksurface.into_param().abi(), fbottomupwhenlinear.into_param().abi(), &mut result__).from_abi::<IMFMediaBuffer>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateDeviceSource<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(pattributes: Param0) -> ::windows::runtime::Result<IMFMediaSource> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateDeviceSource(pattributes: ::windows::runtime::RawPtr, ppsource: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFMediaSource as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateDeviceSource(pattributes.into_param().abi(), &mut result__).from_abi::<IMFMediaSource>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateDeviceSourceActivate<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(pattributes: Param0) -> ::windows::runtime::Result<IMFActivate> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateDeviceSourceActivate(pattributes: ::windows::runtime::RawPtr, ppactivate: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFActivate as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateDeviceSourceActivate(pattributes.into_param().abi(), &mut result__).from_abi::<IMFActivate>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
#[inline]
pub unsafe fn MFCreateEncryptedMediaExtensionsStoreActivate<'a, Param0: ::windows::runtime::IntoParam<'a, IMFPMPHostApp>, Param1: ::windows::runtime::IntoParam<'a, super::super::System::Com::IStream>, Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(pmphost: Param0, objectstream: Param1, classid: Param2) -> ::windows::runtime::Result<IMFActivate> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateEncryptedMediaExtensionsStoreActivate(pmphost: ::windows::runtime::RawPtr, objectstream: ::windows::runtime::RawPtr, classid: super::super::Foundation::PWSTR, activate: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFActivate as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateEncryptedMediaExtensionsStoreActivate(pmphost.into_param().abi(), objectstream.into_param().abi(), classid.into_param().abi(), &mut result__).from_abi::<IMFActivate>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateEventQueue() -> ::windows::runtime::Result<IMFMediaEventQueue> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateEventQueue(ppmediaeventqueue: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFMediaEventQueue as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateEventQueue(&mut result__).from_abi::<IMFMediaEventQueue>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateExtendedCameraIntrinsicModel(distortionmodeltype: MFCameraIntrinsic_DistortionModelType) -> ::windows::runtime::Result<IMFExtendedCameraIntrinsicModel> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateExtendedCameraIntrinsicModel(distortionmodeltype: MFCameraIntrinsic_DistortionModelType, ppextendedcameraintrinsicmodel: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFExtendedCameraIntrinsicModel as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateExtendedCameraIntrinsicModel(::core::mem::transmute(distortionmodeltype), &mut result__).from_abi::<IMFExtendedCameraIntrinsicModel>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateExtendedCameraIntrinsics() -> ::windows::runtime::Result<IMFExtendedCameraIntrinsics> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateExtendedCameraIntrinsics(ppextendedcameraintrinsics: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFExtendedCameraIntrinsics as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateExtendedCameraIntrinsics(&mut result__).from_abi::<IMFExtendedCameraIntrinsics>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateFMPEG4MediaSink<'a, Param0: ::windows::runtime::IntoParam<'a, IMFByteStream>, Param1: ::windows::runtime::IntoParam<'a, IMFMediaType>, Param2: ::windows::runtime::IntoParam<'a, IMFMediaType>>(pibytestream: Param0, pvideomediatype: Param1, paudiomediatype: Param2) -> ::windows::runtime::Result<IMFMediaSink> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateFMPEG4MediaSink(pibytestream: ::windows::runtime::RawPtr, pvideomediatype: ::windows::runtime::RawPtr, paudiomediatype: ::windows::runtime::RawPtr, ppimediasink: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFMediaSink as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateFMPEG4MediaSink(pibytestream.into_param().abi(), pvideomediatype.into_param().abi(), paudiomediatype.into_param().abi(), &mut result__).from_abi::<IMFMediaSink>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFCreateFile<'a, Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(accessmode: MF_FILE_ACCESSMODE, openmode: MF_FILE_OPENMODE, fflags: MF_FILE_FLAGS, pwszfileurl: Param3) -> ::windows::runtime::Result<IMFByteStream> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateFile(accessmode: MF_FILE_ACCESSMODE, openmode: MF_FILE_OPENMODE, fflags: MF_FILE_FLAGS, pwszfileurl: super::super::Foundation::PWSTR, ppibytestream: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFByteStream as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateFile(::core::mem::transmute(accessmode), ::core::mem::transmute(openmode), ::core::mem::transmute(fflags), pwszfileurl.into_param().abi(), &mut result__).from_abi::<IMFByteStream>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_DirectShow`*"]
#[cfg(feature = "Win32_Graphics_DirectShow")]
#[inline]
pub unsafe fn MFCreateLegacyMediaBufferOnMFMediaBuffer<'a, Param0: ::windows::runtime::IntoParam<'a, IMFSample>, Param1: ::windows::runtime::IntoParam<'a, IMFMediaBuffer>>(psample: Param0, pmfmediabuffer: Param1, cboffset: u32) -> ::windows::runtime::Result<super::super::Graphics::DirectShow::IMediaBuffer> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateLegacyMediaBufferOnMFMediaBuffer(psample: ::windows::runtime::RawPtr, pmfmediabuffer: ::windows::runtime::RawPtr, cboffset: u32, ppmediabuffer: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <super::super::Graphics::DirectShow::IMediaBuffer as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateLegacyMediaBufferOnMFMediaBuffer(psample.into_param().abi(), pmfmediabuffer.into_param().abi(), ::core::mem::transmute(cboffset), &mut result__).from_abi::<super::super::Graphics::DirectShow::IMediaBuffer>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_System_Com`*"]
#[cfg(feature = "Win32_System_Com")]
#[inline]
pub unsafe fn MFCreateMFByteStreamOnStream<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::IStream>>(pstream: Param0) -> ::windows::runtime::Result<IMFByteStream> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateMFByteStreamOnStream(pstream: ::windows::runtime::RawPtr, ppbytestream: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFByteStream as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateMFByteStreamOnStream(pstream.into_param().abi(), &mut result__).from_abi::<IMFByteStream>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateMFByteStreamOnStreamEx<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(punkstream: Param0) -> ::windows::runtime::Result<IMFByteStream> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateMFByteStreamOnStreamEx(punkstream: ::windows::runtime::RawPtr, ppbytestream: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFByteStream as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateMFByteStreamOnStreamEx(punkstream.into_param().abi(), &mut result__).from_abi::<IMFByteStream>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateMFByteStreamWrapper<'a, Param0: ::windows::runtime::IntoParam<'a, IMFByteStream>>(pstream: Param0) -> ::windows::runtime::Result<IMFByteStream> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateMFByteStreamWrapper(pstream: ::windows::runtime::RawPtr, ppstreamwrapper: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFByteStream as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateMFByteStreamWrapper(pstream.into_param().abi(), &mut result__).from_abi::<IMFByteStream>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFCreateMFVideoFormatFromMFMediaType<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaType>>(pmftype: Param0, ppmfvf: *mut *mut MFVIDEOFORMAT, pcbsize: *mut u32) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateMFVideoFormatFromMFMediaType(pmftype: ::windows::runtime::RawPtr, ppmfvf: *mut *mut MFVIDEOFORMAT, pcbsize: *mut u32) -> ::windows::runtime::HRESULT;
        }
        MFCreateMFVideoFormatFromMFMediaType(pmftype.into_param().abi(), ::core::mem::transmute(ppmfvf), ::core::mem::transmute(pcbsize)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateMP3MediaSink<'a, Param0: ::windows::runtime::IntoParam<'a, IMFByteStream>>(ptargetbytestream: Param0) -> ::windows::runtime::Result<IMFMediaSink> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateMP3MediaSink(ptargetbytestream: ::windows::runtime::RawPtr, ppmediasink: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFMediaSink as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateMP3MediaSink(ptargetbytestream.into_param().abi(), &mut result__).from_abi::<IMFMediaSink>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateMPEG4MediaSink<'a, Param0: ::windows::runtime::IntoParam<'a, IMFByteStream>, Param1: ::windows::runtime::IntoParam<'a, IMFMediaType>, Param2: ::windows::runtime::IntoParam<'a, IMFMediaType>>(pibytestream: Param0, pvideomediatype: Param1, paudiomediatype: Param2) -> ::windows::runtime::Result<IMFMediaSink> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateMPEG4MediaSink(pibytestream: ::windows::runtime::RawPtr, pvideomediatype: ::windows::runtime::RawPtr, paudiomediatype: ::windows::runtime::RawPtr, ppimediasink: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFMediaSink as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateMPEG4MediaSink(pibytestream.into_param().abi(), pvideomediatype.into_param().abi(), paudiomediatype.into_param().abi(), &mut result__).from_abi::<IMFMediaSink>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateMediaBufferFromMediaType<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaType>>(pmediatype: Param0, llduration: i64, dwminlength: u32, dwminalignment: u32) -> ::windows::runtime::Result<IMFMediaBuffer> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateMediaBufferFromMediaType(pmediatype: ::windows::runtime::RawPtr, llduration: i64, dwminlength: u32, dwminalignment: u32, ppbuffer: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFMediaBuffer as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateMediaBufferFromMediaType(pmediatype.into_param().abi(), ::core::mem::transmute(llduration), ::core::mem::transmute(dwminlength), ::core::mem::transmute(dwminalignment), &mut result__).from_abi::<IMFMediaBuffer>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateMediaBufferWrapper<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaBuffer>>(pbuffer: Param0, cboffset: u32, dwlength: u32) -> ::windows::runtime::Result<IMFMediaBuffer> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateMediaBufferWrapper(pbuffer: ::windows::runtime::RawPtr, cboffset: u32, dwlength: u32, ppbuffer: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFMediaBuffer as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateMediaBufferWrapper(pbuffer.into_param().abi(), ::core::mem::transmute(cboffset), ::core::mem::transmute(dwlength), &mut result__).from_abi::<IMFMediaBuffer>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
#[inline]
pub unsafe fn MFCreateMediaEvent(met: u32, guidextendedtype: *const ::windows::runtime::GUID, hrstatus: ::windows::runtime::HRESULT, pvvalue: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::runtime::Result<IMFMediaEvent> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateMediaEvent(met: u32, guidextendedtype: *const ::windows::runtime::GUID, hrstatus: ::windows::runtime::HRESULT, pvvalue: *const ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>, ppevent: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFMediaEvent as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateMediaEvent(::core::mem::transmute(met), ::core::mem::transmute(guidextendedtype), ::core::mem::transmute(hrstatus), ::core::mem::transmute(pvvalue), &mut result__).from_abi::<IMFMediaEvent>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFCreateMediaExtensionActivate<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(szactivatableclassid: Param0, pconfiguration: Param1, riid: *const ::windows::runtime::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateMediaExtensionActivate(szactivatableclassid: super::super::Foundation::PWSTR, pconfiguration: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT;
        }
        MFCreateMediaExtensionActivate(szactivatableclassid.into_param().abi(), pconfiguration.into_param().abi(), ::core::mem::transmute(riid), ::core::mem::transmute(ppvobject)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateMediaSession<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(pconfiguration: Param0) -> ::windows::runtime::Result<IMFMediaSession> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateMediaSession(pconfiguration: ::windows::runtime::RawPtr, ppmediasession: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFMediaSession as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateMediaSession(pconfiguration.into_param().abi(), &mut result__).from_abi::<IMFMediaSession>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateMediaType() -> ::windows::runtime::Result<IMFMediaType> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateMediaType(ppmftype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFMediaType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateMediaType(&mut result__).from_abi::<IMFMediaType>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateMediaTypeFromProperties<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(punkstream: Param0) -> ::windows::runtime::Result<IMFMediaType> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateMediaTypeFromProperties(punkstream: ::windows::runtime::RawPtr, ppmediatype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFMediaType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateMediaTypeFromProperties(punkstream.into_param().abi(), &mut result__).from_abi::<IMFMediaType>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateMediaTypeFromRepresentation<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::GUID>>(guidrepresentation: Param0, pvrepresentation: *const ::core::ffi::c_void) -> ::windows::runtime::Result<IMFMediaType> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateMediaTypeFromRepresentation(guidrepresentation: ::windows::runtime::GUID, pvrepresentation: *const ::core::ffi::c_void, ppimediatype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFMediaType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateMediaTypeFromRepresentation(guidrepresentation.into_param().abi(), ::core::mem::transmute(pvrepresentation), &mut result__).from_abi::<IMFMediaType>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateMemoryBuffer(cbmaxlength: u32) -> ::windows::runtime::Result<IMFMediaBuffer> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateMemoryBuffer(cbmaxlength: u32, ppbuffer: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFMediaBuffer as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateMemoryBuffer(::core::mem::transmute(cbmaxlength), &mut result__).from_abi::<IMFMediaBuffer>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateMuxSink<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::GUID>, Param1: ::windows::runtime::IntoParam<'a, IMFAttributes>, Param2: ::windows::runtime::IntoParam<'a, IMFByteStream>>(guidoutputsubtype: Param0, poutputattributes: Param1, poutputbytestream: Param2) -> ::windows::runtime::Result<IMFMediaSink> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateMuxSink(guidoutputsubtype: ::windows::runtime::GUID, poutputattributes: ::windows::runtime::RawPtr, poutputbytestream: ::windows::runtime::RawPtr, ppmuxsink: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFMediaSink as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateMuxSink(guidoutputsubtype.into_param().abi(), poutputattributes.into_param().abi(), poutputbytestream.into_param().abi(), &mut result__).from_abi::<IMFMediaSink>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateMuxStreamAttributes<'a, Param0: ::windows::runtime::IntoParam<'a, IMFCollection>>(pattributestomux: Param0) -> ::windows::runtime::Result<IMFAttributes> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateMuxStreamAttributes(pattributestomux: ::windows::runtime::RawPtr, ppmuxattribs: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFAttributes as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateMuxStreamAttributes(pattributestomux.into_param().abi(), &mut result__).from_abi::<IMFAttributes>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateMuxStreamMediaType<'a, Param0: ::windows::runtime::IntoParam<'a, IMFCollection>>(pmediatypestomux: Param0) -> ::windows::runtime::Result<IMFMediaType> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateMuxStreamMediaType(pmediatypestomux: ::windows::runtime::RawPtr, ppmuxmediatype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFMediaType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateMuxStreamMediaType(pmediatypestomux.into_param().abi(), &mut result__).from_abi::<IMFMediaType>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateMuxStreamSample<'a, Param0: ::windows::runtime::IntoParam<'a, IMFCollection>>(psamplestomux: Param0) -> ::windows::runtime::Result<IMFSample> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateMuxStreamSample(psamplestomux: ::windows::runtime::RawPtr, ppmuxsample: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFSample as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateMuxStreamSample(psamplestomux.into_param().abi(), &mut result__).from_abi::<IMFSample>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateNetSchemePlugin(riid: *const ::windows::runtime::GUID, ppvhandler: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateNetSchemePlugin(riid: *const ::windows::runtime::GUID, ppvhandler: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT;
        }
        MFCreateNetSchemePlugin(::core::mem::transmute(riid), ::core::mem::transmute(ppvhandler)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreatePMPMediaSession<'a, Param1: ::windows::runtime::IntoParam<'a, IMFAttributes>>(dwcreationflags: u32, pconfiguration: Param1, ppmediasession: *mut ::core::option::Option<IMFMediaSession>, ppenableractivate: *mut ::core::option::Option<IMFActivate>) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreatePMPMediaSession(dwcreationflags: u32, pconfiguration: ::windows::runtime::RawPtr, ppmediasession: *mut ::windows::runtime::RawPtr, ppenableractivate: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        MFCreatePMPMediaSession(::core::mem::transmute(dwcreationflags), pconfiguration.into_param().abi(), ::core::mem::transmute(ppmediasession), ::core::mem::transmute(ppenableractivate)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreatePMPServer(dwcreationflags: u32) -> ::windows::runtime::Result<IMFPMPServer> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreatePMPServer(dwcreationflags: u32, pppmpserver: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFPMPServer as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreatePMPServer(::core::mem::transmute(dwcreationflags), &mut result__).from_abi::<IMFPMPServer>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreatePresentationClock() -> ::windows::runtime::Result<IMFPresentationClock> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreatePresentationClock(pppresentationclock: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFPresentationClock as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreatePresentationClock(&mut result__).from_abi::<IMFPresentationClock>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreatePresentationDescriptor(cstreamdescriptors: u32, apstreamdescriptors: *const ::core::option::Option<IMFStreamDescriptor>) -> ::windows::runtime::Result<IMFPresentationDescriptor> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreatePresentationDescriptor(cstreamdescriptors: u32, apstreamdescriptors: *const ::windows::runtime::RawPtr, pppresentationdescriptor: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFPresentationDescriptor as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreatePresentationDescriptor(::core::mem::transmute(cstreamdescriptors), ::core::mem::transmute(apstreamdescriptors), &mut result__).from_abi::<IMFPresentationDescriptor>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreatePresentationDescriptorFromASFProfile<'a, Param0: ::windows::runtime::IntoParam<'a, IMFASFProfile>>(piprofile: Param0) -> ::windows::runtime::Result<IMFPresentationDescriptor> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreatePresentationDescriptorFromASFProfile(piprofile: ::windows::runtime::RawPtr, ppipd: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFPresentationDescriptor as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreatePresentationDescriptorFromASFProfile(piprofile.into_param().abi(), &mut result__).from_abi::<IMFPresentationDescriptor>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreatePropertiesFromMediaType<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaType>>(pmediatype: Param0, riid: *const ::windows::runtime::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreatePropertiesFromMediaType(pmediatype: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT;
        }
        MFCreatePropertiesFromMediaType(pmediatype.into_param().abi(), ::core::mem::transmute(riid), ::core::mem::transmute(ppv)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateProtectedEnvironmentAccess() -> ::windows::runtime::Result<IMFProtectedEnvironmentAccess> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateProtectedEnvironmentAccess(ppaccess: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFProtectedEnvironmentAccess as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateProtectedEnvironmentAccess(&mut result__).from_abi::<IMFProtectedEnvironmentAccess>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_PropertiesSystem`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_PropertiesSystem"))]
#[inline]
pub unsafe fn MFCreateProxyLocator<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::System::PropertiesSystem::IPropertyStore>>(pszprotocol: Param0, pproxyconfig: Param1) -> ::windows::runtime::Result<IMFNetProxyLocator> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateProxyLocator(pszprotocol: super::super::Foundation::PWSTR, pproxyconfig: ::windows::runtime::RawPtr, ppproxylocator: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFNetProxyLocator as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateProxyLocator(pszprotocol.into_param().abi(), pproxyconfig.into_param().abi(), &mut result__).from_abi::<IMFNetProxyLocator>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFCreateRelativePanelWatcher<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(videodeviceid: Param0, displaymonitordeviceid: Param1) -> ::windows::runtime::Result<IMFRelativePanelWatcher> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateRelativePanelWatcher(videodeviceid: super::super::Foundation::PWSTR, displaymonitordeviceid: super::super::Foundation::PWSTR, pprelativepanelwatcher: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFRelativePanelWatcher as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateRelativePanelWatcher(videodeviceid.into_param().abi(), displaymonitordeviceid.into_param().abi(), &mut result__).from_abi::<IMFRelativePanelWatcher>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateRemoteDesktopPlugin() -> ::windows::runtime::Result<IMFRemoteDesktopPlugin> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateRemoteDesktopPlugin(ppplugin: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFRemoteDesktopPlugin as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateRemoteDesktopPlugin(&mut result__).from_abi::<IMFRemoteDesktopPlugin>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateSample() -> ::windows::runtime::Result<IMFSample> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateSample(ppimfsample: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFSample as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateSample(&mut result__).from_abi::<IMFSample>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateSampleCopierMFT() -> ::windows::runtime::Result<IMFTransform> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateSampleCopierMFT(ppcopiermft: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFTransform as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateSampleCopierMFT(&mut result__).from_abi::<IMFTransform>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateSampleGrabberSinkActivate<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaType>, Param1: ::windows::runtime::IntoParam<'a, IMFSampleGrabberSinkCallback>>(pimfmediatype: Param0, pimfsamplegrabbersinkcallback: Param1) -> ::windows::runtime::Result<IMFActivate> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateSampleGrabberSinkActivate(pimfmediatype: ::windows::runtime::RawPtr, pimfsamplegrabbersinkcallback: ::windows::runtime::RawPtr, ppiactivate: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFActivate as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateSampleGrabberSinkActivate(pimfmediatype.into_param().abi(), pimfsamplegrabbersinkcallback.into_param().abi(), &mut result__).from_abi::<IMFActivate>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateSensorActivityMonitor<'a, Param0: ::windows::runtime::IntoParam<'a, IMFSensorActivitiesReportCallback>>(pcallback: Param0) -> ::windows::runtime::Result<IMFSensorActivityMonitor> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateSensorActivityMonitor(pcallback: ::windows::runtime::RawPtr, ppactivitymonitor: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFSensorActivityMonitor as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateSensorActivityMonitor(pcallback.into_param().abi(), &mut result__).from_abi::<IMFSensorActivityMonitor>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFCreateSensorGroup<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(sensorgroupsymboliclink: Param0) -> ::windows::runtime::Result<IMFSensorGroup> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateSensorGroup(sensorgroupsymboliclink: super::super::Foundation::PWSTR, ppsensorgroup: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFSensorGroup as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateSensorGroup(sensorgroupsymboliclink.into_param().abi(), &mut result__).from_abi::<IMFSensorGroup>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFCreateSensorProfile<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(profiletype: *const ::windows::runtime::GUID, profileindex: u32, constraints: Param2) -> ::windows::runtime::Result<IMFSensorProfile> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateSensorProfile(profiletype: *const ::windows::runtime::GUID, profileindex: u32, constraints: super::super::Foundation::PWSTR, ppprofile: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFSensorProfile as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateSensorProfile(::core::mem::transmute(profiletype), ::core::mem::transmute(profileindex), constraints.into_param().abi(), &mut result__).from_abi::<IMFSensorProfile>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateSensorProfileCollection() -> ::windows::runtime::Result<IMFSensorProfileCollection> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateSensorProfileCollection(ppsensorprofile: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFSensorProfileCollection as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateSensorProfileCollection(&mut result__).from_abi::<IMFSensorProfileCollection>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateSensorStream<'a, Param1: ::windows::runtime::IntoParam<'a, IMFAttributes>, Param2: ::windows::runtime::IntoParam<'a, IMFCollection>>(streamid: u32, pattributes: Param1, pmediatypecollection: Param2) -> ::windows::runtime::Result<IMFSensorStream> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateSensorStream(streamid: u32, pattributes: ::windows::runtime::RawPtr, pmediatypecollection: ::windows::runtime::RawPtr, ppstream: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFSensorStream as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateSensorStream(::core::mem::transmute(streamid), pattributes.into_param().abi(), pmediatypecollection.into_param().abi(), &mut result__).from_abi::<IMFSensorStream>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
#[inline]
pub unsafe fn MFCreateSequencerSegmentOffset(dwid: u32, hnsoffset: i64) -> ::windows::runtime::Result<super::super::System::Com::StructuredStorage::PROPVARIANT> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateSequencerSegmentOffset(dwid: u32, hnsoffset: i64, pvarsegmentoffset: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <super::super::System::Com::StructuredStorage::PROPVARIANT as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateSequencerSegmentOffset(::core::mem::transmute(dwid), ::core::mem::transmute(hnsoffset), &mut result__).from_abi::<super::super::System::Com::StructuredStorage::PROPVARIANT>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateSequencerSource<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(preserved: Param0) -> ::windows::runtime::Result<IMFSequencerSource> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateSequencerSource(preserved: ::windows::runtime::RawPtr, ppsequencersource: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFSequencerSource as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateSequencerSource(preserved.into_param().abi(), &mut result__).from_abi::<IMFSequencerSource>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateSimpleTypeHandler() -> ::windows::runtime::Result<IMFMediaTypeHandler> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateSimpleTypeHandler(pphandler: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFMediaTypeHandler as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateSimpleTypeHandler(&mut result__).from_abi::<IMFMediaTypeHandler>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateSinkWriterFromMediaSink<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaSink>, Param1: ::windows::runtime::IntoParam<'a, IMFAttributes>>(pmediasink: Param0, pattributes: Param1) -> ::windows::runtime::Result<IMFSinkWriter> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateSinkWriterFromMediaSink(pmediasink: ::windows::runtime::RawPtr, pattributes: ::windows::runtime::RawPtr, ppsinkwriter: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFSinkWriter as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateSinkWriterFromMediaSink(pmediasink.into_param().abi(), pattributes.into_param().abi(), &mut result__).from_abi::<IMFSinkWriter>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFCreateSinkWriterFromURL<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, IMFByteStream>, Param2: ::windows::runtime::IntoParam<'a, IMFAttributes>>(pwszoutputurl: Param0, pbytestream: Param1, pattributes: Param2) -> ::windows::runtime::Result<IMFSinkWriter> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateSinkWriterFromURL(pwszoutputurl: super::super::Foundation::PWSTR, pbytestream: ::windows::runtime::RawPtr, pattributes: ::windows::runtime::RawPtr, ppsinkwriter: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFSinkWriter as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateSinkWriterFromURL(pwszoutputurl.into_param().abi(), pbytestream.into_param().abi(), pattributes.into_param().abi(), &mut result__).from_abi::<IMFSinkWriter>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateSourceReaderFromByteStream<'a, Param0: ::windows::runtime::IntoParam<'a, IMFByteStream>, Param1: ::windows::runtime::IntoParam<'a, IMFAttributes>>(pbytestream: Param0, pattributes: Param1) -> ::windows::runtime::Result<IMFSourceReader> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateSourceReaderFromByteStream(pbytestream: ::windows::runtime::RawPtr, pattributes: ::windows::runtime::RawPtr, ppsourcereader: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFSourceReader as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateSourceReaderFromByteStream(pbytestream.into_param().abi(), pattributes.into_param().abi(), &mut result__).from_abi::<IMFSourceReader>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateSourceReaderFromMediaSource<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaSource>, Param1: ::windows::runtime::IntoParam<'a, IMFAttributes>>(pmediasource: Param0, pattributes: Param1) -> ::windows::runtime::Result<IMFSourceReader> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateSourceReaderFromMediaSource(pmediasource: ::windows::runtime::RawPtr, pattributes: ::windows::runtime::RawPtr, ppsourcereader: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFSourceReader as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateSourceReaderFromMediaSource(pmediasource.into_param().abi(), pattributes.into_param().abi(), &mut result__).from_abi::<IMFSourceReader>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFCreateSourceReaderFromURL<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, IMFAttributes>>(pwszurl: Param0, pattributes: Param1) -> ::windows::runtime::Result<IMFSourceReader> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateSourceReaderFromURL(pwszurl: super::super::Foundation::PWSTR, pattributes: ::windows::runtime::RawPtr, ppsourcereader: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFSourceReader as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateSourceReaderFromURL(pwszurl.into_param().abi(), pattributes.into_param().abi(), &mut result__).from_abi::<IMFSourceReader>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateSourceResolver() -> ::windows::runtime::Result<IMFSourceResolver> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateSourceResolver(ppisourceresolver: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFSourceResolver as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateSourceResolver(&mut result__).from_abi::<IMFSourceResolver>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateStandardQualityManager() -> ::windows::runtime::Result<IMFQualityManager> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateStandardQualityManager(ppqualitymanager: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFQualityManager as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateStandardQualityManager(&mut result__).from_abi::<IMFQualityManager>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateStreamDescriptor(dwstreamidentifier: u32, cmediatypes: u32, apmediatypes: *const ::core::option::Option<IMFMediaType>) -> ::windows::runtime::Result<IMFStreamDescriptor> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateStreamDescriptor(dwstreamidentifier: u32, cmediatypes: u32, apmediatypes: *const ::windows::runtime::RawPtr, ppdescriptor: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFStreamDescriptor as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateStreamDescriptor(::core::mem::transmute(dwstreamidentifier), ::core::mem::transmute(cmediatypes), ::core::mem::transmute(apmediatypes), &mut result__).from_abi::<IMFStreamDescriptor>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_System_Com`*"]
#[cfg(feature = "Win32_System_Com")]
#[inline]
pub unsafe fn MFCreateStreamOnMFByteStream<'a, Param0: ::windows::runtime::IntoParam<'a, IMFByteStream>>(pbytestream: Param0) -> ::windows::runtime::Result<super::super::System::Com::IStream> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateStreamOnMFByteStream(pbytestream: ::windows::runtime::RawPtr, ppstream: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <super::super::System::Com::IStream as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateStreamOnMFByteStream(pbytestream.into_param().abi(), &mut result__).from_abi::<super::super::System::Com::IStream>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateStreamOnMFByteStreamEx<'a, Param0: ::windows::runtime::IntoParam<'a, IMFByteStream>>(pbytestream: Param0, riid: *const ::windows::runtime::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateStreamOnMFByteStreamEx(pbytestream: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT;
        }
        MFCreateStreamOnMFByteStreamEx(pbytestream.into_param().abi(), ::core::mem::transmute(riid), ::core::mem::transmute(ppv)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateSystemTimeSource() -> ::windows::runtime::Result<IMFPresentationTimeSource> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateSystemTimeSource(ppsystemtimesource: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFPresentationTimeSource as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateSystemTimeSource(&mut result__).from_abi::<IMFPresentationTimeSource>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateTempFile(accessmode: MF_FILE_ACCESSMODE, openmode: MF_FILE_OPENMODE, fflags: MF_FILE_FLAGS) -> ::windows::runtime::Result<IMFByteStream> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateTempFile(accessmode: MF_FILE_ACCESSMODE, openmode: MF_FILE_OPENMODE, fflags: MF_FILE_FLAGS, ppibytestream: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFByteStream as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateTempFile(::core::mem::transmute(accessmode), ::core::mem::transmute(openmode), ::core::mem::transmute(fflags), &mut result__).from_abi::<IMFByteStream>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateTopoLoader() -> ::windows::runtime::Result<IMFTopoLoader> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateTopoLoader(ppobj: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFTopoLoader as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateTopoLoader(&mut result__).from_abi::<IMFTopoLoader>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateTopology() -> ::windows::runtime::Result<IMFTopology> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateTopology(pptopo: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFTopology as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateTopology(&mut result__).from_abi::<IMFTopology>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateTopologyNode(nodetype: MF_TOPOLOGY_TYPE) -> ::windows::runtime::Result<IMFTopologyNode> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateTopologyNode(nodetype: MF_TOPOLOGY_TYPE, ppnode: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFTopologyNode as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateTopologyNode(::core::mem::transmute(nodetype), &mut result__).from_abi::<IMFTopologyNode>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateTrackedSample() -> ::windows::runtime::Result<IMFTrackedSample> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateTrackedSample(ppmfsample: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFTrackedSample as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateTrackedSample(&mut result__).from_abi::<IMFTrackedSample>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateTranscodeProfile() -> ::windows::runtime::Result<IMFTranscodeProfile> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateTranscodeProfile(pptranscodeprofile: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFTranscodeProfile as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateTranscodeProfile(&mut result__).from_abi::<IMFTranscodeProfile>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateTranscodeSinkActivate() -> ::windows::runtime::Result<IMFActivate> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateTranscodeSinkActivate(ppactivate: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFActivate as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateTranscodeSinkActivate(&mut result__).from_abi::<IMFActivate>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFCreateTranscodeTopology<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaSource>, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, IMFTranscodeProfile>>(psrc: Param0, pwszoutputfilepath: Param1, pprofile: Param2) -> ::windows::runtime::Result<IMFTopology> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateTranscodeTopology(psrc: ::windows::runtime::RawPtr, pwszoutputfilepath: super::super::Foundation::PWSTR, pprofile: ::windows::runtime::RawPtr, pptranscodetopo: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFTopology as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateTranscodeTopology(psrc.into_param().abi(), pwszoutputfilepath.into_param().abi(), pprofile.into_param().abi(), &mut result__).from_abi::<IMFTopology>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateTranscodeTopologyFromByteStream<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaSource>, Param1: ::windows::runtime::IntoParam<'a, IMFByteStream>, Param2: ::windows::runtime::IntoParam<'a, IMFTranscodeProfile>>(psrc: Param0, poutputstream: Param1, pprofile: Param2) -> ::windows::runtime::Result<IMFTopology> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateTranscodeTopologyFromByteStream(psrc: ::windows::runtime::RawPtr, poutputstream: ::windows::runtime::RawPtr, pprofile: ::windows::runtime::RawPtr, pptranscodetopo: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFTopology as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateTranscodeTopologyFromByteStream(psrc.into_param().abi(), poutputstream.into_param().abi(), pprofile.into_param().abi(), &mut result__).from_abi::<IMFTopology>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateTransformActivate() -> ::windows::runtime::Result<IMFActivate> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateTransformActivate(ppactivate: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFActivate as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateTransformActivate(&mut result__).from_abi::<IMFActivate>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFCreateVideoMediaType(pvideoformat: *const MFVIDEOFORMAT) -> ::windows::runtime::Result<IMFVideoMediaType> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateVideoMediaType(pvideoformat: *const MFVIDEOFORMAT, ppivideomediatype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFVideoMediaType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateVideoMediaType(::core::mem::transmute(pvideoformat), &mut result__).from_abi::<IMFVideoMediaType>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Gdi`*"]
#[cfg(feature = "Win32_Graphics_Gdi")]
#[inline]
pub unsafe fn MFCreateVideoMediaTypeFromBitMapInfoHeader(pbmihbitmapinfoheader: *const super::super::Graphics::Gdi::BITMAPINFOHEADER, dwpixelaspectratiox: u32, dwpixelaspectratioy: u32, interlacemode: MFVideoInterlaceMode, videoflags: u64, qwframespersecondnumerator: u64, qwframesperseconddenominator: u64, dwmaxbitrate: u32) -> ::windows::runtime::Result<IMFVideoMediaType> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateVideoMediaTypeFromBitMapInfoHeader(pbmihbitmapinfoheader: *const super::super::Graphics::Gdi::BITMAPINFOHEADER, dwpixelaspectratiox: u32, dwpixelaspectratioy: u32, interlacemode: MFVideoInterlaceMode, videoflags: u64, qwframespersecondnumerator: u64, qwframesperseconddenominator: u64, dwmaxbitrate: u32, ppivideomediatype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFVideoMediaType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateVideoMediaTypeFromBitMapInfoHeader(
            ::core::mem::transmute(pbmihbitmapinfoheader),
            ::core::mem::transmute(dwpixelaspectratiox),
            ::core::mem::transmute(dwpixelaspectratioy),
            ::core::mem::transmute(interlacemode),
            ::core::mem::transmute(videoflags),
            ::core::mem::transmute(qwframespersecondnumerator),
            ::core::mem::transmute(qwframesperseconddenominator),
            ::core::mem::transmute(dwmaxbitrate),
            &mut result__,
        )
        .from_abi::<IMFVideoMediaType>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Gdi`*"]
#[cfg(feature = "Win32_Graphics_Gdi")]
#[inline]
pub unsafe fn MFCreateVideoMediaTypeFromBitMapInfoHeaderEx(pbmihbitmapinfoheader: *const super::super::Graphics::Gdi::BITMAPINFOHEADER, cbbitmapinfoheader: u32, dwpixelaspectratiox: u32, dwpixelaspectratioy: u32, interlacemode: MFVideoInterlaceMode, videoflags: u64, dwframespersecondnumerator: u32, dwframesperseconddenominator: u32, dwmaxbitrate: u32) -> ::windows::runtime::Result<IMFVideoMediaType> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateVideoMediaTypeFromBitMapInfoHeaderEx(pbmihbitmapinfoheader: *const super::super::Graphics::Gdi::BITMAPINFOHEADER, cbbitmapinfoheader: u32, dwpixelaspectratiox: u32, dwpixelaspectratioy: u32, interlacemode: MFVideoInterlaceMode, videoflags: u64, dwframespersecondnumerator: u32, dwframesperseconddenominator: u32, dwmaxbitrate: u32, ppivideomediatype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFVideoMediaType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateVideoMediaTypeFromBitMapInfoHeaderEx(
            ::core::mem::transmute(pbmihbitmapinfoheader),
            ::core::mem::transmute(cbbitmapinfoheader),
            ::core::mem::transmute(dwpixelaspectratiox),
            ::core::mem::transmute(dwpixelaspectratioy),
            ::core::mem::transmute(interlacemode),
            ::core::mem::transmute(videoflags),
            ::core::mem::transmute(dwframespersecondnumerator),
            ::core::mem::transmute(dwframesperseconddenominator),
            ::core::mem::transmute(dwmaxbitrate),
            &mut result__,
        )
        .from_abi::<IMFVideoMediaType>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateVideoMediaTypeFromSubtype(pamsubtype: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<IMFVideoMediaType> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateVideoMediaTypeFromSubtype(pamsubtype: *const ::windows::runtime::GUID, ppivideomediatype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFVideoMediaType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateVideoMediaTypeFromSubtype(::core::mem::transmute(pamsubtype), &mut result__).from_abi::<IMFVideoMediaType>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateVideoMixer<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(powner: Param0, riiddevice: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateVideoMixer(powner: ::windows::runtime::RawPtr, riiddevice: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT;
        }
        MFCreateVideoMixer(powner.into_param().abi(), ::core::mem::transmute(riiddevice), ::core::mem::transmute(riid), ::core::mem::transmute(ppv)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateVideoMixerAndPresenter<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(pmixerowner: Param0, ppresenterowner: Param1, riidmixer: *const ::windows::runtime::GUID, ppvvideomixer: *mut *mut ::core::ffi::c_void, riidpresenter: *const ::windows::runtime::GUID, ppvvideopresenter: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateVideoMixerAndPresenter(pmixerowner: ::windows::runtime::RawPtr, ppresenterowner: ::windows::runtime::RawPtr, riidmixer: *const ::windows::runtime::GUID, ppvvideomixer: *mut *mut ::core::ffi::c_void, riidpresenter: *const ::windows::runtime::GUID, ppvvideopresenter: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT;
        }
        MFCreateVideoMixerAndPresenter(pmixerowner.into_param().abi(), ppresenterowner.into_param().abi(), ::core::mem::transmute(riidmixer), ::core::mem::transmute(ppvvideomixer), ::core::mem::transmute(riidpresenter), ::core::mem::transmute(ppvvideopresenter)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateVideoPresenter<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(powner: Param0, riiddevice: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppvideopresenter: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateVideoPresenter(powner: ::windows::runtime::RawPtr, riiddevice: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppvideopresenter: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT;
        }
        MFCreateVideoPresenter(powner.into_param().abi(), ::core::mem::transmute(riiddevice), ::core::mem::transmute(riid), ::core::mem::transmute(ppvideopresenter)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateVideoRenderer(riidrenderer: *const ::windows::runtime::GUID, ppvideorenderer: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateVideoRenderer(riidrenderer: *const ::windows::runtime::GUID, ppvideorenderer: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT;
        }
        MFCreateVideoRenderer(::core::mem::transmute(riidrenderer), ::core::mem::transmute(ppvideorenderer)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFCreateVideoRendererActivate<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::HWND>>(hwndvideo: Param0) -> ::windows::runtime::Result<IMFActivate> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateVideoRendererActivate(hwndvideo: super::super::Foundation::HWND, ppactivate: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFActivate as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateVideoRendererActivate(hwndvideo.into_param().abi(), &mut result__).from_abi::<IMFActivate>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateVideoSampleAllocator(riid: *const ::windows::runtime::GUID, ppsampleallocator: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateVideoSampleAllocator(riid: *const ::windows::runtime::GUID, ppsampleallocator: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT;
        }
        MFCreateVideoSampleAllocator(::core::mem::transmute(riid), ::core::mem::transmute(ppsampleallocator)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateVideoSampleAllocatorEx(riid: *const ::windows::runtime::GUID, ppsampleallocator: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateVideoSampleAllocatorEx(riid: *const ::windows::runtime::GUID, ppsampleallocator: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT;
        }
        MFCreateVideoSampleAllocatorEx(::core::mem::transmute(riid), ::core::mem::transmute(ppsampleallocator)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateVideoSampleFromSurface<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(punksurface: Param0) -> ::windows::runtime::Result<IMFSample> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateVideoSampleFromSurface(punksurface: ::windows::runtime::RawPtr, ppsample: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFSample as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateVideoSampleFromSurface(punksurface.into_param().abi(), &mut result__).from_abi::<IMFSample>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFCreateVirtualCamera<'a, Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(
    r#type: __MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0001,
    lifetime: __MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0002,
    access: __MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0003,
    friendlyname: Param3,
    sourceid: Param4,
    categories: *const ::windows::runtime::GUID,
    categorycount: u32,
) -> ::windows::runtime::Result<IMFVirtualCamera> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateVirtualCamera(r#type: __MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0001, lifetime: __MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0002, access: __MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0003, friendlyname: super::super::Foundation::PWSTR, sourceid: super::super::Foundation::PWSTR, categories: *const ::windows::runtime::GUID, categorycount: u32, virtualcamera: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFVirtualCamera as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateVirtualCamera(::core::mem::transmute(r#type), ::core::mem::transmute(lifetime), ::core::mem::transmute(access), friendlyname.into_param().abi(), sourceid.into_param().abi(), ::core::mem::transmute(categories), ::core::mem::transmute(categorycount), &mut result__).from_abi::<IMFVirtualCamera>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateWAVEMediaSink<'a, Param0: ::windows::runtime::IntoParam<'a, IMFByteStream>, Param1: ::windows::runtime::IntoParam<'a, IMFMediaType>>(ptargetbytestream: Param0, paudiomediatype: Param1) -> ::windows::runtime::Result<IMFMediaSink> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateWAVEMediaSink(ptargetbytestream: ::windows::runtime::RawPtr, paudiomediatype: ::windows::runtime::RawPtr, ppmediasink: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFMediaSink as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateWAVEMediaSink(ptargetbytestream.into_param().abi(), paudiomediatype.into_param().abi(), &mut result__).from_abi::<IMFMediaSink>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFCreateWICBitmapBuffer<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(riid: *const ::windows::runtime::GUID, punksurface: Param1) -> ::windows::runtime::Result<IMFMediaBuffer> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateWICBitmapBuffer(riid: *const ::windows::runtime::GUID, punksurface: ::windows::runtime::RawPtr, ppbuffer: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFMediaBuffer as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateWICBitmapBuffer(::core::mem::transmute(riid), punksurface.into_param().abi(), &mut result__).from_abi::<IMFMediaBuffer>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_System_PropertiesSystem`*"]
#[cfg(feature = "Win32_System_PropertiesSystem")]
#[inline]
pub unsafe fn MFCreateWMAEncoderActivate<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaType>, Param1: ::windows::runtime::IntoParam<'a, super::super::System::PropertiesSystem::IPropertyStore>>(pmediatype: Param0, pencodingconfigurationproperties: Param1) -> ::windows::runtime::Result<IMFActivate> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateWMAEncoderActivate(pmediatype: ::windows::runtime::RawPtr, pencodingconfigurationproperties: ::windows::runtime::RawPtr, ppactivate: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFActivate as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateWMAEncoderActivate(pmediatype.into_param().abi(), pencodingconfigurationproperties.into_param().abi(), &mut result__).from_abi::<IMFActivate>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_System_PropertiesSystem`*"]
#[cfg(feature = "Win32_System_PropertiesSystem")]
#[inline]
pub unsafe fn MFCreateWMVEncoderActivate<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaType>, Param1: ::windows::runtime::IntoParam<'a, super::super::System::PropertiesSystem::IPropertyStore>>(pmediatype: Param0, pencodingconfigurationproperties: Param1) -> ::windows::runtime::Result<IMFActivate> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateWMVEncoderActivate(pmediatype: ::windows::runtime::RawPtr, pencodingconfigurationproperties: ::windows::runtime::RawPtr, ppactivate: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFActivate as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFCreateWMVEncoderActivate(pmediatype.into_param().abi(), pencodingconfigurationproperties.into_param().abi(), &mut result__).from_abi::<IMFActivate>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Media_Multimedia`*"]
#[cfg(feature = "Win32_Media_Multimedia")]
#[inline]
pub unsafe fn MFCreateWaveFormatExFromMFMediaType<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaType>>(pmftype: Param0, ppwf: *mut *mut super::Multimedia::WAVEFORMATEX, pcbsize: *mut u32, flags: u32) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFCreateWaveFormatExFromMFMediaType(pmftype: ::windows::runtime::RawPtr, ppwf: *mut *mut super::Multimedia::WAVEFORMATEX, pcbsize: *mut u32, flags: u32) -> ::windows::runtime::HRESULT;
        }
        MFCreateWaveFormatExFromMFMediaType(pmftype.into_param().abi(), ::core::mem::transmute(ppwf), ::core::mem::transmute(pcbsize), ::core::mem::transmute(flags)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFDepthMeasurement(pub i32);
pub const DistanceToFocalPlane: MFDepthMeasurement = MFDepthMeasurement(0i32);
pub const DistanceToOpticalCenter: MFDepthMeasurement = MFDepthMeasurement(1i32);
impl ::core::convert::From<i32> for MFDepthMeasurement {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFDepthMeasurement {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_System_Com`*"]
#[cfg(feature = "Win32_System_Com")]
#[inline]
pub unsafe fn MFDeserializeAttributesFromStream<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>, Param2: ::windows::runtime::IntoParam<'a, super::super::System::Com::IStream>>(pattr: Param0, dwoptions: u32, pstm: Param2) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFDeserializeAttributesFromStream(pattr: ::windows::runtime::RawPtr, dwoptions: u32, pstm: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        MFDeserializeAttributesFromStream(pattr.into_param().abi(), ::core::mem::transmute(dwoptions), pstm.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFDeserializePresentationDescriptor(cbdata: u32, pbdata: *const u8) -> ::windows::runtime::Result<IMFPresentationDescriptor> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFDeserializePresentationDescriptor(cbdata: u32, pbdata: *const u8, pppd: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFPresentationDescriptor as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFDeserializePresentationDescriptor(::core::mem::transmute(cbdata), ::core::mem::transmute(pbdata), &mut result__).from_abi::<IMFPresentationDescriptor>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub const MFENABLETYPE_MF_RebootRequired: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1833778507, 3790, 18002, [139, 58, 242, 210, 66, 96, 216, 135]);
pub const MFENABLETYPE_MF_UpdateRevocationInformation: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3847794869, 46020, 17568, [146, 76, 80, 209, 120, 147, 35, 133]);
pub const MFENABLETYPE_MF_UpdateUntrustedComponent: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2558129110, 52962, 18662, [181, 115, 151, 103, 171, 23, 47, 22]);
pub const MFENABLETYPE_WMDRMV1_LicenseAcquisition: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1341583023, 2883, 18327, [155, 133, 171, 243, 24, 21, 231, 176]);
pub const MFENABLETYPE_WMDRMV7_Individualization: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2899494986, 45827, 20325, [188, 44, 44, 132, 141, 1, 169, 137]);
pub const MFENABLETYPE_WMDRMV7_LicenseAcquisition: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3344095, 18950, 18564, [160, 151, 239, 109, 34, 236, 132, 163]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFEVRDLL: u32 = 0u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFEndCreateFile<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(presult: Param0) -> ::windows::runtime::Result<IMFByteStream> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFEndCreateFile(presult: ::windows::runtime::RawPtr, ppfile: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFByteStream as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFEndCreateFile(presult.into_param().abi(), &mut result__).from_abi::<IMFByteStream>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFEndRegisterWorkQueueWithMMCSS<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(presult: Param0) -> ::windows::runtime::Result<u32> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFEndRegisterWorkQueueWithMMCSS(presult: ::windows::runtime::RawPtr, pdwtaskid: *mut u32) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFEndRegisterWorkQueueWithMMCSS(presult.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFEndUnregisterWorkQueueWithMMCSS<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(presult: Param0) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFEndUnregisterWorkQueueWithMMCSS(presult: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        MFEndUnregisterWorkQueueWithMMCSS(presult.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFEnumDeviceSources<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(pattributes: Param0, pppsourceactivate: *mut *mut ::core::option::Option<IMFActivate>, pcsourceactivate: *mut u32) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFEnumDeviceSources(pattributes: ::windows::runtime::RawPtr, pppsourceactivate: *mut *mut ::windows::runtime::RawPtr, pcsourceactivate: *mut u32) -> ::windows::runtime::HRESULT;
        }
        MFEnumDeviceSources(pattributes.into_param().abi(), ::core::mem::transmute(pppsourceactivate), ::core::mem::transmute(pcsourceactivate)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MFExtendedCameraIntrinsic_IntrinsicModel {
    pub Width: u32,
    pub Height: u32,
    pub SplitFrameId: u32,
    pub CameraModel: MFCameraIntrinsic_CameraModel,
}
impl MFExtendedCameraIntrinsic_IntrinsicModel {}
impl ::core::default::Default for MFExtendedCameraIntrinsic_IntrinsicModel {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MFExtendedCameraIntrinsic_IntrinsicModel {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFExtendedCameraIntrinsic_IntrinsicModel").field("Width", &self.Width).field("Height", &self.Height).field("SplitFrameId", &self.SplitFrameId).field("CameraModel", &self.CameraModel).finish()
    }
}
impl ::core::cmp::PartialEq for MFExtendedCameraIntrinsic_IntrinsicModel {
    fn eq(&self, other: &Self) -> bool {
        self.Width == other.Width && self.Height == other.Height && self.SplitFrameId == other.SplitFrameId && self.CameraModel == other.CameraModel
    }
}
impl ::core::cmp::Eq for MFExtendedCameraIntrinsic_IntrinsicModel {}
unsafe impl ::windows::runtime::Abi for MFExtendedCameraIntrinsic_IntrinsicModel {
    type Abi = Self;
}
pub const MFFLACBytestreamHandler: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(239194040, 1286, 16628, [165, 22, 119, 204, 35, 100, 45, 145]);
pub const MFFLACSinkClassFactory: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2100938095, 24693, 18377, [155, 174, 140, 249, 229, 49, 181, 245]);
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MFFOLDDOWN_MATRIX {
    pub cbSize: u32,
    pub cSrcChannels: u32,
    pub cDstChannels: u32,
    pub dwChannelMask: u32,
    pub Coeff: [i32; 64],
}
impl MFFOLDDOWN_MATRIX {}
impl ::core::default::Default for MFFOLDDOWN_MATRIX {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MFFOLDDOWN_MATRIX {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFFOLDDOWN_MATRIX").field("cbSize", &self.cbSize).field("cSrcChannels", &self.cSrcChannels).field("cDstChannels", &self.cDstChannels).field("dwChannelMask", &self.dwChannelMask).field("Coeff", &self.Coeff).finish()
    }
}
impl ::core::cmp::PartialEq for MFFOLDDOWN_MATRIX {
    fn eq(&self, other: &Self) -> bool {
        self.cbSize == other.cbSize && self.cSrcChannels == other.cSrcChannels && self.cDstChannels == other.cDstChannels && self.dwChannelMask == other.dwChannelMask && self.Coeff == other.Coeff
    }
}
impl ::core::cmp::Eq for MFFOLDDOWN_MATRIX {}
unsafe impl ::windows::runtime::Abi for MFFOLDDOWN_MATRIX {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFFrameRateToAverageTimePerFrame(unnumerator: u32, undenominator: u32) -> ::windows::runtime::Result<u64> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFFrameRateToAverageTimePerFrame(unnumerator: u32, undenominator: u32, punaveragetimeperframe: *mut u64) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFFrameRateToAverageTimePerFrame(::core::mem::transmute(unnumerator), ::core::mem::transmute(undenominator), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFFrameSourceTypes(pub i32);
pub const MFFrameSourceTypes_Color: MFFrameSourceTypes = MFFrameSourceTypes(1i32);
pub const MFFrameSourceTypes_Infrared: MFFrameSourceTypes = MFFrameSourceTypes(2i32);
pub const MFFrameSourceTypes_Depth: MFFrameSourceTypes = MFFrameSourceTypes(4i32);
pub const MFFrameSourceTypes_Image: MFFrameSourceTypes = MFFrameSourceTypes(8i32);
pub const MFFrameSourceTypes_Custom: MFFrameSourceTypes = MFFrameSourceTypes(128i32);
impl ::core::convert::From<i32> for MFFrameSourceTypes {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFFrameSourceTypes {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFGetAttributesAsBlob<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(pattributes: Param0, pbuf: *mut u8, cbbufsize: u32) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFGetAttributesAsBlob(pattributes: ::windows::runtime::RawPtr, pbuf: *mut u8, cbbufsize: u32) -> ::windows::runtime::HRESULT;
        }
        MFGetAttributesAsBlob(pattributes.into_param().abi(), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFGetAttributesAsBlobSize<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(pattributes: Param0) -> ::windows::runtime::Result<u32> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFGetAttributesAsBlobSize(pattributes: ::windows::runtime::RawPtr, pcbbufsize: *mut u32) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFGetAttributesAsBlobSize(pattributes.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFGetContentProtectionSystemCLSID(guidprotectionsystemid: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<::windows::runtime::GUID> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFGetContentProtectionSystemCLSID(guidprotectionsystemid: *const ::windows::runtime::GUID, pclsid: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFGetContentProtectionSystemCLSID(::core::mem::transmute(guidprotectionsystemid), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFGetLocalId(verifier: *const u8, size: u32) -> ::windows::runtime::Result<super::super::Foundation::PWSTR> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFGetLocalId(verifier: *const u8, size: u32, id: *mut super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <super::super::Foundation::PWSTR as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFGetLocalId(::core::mem::transmute(verifier), ::core::mem::transmute(size), &mut result__).from_abi::<super::super::Foundation::PWSTR>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFGetMFTMerit<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(pmft: Param0, cbverifier: u32, verifier: *const u8, merit: *mut u32) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFGetMFTMerit(pmft: ::windows::runtime::RawPtr, cbverifier: u32, verifier: *const u8, merit: *mut u32) -> ::windows::runtime::HRESULT;
        }
        MFGetMFTMerit(pmft.into_param().abi(), ::core::mem::transmute(cbverifier), ::core::mem::transmute(verifier), ::core::mem::transmute(merit)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFGetPlaneSize(format: u32, dwwidth: u32, dwheight: u32) -> ::windows::runtime::Result<u32> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFGetPlaneSize(format: u32, dwwidth: u32, dwheight: u32, pdwplanesize: *mut u32) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFGetPlaneSize(::core::mem::transmute(format), ::core::mem::transmute(dwwidth), ::core::mem::transmute(dwheight), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFGetPluginControl() -> ::windows::runtime::Result<IMFPluginControl> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFGetPluginControl(ppplugincontrol: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFPluginControl as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFGetPluginControl(&mut result__).from_abi::<IMFPluginControl>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFGetService<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(punkobject: Param0, guidservice: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFGetService(punkobject: ::windows::runtime::RawPtr, guidservice: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT;
        }
        MFGetService(punkobject.into_param().abi(), ::core::mem::transmute(guidservice), ::core::mem::transmute(riid), ::core::mem::transmute(ppvobject)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFGetStrideForBitmapInfoHeader(format: u32, dwwidth: u32) -> ::windows::runtime::Result<i32> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFGetStrideForBitmapInfoHeader(format: u32, dwwidth: u32, pstride: *mut i32) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFGetStrideForBitmapInfoHeader(::core::mem::transmute(format), ::core::mem::transmute(dwwidth), &mut result__).from_abi::<i32>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
#[inline]
pub unsafe fn MFGetSupportedMimeTypes() -> ::windows::runtime::Result<super::super::System::Com::StructuredStorage::PROPVARIANT> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFGetSupportedMimeTypes(ppropvarmimetypearray: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <super::super::System::Com::StructuredStorage::PROPVARIANT as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFGetSupportedMimeTypes(&mut result__).from_abi::<super::super::System::Com::StructuredStorage::PROPVARIANT>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
#[inline]
pub unsafe fn MFGetSupportedSchemes() -> ::windows::runtime::Result<super::super::System::Com::StructuredStorage::PROPVARIANT> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFGetSupportedSchemes(ppropvarschemearray: *mut ::core::mem::ManuallyDrop<super::super::System::Com::StructuredStorage::PROPVARIANT>) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <super::super::System::Com::StructuredStorage::PROPVARIANT as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFGetSupportedSchemes(&mut result__).from_abi::<super::super::System::Com::StructuredStorage::PROPVARIANT>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFGetSystemId() -> ::windows::runtime::Result<IMFSystemId> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFGetSystemId(ppid: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFSystemId as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFGetSystemId(&mut result__).from_abi::<IMFSystemId>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFGetSystemTime() -> i64 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFGetSystemTime() -> i64;
        }
        ::core::mem::transmute(MFGetSystemTime())
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFGetTimerPeriodicity() -> ::windows::runtime::Result<u32> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFGetTimerPeriodicity(periodicity: *mut u32) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFGetTimerPeriodicity(&mut result__).from_abi::<u32>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFGetTopoNodeCurrentType<'a, Param0: ::windows::runtime::IntoParam<'a, IMFTopologyNode>, Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>>(pnode: Param0, dwstreamindex: u32, foutput: Param2) -> ::windows::runtime::Result<IMFMediaType> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFGetTopoNodeCurrentType(pnode: ::windows::runtime::RawPtr, dwstreamindex: u32, foutput: super::super::Foundation::BOOL, pptype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFMediaType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFGetTopoNodeCurrentType(pnode.into_param().abi(), ::core::mem::transmute(dwstreamindex), foutput.into_param().abi(), &mut result__).from_abi::<IMFMediaType>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFGetUncompressedVideoFormat(pvideoformat: *const MFVIDEOFORMAT) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFGetUncompressedVideoFormat(pvideoformat: *const MFVIDEOFORMAT) -> u32;
        }
        ::core::mem::transmute(MFGetUncompressedVideoFormat(::core::mem::transmute(pvideoformat)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFGetWorkQueueMMCSSClass(dwworkqueueid: u32, pwszclass: super::super::Foundation::PWSTR, pcchclass: *mut u32) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFGetWorkQueueMMCSSClass(dwworkqueueid: u32, pwszclass: super::super::Foundation::PWSTR, pcchclass: *mut u32) -> ::windows::runtime::HRESULT;
        }
        MFGetWorkQueueMMCSSClass(::core::mem::transmute(dwworkqueueid), ::core::mem::transmute(pwszclass), ::core::mem::transmute(pcchclass)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFGetWorkQueueMMCSSPriority(dwworkqueueid: u32) -> ::windows::runtime::Result<i32> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFGetWorkQueueMMCSSPriority(dwworkqueueid: u32, lpriority: *mut i32) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFGetWorkQueueMMCSSPriority(::core::mem::transmute(dwworkqueueid), &mut result__).from_abi::<i32>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFGetWorkQueueMMCSSTaskId(dwworkqueueid: u32) -> ::windows::runtime::Result<u32> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFGetWorkQueueMMCSSTaskId(dwworkqueueid: u32, pdwtaskid: *mut u32) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFGetWorkQueueMMCSSTaskId(::core::mem::transmute(dwworkqueueid), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFHeapAlloc<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PSTR>>(nsize: usize, dwflags: u32, pszfile: Param2, line: i32, eat: EAllocationType) -> *mut ::core::ffi::c_void {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFHeapAlloc(nsize: usize, dwflags: u32, pszfile: super::super::Foundation::PSTR, line: i32, eat: EAllocationType) -> *mut ::core::ffi::c_void;
        }
        ::core::mem::transmute(MFHeapAlloc(::core::mem::transmute(nsize), ::core::mem::transmute(dwflags), pszfile.into_param().abi(), ::core::mem::transmute(line), ::core::mem::transmute(eat)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFHeapFree(pv: *mut ::core::ffi::c_void) {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFHeapFree(pv: *mut ::core::ffi::c_void);
        }
        ::core::mem::transmute(MFHeapFree(::core::mem::transmute(pv)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MFINPUTTRUSTAUTHORITY_ACCESS_ACTION {
    pub Action: MFPOLICYMANAGER_ACTION,
    pub pbTicket: *mut u8,
    pub cbTicket: u32,
}
impl MFINPUTTRUSTAUTHORITY_ACCESS_ACTION {}
impl ::core::default::Default for MFINPUTTRUSTAUTHORITY_ACCESS_ACTION {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MFINPUTTRUSTAUTHORITY_ACCESS_ACTION {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFINPUTTRUSTAUTHORITY_ACCESS_ACTION").field("Action", &self.Action).field("pbTicket", &self.pbTicket).field("cbTicket", &self.cbTicket).finish()
    }
}
impl ::core::cmp::PartialEq for MFINPUTTRUSTAUTHORITY_ACCESS_ACTION {
    fn eq(&self, other: &Self) -> bool {
        self.Action == other.Action && self.pbTicket == other.pbTicket && self.cbTicket == other.cbTicket
    }
}
impl ::core::cmp::Eq for MFINPUTTRUSTAUTHORITY_ACCESS_ACTION {}
unsafe impl ::windows::runtime::Abi for MFINPUTTRUSTAUTHORITY_ACCESS_ACTION {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS {
    pub dwSize: u32,
    pub dwVer: u32,
    pub cbSignatureOffset: u32,
    pub cbSignatureSize: u32,
    pub cbExtensionOffset: u32,
    pub cbExtensionSize: u32,
    pub cActions: u32,
    pub rgOutputActions: [MFINPUTTRUSTAUTHORITY_ACCESS_ACTION; 1],
}
impl MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS {}
impl ::core::default::Default for MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS")
            .field("dwSize", &self.dwSize)
            .field("dwVer", &self.dwVer)
            .field("cbSignatureOffset", &self.cbSignatureOffset)
            .field("cbSignatureSize", &self.cbSignatureSize)
            .field("cbExtensionOffset", &self.cbExtensionOffset)
            .field("cbExtensionSize", &self.cbExtensionSize)
            .field("cActions", &self.cActions)
            .field("rgOutputActions", &self.rgOutputActions)
            .finish()
    }
}
impl ::core::cmp::PartialEq for MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS {
    fn eq(&self, other: &Self) -> bool {
        self.dwSize == other.dwSize && self.dwVer == other.dwVer && self.cbSignatureOffset == other.cbSignatureOffset && self.cbSignatureSize == other.cbSignatureSize && self.cbExtensionOffset == other.cbExtensionOffset && self.cbExtensionSize == other.cbExtensionSize && self.cActions == other.cActions && self.rgOutputActions == other.rgOutputActions
    }
}
impl ::core::cmp::Eq for MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS {}
unsafe impl ::windows::runtime::Abi for MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS {
    type Abi = Self;
}
pub const MFImageFormat_JPEG: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(434415018, 22114, 20421, [160, 192, 23, 88, 2, 142, 16, 87]);
pub const MFImageFormat_RGB32: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(22, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_DirectShow`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectShow"))]
#[inline]
pub unsafe fn MFInitAMMediaTypeFromMFMediaType<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaType>, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::GUID>>(pmftype: Param0, guidformatblocktype: Param1, pamtype: *mut super::super::Graphics::DirectShow::AM_MEDIA_TYPE) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFInitAMMediaTypeFromMFMediaType(pmftype: ::windows::runtime::RawPtr, guidformatblocktype: ::windows::runtime::GUID, pamtype: *mut ::core::mem::ManuallyDrop<super::super::Graphics::DirectShow::AM_MEDIA_TYPE>) -> ::windows::runtime::HRESULT;
        }
        MFInitAMMediaTypeFromMFMediaType(pmftype.into_param().abi(), guidformatblocktype.into_param().abi(), ::core::mem::transmute(pamtype)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFInitAttributesFromBlob<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>>(pattributes: Param0, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFInitAttributesFromBlob(pattributes: ::windows::runtime::RawPtr, pbuf: *const u8, cbbufsize: u32) -> ::windows::runtime::HRESULT;
        }
        MFInitAttributesFromBlob(pattributes.into_param().abi(), ::core::mem::transmute(pbuf), ::core::mem::transmute(cbbufsize)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_DirectShow`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectShow"))]
#[inline]
pub unsafe fn MFInitMediaTypeFromAMMediaType<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaType>>(pmftype: Param0, pamtype: *const super::super::Graphics::DirectShow::AM_MEDIA_TYPE) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFInitMediaTypeFromAMMediaType(pmftype: ::windows::runtime::RawPtr, pamtype: *const ::core::mem::ManuallyDrop<super::super::Graphics::DirectShow::AM_MEDIA_TYPE>) -> ::windows::runtime::HRESULT;
        }
        MFInitMediaTypeFromAMMediaType(pmftype.into_param().abi(), ::core::mem::transmute(pamtype)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFInitMediaTypeFromMFVideoFormat<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaType>>(pmftype: Param0, pmfvf: *const MFVIDEOFORMAT, cbbufsize: u32) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFInitMediaTypeFromMFVideoFormat(pmftype: ::windows::runtime::RawPtr, pmfvf: *const MFVIDEOFORMAT, cbbufsize: u32) -> ::windows::runtime::HRESULT;
        }
        MFInitMediaTypeFromMFVideoFormat(pmftype.into_param().abi(), ::core::mem::transmute(pmfvf), ::core::mem::transmute(cbbufsize)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_DirectShow`, `Win32_Graphics_Gdi`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectShow", feature = "Win32_Graphics_Gdi"))]
#[inline]
pub unsafe fn MFInitMediaTypeFromMPEG1VideoInfo<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaType>>(pmftype: Param0, pmp1vi: *const super::super::Graphics::DirectShow::MPEG1VIDEOINFO, cbbufsize: u32, psubtype: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFInitMediaTypeFromMPEG1VideoInfo(pmftype: ::windows::runtime::RawPtr, pmp1vi: *const super::super::Graphics::DirectShow::MPEG1VIDEOINFO, cbbufsize: u32, psubtype: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT;
        }
        MFInitMediaTypeFromMPEG1VideoInfo(pmftype.into_param().abi(), ::core::mem::transmute(pmp1vi), ::core::mem::transmute(cbbufsize), ::core::mem::transmute(psubtype)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_DirectShow`, `Win32_Graphics_Gdi`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectShow", feature = "Win32_Graphics_Gdi"))]
#[inline]
pub unsafe fn MFInitMediaTypeFromMPEG2VideoInfo<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaType>>(pmftype: Param0, pmp2vi: *const super::super::Graphics::DirectShow::MPEG2VIDEOINFO, cbbufsize: u32, psubtype: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFInitMediaTypeFromMPEG2VideoInfo(pmftype: ::windows::runtime::RawPtr, pmp2vi: *const super::super::Graphics::DirectShow::MPEG2VIDEOINFO, cbbufsize: u32, psubtype: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT;
        }
        MFInitMediaTypeFromMPEG2VideoInfo(pmftype.into_param().abi(), ::core::mem::transmute(pmp2vi), ::core::mem::transmute(cbbufsize), ::core::mem::transmute(psubtype)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_DirectShow`, `Win32_Graphics_Gdi`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectShow", feature = "Win32_Graphics_Gdi"))]
#[inline]
pub unsafe fn MFInitMediaTypeFromVideoInfoHeader<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaType>>(pmftype: Param0, pvih: *const super::super::Graphics::DirectShow::VIDEOINFOHEADER, cbbufsize: u32, psubtype: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFInitMediaTypeFromVideoInfoHeader(pmftype: ::windows::runtime::RawPtr, pvih: *const super::super::Graphics::DirectShow::VIDEOINFOHEADER, cbbufsize: u32, psubtype: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT;
        }
        MFInitMediaTypeFromVideoInfoHeader(pmftype.into_param().abi(), ::core::mem::transmute(pvih), ::core::mem::transmute(cbbufsize), ::core::mem::transmute(psubtype)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_DirectShow`, `Win32_Graphics_Gdi`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectShow", feature = "Win32_Graphics_Gdi"))]
#[inline]
pub unsafe fn MFInitMediaTypeFromVideoInfoHeader2<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaType>>(pmftype: Param0, pvih2: *const super::super::Graphics::DirectShow::VIDEOINFOHEADER2, cbbufsize: u32, psubtype: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFInitMediaTypeFromVideoInfoHeader2(pmftype: ::windows::runtime::RawPtr, pvih2: *const super::super::Graphics::DirectShow::VIDEOINFOHEADER2, cbbufsize: u32, psubtype: *const ::windows::runtime::GUID) -> ::windows::runtime::HRESULT;
        }
        MFInitMediaTypeFromVideoInfoHeader2(pmftype.into_param().abi(), ::core::mem::transmute(pvih2), ::core::mem::transmute(cbbufsize), ::core::mem::transmute(psubtype)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Media_Multimedia`*"]
#[cfg(feature = "Win32_Media_Multimedia")]
#[inline]
pub unsafe fn MFInitMediaTypeFromWaveFormatEx<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaType>>(pmftype: Param0, pwaveformat: *const super::Multimedia::WAVEFORMATEX, cbbufsize: u32) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFInitMediaTypeFromWaveFormatEx(pmftype: ::windows::runtime::RawPtr, pwaveformat: *const super::Multimedia::WAVEFORMATEX, cbbufsize: u32) -> ::windows::runtime::HRESULT;
        }
        MFInitMediaTypeFromWaveFormatEx(pmftype.into_param().abi(), ::core::mem::transmute(pwaveformat), ::core::mem::transmute(cbbufsize)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFInitVideoFormat(pvideoformat: *const MFVIDEOFORMAT, r#type: MFStandardVideoFormat) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFInitVideoFormat(pvideoformat: *const MFVIDEOFORMAT, r#type: MFStandardVideoFormat) -> ::windows::runtime::HRESULT;
        }
        MFInitVideoFormat(::core::mem::transmute(pvideoformat), ::core::mem::transmute(r#type)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFInitVideoFormat_RGB(pvideoformat: *const MFVIDEOFORMAT, dwwidth: u32, dwheight: u32, d3dfmt: u32) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFInitVideoFormat_RGB(pvideoformat: *const MFVIDEOFORMAT, dwwidth: u32, dwheight: u32, d3dfmt: u32) -> ::windows::runtime::HRESULT;
        }
        MFInitVideoFormat_RGB(::core::mem::transmute(pvideoformat), ::core::mem::transmute(dwwidth), ::core::mem::transmute(dwheight), ::core::mem::transmute(d3dfmt)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFInvokeCallback<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(pasyncresult: Param0) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFInvokeCallback(pasyncresult: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        MFInvokeCallback(pasyncresult.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFIsContentProtectionDeviceSupported(protectionsystemid: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFIsContentProtectionDeviceSupported(protectionsystemid: *const ::windows::runtime::GUID, issupported: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFIsContentProtectionDeviceSupported(::core::mem::transmute(protectionsystemid), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFIsFormatYUV(format: u32) -> super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFIsFormatYUV(format: u32) -> super::super::Foundation::BOOL;
        }
        ::core::mem::transmute(MFIsFormatYUV(::core::mem::transmute(format)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFIsVirtualCameraTypeSupported(r#type: __MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0001) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFIsVirtualCameraTypeSupported(r#type: __MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0001, supported: *mut super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFIsVirtualCameraTypeSupported(::core::mem::transmute(r#type), &mut result__).from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFLoadSignedLibrary<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(pszname: Param0) -> ::windows::runtime::Result<IMFSignedLibrary> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFLoadSignedLibrary(pszname: super::super::Foundation::PWSTR, pplib: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFSignedLibrary as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFLoadSignedLibrary(pszname.into_param().abi(), &mut result__).from_abi::<IMFSignedLibrary>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFLockDXGIDeviceManager(presettoken: *mut u32, ppmanager: *mut ::core::option::Option<IMFDXGIDeviceManager>) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFLockDXGIDeviceManager(presettoken: *mut u32, ppmanager: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        MFLockDXGIDeviceManager(::core::mem::transmute(presettoken), ::core::mem::transmute(ppmanager)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFLockPlatform() -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFLockPlatform() -> ::windows::runtime::HRESULT;
        }
        MFLockPlatform().ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFLockSharedWorkQueue<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(wszclass: Param0, basepriority: i32, pdwtaskid: *mut u32, pid: *mut u32) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFLockSharedWorkQueue(wszclass: super::super::Foundation::PWSTR, basepriority: i32, pdwtaskid: *mut u32, pid: *mut u32) -> ::windows::runtime::HRESULT;
        }
        MFLockSharedWorkQueue(wszclass.into_param().abi(), ::core::mem::transmute(basepriority), ::core::mem::transmute(pdwtaskid), ::core::mem::transmute(pid)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFLockWorkQueue(dwworkqueue: u32) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFLockWorkQueue(dwworkqueue: u32) -> ::windows::runtime::HRESULT;
        }
        MFLockWorkQueue(::core::mem::transmute(dwworkqueue)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFMEDIASOURCE_CHARACTERISTICS(pub i32);
pub const MFMEDIASOURCE_IS_LIVE: MFMEDIASOURCE_CHARACTERISTICS = MFMEDIASOURCE_CHARACTERISTICS(1i32);
pub const MFMEDIASOURCE_CAN_SEEK: MFMEDIASOURCE_CHARACTERISTICS = MFMEDIASOURCE_CHARACTERISTICS(2i32);
pub const MFMEDIASOURCE_CAN_PAUSE: MFMEDIASOURCE_CHARACTERISTICS = MFMEDIASOURCE_CHARACTERISTICS(4i32);
pub const MFMEDIASOURCE_HAS_SLOW_SEEK: MFMEDIASOURCE_CHARACTERISTICS = MFMEDIASOURCE_CHARACTERISTICS(8i32);
pub const MFMEDIASOURCE_HAS_MULTIPLE_PRESENTATIONS: MFMEDIASOURCE_CHARACTERISTICS = MFMEDIASOURCE_CHARACTERISTICS(16i32);
pub const MFMEDIASOURCE_CAN_SKIPFORWARD: MFMEDIASOURCE_CHARACTERISTICS = MFMEDIASOURCE_CHARACTERISTICS(32i32);
pub const MFMEDIASOURCE_CAN_SKIPBACKWARD: MFMEDIASOURCE_CHARACTERISTICS = MFMEDIASOURCE_CHARACTERISTICS(64i32);
pub const MFMEDIASOURCE_DOES_NOT_USE_NETWORK: MFMEDIASOURCE_CHARACTERISTICS = MFMEDIASOURCE_CHARACTERISTICS(128i32);
impl ::core::convert::From<i32> for MFMEDIASOURCE_CHARACTERISTICS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFMEDIASOURCE_CHARACTERISTICS {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct MFMPEG2DLNASINKSTATS {
    pub cBytesWritten: u64,
    pub fPAL: super::super::Foundation::BOOL,
    pub fccVideo: u32,
    pub dwVideoWidth: u32,
    pub dwVideoHeight: u32,
    pub cVideoFramesReceived: u64,
    pub cVideoFramesEncoded: u64,
    pub cVideoFramesSkipped: u64,
    pub cBlackVideoFramesEncoded: u64,
    pub cVideoFramesDuplicated: u64,
    pub cAudioSamplesPerSec: u32,
    pub cAudioChannels: u32,
    pub cAudioBytesReceived: u64,
    pub cAudioFramesEncoded: u64,
}
#[cfg(feature = "Win32_Foundation")]
impl MFMPEG2DLNASINKSTATS {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for MFMPEG2DLNASINKSTATS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for MFMPEG2DLNASINKSTATS {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFMPEG2DLNASINKSTATS")
            .field("cBytesWritten", &self.cBytesWritten)
            .field("fPAL", &self.fPAL)
            .field("fccVideo", &self.fccVideo)
            .field("dwVideoWidth", &self.dwVideoWidth)
            .field("dwVideoHeight", &self.dwVideoHeight)
            .field("cVideoFramesReceived", &self.cVideoFramesReceived)
            .field("cVideoFramesEncoded", &self.cVideoFramesEncoded)
            .field("cVideoFramesSkipped", &self.cVideoFramesSkipped)
            .field("cBlackVideoFramesEncoded", &self.cBlackVideoFramesEncoded)
            .field("cVideoFramesDuplicated", &self.cVideoFramesDuplicated)
            .field("cAudioSamplesPerSec", &self.cAudioSamplesPerSec)
            .field("cAudioChannels", &self.cAudioChannels)
            .field("cAudioBytesReceived", &self.cAudioBytesReceived)
            .field("cAudioFramesEncoded", &self.cAudioFramesEncoded)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for MFMPEG2DLNASINKSTATS {
    fn eq(&self, other: &Self) -> bool {
        self.cBytesWritten == other.cBytesWritten
            && self.fPAL == other.fPAL
            && self.fccVideo == other.fccVideo
            && self.dwVideoWidth == other.dwVideoWidth
            && self.dwVideoHeight == other.dwVideoHeight
            && self.cVideoFramesReceived == other.cVideoFramesReceived
            && self.cVideoFramesEncoded == other.cVideoFramesEncoded
            && self.cVideoFramesSkipped == other.cVideoFramesSkipped
            && self.cBlackVideoFramesEncoded == other.cBlackVideoFramesEncoded
            && self.cVideoFramesDuplicated == other.cVideoFramesDuplicated
            && self.cAudioSamplesPerSec == other.cAudioSamplesPerSec
            && self.cAudioChannels == other.cAudioChannels
            && self.cAudioBytesReceived == other.cAudioBytesReceived
            && self.cAudioFramesEncoded == other.cAudioFramesEncoded
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for MFMPEG2DLNASINKSTATS {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for MFMPEG2DLNASINKSTATS {
    type Abi = Self;
}
pub const MFMPEG4Format_Base: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(0, 30330, 18765, [180, 120, 242, 157, 37, 220, 144, 55]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Dxgi`*"]
#[cfg(feature = "Win32_Graphics_Dxgi")]
#[inline]
pub unsafe fn MFMapDX9FormatToDXGIFormat(dx9: u32) -> super::super::Graphics::Dxgi::DXGI_FORMAT {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFMapDX9FormatToDXGIFormat(dx9: u32) -> super::super::Graphics::Dxgi::DXGI_FORMAT;
        }
        ::core::mem::transmute(MFMapDX9FormatToDXGIFormat(::core::mem::transmute(dx9)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Dxgi`*"]
#[cfg(feature = "Win32_Graphics_Dxgi")]
#[inline]
pub unsafe fn MFMapDXGIFormatToDX9Format(dx11: super::super::Graphics::Dxgi::DXGI_FORMAT) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFMapDXGIFormatToDX9Format(dx11: super::super::Graphics::Dxgi::DXGI_FORMAT) -> u32;
        }
        ::core::mem::transmute(MFMapDXGIFormatToDX9Format(::core::mem::transmute(dx11)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MFMediaKeyStatus {
    pub pbKeyId: *mut u8,
    pub cbKeyId: u32,
    pub eMediaKeyStatus: MF_MEDIAKEY_STATUS,
}
impl MFMediaKeyStatus {}
impl ::core::default::Default for MFMediaKeyStatus {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MFMediaKeyStatus {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFMediaKeyStatus").field("pbKeyId", &self.pbKeyId).field("cbKeyId", &self.cbKeyId).field("eMediaKeyStatus", &self.eMediaKeyStatus).finish()
    }
}
impl ::core::cmp::PartialEq for MFMediaKeyStatus {
    fn eq(&self, other: &Self) -> bool {
        self.pbKeyId == other.pbKeyId && self.cbKeyId == other.cbKeyId && self.eMediaKeyStatus == other.eMediaKeyStatus
    }
}
impl ::core::cmp::Eq for MFMediaKeyStatus {}
unsafe impl ::windows::runtime::Abi for MFMediaKeyStatus {
    type Abi = Self;
}
pub const MFMediaType_Audio: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1935963489, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFMediaType_Binary: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1914145829, 58459, 4565, [188, 42, 0, 176, 208, 243, 244, 171]);
pub const MFMediaType_Default: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2175013606, 33027, 19206, [133, 127, 24, 98, 120, 16, 36, 172]);
pub const MFMediaType_FileTransfer: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1914145830, 58459, 4565, [188, 42, 0, 176, 208, 243, 244, 171]);
pub const MFMediaType_HTML: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1914145828, 58459, 4565, [188, 42, 0, 176, 208, 243, 244, 171]);
pub const MFMediaType_Image: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1914145827, 58459, 4565, [188, 42, 0, 176, 208, 243, 244, 171]);
pub const MFMediaType_Metadata: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(747610636, 33467, 18306, [144, 160, 152, 162, 165, 189, 142, 248]);
pub const MFMediaType_MultiplexedFrames: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1856324272, 10271, 16945, [164, 100, 254, 47, 80, 34, 80, 28]);
pub const MFMediaType_Perception: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1501558521, 28322, 18032, [133, 180, 234, 132, 7, 63, 233, 64]);
pub const MFMediaType_Protected: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2068541414, 40196, 17556, [190, 20, 126, 11, 208, 118, 200, 228]);
pub const MFMediaType_SAMI: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3868617120, 15821, 16587, [158, 46, 55, 8, 56, 124, 6, 22]);
pub const MFMediaType_Script: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1914145826, 58459, 4565, [188, 42, 0, 176, 208, 243, 244, 171]);
pub const MFMediaType_Stream: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3828804483, 21071, 4558, [159, 83, 0, 32, 175, 11, 167, 112]);
pub const MFMediaType_Subtitle: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2798728577, 60752, 20069, [174, 8, 38, 6, 85, 118, 170, 204]);
pub const MFMediaType_Video: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1935960438, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFNETSOURCE_ACCELERATEDSTREAMINGDURATION: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294903, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
pub const MFNETSOURCE_AUTORECONNECTLIMIT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294906, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
pub const MFNETSOURCE_AUTORECONNECTPROGRESS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294914, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
pub const MFNETSOURCE_BROWSERUSERAGENT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294923, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
pub const MFNETSOURCE_BROWSERWEBPAGE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294924, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
pub const MFNETSOURCE_BUFFERINGTIME: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294902, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
pub const MFNETSOURCE_CACHEENABLED: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294905, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFNETSOURCE_CACHE_STATE(pub i32);
pub const MFNETSOURCE_CACHE_UNAVAILABLE: MFNETSOURCE_CACHE_STATE = MFNETSOURCE_CACHE_STATE(0i32);
pub const MFNETSOURCE_CACHE_ACTIVE_WRITING: MFNETSOURCE_CACHE_STATE = MFNETSOURCE_CACHE_STATE(1i32);
pub const MFNETSOURCE_CACHE_ACTIVE_COMPLETE: MFNETSOURCE_CACHE_STATE = MFNETSOURCE_CACHE_STATE(2i32);
impl ::core::convert::From<i32> for MFNETSOURCE_CACHE_STATE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFNETSOURCE_CACHE_STATE {
    type Abi = Self;
}
pub const MFNETSOURCE_CLIENTGUID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1621279910, 61847, 19476, [165, 191, 136, 131, 13, 36, 88, 175]);
pub const MFNETSOURCE_CONNECTIONBANDWIDTH: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294904, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
pub const MFNETSOURCE_CREDENTIAL_MANAGER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294912, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
pub const MFNETSOURCE_CROSS_ORIGIN_SUPPORT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2554470524, 45100, 17009, [162, 252, 114, 228, 147, 8, 229, 194]);
pub const MFNETSOURCE_DRMNET_LICENSE_REPRESENTATION: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1206575549, 48638, 17122, [130, 243, 84, 164, 140, 23, 150, 45]);
pub const MFNETSOURCE_ENABLE_DOWNLOAD: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294941, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
pub const MFNETSOURCE_ENABLE_HTTP: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294937, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
pub const MFNETSOURCE_ENABLE_MSB: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294934, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
pub const MFNETSOURCE_ENABLE_PRIVATEMODE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2185722328, 61835, 17413, [140, 241, 70, 79, 181, 170, 143, 113]);
pub const MFNETSOURCE_ENABLE_RTSP: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294936, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
pub const MFNETSOURCE_ENABLE_STREAMING: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294940, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
pub const MFNETSOURCE_ENABLE_TCP: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294933, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
pub const MFNETSOURCE_ENABLE_UDP: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294932, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
pub const MFNETSOURCE_FRIENDLYNAME: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1529509719, 48235, 17534, [170, 6, 13, 218, 28, 100, 110, 47]);
pub const MFNETSOURCE_HOSTEXE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294927, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
pub const MFNETSOURCE_HOSTVERSION: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294929, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
pub const MFNETSOURCE_HTTP_DOWNLOAD_SESSION_PROVIDER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2102724638, 12413, 19821, [166, 99, 169, 59, 233, 124, 75, 92]);
pub const MFNETSOURCE_LOGPARAMS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1687382760, 37912, 17722, [140, 218, 62, 10, 102, 139, 53, 59]);
pub const MFNETSOURCE_LOGURL: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294931, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
pub const MFNETSOURCE_MAXBUFFERTIMEMS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1082860774, 16440, 17409, [181, 178, 254, 112, 26, 158, 191, 16]);
pub const MFNETSOURCE_MAXUDPACCELERATEDSTREAMINGDURATION: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1252731001, 48097, 18836, [159, 240, 84, 149, 189, 37, 1, 41]);
pub const MFNETSOURCE_PEERMANAGER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1219664603, 65215, 17902, [169, 191, 239, 184, 28, 73, 46, 252]);
pub const MFNETSOURCE_PLAYERID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294926, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
pub const MFNETSOURCE_PLAYERUSERAGENT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294930, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
pub const MFNETSOURCE_PLAYERVERSION: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294925, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
pub const MFNETSOURCE_PPBANDWIDTH: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294913, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
pub const MFNETSOURCE_PREVIEWMODEENABLED: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294911, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
pub const MFNETSOURCE_PROTOCOL: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294909, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFNETSOURCE_PROTOCOL_TYPE(pub i32);
pub const MFNETSOURCE_UNDEFINED: MFNETSOURCE_PROTOCOL_TYPE = MFNETSOURCE_PROTOCOL_TYPE(0i32);
pub const MFNETSOURCE_HTTP: MFNETSOURCE_PROTOCOL_TYPE = MFNETSOURCE_PROTOCOL_TYPE(1i32);
pub const MFNETSOURCE_RTSP: MFNETSOURCE_PROTOCOL_TYPE = MFNETSOURCE_PROTOCOL_TYPE(2i32);
pub const MFNETSOURCE_FILE: MFNETSOURCE_PROTOCOL_TYPE = MFNETSOURCE_PROTOCOL_TYPE(3i32);
pub const MFNETSOURCE_MULTICAST: MFNETSOURCE_PROTOCOL_TYPE = MFNETSOURCE_PROTOCOL_TYPE(4i32);
impl ::core::convert::From<i32> for MFNETSOURCE_PROTOCOL_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFNETSOURCE_PROTOCOL_TYPE {
    type Abi = Self;
}
pub const MFNETSOURCE_PROXYBYPASSFORLOCAL: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294918, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
pub const MFNETSOURCE_PROXYEXCEPTIONLIST: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294917, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
pub const MFNETSOURCE_PROXYHOSTNAME: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294916, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
pub const MFNETSOURCE_PROXYINFO: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294939, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
pub const MFNETSOURCE_PROXYLOCATORFACTORY: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294915, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
pub const MFNETSOURCE_PROXYPORT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294920, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
pub const MFNETSOURCE_PROXYRERUNAUTODETECTION: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294921, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
pub const MFNETSOURCE_PROXYSETTINGS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294919, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
pub const MFNETSOURCE_RESENDSENABLED: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294907, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
pub const MFNETSOURCE_RESOURCE_FILTER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2170359798, 9818, 17527, [158, 70, 123, 128, 173, 128, 181, 251]);
pub const MFNETSOURCE_SSLCERTIFICATE_MANAGER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1441188647, 59035, 16999, [148, 12, 45, 126, 197, 187, 138, 15]);
pub const MFNETSOURCE_STATISTICS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294900, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFNETSOURCE_STATISTICS_IDS(pub i32);
pub const MFNETSOURCE_RECVPACKETS_ID: MFNETSOURCE_STATISTICS_IDS = MFNETSOURCE_STATISTICS_IDS(0i32);
pub const MFNETSOURCE_LOSTPACKETS_ID: MFNETSOURCE_STATISTICS_IDS = MFNETSOURCE_STATISTICS_IDS(1i32);
pub const MFNETSOURCE_RESENDSREQUESTED_ID: MFNETSOURCE_STATISTICS_IDS = MFNETSOURCE_STATISTICS_IDS(2i32);
pub const MFNETSOURCE_RESENDSRECEIVED_ID: MFNETSOURCE_STATISTICS_IDS = MFNETSOURCE_STATISTICS_IDS(3i32);
pub const MFNETSOURCE_RECOVEREDBYECCPACKETS_ID: MFNETSOURCE_STATISTICS_IDS = MFNETSOURCE_STATISTICS_IDS(4i32);
pub const MFNETSOURCE_RECOVEREDBYRTXPACKETS_ID: MFNETSOURCE_STATISTICS_IDS = MFNETSOURCE_STATISTICS_IDS(5i32);
pub const MFNETSOURCE_OUTPACKETS_ID: MFNETSOURCE_STATISTICS_IDS = MFNETSOURCE_STATISTICS_IDS(6i32);
pub const MFNETSOURCE_RECVRATE_ID: MFNETSOURCE_STATISTICS_IDS = MFNETSOURCE_STATISTICS_IDS(7i32);
pub const MFNETSOURCE_AVGBANDWIDTHBPS_ID: MFNETSOURCE_STATISTICS_IDS = MFNETSOURCE_STATISTICS_IDS(8i32);
pub const MFNETSOURCE_BYTESRECEIVED_ID: MFNETSOURCE_STATISTICS_IDS = MFNETSOURCE_STATISTICS_IDS(9i32);
pub const MFNETSOURCE_PROTOCOL_ID: MFNETSOURCE_STATISTICS_IDS = MFNETSOURCE_STATISTICS_IDS(10i32);
pub const MFNETSOURCE_TRANSPORT_ID: MFNETSOURCE_STATISTICS_IDS = MFNETSOURCE_STATISTICS_IDS(11i32);
pub const MFNETSOURCE_CACHE_STATE_ID: MFNETSOURCE_STATISTICS_IDS = MFNETSOURCE_STATISTICS_IDS(12i32);
pub const MFNETSOURCE_LINKBANDWIDTH_ID: MFNETSOURCE_STATISTICS_IDS = MFNETSOURCE_STATISTICS_IDS(13i32);
pub const MFNETSOURCE_CONTENTBITRATE_ID: MFNETSOURCE_STATISTICS_IDS = MFNETSOURCE_STATISTICS_IDS(14i32);
pub const MFNETSOURCE_SPEEDFACTOR_ID: MFNETSOURCE_STATISTICS_IDS = MFNETSOURCE_STATISTICS_IDS(15i32);
pub const MFNETSOURCE_BUFFERSIZE_ID: MFNETSOURCE_STATISTICS_IDS = MFNETSOURCE_STATISTICS_IDS(16i32);
pub const MFNETSOURCE_BUFFERPROGRESS_ID: MFNETSOURCE_STATISTICS_IDS = MFNETSOURCE_STATISTICS_IDS(17i32);
pub const MFNETSOURCE_LASTBWSWITCHTS_ID: MFNETSOURCE_STATISTICS_IDS = MFNETSOURCE_STATISTICS_IDS(18i32);
pub const MFNETSOURCE_SEEKRANGESTART_ID: MFNETSOURCE_STATISTICS_IDS = MFNETSOURCE_STATISTICS_IDS(19i32);
pub const MFNETSOURCE_SEEKRANGEEND_ID: MFNETSOURCE_STATISTICS_IDS = MFNETSOURCE_STATISTICS_IDS(20i32);
pub const MFNETSOURCE_BUFFERINGCOUNT_ID: MFNETSOURCE_STATISTICS_IDS = MFNETSOURCE_STATISTICS_IDS(21i32);
pub const MFNETSOURCE_INCORRECTLYSIGNEDPACKETS_ID: MFNETSOURCE_STATISTICS_IDS = MFNETSOURCE_STATISTICS_IDS(22i32);
pub const MFNETSOURCE_SIGNEDSESSION_ID: MFNETSOURCE_STATISTICS_IDS = MFNETSOURCE_STATISTICS_IDS(23i32);
pub const MFNETSOURCE_MAXBITRATE_ID: MFNETSOURCE_STATISTICS_IDS = MFNETSOURCE_STATISTICS_IDS(24i32);
pub const MFNETSOURCE_RECEPTION_QUALITY_ID: MFNETSOURCE_STATISTICS_IDS = MFNETSOURCE_STATISTICS_IDS(25i32);
pub const MFNETSOURCE_RECOVEREDPACKETS_ID: MFNETSOURCE_STATISTICS_IDS = MFNETSOURCE_STATISTICS_IDS(26i32);
pub const MFNETSOURCE_VBR_ID: MFNETSOURCE_STATISTICS_IDS = MFNETSOURCE_STATISTICS_IDS(27i32);
pub const MFNETSOURCE_DOWNLOADPROGRESS_ID: MFNETSOURCE_STATISTICS_IDS = MFNETSOURCE_STATISTICS_IDS(28i32);
pub const MFNETSOURCE_UNPREDEFINEDPROTOCOLNAME_ID: MFNETSOURCE_STATISTICS_IDS = MFNETSOURCE_STATISTICS_IDS(29i32);
impl ::core::convert::From<i32> for MFNETSOURCE_STATISTICS_IDS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFNETSOURCE_STATISTICS_IDS {
    type Abi = Self;
}
pub const MFNETSOURCE_STATISTICS_SERVICE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294901, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
pub const MFNETSOURCE_STREAM_LANGUAGE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2595504920, 63437, 20269, [141, 109, 250, 53, 180, 146, 206, 203]);
pub const MFNETSOURCE_THINNINGENABLED: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294908, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
pub const MFNETSOURCE_TRANSPORT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294910, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFNETSOURCE_TRANSPORT_TYPE(pub i32);
pub const MFNETSOURCE_UDP: MFNETSOURCE_TRANSPORT_TYPE = MFNETSOURCE_TRANSPORT_TYPE(0i32);
pub const MFNETSOURCE_TCP: MFNETSOURCE_TRANSPORT_TYPE = MFNETSOURCE_TRANSPORT_TYPE(1i32);
impl ::core::convert::From<i32> for MFNETSOURCE_TRANSPORT_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFNETSOURCE_TRANSPORT_TYPE {
    type Abi = Self;
}
pub const MFNETSOURCE_UDP_PORT_RANGE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1018294938, 1285, 19549, [174, 113, 10, 85, 99, 68, 239, 161]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFNET_PROXYSETTINGS(pub i32);
pub const MFNET_PROXYSETTING_NONE: MFNET_PROXYSETTINGS = MFNET_PROXYSETTINGS(0i32);
pub const MFNET_PROXYSETTING_MANUAL: MFNET_PROXYSETTINGS = MFNET_PROXYSETTINGS(1i32);
pub const MFNET_PROXYSETTING_AUTO: MFNET_PROXYSETTINGS = MFNET_PROXYSETTINGS(2i32);
pub const MFNET_PROXYSETTING_BROWSER: MFNET_PROXYSETTINGS = MFNET_PROXYSETTINGS(3i32);
impl ::core::convert::From<i32> for MFNET_PROXYSETTINGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFNET_PROXYSETTINGS {
    type Abi = Self;
}
pub const MFNET_SAVEJOB_SERVICE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3092928639, 15618, 20050, [149, 101, 85, 211, 236, 30, 127, 247]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFNetAuthenticationFlags(pub i32);
pub const MFNET_AUTHENTICATION_PROXY: MFNetAuthenticationFlags = MFNetAuthenticationFlags(1i32);
pub const MFNET_AUTHENTICATION_CLEAR_TEXT: MFNetAuthenticationFlags = MFNetAuthenticationFlags(2i32);
pub const MFNET_AUTHENTICATION_LOGGED_ON_USER: MFNetAuthenticationFlags = MFNetAuthenticationFlags(4i32);
impl ::core::convert::From<i32> for MFNetAuthenticationFlags {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFNetAuthenticationFlags {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct MFNetCredentialManagerGetParam {
    pub hrOp: ::windows::runtime::HRESULT,
    pub fAllowLoggedOnUser: super::super::Foundation::BOOL,
    pub fClearTextPackage: super::super::Foundation::BOOL,
    pub pszUrl: super::super::Foundation::PWSTR,
    pub pszSite: super::super::Foundation::PWSTR,
    pub pszRealm: super::super::Foundation::PWSTR,
    pub pszPackage: super::super::Foundation::PWSTR,
    pub nRetries: i32,
}
#[cfg(feature = "Win32_Foundation")]
impl MFNetCredentialManagerGetParam {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for MFNetCredentialManagerGetParam {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for MFNetCredentialManagerGetParam {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFNetCredentialManagerGetParam")
            .field("hrOp", &self.hrOp)
            .field("fAllowLoggedOnUser", &self.fAllowLoggedOnUser)
            .field("fClearTextPackage", &self.fClearTextPackage)
            .field("pszUrl", &self.pszUrl)
            .field("pszSite", &self.pszSite)
            .field("pszRealm", &self.pszRealm)
            .field("pszPackage", &self.pszPackage)
            .field("nRetries", &self.nRetries)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for MFNetCredentialManagerGetParam {
    fn eq(&self, other: &Self) -> bool {
        self.hrOp == other.hrOp && self.fAllowLoggedOnUser == other.fAllowLoggedOnUser && self.fClearTextPackage == other.fClearTextPackage && self.pszUrl == other.pszUrl && self.pszSite == other.pszSite && self.pszRealm == other.pszRealm && self.pszPackage == other.pszPackage && self.nRetries == other.nRetries
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for MFNetCredentialManagerGetParam {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for MFNetCredentialManagerGetParam {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFNetCredentialOptions(pub i32);
pub const MFNET_CREDENTIAL_SAVE: MFNetCredentialOptions = MFNetCredentialOptions(1i32);
pub const MFNET_CREDENTIAL_DONT_CACHE: MFNetCredentialOptions = MFNetCredentialOptions(2i32);
pub const MFNET_CREDENTIAL_ALLOW_CLEAR_TEXT: MFNetCredentialOptions = MFNetCredentialOptions(4i32);
impl ::core::convert::From<i32> for MFNetCredentialOptions {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFNetCredentialOptions {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFNetCredentialRequirements(pub i32);
pub const REQUIRE_PROMPT: MFNetCredentialRequirements = MFNetCredentialRequirements(1i32);
pub const REQUIRE_SAVE_SELECTED: MFNetCredentialRequirements = MFNetCredentialRequirements(2i32);
impl ::core::convert::From<i32> for MFNetCredentialRequirements {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFNetCredentialRequirements {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFNominalRange(pub i32);
pub const MFNominalRange_Unknown: MFNominalRange = MFNominalRange(0i32);
pub const MFNominalRange_Normal: MFNominalRange = MFNominalRange(1i32);
pub const MFNominalRange_Wide: MFNominalRange = MFNominalRange(2i32);
pub const MFNominalRange_0_255: MFNominalRange = MFNominalRange(1i32);
pub const MFNominalRange_16_235: MFNominalRange = MFNominalRange(2i32);
pub const MFNominalRange_48_208: MFNominalRange = MFNominalRange(3i32);
pub const MFNominalRange_64_127: MFNominalRange = MFNominalRange(4i32);
pub const MFNominalRange_Last: MFNominalRange = MFNominalRange(5i32);
pub const MFNominalRange_ForceDWORD: MFNominalRange = MFNominalRange(2147483647i32);
impl ::core::convert::From<i32> for MFNominalRange {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFNominalRange {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MFOffset {
    pub fract: u16,
    pub value: i16,
}
impl MFOffset {}
impl ::core::default::Default for MFOffset {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MFOffset {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFOffset").field("fract", &self.fract).field("value", &self.value).finish()
    }
}
impl ::core::cmp::PartialEq for MFOffset {
    fn eq(&self, other: &Self) -> bool {
        self.fract == other.fract && self.value == other.value
    }
}
impl ::core::cmp::Eq for MFOffset {}
unsafe impl ::windows::runtime::Abi for MFOffset {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFPCreateMediaPlayer<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>, Param3: ::windows::runtime::IntoParam<'a, IMFPMediaPlayerCallback>, Param4: ::windows::runtime::IntoParam<'a, super::super::Foundation::HWND>>(pwszurl: Param0, fstartplayback: Param1, creationoptions: MFP_CREATION_OPTIONS, pcallback: Param3, hwnd: Param4) -> ::windows::runtime::Result<IMFPMediaPlayer> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFPCreateMediaPlayer(pwszurl: super::super::Foundation::PWSTR, fstartplayback: super::super::Foundation::BOOL, creationoptions: MFP_CREATION_OPTIONS, pcallback: ::windows::runtime::RawPtr, hwnd: super::super::Foundation::HWND, ppmediaplayer: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFPMediaPlayer as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFPCreateMediaPlayer(pwszurl.into_param().abi(), fstartplayback.into_param().abi(), ::core::mem::transmute(creationoptions), pcallback.into_param().abi(), hwnd.into_param().abi(), &mut result__).from_abi::<IMFPMediaPlayer>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub type MFPERIODICCALLBACK = unsafe extern "system" fn(pcontext: ::windows::runtime::RawPtr);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFPMPSESSION_CREATION_FLAGS(pub i32);
pub const MFPMPSESSION_UNPROTECTED_PROCESS: MFPMPSESSION_CREATION_FLAGS = MFPMPSESSION_CREATION_FLAGS(1i32);
pub const MFPMPSESSION_IN_PROCESS: MFPMPSESSION_CREATION_FLAGS = MFPMPSESSION_CREATION_FLAGS(2i32);
impl ::core::convert::From<i32> for MFPMPSESSION_CREATION_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFPMPSESSION_CREATION_FLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFPOLICYMANAGER_ACTION(pub i32);
pub const PEACTION_NO: MFPOLICYMANAGER_ACTION = MFPOLICYMANAGER_ACTION(0i32);
pub const PEACTION_PLAY: MFPOLICYMANAGER_ACTION = MFPOLICYMANAGER_ACTION(1i32);
pub const PEACTION_COPY: MFPOLICYMANAGER_ACTION = MFPOLICYMANAGER_ACTION(2i32);
pub const PEACTION_EXPORT: MFPOLICYMANAGER_ACTION = MFPOLICYMANAGER_ACTION(3i32);
pub const PEACTION_EXTRACT: MFPOLICYMANAGER_ACTION = MFPOLICYMANAGER_ACTION(4i32);
pub const PEACTION_RESERVED1: MFPOLICYMANAGER_ACTION = MFPOLICYMANAGER_ACTION(5i32);
pub const PEACTION_RESERVED2: MFPOLICYMANAGER_ACTION = MFPOLICYMANAGER_ACTION(6i32);
pub const PEACTION_RESERVED3: MFPOLICYMANAGER_ACTION = MFPOLICYMANAGER_ACTION(7i32);
pub const PEACTION_LAST: MFPOLICYMANAGER_ACTION = MFPOLICYMANAGER_ACTION(7i32);
impl ::core::convert::From<i32> for MFPOLICYMANAGER_ACTION {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFPOLICYMANAGER_ACTION {
    type Abi = Self;
}
pub const MFPROTECTIONATTRIBUTE_BEST_EFFORT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3370148657, 30192, 20161, [142, 119, 23, 87, 143, 119, 59, 70]);
pub const MFPROTECTIONATTRIBUTE_CONSTRICTVIDEO_IMAGESIZE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(8681212, 19288, 19840, [167, 144, 231, 41, 118, 115, 22, 29]);
pub const MFPROTECTIONATTRIBUTE_FAIL_OVER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2234952645, 14577, 16721, [156, 206, 245, 93, 148, 18, 41, 172]);
pub const MFPROTECTIONATTRIBUTE_HDCP_SRM: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1865425159, 13431, 17512, [138, 8, 238, 249, 219, 16, 226, 15]);
pub const MFPROTECTION_ACP: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3288142278, 63671, 19744, [176, 8, 29, 177, 125, 97, 242, 218]);
pub const MFPROTECTION_CGMSA: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3850267113, 8811, 19761, [180, 227, 211, 219, 0, 135, 54, 221]);
pub const MFPROTECTION_CONSTRICTAUDIO: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4291402564, 57160, 19990, [142, 102, 9, 104, 146, 193, 87, 138]);
pub const MFPROTECTION_CONSTRICTVIDEO: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(422801614, 50660, 19514, [138, 102, 105, 89, 180, 218, 68, 66]);
pub const MFPROTECTION_CONSTRICTVIDEO_NOOPM: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2776688845, 49735, 18775, [185, 131, 60, 46, 235, 209, 255, 89]);
pub const MFPROTECTION_DISABLE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2361841691, 65222, 19855, [150, 75, 207, 186, 11, 13, 173, 13]);
pub const MFPROTECTION_DISABLE_SCREEN_SCRAPE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2719054244, 47053, 16600, [150, 20, 142, 242, 55, 27, 167, 141]);
pub const MFPROTECTION_FFT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1177179826, 10342, 19382, [152, 13, 109, 141, 158, 219, 26, 140]);
pub const MFPROTECTION_GRAPHICS_TRANSFER_AES_ENCRYPTION: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3363036772, 55461, 18918, [136, 187, 251, 150, 63, 211, 212, 206]);
pub const MFPROTECTION_HARDWARE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1323823297, 40663, 16975, [182, 190, 153, 107, 51, 82, 136, 86]);
pub const MFPROTECTION_HDCP: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2927411261, 51240, 16417, [172, 183, 213, 120, 210, 122, 175, 19]);
pub const MFPROTECTION_HDCP_WITH_TYPE_ENFORCEMENT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2762311144, 60768, 17453, [129, 77, 219, 77, 66, 32, 160, 109]);
pub const MFPROTECTION_PROTECTED_SURFACE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1331533158, 59202, 18981, [141, 31, 210, 135, 181, 250, 10, 222]);
pub const MFPROTECTION_TRUSTEDAUDIODRIVERS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1706947538, 360, 18454, [165, 51, 85, 212, 123, 2, 113, 1]);
pub const MFPROTECTION_VIDEO_FRAMES: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(916823228, 29697, 19084, [188, 32, 70, 167, 201, 229, 151, 240]);
pub const MFPROTECTION_WMDRMOTA: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2724701857, 13870, 18384, [136, 5, 70, 40, 89, 138, 35, 228]);
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_PropertiesSystem"))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_PropertiesSystem`*"]
pub struct MFP_ACQUIRE_USER_CREDENTIAL_EVENT {
    pub header: MFP_EVENT_HEADER,
    pub dwUserData: usize,
    pub fProceedWithAuthentication: super::super::Foundation::BOOL,
    pub hrAuthenticationStatus: ::windows::runtime::HRESULT,
    pub pwszURL: super::super::Foundation::PWSTR,
    pub pwszSite: super::super::Foundation::PWSTR,
    pub pwszRealm: super::super::Foundation::PWSTR,
    pub pwszPackage: super::super::Foundation::PWSTR,
    pub nRetries: i32,
    pub flags: u32,
    pub pCredential: ::core::option::Option<IMFNetCredential>,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_PropertiesSystem"))]
impl MFP_ACQUIRE_USER_CREDENTIAL_EVENT {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_PropertiesSystem"))]
impl ::core::default::Default for MFP_ACQUIRE_USER_CREDENTIAL_EVENT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_PropertiesSystem"))]
impl ::core::fmt::Debug for MFP_ACQUIRE_USER_CREDENTIAL_EVENT {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFP_ACQUIRE_USER_CREDENTIAL_EVENT")
            .field("header", &self.header)
            .field("dwUserData", &self.dwUserData)
            .field("fProceedWithAuthentication", &self.fProceedWithAuthentication)
            .field("hrAuthenticationStatus", &self.hrAuthenticationStatus)
            .field("pwszURL", &self.pwszURL)
            .field("pwszSite", &self.pwszSite)
            .field("pwszRealm", &self.pwszRealm)
            .field("pwszPackage", &self.pwszPackage)
            .field("nRetries", &self.nRetries)
            .field("flags", &self.flags)
            .field("pCredential", &self.pCredential)
            .finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_PropertiesSystem"))]
impl ::core::cmp::PartialEq for MFP_ACQUIRE_USER_CREDENTIAL_EVENT {
    fn eq(&self, other: &Self) -> bool {
        self.header == other.header && self.dwUserData == other.dwUserData && self.fProceedWithAuthentication == other.fProceedWithAuthentication && self.hrAuthenticationStatus == other.hrAuthenticationStatus && self.pwszURL == other.pwszURL && self.pwszSite == other.pwszSite && self.pwszRealm == other.pwszRealm && self.pwszPackage == other.pwszPackage && self.nRetries == other.nRetries && self.flags == other.flags && self.pCredential == other.pCredential
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_PropertiesSystem"))]
impl ::core::cmp::Eq for MFP_ACQUIRE_USER_CREDENTIAL_EVENT {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_PropertiesSystem"))]
unsafe impl ::windows::runtime::Abi for MFP_ACQUIRE_USER_CREDENTIAL_EVENT {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFP_CREATION_OPTIONS(pub i32);
pub const MFP_OPTION_NONE: MFP_CREATION_OPTIONS = MFP_CREATION_OPTIONS(0i32);
pub const MFP_OPTION_FREE_THREADED_CALLBACK: MFP_CREATION_OPTIONS = MFP_CREATION_OPTIONS(1i32);
pub const MFP_OPTION_NO_MMCSS: MFP_CREATION_OPTIONS = MFP_CREATION_OPTIONS(2i32);
pub const MFP_OPTION_NO_REMOTE_DESKTOP_OPTIMIZATION: MFP_CREATION_OPTIONS = MFP_CREATION_OPTIONS(4i32);
impl ::core::convert::From<i32> for MFP_CREATION_OPTIONS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFP_CREATION_OPTIONS {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[cfg(feature = "Win32_System_PropertiesSystem")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_System_PropertiesSystem`*"]
pub struct MFP_ERROR_EVENT {
    pub header: MFP_EVENT_HEADER,
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl MFP_ERROR_EVENT {}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::default::Default for MFP_ERROR_EVENT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::fmt::Debug for MFP_ERROR_EVENT {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFP_ERROR_EVENT").field("header", &self.header).finish()
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::cmp::PartialEq for MFP_ERROR_EVENT {
    fn eq(&self, other: &Self) -> bool {
        self.header == other.header
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::cmp::Eq for MFP_ERROR_EVENT {}
#[cfg(feature = "Win32_System_PropertiesSystem")]
unsafe impl ::windows::runtime::Abi for MFP_ERROR_EVENT {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[cfg(feature = "Win32_System_PropertiesSystem")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_System_PropertiesSystem`*"]
pub struct MFP_EVENT_HEADER {
    pub eEventType: MFP_EVENT_TYPE,
    pub hrEvent: ::windows::runtime::HRESULT,
    pub pMediaPlayer: ::core::option::Option<IMFPMediaPlayer>,
    pub eState: MFP_MEDIAPLAYER_STATE,
    pub pPropertyStore: ::core::option::Option<super::super::System::PropertiesSystem::IPropertyStore>,
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl MFP_EVENT_HEADER {}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::default::Default for MFP_EVENT_HEADER {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::fmt::Debug for MFP_EVENT_HEADER {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFP_EVENT_HEADER").field("eEventType", &self.eEventType).field("hrEvent", &self.hrEvent).field("pMediaPlayer", &self.pMediaPlayer).field("eState", &self.eState).field("pPropertyStore", &self.pPropertyStore).finish()
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::cmp::PartialEq for MFP_EVENT_HEADER {
    fn eq(&self, other: &Self) -> bool {
        self.eEventType == other.eEventType && self.hrEvent == other.hrEvent && self.pMediaPlayer == other.pMediaPlayer && self.eState == other.eState && self.pPropertyStore == other.pPropertyStore
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::cmp::Eq for MFP_EVENT_HEADER {}
#[cfg(feature = "Win32_System_PropertiesSystem")]
unsafe impl ::windows::runtime::Abi for MFP_EVENT_HEADER {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFP_EVENT_TYPE(pub i32);
pub const MFP_EVENT_TYPE_PLAY: MFP_EVENT_TYPE = MFP_EVENT_TYPE(0i32);
pub const MFP_EVENT_TYPE_PAUSE: MFP_EVENT_TYPE = MFP_EVENT_TYPE(1i32);
pub const MFP_EVENT_TYPE_STOP: MFP_EVENT_TYPE = MFP_EVENT_TYPE(2i32);
pub const MFP_EVENT_TYPE_POSITION_SET: MFP_EVENT_TYPE = MFP_EVENT_TYPE(3i32);
pub const MFP_EVENT_TYPE_RATE_SET: MFP_EVENT_TYPE = MFP_EVENT_TYPE(4i32);
pub const MFP_EVENT_TYPE_MEDIAITEM_CREATED: MFP_EVENT_TYPE = MFP_EVENT_TYPE(5i32);
pub const MFP_EVENT_TYPE_MEDIAITEM_SET: MFP_EVENT_TYPE = MFP_EVENT_TYPE(6i32);
pub const MFP_EVENT_TYPE_FRAME_STEP: MFP_EVENT_TYPE = MFP_EVENT_TYPE(7i32);
pub const MFP_EVENT_TYPE_MEDIAITEM_CLEARED: MFP_EVENT_TYPE = MFP_EVENT_TYPE(8i32);
pub const MFP_EVENT_TYPE_MF: MFP_EVENT_TYPE = MFP_EVENT_TYPE(9i32);
pub const MFP_EVENT_TYPE_ERROR: MFP_EVENT_TYPE = MFP_EVENT_TYPE(10i32);
pub const MFP_EVENT_TYPE_PLAYBACK_ENDED: MFP_EVENT_TYPE = MFP_EVENT_TYPE(11i32);
pub const MFP_EVENT_TYPE_ACQUIRE_USER_CREDENTIAL: MFP_EVENT_TYPE = MFP_EVENT_TYPE(12i32);
impl ::core::convert::From<i32> for MFP_EVENT_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFP_EVENT_TYPE {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[cfg(feature = "Win32_System_PropertiesSystem")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_System_PropertiesSystem`*"]
pub struct MFP_FRAME_STEP_EVENT {
    pub header: MFP_EVENT_HEADER,
    pub pMediaItem: ::core::option::Option<IMFPMediaItem>,
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl MFP_FRAME_STEP_EVENT {}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::default::Default for MFP_FRAME_STEP_EVENT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::fmt::Debug for MFP_FRAME_STEP_EVENT {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFP_FRAME_STEP_EVENT").field("header", &self.header).field("pMediaItem", &self.pMediaItem).finish()
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::cmp::PartialEq for MFP_FRAME_STEP_EVENT {
    fn eq(&self, other: &Self) -> bool {
        self.header == other.header && self.pMediaItem == other.pMediaItem
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::cmp::Eq for MFP_FRAME_STEP_EVENT {}
#[cfg(feature = "Win32_System_PropertiesSystem")]
unsafe impl ::windows::runtime::Abi for MFP_FRAME_STEP_EVENT {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[cfg(feature = "Win32_System_PropertiesSystem")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_System_PropertiesSystem`*"]
pub struct MFP_MEDIAITEM_CLEARED_EVENT {
    pub header: MFP_EVENT_HEADER,
    pub pMediaItem: ::core::option::Option<IMFPMediaItem>,
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl MFP_MEDIAITEM_CLEARED_EVENT {}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::default::Default for MFP_MEDIAITEM_CLEARED_EVENT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::fmt::Debug for MFP_MEDIAITEM_CLEARED_EVENT {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFP_MEDIAITEM_CLEARED_EVENT").field("header", &self.header).field("pMediaItem", &self.pMediaItem).finish()
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::cmp::PartialEq for MFP_MEDIAITEM_CLEARED_EVENT {
    fn eq(&self, other: &Self) -> bool {
        self.header == other.header && self.pMediaItem == other.pMediaItem
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::cmp::Eq for MFP_MEDIAITEM_CLEARED_EVENT {}
#[cfg(feature = "Win32_System_PropertiesSystem")]
unsafe impl ::windows::runtime::Abi for MFP_MEDIAITEM_CLEARED_EVENT {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[cfg(feature = "Win32_System_PropertiesSystem")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_System_PropertiesSystem`*"]
pub struct MFP_MEDIAITEM_CREATED_EVENT {
    pub header: MFP_EVENT_HEADER,
    pub pMediaItem: ::core::option::Option<IMFPMediaItem>,
    pub dwUserData: usize,
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl MFP_MEDIAITEM_CREATED_EVENT {}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::default::Default for MFP_MEDIAITEM_CREATED_EVENT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::fmt::Debug for MFP_MEDIAITEM_CREATED_EVENT {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFP_MEDIAITEM_CREATED_EVENT").field("header", &self.header).field("pMediaItem", &self.pMediaItem).field("dwUserData", &self.dwUserData).finish()
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::cmp::PartialEq for MFP_MEDIAITEM_CREATED_EVENT {
    fn eq(&self, other: &Self) -> bool {
        self.header == other.header && self.pMediaItem == other.pMediaItem && self.dwUserData == other.dwUserData
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::cmp::Eq for MFP_MEDIAITEM_CREATED_EVENT {}
#[cfg(feature = "Win32_System_PropertiesSystem")]
unsafe impl ::windows::runtime::Abi for MFP_MEDIAITEM_CREATED_EVENT {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[cfg(feature = "Win32_System_PropertiesSystem")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_System_PropertiesSystem`*"]
pub struct MFP_MEDIAITEM_SET_EVENT {
    pub header: MFP_EVENT_HEADER,
    pub pMediaItem: ::core::option::Option<IMFPMediaItem>,
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl MFP_MEDIAITEM_SET_EVENT {}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::default::Default for MFP_MEDIAITEM_SET_EVENT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::fmt::Debug for MFP_MEDIAITEM_SET_EVENT {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFP_MEDIAITEM_SET_EVENT").field("header", &self.header).field("pMediaItem", &self.pMediaItem).finish()
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::cmp::PartialEq for MFP_MEDIAITEM_SET_EVENT {
    fn eq(&self, other: &Self) -> bool {
        self.header == other.header && self.pMediaItem == other.pMediaItem
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::cmp::Eq for MFP_MEDIAITEM_SET_EVENT {}
#[cfg(feature = "Win32_System_PropertiesSystem")]
unsafe impl ::windows::runtime::Abi for MFP_MEDIAITEM_SET_EVENT {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFP_MEDIAPLAYER_STATE(pub i32);
pub const MFP_MEDIAPLAYER_STATE_EMPTY: MFP_MEDIAPLAYER_STATE = MFP_MEDIAPLAYER_STATE(0i32);
pub const MFP_MEDIAPLAYER_STATE_STOPPED: MFP_MEDIAPLAYER_STATE = MFP_MEDIAPLAYER_STATE(1i32);
pub const MFP_MEDIAPLAYER_STATE_PLAYING: MFP_MEDIAPLAYER_STATE = MFP_MEDIAPLAYER_STATE(2i32);
pub const MFP_MEDIAPLAYER_STATE_PAUSED: MFP_MEDIAPLAYER_STATE = MFP_MEDIAPLAYER_STATE(3i32);
pub const MFP_MEDIAPLAYER_STATE_SHUTDOWN: MFP_MEDIAPLAYER_STATE = MFP_MEDIAPLAYER_STATE(4i32);
impl ::core::convert::From<i32> for MFP_MEDIAPLAYER_STATE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFP_MEDIAPLAYER_STATE {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[cfg(feature = "Win32_System_PropertiesSystem")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_System_PropertiesSystem`*"]
pub struct MFP_MF_EVENT {
    pub header: MFP_EVENT_HEADER,
    pub MFEventType: u32,
    pub pMFMediaEvent: ::core::option::Option<IMFMediaEvent>,
    pub pMediaItem: ::core::option::Option<IMFPMediaItem>,
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl MFP_MF_EVENT {}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::default::Default for MFP_MF_EVENT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::fmt::Debug for MFP_MF_EVENT {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFP_MF_EVENT").field("header", &self.header).field("MFEventType", &self.MFEventType).field("pMFMediaEvent", &self.pMFMediaEvent).field("pMediaItem", &self.pMediaItem).finish()
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::cmp::PartialEq for MFP_MF_EVENT {
    fn eq(&self, other: &Self) -> bool {
        self.header == other.header && self.MFEventType == other.MFEventType && self.pMFMediaEvent == other.pMFMediaEvent && self.pMediaItem == other.pMediaItem
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::cmp::Eq for MFP_MF_EVENT {}
#[cfg(feature = "Win32_System_PropertiesSystem")]
unsafe impl ::windows::runtime::Abi for MFP_MF_EVENT {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[cfg(feature = "Win32_System_PropertiesSystem")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_System_PropertiesSystem`*"]
pub struct MFP_PAUSE_EVENT {
    pub header: MFP_EVENT_HEADER,
    pub pMediaItem: ::core::option::Option<IMFPMediaItem>,
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl MFP_PAUSE_EVENT {}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::default::Default for MFP_PAUSE_EVENT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::fmt::Debug for MFP_PAUSE_EVENT {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFP_PAUSE_EVENT").field("header", &self.header).field("pMediaItem", &self.pMediaItem).finish()
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::cmp::PartialEq for MFP_PAUSE_EVENT {
    fn eq(&self, other: &Self) -> bool {
        self.header == other.header && self.pMediaItem == other.pMediaItem
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::cmp::Eq for MFP_PAUSE_EVENT {}
#[cfg(feature = "Win32_System_PropertiesSystem")]
unsafe impl ::windows::runtime::Abi for MFP_PAUSE_EVENT {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[cfg(feature = "Win32_System_PropertiesSystem")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_System_PropertiesSystem`*"]
pub struct MFP_PLAYBACK_ENDED_EVENT {
    pub header: MFP_EVENT_HEADER,
    pub pMediaItem: ::core::option::Option<IMFPMediaItem>,
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl MFP_PLAYBACK_ENDED_EVENT {}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::default::Default for MFP_PLAYBACK_ENDED_EVENT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::fmt::Debug for MFP_PLAYBACK_ENDED_EVENT {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFP_PLAYBACK_ENDED_EVENT").field("header", &self.header).field("pMediaItem", &self.pMediaItem).finish()
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::cmp::PartialEq for MFP_PLAYBACK_ENDED_EVENT {
    fn eq(&self, other: &Self) -> bool {
        self.header == other.header && self.pMediaItem == other.pMediaItem
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::cmp::Eq for MFP_PLAYBACK_ENDED_EVENT {}
#[cfg(feature = "Win32_System_PropertiesSystem")]
unsafe impl ::windows::runtime::Abi for MFP_PLAYBACK_ENDED_EVENT {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[cfg(feature = "Win32_System_PropertiesSystem")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_System_PropertiesSystem`*"]
pub struct MFP_PLAY_EVENT {
    pub header: MFP_EVENT_HEADER,
    pub pMediaItem: ::core::option::Option<IMFPMediaItem>,
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl MFP_PLAY_EVENT {}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::default::Default for MFP_PLAY_EVENT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::fmt::Debug for MFP_PLAY_EVENT {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFP_PLAY_EVENT").field("header", &self.header).field("pMediaItem", &self.pMediaItem).finish()
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::cmp::PartialEq for MFP_PLAY_EVENT {
    fn eq(&self, other: &Self) -> bool {
        self.header == other.header && self.pMediaItem == other.pMediaItem
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::cmp::Eq for MFP_PLAY_EVENT {}
#[cfg(feature = "Win32_System_PropertiesSystem")]
unsafe impl ::windows::runtime::Abi for MFP_PLAY_EVENT {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
pub const MFP_POSITIONTYPE_100NS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(0, 0, 0, [0, 0, 0, 0, 0, 0, 0, 0]);
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[cfg(feature = "Win32_System_PropertiesSystem")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_System_PropertiesSystem`*"]
pub struct MFP_POSITION_SET_EVENT {
    pub header: MFP_EVENT_HEADER,
    pub pMediaItem: ::core::option::Option<IMFPMediaItem>,
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl MFP_POSITION_SET_EVENT {}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::default::Default for MFP_POSITION_SET_EVENT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::fmt::Debug for MFP_POSITION_SET_EVENT {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFP_POSITION_SET_EVENT").field("header", &self.header).field("pMediaItem", &self.pMediaItem).finish()
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::cmp::PartialEq for MFP_POSITION_SET_EVENT {
    fn eq(&self, other: &Self) -> bool {
        self.header == other.header && self.pMediaItem == other.pMediaItem
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::cmp::Eq for MFP_POSITION_SET_EVENT {}
#[cfg(feature = "Win32_System_PropertiesSystem")]
unsafe impl ::windows::runtime::Abi for MFP_POSITION_SET_EVENT {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[cfg(feature = "Win32_System_PropertiesSystem")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_System_PropertiesSystem`*"]
pub struct MFP_RATE_SET_EVENT {
    pub header: MFP_EVENT_HEADER,
    pub pMediaItem: ::core::option::Option<IMFPMediaItem>,
    pub flRate: f32,
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl MFP_RATE_SET_EVENT {}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::default::Default for MFP_RATE_SET_EVENT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::fmt::Debug for MFP_RATE_SET_EVENT {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFP_RATE_SET_EVENT").field("header", &self.header).field("pMediaItem", &self.pMediaItem).field("flRate", &self.flRate).finish()
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::cmp::PartialEq for MFP_RATE_SET_EVENT {
    fn eq(&self, other: &Self) -> bool {
        self.header == other.header && self.pMediaItem == other.pMediaItem && self.flRate == other.flRate
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::cmp::Eq for MFP_RATE_SET_EVENT {}
#[cfg(feature = "Win32_System_PropertiesSystem")]
unsafe impl ::windows::runtime::Abi for MFP_RATE_SET_EVENT {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[cfg(feature = "Win32_System_PropertiesSystem")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_System_PropertiesSystem`*"]
pub struct MFP_STOP_EVENT {
    pub header: MFP_EVENT_HEADER,
    pub pMediaItem: ::core::option::Option<IMFPMediaItem>,
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl MFP_STOP_EVENT {}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::default::Default for MFP_STOP_EVENT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::fmt::Debug for MFP_STOP_EVENT {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFP_STOP_EVENT").field("header", &self.header).field("pMediaItem", &self.pMediaItem).finish()
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::cmp::PartialEq for MFP_STOP_EVENT {
    fn eq(&self, other: &Self) -> bool {
        self.header == other.header && self.pMediaItem == other.pMediaItem
    }
}
#[cfg(feature = "Win32_System_PropertiesSystem")]
impl ::core::cmp::Eq for MFP_STOP_EVENT {}
#[cfg(feature = "Win32_System_PropertiesSystem")]
unsafe impl ::windows::runtime::Abi for MFP_STOP_EVENT {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub union MFPaletteEntry {
    pub ARGB: MFARGB,
    pub AYCbCr: MFAYUVSample,
}
impl MFPaletteEntry {}
impl ::core::default::Default for MFPaletteEntry {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for MFPaletteEntry {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for MFPaletteEntry {}
unsafe impl ::windows::runtime::Abi for MFPaletteEntry {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MFPinholeCameraIntrinsic_IntrinsicModel {
    pub Width: u32,
    pub Height: u32,
    pub CameraModel: MFCameraIntrinsic_PinholeCameraModel,
    pub DistortionModel: MFCameraIntrinsic_DistortionModel,
}
impl MFPinholeCameraIntrinsic_IntrinsicModel {}
impl ::core::default::Default for MFPinholeCameraIntrinsic_IntrinsicModel {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MFPinholeCameraIntrinsic_IntrinsicModel {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFPinholeCameraIntrinsic_IntrinsicModel").field("Width", &self.Width).field("Height", &self.Height).field("CameraModel", &self.CameraModel).field("DistortionModel", &self.DistortionModel).finish()
    }
}
impl ::core::cmp::PartialEq for MFPinholeCameraIntrinsic_IntrinsicModel {
    fn eq(&self, other: &Self) -> bool {
        self.Width == other.Width && self.Height == other.Height && self.CameraModel == other.CameraModel && self.DistortionModel == other.DistortionModel
    }
}
impl ::core::cmp::Eq for MFPinholeCameraIntrinsic_IntrinsicModel {}
unsafe impl ::windows::runtime::Abi for MFPinholeCameraIntrinsic_IntrinsicModel {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MFPinholeCameraIntrinsics {
    pub IntrinsicModelCount: u32,
    pub IntrinsicModels: [MFPinholeCameraIntrinsic_IntrinsicModel; 1],
}
impl MFPinholeCameraIntrinsics {}
impl ::core::default::Default for MFPinholeCameraIntrinsics {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MFPinholeCameraIntrinsics {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFPinholeCameraIntrinsics").field("IntrinsicModelCount", &self.IntrinsicModelCount).field("IntrinsicModels", &self.IntrinsicModels).finish()
    }
}
impl ::core::cmp::PartialEq for MFPinholeCameraIntrinsics {
    fn eq(&self, other: &Self) -> bool {
        self.IntrinsicModelCount == other.IntrinsicModelCount && self.IntrinsicModels == other.IntrinsicModels
    }
}
impl ::core::cmp::Eq for MFPinholeCameraIntrinsics {}
unsafe impl ::windows::runtime::Abi for MFPinholeCameraIntrinsics {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFPutWaitingWorkItem<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(hevent: Param0, priority: i32, presult: Param2) -> ::windows::runtime::Result<u64> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFPutWaitingWorkItem(hevent: super::super::Foundation::HANDLE, priority: i32, presult: ::windows::runtime::RawPtr, pkey: *mut u64) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFPutWaitingWorkItem(hevent.into_param().abi(), ::core::mem::transmute(priority), presult.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFPutWorkItem<'a, Param1: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param2: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(dwqueue: u32, pcallback: Param1, pstate: Param2) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFPutWorkItem(dwqueue: u32, pcallback: ::windows::runtime::RawPtr, pstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        MFPutWorkItem(::core::mem::transmute(dwqueue), pcallback.into_param().abi(), pstate.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFPutWorkItem2<'a, Param2: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param3: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(dwqueue: u32, priority: i32, pcallback: Param2, pstate: Param3) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFPutWorkItem2(dwqueue: u32, priority: i32, pcallback: ::windows::runtime::RawPtr, pstate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        MFPutWorkItem2(::core::mem::transmute(dwqueue), ::core::mem::transmute(priority), pcallback.into_param().abi(), pstate.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFPutWorkItemEx<'a, Param1: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(dwqueue: u32, presult: Param1) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFPutWorkItemEx(dwqueue: u32, presult: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        MFPutWorkItemEx(::core::mem::transmute(dwqueue), presult.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFPutWorkItemEx2<'a, Param2: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(dwqueue: u32, priority: i32, presult: Param2) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFPutWorkItemEx2(dwqueue: u32, priority: i32, presult: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        MFPutWorkItemEx2(::core::mem::transmute(dwqueue), ::core::mem::transmute(priority), presult.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFRATE_DIRECTION(pub i32);
pub const MFRATE_FORWARD: MFRATE_DIRECTION = MFRATE_DIRECTION(0i32);
pub const MFRATE_REVERSE: MFRATE_DIRECTION = MFRATE_DIRECTION(1i32);
impl ::core::convert::From<i32> for MFRATE_DIRECTION {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFRATE_DIRECTION {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MFRR_COMPONENTS {
    pub dwRRInfoVersion: u32,
    pub dwRRComponents: u32,
    pub pRRComponents: *mut MFRR_COMPONENT_HASH_INFO,
}
impl MFRR_COMPONENTS {}
impl ::core::default::Default for MFRR_COMPONENTS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MFRR_COMPONENTS {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFRR_COMPONENTS").field("dwRRInfoVersion", &self.dwRRInfoVersion).field("dwRRComponents", &self.dwRRComponents).field("pRRComponents", &self.pRRComponents).finish()
    }
}
impl ::core::cmp::PartialEq for MFRR_COMPONENTS {
    fn eq(&self, other: &Self) -> bool {
        self.dwRRInfoVersion == other.dwRRInfoVersion && self.dwRRComponents == other.dwRRComponents && self.pRRComponents == other.pRRComponents
    }
}
impl ::core::cmp::Eq for MFRR_COMPONENTS {}
unsafe impl ::windows::runtime::Abi for MFRR_COMPONENTS {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MFRR_COMPONENT_HASH_INFO {
    pub ulReason: u32,
    pub rgHeaderHash: [u16; 43],
    pub rgPublicKeyHash: [u16; 43],
    pub wszName: [u16; 260],
}
impl MFRR_COMPONENT_HASH_INFO {}
impl ::core::default::Default for MFRR_COMPONENT_HASH_INFO {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MFRR_COMPONENT_HASH_INFO {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFRR_COMPONENT_HASH_INFO").field("ulReason", &self.ulReason).field("rgHeaderHash", &self.rgHeaderHash).field("rgPublicKeyHash", &self.rgPublicKeyHash).field("wszName", &self.wszName).finish()
    }
}
impl ::core::cmp::PartialEq for MFRR_COMPONENT_HASH_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.ulReason == other.ulReason && self.rgHeaderHash == other.rgHeaderHash && self.rgPublicKeyHash == other.rgPublicKeyHash && self.wszName == other.wszName
    }
}
impl ::core::cmp::Eq for MFRR_COMPONENT_HASH_INFO {}
unsafe impl ::windows::runtime::Abi for MFRR_COMPONENT_HASH_INFO {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFRR_INFO_VERSION: u32 = 0u32;
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MFRatio {
    pub Numerator: u32,
    pub Denominator: u32,
}
impl MFRatio {}
impl ::core::default::Default for MFRatio {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MFRatio {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFRatio").field("Numerator", &self.Numerator).field("Denominator", &self.Denominator).finish()
    }
}
impl ::core::cmp::PartialEq for MFRatio {
    fn eq(&self, other: &Self) -> bool {
        self.Numerator == other.Numerator && self.Denominator == other.Denominator
    }
}
impl ::core::cmp::Eq for MFRatio {}
unsafe impl ::windows::runtime::Abi for MFRatio {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFRegisterLocalByteStreamHandler<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, IMFActivate>>(szfileextension: Param0, szmimetype: Param1, pactivate: Param2) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFRegisterLocalByteStreamHandler(szfileextension: super::super::Foundation::PWSTR, szmimetype: super::super::Foundation::PWSTR, pactivate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        MFRegisterLocalByteStreamHandler(szfileextension.into_param().abi(), szmimetype.into_param().abi(), pactivate.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFRegisterLocalSchemeHandler<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, IMFActivate>>(szscheme: Param0, pactivate: Param1) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFRegisterLocalSchemeHandler(szscheme: super::super::Foundation::PWSTR, pactivate: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        MFRegisterLocalSchemeHandler(szscheme.into_param().abi(), pactivate.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFRegisterPlatformWithMMCSS<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(wszclass: Param0, pdwtaskid: *mut u32, lpriority: i32) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFRegisterPlatformWithMMCSS(wszclass: super::super::Foundation::PWSTR, pdwtaskid: *mut u32, lpriority: i32) -> ::windows::runtime::HRESULT;
        }
        MFRegisterPlatformWithMMCSS(wszclass.into_param().abi(), ::core::mem::transmute(pdwtaskid), ::core::mem::transmute(lpriority)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFRemovePeriodicCallback(dwkey: u32) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFRemovePeriodicCallback(dwkey: u32) -> ::windows::runtime::HRESULT;
        }
        MFRemovePeriodicCallback(::core::mem::transmute(dwkey)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFRequireProtectedEnvironment<'a, Param0: ::windows::runtime::IntoParam<'a, IMFPresentationDescriptor>>(ppresentationdescriptor: Param0) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFRequireProtectedEnvironment(ppresentationdescriptor: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        MFRequireProtectedEnvironment(ppresentationdescriptor.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFSEQUENCER_INVALID_ELEMENT_ID: u32 = 4294967295u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFSESSIONCAP_DOES_NOT_USE_NETWORK: u32 = 64u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFSESSIONCAP_PAUSE: u32 = 4u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFSESSIONCAP_RATE_FORWARD: u32 = 16u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFSESSIONCAP_RATE_REVERSE: u32 = 32u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFSESSIONCAP_SEEK: u32 = 2u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFSESSIONCAP_START: u32 = 1u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFSESSION_GETFULLTOPOLOGY_FLAGS(pub i32);
pub const MFSESSION_GETFULLTOPOLOGY_CURRENT: MFSESSION_GETFULLTOPOLOGY_FLAGS = MFSESSION_GETFULLTOPOLOGY_FLAGS(1i32);
impl ::core::convert::From<i32> for MFSESSION_GETFULLTOPOLOGY_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFSESSION_GETFULLTOPOLOGY_FLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFSESSION_SETTOPOLOGY_FLAGS(pub i32);
pub const MFSESSION_SETTOPOLOGY_IMMEDIATE: MFSESSION_SETTOPOLOGY_FLAGS = MFSESSION_SETTOPOLOGY_FLAGS(1i32);
pub const MFSESSION_SETTOPOLOGY_NORESOLUTION: MFSESSION_SETTOPOLOGY_FLAGS = MFSESSION_SETTOPOLOGY_FLAGS(2i32);
pub const MFSESSION_SETTOPOLOGY_CLEAR_CURRENT: MFSESSION_SETTOPOLOGY_FLAGS = MFSESSION_SETTOPOLOGY_FLAGS(4i32);
impl ::core::convert::From<i32> for MFSESSION_SETTOPOLOGY_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFSESSION_SETTOPOLOGY_FLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFSHUTDOWN_STATUS(pub i32);
pub const MFSHUTDOWN_INITIATED: MFSHUTDOWN_STATUS = MFSHUTDOWN_STATUS(0i32);
pub const MFSHUTDOWN_COMPLETED: MFSHUTDOWN_STATUS = MFSHUTDOWN_STATUS(1i32);
impl ::core::convert::From<i32> for MFSHUTDOWN_STATUS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFSHUTDOWN_STATUS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFSINK_WMDRMACTION(pub i32);
pub const MFSINK_WMDRMACTION_UNDEFINED: MFSINK_WMDRMACTION = MFSINK_WMDRMACTION(0i32);
pub const MFSINK_WMDRMACTION_ENCODE: MFSINK_WMDRMACTION = MFSINK_WMDRMACTION(1i32);
pub const MFSINK_WMDRMACTION_TRANSCODE: MFSINK_WMDRMACTION = MFSINK_WMDRMACTION(2i32);
pub const MFSINK_WMDRMACTION_TRANSCRYPT: MFSINK_WMDRMACTION = MFSINK_WMDRMACTION(3i32);
pub const MFSINK_WMDRMACTION_LAST: MFSINK_WMDRMACTION = MFSINK_WMDRMACTION(3i32);
impl ::core::convert::From<i32> for MFSINK_WMDRMACTION {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFSINK_WMDRMACTION {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFSTARTUP_FULL: u32 = 0u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFSTARTUP_LITE: u32 = 1u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFSTARTUP_NOSOCKET: u32 = 1u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFSTREAMSINK_MARKER_TYPE(pub i32);
pub const MFSTREAMSINK_MARKER_DEFAULT: MFSTREAMSINK_MARKER_TYPE = MFSTREAMSINK_MARKER_TYPE(0i32);
pub const MFSTREAMSINK_MARKER_ENDOFSEGMENT: MFSTREAMSINK_MARKER_TYPE = MFSTREAMSINK_MARKER_TYPE(1i32);
pub const MFSTREAMSINK_MARKER_TICK: MFSTREAMSINK_MARKER_TYPE = MFSTREAMSINK_MARKER_TYPE(2i32);
pub const MFSTREAMSINK_MARKER_EVENT: MFSTREAMSINK_MARKER_TYPE = MFSTREAMSINK_MARKER_TYPE(3i32);
impl ::core::convert::From<i32> for MFSTREAMSINK_MARKER_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFSTREAMSINK_MARKER_TYPE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFSampleAllocatorUsage(pub i32);
pub const MFSampleAllocatorUsage_UsesProvidedAllocator: MFSampleAllocatorUsage = MFSampleAllocatorUsage(0i32);
pub const MFSampleAllocatorUsage_UsesCustomAllocator: MFSampleAllocatorUsage = MFSampleAllocatorUsage(1i32);
pub const MFSampleAllocatorUsage_DoesNotAllocate: MFSampleAllocatorUsage = MFSampleAllocatorUsage(2i32);
impl ::core::convert::From<i32> for MFSampleAllocatorUsage {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFSampleAllocatorUsage {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFSampleEncryptionProtectionScheme(pub i32);
pub const MF_SAMPLE_ENCRYPTION_PROTECTION_SCHEME_NONE: MFSampleEncryptionProtectionScheme = MFSampleEncryptionProtectionScheme(0i32);
pub const MF_SAMPLE_ENCRYPTION_PROTECTION_SCHEME_AES_CTR: MFSampleEncryptionProtectionScheme = MFSampleEncryptionProtectionScheme(1i32);
pub const MF_SAMPLE_ENCRYPTION_PROTECTION_SCHEME_AES_CBC: MFSampleEncryptionProtectionScheme = MFSampleEncryptionProtectionScheme(2i32);
impl ::core::convert::From<i32> for MFSampleEncryptionProtectionScheme {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFSampleEncryptionProtectionScheme {
    type Abi = Self;
}
pub const MFSampleExtension_3DVideo: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4168062884, 56660, 20014, [154, 94, 85, 252, 45, 116, 160, 5]);
pub const MFSampleExtension_3DVideo_SampleFormat: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(140973938, 58223, 19711, [151, 179, 215, 46, 32, 152, 122, 72]);
pub const MFSampleExtension_AccumulatedNonRefPicPercent: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2045408479, 42816, 17499, [188, 152, 201, 237, 31, 38, 14, 238]);
pub const MFSampleExtension_BottomFieldFirst: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2484920483, 27363, 19930, [154, 8, 166, 66, 152, 52, 6, 23]);
pub const MFSampleExtension_CameraExtrinsics: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1802901080, 47084, 19515, [130, 37, 134, 35, 202, 190, 195, 29]);
pub const MFSampleExtension_CaptureMetadata: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(784212904, 64245, 17482, [166, 162, 235, 129, 8, 128, 171, 93]);
pub const MFSampleExtension_ChromaOnly: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(515446684, 40991, 18501, [140, 4, 14, 101, 162, 110, 176, 79]);
pub const MFSampleExtension_CleanPoint: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2631860696, 41200, 17338, [176, 119, 234, 160, 108, 189, 114, 138]);
pub const MFSampleExtension_ClosedCaption_CEA708: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(653299816, 59204, 18396, [170, 3, 219, 242, 4, 3, 189, 230]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFSampleExtension_ClosedCaption_CEA708_MAX_SIZE: u32 = 256u32;
pub const MFSampleExtension_Content_KeyID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3334993328, 44234, 16731, [135, 217, 16, 68, 20, 105, 239, 198]);
pub const MFSampleExtension_DecodeTimestamp: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1940477140, 2530, 18529, [190, 252, 148, 189, 151, 192, 142, 110]);
pub const MFSampleExtension_Depth_MaxReliableDepth: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3830793681, 7951, 18994, [168, 167, 97, 1, 162, 78, 168, 190]);
pub const MFSampleExtension_Depth_MinReliableDepth: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1602585266, 58219, 18376, [155, 135, 254, 225, 202, 114, 197, 176]);
pub const MFSampleExtension_DerivedFromTopField: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1750222426, 44572, 17747, [142, 155, 195, 66, 15, 203, 22, 55]);
pub const MFSampleExtension_DescrambleData: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1128807398, 18691, 17172, [176, 50, 41, 81, 54, 89, 54, 252]);
pub const MFSampleExtension_DeviceReferenceSystemTime: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1696823130, 47661, 16479, [178, 197, 1, 255, 136, 226, 232, 246]);
pub const MFSampleExtension_DeviceTimestamp: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2403218919, 11725, 18567, [134, 34, 42, 88, 186, 166, 82, 176]);
pub const MFSampleExtension_DirtyRects: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2611413541, 45890, 20119, [145, 38, 11, 86, 106, 183, 234, 126]);
pub const MFSampleExtension_Discontinuity: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2631860697, 41200, 17338, [176, 119, 234, 160, 108, 189, 114, 138]);
pub const MFSampleExtension_Encryption_ClearSliceHeaderData: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1426695412, 12813, 20076, [141, 26, 148, 198, 109, 210, 12, 176]);
pub const MFSampleExtension_Encryption_CryptByteBlock: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2642684059, 3199, 18195, [171, 149, 16, 138, 180, 42, 216, 1]);
pub const MFSampleExtension_Encryption_HardwareProtection: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2586520875, 33392, 17379, [132, 72, 153, 79, 66, 110, 136, 134]);
pub const MFSampleExtension_Encryption_HardwareProtection_KeyInfo: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2989957248, 17755, 19927, [153, 137, 26, 149, 87, 132, 183, 84]);
pub const MFSampleExtension_Encryption_HardwareProtection_KeyInfoID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2361380075, 38053, 19937, [130, 49, 168, 94, 71, 207, 129, 231]);
pub const MFSampleExtension_Encryption_HardwareProtection_VideoDecryptorContext: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1765044424, 59447, 18336, [136, 203, 83, 91, 144, 94, 53, 130]);
pub const MFSampleExtension_Encryption_KeyID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1983341969, 31071, 19873, [134, 237, 157, 70, 236, 161, 9, 169]);
pub const MFSampleExtension_Encryption_NALUTypes: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2968545223, 29004, 16748, [141, 89, 95, 77, 223, 137, 19, 182]);
pub const MFSampleExtension_Encryption_Opaque_Data: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(575502309, 5009, 20475, [159, 65, 180, 50, 246, 140, 97, 29]);
pub const MFSampleExtension_Encryption_ProtectionScheme: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3495219350, 10427, 17882, [135, 236, 116, 243, 81, 135, 20, 6]);
pub const MFSampleExtension_Encryption_ResumeVideoOutput: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2754980773, 45022, 19701, [188, 28, 246, 172, 175, 19, 148, 157]);
pub const MFSampleExtension_Encryption_SEIData: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1022421362, 17730, 18055, [153, 153, 88, 95, 86, 95, 186, 125]);
pub const MFSampleExtension_Encryption_SPSPPSData: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2933788578, 3596, 17724, [183, 243, 222, 134, 147, 54, 77, 17]);
pub const MFSampleExtension_Encryption_SampleID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1721284686, 2810, 17200, [174, 178, 28, 10, 152, 215, 164, 77]);
pub const MFSampleExtension_Encryption_SkipByteBlock: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(223675720, 33559, 19121, [132, 95, 208, 99, 6, 226, 147, 227]);
pub const MFSampleExtension_Encryption_SubSampleMappingSplit: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4261565625, 10917, 20188, [153, 247, 23, 232, 157, 191, 145, 116]);
pub const MFSampleExtension_Encryption_SubSample_Mapping: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2219111034, 27041, 18650, [189, 8, 17, 206, 243, 104, 48, 210]);
pub const MFSampleExtension_ExtendedCameraIntrinsics: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1443611813, 19936, 16659, [156, 220, 131, 45, 185, 116, 15, 61]);
pub const MFSampleExtension_FeatureMap: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2687684965, 18172, 16394, [180, 73, 73, 222, 83, 230, 42, 110]);
pub const MFSampleExtension_ForwardedDecodeUnitType: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(144594887, 18387, 18982, [191, 156, 75, 100, 250, 251, 93, 30]);
pub const MFSampleExtension_ForwardedDecodeUnits: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1112307020, 38856, 18646, [135, 119, 252, 65, 247, 182, 8, 121]);
pub const MFSampleExtension_FrameCorruption: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3034401420, 3051, 17604, [139, 117, 176, 43, 145, 59, 4, 240]);
pub const MFSampleExtension_GenKeyCtx: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(411115723, 55258, 19289, [155, 62, 146, 82, 253, 55, 48, 28]);
pub const MFSampleExtension_GenKeyFunc: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1142727150, 27423, 17665, [144, 58, 222, 135, 223, 66, 246, 237]);
pub const MFSampleExtension_HDCP_FrameCounter: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2637732960, 62727, 19110, [164, 10, 113, 2, 122, 2, 243, 222]);
pub const MFSampleExtension_HDCP_OptionalHeader: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2586735504, 4639, 17759, [131, 118, 201, 116, 40, 224, 181, 64]);
pub const MFSampleExtension_HDCP_StreamID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(394157428, 50032, 19066, [149, 162, 54, 131, 60, 1, 208, 175]);
pub const MFSampleExtension_Interlaced: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2983559946, 57016, 16611, [144, 250, 56, 153, 67, 113, 100, 97]);
pub const MFSampleExtension_LastSlice: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(727536727, 21831, 20231, [184, 200, 180, 163, 169, 161, 218, 172]);
pub const MFSampleExtension_LongTermReferenceFrameInfo: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2438230847, 57789, 16831, [129, 211, 252, 217, 24, 247, 19, 50]);
pub const MFSampleExtension_MDLCacheCookie: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1593846521, 55545, 16803, [182, 195, 162, 173, 67, 246, 71, 173]);
pub const MFSampleExtension_MULTIPLEXED_MANAGER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2379083385, 27482, 19525, [141, 185, 32, 179, 149, 240, 47, 207]);
pub const MFSampleExtension_MaxDecodeFrameSize: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3553387855, 63987, 18963, [136, 159, 240, 78, 178, 181, 185, 87]);
pub const MFSampleExtension_MeanAbsoluteDifference: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(484171281, 2228, 17169, [166, 221, 15, 159, 55, 25, 7, 170]);
pub const MFSampleExtension_MoveRegions: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3802580627, 14987, 19341, [149, 208, 246, 2, 129, 161, 47, 183]);
pub const MFSampleExtension_NALULengthInfo: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(420630140, 44363, 18015, [187, 24, 32, 24, 98, 135, 182, 175]);
pub const MFSampleExtension_PacketCrossOffsets: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(663316253, 14495, 16571, [144, 217, 194, 130, 247, 127, 154, 189]);
pub const MFSampleExtension_PhotoThumbnail: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1958463580, 51387, 17116, [181, 134, 218, 23, 255, 211, 93, 204]);
pub const MFSampleExtension_PhotoThumbnailMediaType: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1638749216, 60408, 16707, [137, 175, 107, 242, 95, 103, 45, 239]);
pub const MFSampleExtension_PinholeCameraIntrinsics: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1323546309, 27157, 20082, [151, 97, 112, 193, 219, 139, 159, 227]);
pub const MFSampleExtension_ROIRectangle: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(873767992, 18840, 19756, [190, 130, 190, 60, 160, 178, 77, 67]);
pub const MFSampleExtension_RepeatFirstField: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(810362236, 29843, 20413, [177, 73, 146, 40, 222, 141, 154, 153]);
pub const MFSampleExtension_RepeatFrame: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2294182799, 1809, 20290, [180, 88, 52, 74, 237, 66, 236, 47]);
pub const MFSampleExtension_SampleKeyID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2664895432, 39815, 19238, [130, 151, 169, 59, 12, 90, 138, 204]);
pub const MFSampleExtension_SingleField: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2642802710, 25995, 17754, [189, 224, 159, 167, 225, 90, 184, 249]);
pub const MFSampleExtension_Spatial_CameraCoordinateSystem: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2635319343, 8601, 20071, [145, 205, 209, 164, 24, 31, 37, 52]);
pub const MFSampleExtension_Spatial_CameraProjectionTransform: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1207565493, 10754, 20262, [164, 119, 121, 47, 223, 149, 136, 106]);
pub const MFSampleExtension_Spatial_CameraViewTransform: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1311055780, 33551, 18288, [133, 154, 75, 141, 153, 170, 128, 155]);
pub const MFSampleExtension_TargetGlobalLuminance: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1063317302, 12783, 19887, [131, 96, 148, 3, 151, 228, 30, 243]);
pub const MFSampleExtension_Timestamp: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(507734425, 27070, 19578, [147, 105, 112, 6, 140, 2, 96, 203]);
pub const MFSampleExtension_Token: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2190793318, 62248, 18437, [181, 81, 0, 222, 180, 197, 122, 97]);
pub const MFSampleExtension_VideoDSPMode: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3240973771, 55257, 18285, [129, 243, 105, 17, 127, 22, 62, 160]);
pub const MFSampleExtension_VideoEncodePictureType: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2536965350, 52500, 18492, [143, 32, 201, 252, 9, 40, 186, 213]);
pub const MFSampleExtension_VideoEncodeQP: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3002066040, 63865, 19558, [185, 94, 238, 43, 130, 200, 47, 54]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFScheduleWorkItem<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncCallback>, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(pcallback: Param0, pstate: Param1, timeout: i64) -> ::windows::runtime::Result<u64> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFScheduleWorkItem(pcallback: ::windows::runtime::RawPtr, pstate: ::windows::runtime::RawPtr, timeout: i64, pkey: *mut u64) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFScheduleWorkItem(pcallback.into_param().abi(), pstate.into_param().abi(), ::core::mem::transmute(timeout), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFScheduleWorkItemEx<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAsyncResult>>(presult: Param0, timeout: i64) -> ::windows::runtime::Result<u64> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFScheduleWorkItemEx(presult: ::windows::runtime::RawPtr, timeout: i64, pkey: *mut u64) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFScheduleWorkItemEx(presult.into_param().abi(), ::core::mem::transmute(timeout), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFSensorDeviceMode(pub i32);
pub const MFSensorDeviceMode_Controller: MFSensorDeviceMode = MFSensorDeviceMode(0i32);
pub const MFSensorDeviceMode_Shared: MFSensorDeviceMode = MFSensorDeviceMode(1i32);
impl ::core::convert::From<i32> for MFSensorDeviceMode {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFSensorDeviceMode {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFSensorDeviceType(pub i32);
pub const MFSensorDeviceType_Unknown: MFSensorDeviceType = MFSensorDeviceType(0i32);
pub const MFSensorDeviceType_Device: MFSensorDeviceType = MFSensorDeviceType(1i32);
pub const MFSensorDeviceType_MediaSource: MFSensorDeviceType = MFSensorDeviceType(2i32);
pub const MFSensorDeviceType_FrameProvider: MFSensorDeviceType = MFSensorDeviceType(3i32);
pub const MFSensorDeviceType_SensorTransform: MFSensorDeviceType = MFSensorDeviceType(4i32);
impl ::core::convert::From<i32> for MFSensorDeviceType {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFSensorDeviceType {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFSensorStreamType(pub i32);
pub const MFSensorStreamType_Unknown: MFSensorStreamType = MFSensorStreamType(0i32);
pub const MFSensorStreamType_Input: MFSensorStreamType = MFSensorStreamType(1i32);
pub const MFSensorStreamType_Output: MFSensorStreamType = MFSensorStreamType(2i32);
impl ::core::convert::From<i32> for MFSensorStreamType {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFSensorStreamType {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFSequencerTopologyFlags(pub i32);
pub const SequencerTopologyFlags_Last: MFSequencerTopologyFlags = MFSequencerTopologyFlags(1i32);
impl ::core::convert::From<i32> for MFSequencerTopologyFlags {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFSequencerTopologyFlags {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_System_Com`*"]
#[cfg(feature = "Win32_System_Com")]
#[inline]
pub unsafe fn MFSerializeAttributesToStream<'a, Param0: ::windows::runtime::IntoParam<'a, IMFAttributes>, Param2: ::windows::runtime::IntoParam<'a, super::super::System::Com::IStream>>(pattr: Param0, dwoptions: u32, pstm: Param2) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFSerializeAttributesToStream(pattr: ::windows::runtime::RawPtr, dwoptions: u32, pstm: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        MFSerializeAttributesToStream(pattr.into_param().abi(), ::core::mem::transmute(dwoptions), pstm.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFSerializePresentationDescriptor<'a, Param0: ::windows::runtime::IntoParam<'a, IMFPresentationDescriptor>>(ppd: Param0, pcbdata: *mut u32, ppbdata: *mut *mut u8) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFSerializePresentationDescriptor(ppd: ::windows::runtime::RawPtr, pcbdata: *mut u32, ppbdata: *mut *mut u8) -> ::windows::runtime::HRESULT;
        }
        MFSerializePresentationDescriptor(ppd.into_param().abi(), ::core::mem::transmute(pcbdata), ::core::mem::transmute(ppbdata)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFShutdown() -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFShutdown() -> ::windows::runtime::HRESULT;
        }
        MFShutdown().ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFShutdownObject<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(punk: Param0) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFShutdownObject(punk: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        MFShutdownObject(punk.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFSplitSample<'a, Param0: ::windows::runtime::IntoParam<'a, IMFSample>>(psample: Param0, poutputsamples: *mut ::core::option::Option<IMFSample>, dwoutputsamplemaxcount: u32, pdwoutputsamplecount: *mut u32) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFSplitSample(psample: ::windows::runtime::RawPtr, poutputsamples: *mut ::windows::runtime::RawPtr, dwoutputsamplemaxcount: u32, pdwoutputsamplecount: *mut u32) -> ::windows::runtime::HRESULT;
        }
        MFSplitSample(psample.into_param().abi(), ::core::mem::transmute(poutputsamples), ::core::mem::transmute(dwoutputsamplemaxcount), ::core::mem::transmute(pdwoutputsamplecount)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFStandardVideoFormat(pub i32);
pub const MFStdVideoFormat_reserved: MFStandardVideoFormat = MFStandardVideoFormat(0i32);
pub const MFStdVideoFormat_NTSC: MFStandardVideoFormat = MFStandardVideoFormat(1i32);
pub const MFStdVideoFormat_PAL: MFStandardVideoFormat = MFStandardVideoFormat(2i32);
pub const MFStdVideoFormat_DVD_NTSC: MFStandardVideoFormat = MFStandardVideoFormat(3i32);
pub const MFStdVideoFormat_DVD_PAL: MFStandardVideoFormat = MFStandardVideoFormat(4i32);
pub const MFStdVideoFormat_DV_PAL: MFStandardVideoFormat = MFStandardVideoFormat(5i32);
pub const MFStdVideoFormat_DV_NTSC: MFStandardVideoFormat = MFStandardVideoFormat(6i32);
pub const MFStdVideoFormat_ATSC_SD480i: MFStandardVideoFormat = MFStandardVideoFormat(7i32);
pub const MFStdVideoFormat_ATSC_HD1080i: MFStandardVideoFormat = MFStandardVideoFormat(8i32);
pub const MFStdVideoFormat_ATSC_HD720p: MFStandardVideoFormat = MFStandardVideoFormat(9i32);
impl ::core::convert::From<i32> for MFStandardVideoFormat {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFStandardVideoFormat {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFStartup(version: u32, dwflags: u32) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFStartup(version: u32, dwflags: u32) -> ::windows::runtime::HRESULT;
        }
        MFStartup(::core::mem::transmute(version), ::core::mem::transmute(dwflags)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub const MFStreamExtension_CameraExtrinsics: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1751226064, 5090, 16857, [150, 56, 239, 3, 44, 39, 42, 82]);
pub const MFStreamExtension_ExtendedCameraIntrinsics: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2859774943, 39468, 18646, [131, 147, 91, 209, 193, 168, 30, 110]);
pub const MFStreamExtension_PinholeCameraIntrinsics: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3685483605, 3784, 19183, [156, 50, 122, 62, 227, 69, 111, 83]);
pub const MFStreamFormat_MPEG2Program: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(640706513, 54064, 17884, [182, 105, 52, 217, 134, 228, 227, 225]);
pub const MFStreamFormat_MPEG2Transport: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3765272611, 56134, 4559, [180, 209, 0, 128, 95, 108, 187, 234]);
pub const MFSubtitleFormat_ATSC: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2141715107, 65198, 19990, [174, 223, 54, 185, 172, 251, 176, 153]);
pub const MFSubtitleFormat_CustomUserData: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(464771145, 26132, 19840, [136, 130, 237, 36, 170, 130, 218, 146]);
pub const MFSubtitleFormat_PGS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1911819850, 4728, 17474, [179, 13, 57, 221, 29, 119, 34, 188]);
pub const MFSubtitleFormat_SRT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1581678382, 30666, 19621, [131, 145, 209, 66, 237, 75, 118, 200]);
pub const MFSubtitleFormat_SSA: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1461152283, 6814, 20202, [171, 239, 198, 23, 96, 25, 138, 196]);
pub const MFSubtitleFormat_TTML: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1944533394, 39440, 17238, [149, 87, 113, 148, 233, 30, 62, 84]);
pub const MFSubtitleFormat_VobSub: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1804484852, 36140, 19693, [173, 145, 89, 96, 228, 91, 68, 51]);
pub const MFSubtitleFormat_WebVTT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3364278805, 62597, 16571, [141, 182, 250, 219, 198, 25, 164, 93]);
pub const MFSubtitleFormat_XML: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(537327951, 10698, 16789, [184, 219, 0, 222, 216, 255, 12, 151]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFTEnum<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::GUID>, Param4: ::windows::runtime::IntoParam<'a, IMFAttributes>>(guidcategory: Param0, flags: u32, pinputtype: *const MFT_REGISTER_TYPE_INFO, poutputtype: *const MFT_REGISTER_TYPE_INFO, pattributes: Param4, ppclsidmft: *mut *mut ::windows::runtime::GUID, pcmfts: *mut u32) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFTEnum(guidcategory: ::windows::runtime::GUID, flags: u32, pinputtype: *const MFT_REGISTER_TYPE_INFO, poutputtype: *const MFT_REGISTER_TYPE_INFO, pattributes: ::windows::runtime::RawPtr, ppclsidmft: *mut *mut ::windows::runtime::GUID, pcmfts: *mut u32) -> ::windows::runtime::HRESULT;
        }
        MFTEnum(guidcategory.into_param().abi(), ::core::mem::transmute(flags), ::core::mem::transmute(pinputtype), ::core::mem::transmute(poutputtype), pattributes.into_param().abi(), ::core::mem::transmute(ppclsidmft), ::core::mem::transmute(pcmfts)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFTEnum2<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::GUID>, Param4: ::windows::runtime::IntoParam<'a, IMFAttributes>>(guidcategory: Param0, flags: u32, pinputtype: *const MFT_REGISTER_TYPE_INFO, poutputtype: *const MFT_REGISTER_TYPE_INFO, pattributes: Param4, pppmftactivate: *mut *mut ::core::option::Option<IMFActivate>, pnummftactivate: *mut u32) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFTEnum2(guidcategory: ::windows::runtime::GUID, flags: u32, pinputtype: *const MFT_REGISTER_TYPE_INFO, poutputtype: *const MFT_REGISTER_TYPE_INFO, pattributes: ::windows::runtime::RawPtr, pppmftactivate: *mut *mut ::windows::runtime::RawPtr, pnummftactivate: *mut u32) -> ::windows::runtime::HRESULT;
        }
        MFTEnum2(guidcategory.into_param().abi(), ::core::mem::transmute(flags), ::core::mem::transmute(pinputtype), ::core::mem::transmute(poutputtype), pattributes.into_param().abi(), ::core::mem::transmute(pppmftactivate), ::core::mem::transmute(pnummftactivate)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFTEnumEx<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::GUID>>(guidcategory: Param0, flags: u32, pinputtype: *const MFT_REGISTER_TYPE_INFO, poutputtype: *const MFT_REGISTER_TYPE_INFO, pppmftactivate: *mut *mut ::core::option::Option<IMFActivate>, pnummftactivate: *mut u32) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFTEnumEx(guidcategory: ::windows::runtime::GUID, flags: u32, pinputtype: *const MFT_REGISTER_TYPE_INFO, poutputtype: *const MFT_REGISTER_TYPE_INFO, pppmftactivate: *mut *mut ::windows::runtime::RawPtr, pnummftactivate: *mut u32) -> ::windows::runtime::HRESULT;
        }
        MFTEnumEx(guidcategory.into_param().abi(), ::core::mem::transmute(flags), ::core::mem::transmute(pinputtype), ::core::mem::transmute(poutputtype), ::core::mem::transmute(pppmftactivate), ::core::mem::transmute(pnummftactivate)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFTGetInfo<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::GUID>>(clsidmft: Param0, pszname: *mut super::super::Foundation::PWSTR, ppinputtypes: *mut *mut MFT_REGISTER_TYPE_INFO, pcinputtypes: *mut u32, ppoutputtypes: *mut *mut MFT_REGISTER_TYPE_INFO, pcoutputtypes: *mut u32, ppattributes: *mut ::core::option::Option<IMFAttributes>) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFTGetInfo(clsidmft: ::windows::runtime::GUID, pszname: *mut super::super::Foundation::PWSTR, ppinputtypes: *mut *mut MFT_REGISTER_TYPE_INFO, pcinputtypes: *mut u32, ppoutputtypes: *mut *mut MFT_REGISTER_TYPE_INFO, pcoutputtypes: *mut u32, ppattributes: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        MFTGetInfo(clsidmft.into_param().abi(), ::core::mem::transmute(pszname), ::core::mem::transmute(ppinputtypes), ::core::mem::transmute(pcinputtypes), ::core::mem::transmute(ppoutputtypes), ::core::mem::transmute(pcoutputtypes), ::core::mem::transmute(ppattributes)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFTIMER_FLAGS(pub i32);
pub const MFTIMER_RELATIVE: MFTIMER_FLAGS = MFTIMER_FLAGS(1i32);
impl ::core::convert::From<i32> for MFTIMER_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFTIMER_FLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFTOPOLOGY_DXVA_MODE(pub i32);
pub const MFTOPOLOGY_DXVA_DEFAULT: MFTOPOLOGY_DXVA_MODE = MFTOPOLOGY_DXVA_MODE(0i32);
pub const MFTOPOLOGY_DXVA_NONE: MFTOPOLOGY_DXVA_MODE = MFTOPOLOGY_DXVA_MODE(1i32);
pub const MFTOPOLOGY_DXVA_FULL: MFTOPOLOGY_DXVA_MODE = MFTOPOLOGY_DXVA_MODE(2i32);
impl ::core::convert::From<i32> for MFTOPOLOGY_DXVA_MODE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFTOPOLOGY_DXVA_MODE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFTOPOLOGY_HARDWARE_MODE(pub i32);
pub const MFTOPOLOGY_HWMODE_SOFTWARE_ONLY: MFTOPOLOGY_HARDWARE_MODE = MFTOPOLOGY_HARDWARE_MODE(0i32);
pub const MFTOPOLOGY_HWMODE_USE_HARDWARE: MFTOPOLOGY_HARDWARE_MODE = MFTOPOLOGY_HARDWARE_MODE(1i32);
pub const MFTOPOLOGY_HWMODE_USE_ONLY_HARDWARE: MFTOPOLOGY_HARDWARE_MODE = MFTOPOLOGY_HARDWARE_MODE(2i32);
impl ::core::convert::From<i32> for MFTOPOLOGY_HARDWARE_MODE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFTOPOLOGY_HARDWARE_MODE {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MFTOPONODE_ATTRIBUTE_UPDATE {
    pub NodeId: u64,
    pub guidAttributeKey: ::windows::runtime::GUID,
    pub attrType: MF_ATTRIBUTE_TYPE,
    pub Anonymous: MFTOPONODE_ATTRIBUTE_UPDATE_0,
}
impl MFTOPONODE_ATTRIBUTE_UPDATE {}
impl ::core::default::Default for MFTOPONODE_ATTRIBUTE_UPDATE {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for MFTOPONODE_ATTRIBUTE_UPDATE {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for MFTOPONODE_ATTRIBUTE_UPDATE {}
unsafe impl ::windows::runtime::Abi for MFTOPONODE_ATTRIBUTE_UPDATE {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub union MFTOPONODE_ATTRIBUTE_UPDATE_0 {
    pub u32: u32,
    pub u64: u64,
    pub d: f64,
}
impl MFTOPONODE_ATTRIBUTE_UPDATE_0 {}
impl ::core::default::Default for MFTOPONODE_ATTRIBUTE_UPDATE_0 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for MFTOPONODE_ATTRIBUTE_UPDATE_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for MFTOPONODE_ATTRIBUTE_UPDATE_0 {}
unsafe impl ::windows::runtime::Abi for MFTOPONODE_ATTRIBUTE_UPDATE_0 {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFTRegister<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::GUID>, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::GUID>, Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>, Param8: ::windows::runtime::IntoParam<'a, IMFAttributes>>(
    clsidmft: Param0,
    guidcategory: Param1,
    pszname: Param2,
    flags: u32,
    cinputtypes: u32,
    pinputtypes: *const MFT_REGISTER_TYPE_INFO,
    coutputtypes: u32,
    poutputtypes: *const MFT_REGISTER_TYPE_INFO,
    pattributes: Param8,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFTRegister(clsidmft: ::windows::runtime::GUID, guidcategory: ::windows::runtime::GUID, pszname: super::super::Foundation::PWSTR, flags: u32, cinputtypes: u32, pinputtypes: *const MFT_REGISTER_TYPE_INFO, coutputtypes: u32, poutputtypes: *const MFT_REGISTER_TYPE_INFO, pattributes: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        MFTRegister(
            clsidmft.into_param().abi(),
            guidcategory.into_param().abi(),
            pszname.into_param().abi(),
            ::core::mem::transmute(flags),
            ::core::mem::transmute(cinputtypes),
            ::core::mem::transmute(pinputtypes),
            ::core::mem::transmute(coutputtypes),
            ::core::mem::transmute(poutputtypes),
            pattributes.into_param().abi(),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_System_Com`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
#[inline]
pub unsafe fn MFTRegisterLocal<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::IClassFactory>, Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(pclassfactory: Param0, guidcategory: *const ::windows::runtime::GUID, pszname: Param2, flags: u32, cinputtypes: u32, pinputtypes: *const MFT_REGISTER_TYPE_INFO, coutputtypes: u32, poutputtypes: *const MFT_REGISTER_TYPE_INFO) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFTRegisterLocal(pclassfactory: ::windows::runtime::RawPtr, guidcategory: *const ::windows::runtime::GUID, pszname: super::super::Foundation::PWSTR, flags: u32, cinputtypes: u32, pinputtypes: *const MFT_REGISTER_TYPE_INFO, coutputtypes: u32, poutputtypes: *const MFT_REGISTER_TYPE_INFO) -> ::windows::runtime::HRESULT;
        }
        MFTRegisterLocal(pclassfactory.into_param().abi(), ::core::mem::transmute(guidcategory), pszname.into_param().abi(), ::core::mem::transmute(flags), ::core::mem::transmute(cinputtypes), ::core::mem::transmute(pinputtypes), ::core::mem::transmute(coutputtypes), ::core::mem::transmute(poutputtypes)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn MFTRegisterLocalByCLSID<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>>(clisdmft: *const ::windows::runtime::GUID, guidcategory: *const ::windows::runtime::GUID, pszname: Param2, flags: u32, cinputtypes: u32, pinputtypes: *const MFT_REGISTER_TYPE_INFO, coutputtypes: u32, poutputtypes: *const MFT_REGISTER_TYPE_INFO) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFTRegisterLocalByCLSID(clisdmft: *const ::windows::runtime::GUID, guidcategory: *const ::windows::runtime::GUID, pszname: super::super::Foundation::PWSTR, flags: u32, cinputtypes: u32, pinputtypes: *const MFT_REGISTER_TYPE_INFO, coutputtypes: u32, poutputtypes: *const MFT_REGISTER_TYPE_INFO) -> ::windows::runtime::HRESULT;
        }
        MFTRegisterLocalByCLSID(::core::mem::transmute(clisdmft), ::core::mem::transmute(guidcategory), pszname.into_param().abi(), ::core::mem::transmute(flags), ::core::mem::transmute(cinputtypes), ::core::mem::transmute(pinputtypes), ::core::mem::transmute(coutputtypes), ::core::mem::transmute(poutputtypes)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFTUnregister<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::GUID>>(clsidmft: Param0) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFTUnregister(clsidmft: ::windows::runtime::GUID) -> ::windows::runtime::HRESULT;
        }
        MFTUnregister(clsidmft.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_System_Com`*"]
#[cfg(feature = "Win32_System_Com")]
#[inline]
pub unsafe fn MFTUnregisterLocal<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::IClassFactory>>(pclassfactory: Param0) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFTUnregisterLocal(pclassfactory: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        MFTUnregisterLocal(pclassfactory.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFTUnregisterLocalByCLSID<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::GUID>>(clsidmft: Param0) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFTUnregisterLocalByCLSID(clsidmft: ::windows::runtime::GUID) -> ::windows::runtime::HRESULT;
        }
        MFTUnregisterLocalByCLSID(clsidmft.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub const MFT_AUDIO_DECODER_AUDIO_ENDPOINT_ID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3352092014, 21400, 18069, [139, 231, 81, 179, 233, 81, 17, 189]);
pub const MFT_AUDIO_DECODER_DEGRADATION_INFO_ATTRIBUTE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1815316141, 60448, 17165, [178, 165, 80, 92, 113, 120, 217, 196]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFT_AUDIO_DECODER_DEGRADATION_REASON(pub i32);
pub const MFT_AUDIO_DECODER_DEGRADATION_REASON_NONE: MFT_AUDIO_DECODER_DEGRADATION_REASON = MFT_AUDIO_DECODER_DEGRADATION_REASON(0i32);
pub const MFT_AUDIO_DECODER_DEGRADATION_REASON_LICENSING_REQUIREMENT: MFT_AUDIO_DECODER_DEGRADATION_REASON = MFT_AUDIO_DECODER_DEGRADATION_REASON(1i32);
impl ::core::convert::From<i32> for MFT_AUDIO_DECODER_DEGRADATION_REASON {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFT_AUDIO_DECODER_DEGRADATION_REASON {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFT_AUDIO_DECODER_DEGRADATION_TYPE(pub i32);
pub const MFT_AUDIO_DECODER_DEGRADATION_TYPE_NONE: MFT_AUDIO_DECODER_DEGRADATION_TYPE = MFT_AUDIO_DECODER_DEGRADATION_TYPE(0i32);
pub const MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX2CHANNEL: MFT_AUDIO_DECODER_DEGRADATION_TYPE = MFT_AUDIO_DECODER_DEGRADATION_TYPE(1i32);
pub const MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX6CHANNEL: MFT_AUDIO_DECODER_DEGRADATION_TYPE = MFT_AUDIO_DECODER_DEGRADATION_TYPE(2i32);
pub const MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX8CHANNEL: MFT_AUDIO_DECODER_DEGRADATION_TYPE = MFT_AUDIO_DECODER_DEGRADATION_TYPE(3i32);
impl ::core::convert::From<i32> for MFT_AUDIO_DECODER_DEGRADATION_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFT_AUDIO_DECODER_DEGRADATION_TYPE {
    type Abi = Self;
}
pub const MFT_AUDIO_DECODER_SPATIAL_METADATA_CLIENT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(93879796, 4720, 18841, [146, 95, 142, 147, 154, 124, 10, 247]);
pub const MFT_CATEGORY_AUDIO_DECODER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2661760948, 61306, 17753, [141, 93, 113, 157, 143, 4, 38, 199]);
pub const MFT_CATEGORY_AUDIO_EFFECT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(285625416, 13896, 20176, [147, 46, 5, 206, 138, 200, 17, 183]);
pub const MFT_CATEGORY_AUDIO_ENCODER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2445691856, 63774, 19852, [146, 118, 219, 36, 130, 121, 217, 117]);
pub const MFT_CATEGORY_DEMULTIPLEXER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2825915002, 37787, 17605, [153, 215, 118, 34, 107, 35, 179, 241]);
pub const MFT_CATEGORY_ENCRYPTOR: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2965800894, 461, 17589, [184, 178, 124, 29, 126, 5, 139, 31]);
pub const MFT_CATEGORY_MULTIPLEXER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(94131742, 1454, 19297, [182, 157, 85, 182, 30, 229, 74, 123]);
pub const MFT_CATEGORY_OTHER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2417450327, 47082, 18689, [174, 179, 147, 58, 135, 71, 117, 111]);
pub const MFT_CATEGORY_VIDEO_DECODER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3602918731, 26675, 17844, [151, 26, 5, 164, 176, 75, 171, 145]);
pub const MFT_CATEGORY_VIDEO_EFFECT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(316767265, 21292, 19054, [138, 28, 64, 130, 90, 115, 99, 151]);
pub const MFT_CATEGORY_VIDEO_ENCODER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4154371197, 58693, 17287, [189, 238, 214, 71, 215, 189, 228, 42]);
pub const MFT_CATEGORY_VIDEO_PROCESSOR: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(808363004, 43615, 18425, [159, 122, 194, 24, 139, 177, 99, 2]);
pub const MFT_CATEGORY_VIDEO_RENDERER_EFFECT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(341629108, 37620, 19235, [138, 231, 224, 223, 6, 194, 218, 149]);
pub const MFT_CODEC_MERIT_Attribute: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2292697877, 31495, 18996, [145, 40, 230, 76, 103, 3, 196, 211]);
pub const MFT_CONNECTED_STREAM_ATTRIBUTE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1911470112, 42399, 19938, [188, 236, 56, 219, 29, 214, 17, 164]);
pub const MFT_CONNECTED_TO_HW_STREAM: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(887547688, 1750, 17553, [165, 83, 71, 149, 101, 13, 185, 18]);
pub const MFT_DECODER_EXPOSE_OUTPUT_TYPES_IN_NATIVE_ORDER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4018176831, 63738, 17625, [128, 216, 65, 237, 98, 50, 103, 12]);
pub const MFT_DECODER_FINAL_VIDEO_RESOLUTION_HINT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3694101654, 5572, 16506, [182, 240, 27, 102, 171, 95, 191, 83]);
pub const MFT_DECODER_QUALITY_MANAGEMENT_CUSTOM_CONTROL: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2723033303, 56869, 17752, [187, 251, 113, 7, 10, 45, 51, 46]);
pub const MFT_DECODER_QUALITY_MANAGEMENT_RECOVERY_WITHOUT_ARTIFACTS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3633843691, 2632, 16991, [134, 35, 97, 29, 180, 29, 56, 16]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFT_DRAIN_TYPE(pub i32);
pub const MFT_DRAIN_PRODUCE_TAILS: MFT_DRAIN_TYPE = MFT_DRAIN_TYPE(0i32);
pub const MFT_DRAIN_NO_TAILS: MFT_DRAIN_TYPE = MFT_DRAIN_TYPE(1i32);
impl ::core::convert::From<i32> for MFT_DRAIN_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFT_DRAIN_TYPE {
    type Abi = Self;
}
pub const MFT_ENCODER_ERROR: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3369201060, 39140, 16853, [146, 151, 68, 245, 56, 82, 249, 14]);
pub const MFT_ENCODER_SUPPORTS_CONFIG_EVENT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2258851246, 14967, 20164, [159, 49, 1, 20, 154, 78, 146, 222]);
pub const MFT_END_STREAMING_AWARE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1895548997, 45182, 16521, [176, 100, 57, 157, 198, 17, 15, 41]);
pub const MFT_ENUM_ADAPTER_LUID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(490295692, 57888, 19880, [160, 127, 186, 23, 37, 82, 214, 177]);
pub const MFT_ENUM_HARDWARE_URL_Attribute: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(800614060, 45176, 18754, [171, 108, 0, 61, 5, 205, 166, 116]);
pub const MFT_ENUM_HARDWARE_VENDOR_ID_Attribute: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(988590284, 859, 19404, [129, 133, 43, 141, 85, 30, 243, 175]);
pub const MFT_ENUM_TRANSCODE_ONLY_ATTRIBUTE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(287221965, 46634, 19419, [137, 246, 103, 255, 205, 194, 69, 139]);
pub const MFT_ENUM_VIDEO_RENDERER_EXTENSION_PROFILE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1657104680, 39502, 17467, [185, 220, 202, 200, 48, 194, 65, 0]);
pub const MFT_FIELDOFUSE_UNLOCK_Attribute: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2395138557, 37192, 16653, [131, 30, 112, 36, 57, 70, 26, 142]);
pub const MFT_FRIENDLY_NAME_Attribute: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(827325358, 23361, 19605, [156, 25, 78, 125, 88, 111, 172, 227]);
pub const MFT_GFX_DRIVER_VERSION_ID_Attribute: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4081815699, 1504, 19222, [153, 61, 62, 42, 44, 222, 106, 211]);
pub const MFT_HW_TIMESTAMP_WITH_QPC_Attribute: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2365788088, 52291, 16984, [162, 46, 146, 16, 190, 248, 155, 228]);
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MFT_INPUT_STREAM_INFO {
    pub hnsMaxLatency: i64,
    pub dwFlags: u32,
    pub cbSize: u32,
    pub cbMaxLookahead: u32,
    pub cbAlignment: u32,
}
impl MFT_INPUT_STREAM_INFO {}
impl ::core::default::Default for MFT_INPUT_STREAM_INFO {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MFT_INPUT_STREAM_INFO {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFT_INPUT_STREAM_INFO").field("hnsMaxLatency", &self.hnsMaxLatency).field("dwFlags", &self.dwFlags).field("cbSize", &self.cbSize).field("cbMaxLookahead", &self.cbMaxLookahead).field("cbAlignment", &self.cbAlignment).finish()
    }
}
impl ::core::cmp::PartialEq for MFT_INPUT_STREAM_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.hnsMaxLatency == other.hnsMaxLatency && self.dwFlags == other.dwFlags && self.cbSize == other.cbSize && self.cbMaxLookahead == other.cbMaxLookahead && self.cbAlignment == other.cbAlignment
    }
}
impl ::core::cmp::Eq for MFT_INPUT_STREAM_INFO {}
unsafe impl ::windows::runtime::Abi for MFT_INPUT_STREAM_INFO {
    type Abi = Self;
}
pub const MFT_INPUT_TYPES_Attributes: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1115081137, 30109, 19443, [156, 208, 13, 114, 61, 19, 143, 150]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFT_MESSAGE_TYPE(pub i32);
pub const MFT_MESSAGE_COMMAND_FLUSH: MFT_MESSAGE_TYPE = MFT_MESSAGE_TYPE(0i32);
pub const MFT_MESSAGE_COMMAND_DRAIN: MFT_MESSAGE_TYPE = MFT_MESSAGE_TYPE(1i32);
pub const MFT_MESSAGE_SET_D3D_MANAGER: MFT_MESSAGE_TYPE = MFT_MESSAGE_TYPE(2i32);
pub const MFT_MESSAGE_DROP_SAMPLES: MFT_MESSAGE_TYPE = MFT_MESSAGE_TYPE(3i32);
pub const MFT_MESSAGE_COMMAND_TICK: MFT_MESSAGE_TYPE = MFT_MESSAGE_TYPE(4i32);
pub const MFT_MESSAGE_NOTIFY_BEGIN_STREAMING: MFT_MESSAGE_TYPE = MFT_MESSAGE_TYPE(268435456i32);
pub const MFT_MESSAGE_NOTIFY_END_STREAMING: MFT_MESSAGE_TYPE = MFT_MESSAGE_TYPE(268435457i32);
pub const MFT_MESSAGE_NOTIFY_END_OF_STREAM: MFT_MESSAGE_TYPE = MFT_MESSAGE_TYPE(268435458i32);
pub const MFT_MESSAGE_NOTIFY_START_OF_STREAM: MFT_MESSAGE_TYPE = MFT_MESSAGE_TYPE(268435459i32);
pub const MFT_MESSAGE_NOTIFY_RELEASE_RESOURCES: MFT_MESSAGE_TYPE = MFT_MESSAGE_TYPE(268435460i32);
pub const MFT_MESSAGE_NOTIFY_REACQUIRE_RESOURCES: MFT_MESSAGE_TYPE = MFT_MESSAGE_TYPE(268435461i32);
pub const MFT_MESSAGE_NOTIFY_EVENT: MFT_MESSAGE_TYPE = MFT_MESSAGE_TYPE(268435462i32);
pub const MFT_MESSAGE_COMMAND_SET_OUTPUT_STREAM_STATE: MFT_MESSAGE_TYPE = MFT_MESSAGE_TYPE(268435463i32);
pub const MFT_MESSAGE_COMMAND_FLUSH_OUTPUT_STREAM: MFT_MESSAGE_TYPE = MFT_MESSAGE_TYPE(268435464i32);
pub const MFT_MESSAGE_COMMAND_MARKER: MFT_MESSAGE_TYPE = MFT_MESSAGE_TYPE(536870912i32);
impl ::core::convert::From<i32> for MFT_MESSAGE_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFT_MESSAGE_TYPE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFT_OUTPUT_BOUND_UPPER_UNBOUNDED: u64 = 9223372036854775807u64;
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MFT_OUTPUT_DATA_BUFFER {
    pub dwStreamID: u32,
    pub pSample: ::core::option::Option<IMFSample>,
    pub dwStatus: u32,
    pub pEvents: ::core::option::Option<IMFCollection>,
}
impl MFT_OUTPUT_DATA_BUFFER {}
impl ::core::default::Default for MFT_OUTPUT_DATA_BUFFER {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MFT_OUTPUT_DATA_BUFFER {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFT_OUTPUT_DATA_BUFFER").field("dwStreamID", &self.dwStreamID).field("pSample", &self.pSample).field("dwStatus", &self.dwStatus).field("pEvents", &self.pEvents).finish()
    }
}
impl ::core::cmp::PartialEq for MFT_OUTPUT_DATA_BUFFER {
    fn eq(&self, other: &Self) -> bool {
        self.dwStreamID == other.dwStreamID && self.pSample == other.pSample && self.dwStatus == other.dwStatus && self.pEvents == other.pEvents
    }
}
impl ::core::cmp::Eq for MFT_OUTPUT_DATA_BUFFER {}
unsafe impl ::windows::runtime::Abi for MFT_OUTPUT_DATA_BUFFER {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MFT_OUTPUT_STREAM_INFO {
    pub dwFlags: u32,
    pub cbSize: u32,
    pub cbAlignment: u32,
}
impl MFT_OUTPUT_STREAM_INFO {}
impl ::core::default::Default for MFT_OUTPUT_STREAM_INFO {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MFT_OUTPUT_STREAM_INFO {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFT_OUTPUT_STREAM_INFO").field("dwFlags", &self.dwFlags).field("cbSize", &self.cbSize).field("cbAlignment", &self.cbAlignment).finish()
    }
}
impl ::core::cmp::PartialEq for MFT_OUTPUT_STREAM_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.dwFlags == other.dwFlags && self.cbSize == other.cbSize && self.cbAlignment == other.cbAlignment
    }
}
impl ::core::cmp::Eq for MFT_OUTPUT_STREAM_INFO {}
unsafe impl ::windows::runtime::Abi for MFT_OUTPUT_STREAM_INFO {
    type Abi = Self;
}
pub const MFT_OUTPUT_TYPES_Attributes: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2393804019, 42063, 17158, [186, 92, 191, 93, 218, 36, 40, 24]);
pub const MFT_POLICY_SET_AWARE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1516452633, 52281, 20392, [140, 165, 89, 152, 27, 122, 0, 24]);
pub const MFT_PREFERRED_ENCODER_PROFILE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1392527625, 7925, 18135, [161, 142, 90, 117, 248, 181, 144, 95]);
pub const MFT_PREFERRED_OUTPUTTYPE_Attribute: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2121270425, 14698, 18926, [177, 180, 246, 40, 2, 30, 140, 157]);
pub const MFT_PROCESS_LOCAL_Attribute: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1412531940, 17993, 20069, [181, 136, 74, 163, 82, 175, 243, 121]);
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MFT_REGISTER_TYPE_INFO {
    pub guidMajorType: ::windows::runtime::GUID,
    pub guidSubtype: ::windows::runtime::GUID,
}
impl MFT_REGISTER_TYPE_INFO {}
impl ::core::default::Default for MFT_REGISTER_TYPE_INFO {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MFT_REGISTER_TYPE_INFO {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFT_REGISTER_TYPE_INFO").field("guidMajorType", &self.guidMajorType).field("guidSubtype", &self.guidSubtype).finish()
    }
}
impl ::core::cmp::PartialEq for MFT_REGISTER_TYPE_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.guidMajorType == other.guidMajorType && self.guidSubtype == other.guidSubtype
    }
}
impl ::core::cmp::Eq for MFT_REGISTER_TYPE_INFO {}
unsafe impl ::windows::runtime::Abi for MFT_REGISTER_TYPE_INFO {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct MFT_REGISTRATION_INFO {
    pub clsid: ::windows::runtime::GUID,
    pub guidCategory: ::windows::runtime::GUID,
    pub uiFlags: u32,
    pub pszName: super::super::Foundation::PWSTR,
    pub cInTypes: u32,
    pub pInTypes: *mut MFT_REGISTER_TYPE_INFO,
    pub cOutTypes: u32,
    pub pOutTypes: *mut MFT_REGISTER_TYPE_INFO,
}
#[cfg(feature = "Win32_Foundation")]
impl MFT_REGISTRATION_INFO {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for MFT_REGISTRATION_INFO {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for MFT_REGISTRATION_INFO {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFT_REGISTRATION_INFO")
            .field("clsid", &self.clsid)
            .field("guidCategory", &self.guidCategory)
            .field("uiFlags", &self.uiFlags)
            .field("pszName", &self.pszName)
            .field("cInTypes", &self.cInTypes)
            .field("pInTypes", &self.pInTypes)
            .field("cOutTypes", &self.cOutTypes)
            .field("pOutTypes", &self.pOutTypes)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for MFT_REGISTRATION_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.clsid == other.clsid && self.guidCategory == other.guidCategory && self.uiFlags == other.uiFlags && self.pszName == other.pszName && self.cInTypes == other.cInTypes && self.pInTypes == other.pInTypes && self.cOutTypes == other.cOutTypes && self.pOutTypes == other.pOutTypes
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for MFT_REGISTRATION_INFO {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for MFT_REGISTRATION_INFO {
    type Abi = Self;
}
pub const MFT_REMUX_MARK_I_PICTURE_AS_CLEAN_POINT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(911118213, 16174, 17260, [178, 162, 68, 64, 160, 18, 169, 232]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MFT_STREAMS_UNLIMITED: u32 = 4294967295u32;
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MFT_STREAM_STATE_PARAM {
    pub StreamId: u32,
    pub State: MF_STREAM_STATE,
}
impl MFT_STREAM_STATE_PARAM {}
impl ::core::default::Default for MFT_STREAM_STATE_PARAM {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MFT_STREAM_STATE_PARAM {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFT_STREAM_STATE_PARAM").field("StreamId", &self.StreamId).field("State", &self.State).finish()
    }
}
impl ::core::cmp::PartialEq for MFT_STREAM_STATE_PARAM {
    fn eq(&self, other: &Self) -> bool {
        self.StreamId == other.StreamId && self.State == other.State
    }
}
impl ::core::cmp::Eq for MFT_STREAM_STATE_PARAM {}
unsafe impl ::windows::runtime::Abi for MFT_STREAM_STATE_PARAM {
    type Abi = Self;
}
pub const MFT_SUPPORT_3DVIDEO: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(155156913, 20270, 17969, [129, 104, 121, 52, 3, 42, 1, 211]);
pub const MFT_SUPPORT_DYNAMIC_FORMAT_CHANGE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1397189137, 16147, 18939, [172, 66, 238, 39, 51, 201, 103, 65]);
pub const MFT_TRANSFORM_CLSID_Attribute: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1747043371, 26020, 20098, [153, 188, 154, 136, 32, 94, 205, 12]);
pub const MFT_USING_HARDWARE_DRM: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(888842109, 55198, 18775, [184, 206, 54, 43, 38, 132, 153, 108]);
pub const MFTranscodeContainerType_3GP: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(885326183, 17522, 20276, [158, 160, 196, 159, 186, 207, 3, 125]);
pub const MFTranscodeContainerType_AC3: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1837994435, 35985, 20177, [135, 66, 140, 52, 125, 91, 68, 208]);
pub const MFTranscodeContainerType_ADTS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(321901181, 3842, 17374, [163, 1, 56, 251, 187, 179, 131, 78]);
pub const MFTranscodeContainerType_AMR: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(39672531, 25114, 18267, [150, 77, 102, 177, 200, 36, 240, 121]);
pub const MFTranscodeContainerType_ASF: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1125085038, 46783, 20417, [160, 189, 158, 228, 110, 238, 42, 251]);
pub const MFTranscodeContainerType_AVI: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2128603311, 16431, 19830, [163, 60, 97, 159, 209, 87, 208, 241]);
pub const MFTranscodeContainerType_FLAC: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(825510563, 1449, 17077, [144, 27, 142, 157, 66, 87, 247, 94]);
pub const MFTranscodeContainerType_FMPEG4: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2611508977, 16799, 19319, [161, 224, 53, 149, 157, 157, 64, 4]);
pub const MFTranscodeContainerType_MP3: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3828922642, 33777, 19942, [158, 58, 159, 251, 198, 221, 36, 209]);
pub const MFTranscodeContainerType_MPEG2: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3217218553, 31668, 20367, [175, 222, 225, 18, 196, 75, 168, 130]);
pub const MFTranscodeContainerType_MPEG4: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3698118749, 47568, 16623, [189, 53, 250, 98, 44, 26, 178, 138]);
pub const MFTranscodeContainerType_WAVE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1690518844, 3878, 18241, [190, 99, 135, 189, 248, 187, 147, 91]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFTranscodeGetAudioOutputAvailableTypes<'a, Param2: ::windows::runtime::IntoParam<'a, IMFAttributes>>(guidsubtype: *const ::windows::runtime::GUID, dwmftflags: u32, pcodecconfig: Param2) -> ::windows::runtime::Result<IMFCollection> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFTranscodeGetAudioOutputAvailableTypes(guidsubtype: *const ::windows::runtime::GUID, dwmftflags: u32, pcodecconfig: ::windows::runtime::RawPtr, ppavailabletypes: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFCollection as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFTranscodeGetAudioOutputAvailableTypes(::core::mem::transmute(guidsubtype), ::core::mem::transmute(dwmftflags), pcodecconfig.into_param().abi(), &mut result__).from_abi::<IMFCollection>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFUnlockDXGIDeviceManager() -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFUnlockDXGIDeviceManager() -> ::windows::runtime::HRESULT;
        }
        MFUnlockDXGIDeviceManager().ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFUnlockPlatform() -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFUnlockPlatform() -> ::windows::runtime::HRESULT;
        }
        MFUnlockPlatform().ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFUnlockWorkQueue(dwworkqueue: u32) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFUnlockWorkQueue(dwworkqueue: u32) -> ::windows::runtime::HRESULT;
        }
        MFUnlockWorkQueue(::core::mem::transmute(dwworkqueue)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFUnregisterPlatformFromMMCSS() -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFUnregisterPlatformFromMMCSS() -> ::windows::runtime::HRESULT;
        }
        MFUnregisterPlatformFromMMCSS().ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFUnwrapMediaType<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaType>>(pwrap: Param0) -> ::windows::runtime::Result<IMFMediaType> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFUnwrapMediaType(pwrap: ::windows::runtime::RawPtr, pporig: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFMediaType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFUnwrapMediaType(pwrap.into_param().abi(), &mut result__).from_abi::<IMFMediaType>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct MFVIDEOFORMAT {
    pub dwSize: u32,
    pub videoInfo: MFVideoInfo,
    pub guidFormat: ::windows::runtime::GUID,
    pub compressedInfo: MFVideoCompressedInfo,
    pub surfaceInfo: MFVideoSurfaceInfo,
}
#[cfg(feature = "Win32_Foundation")]
impl MFVIDEOFORMAT {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for MFVIDEOFORMAT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for MFVIDEOFORMAT {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for MFVIDEOFORMAT {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for MFVIDEOFORMAT {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFVP_MESSAGE_TYPE(pub i32);
pub const MFVP_MESSAGE_FLUSH: MFVP_MESSAGE_TYPE = MFVP_MESSAGE_TYPE(0i32);
pub const MFVP_MESSAGE_INVALIDATEMEDIATYPE: MFVP_MESSAGE_TYPE = MFVP_MESSAGE_TYPE(1i32);
pub const MFVP_MESSAGE_PROCESSINPUTNOTIFY: MFVP_MESSAGE_TYPE = MFVP_MESSAGE_TYPE(2i32);
pub const MFVP_MESSAGE_BEGINSTREAMING: MFVP_MESSAGE_TYPE = MFVP_MESSAGE_TYPE(3i32);
pub const MFVP_MESSAGE_ENDSTREAMING: MFVP_MESSAGE_TYPE = MFVP_MESSAGE_TYPE(4i32);
pub const MFVP_MESSAGE_ENDOFSTREAM: MFVP_MESSAGE_TYPE = MFVP_MESSAGE_TYPE(5i32);
pub const MFVP_MESSAGE_STEP: MFVP_MESSAGE_TYPE = MFVP_MESSAGE_TYPE(6i32);
pub const MFVP_MESSAGE_CANCELSTEP: MFVP_MESSAGE_TYPE = MFVP_MESSAGE_TYPE(7i32);
impl ::core::convert::From<i32> for MFVP_MESSAGE_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFVP_MESSAGE_TYPE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFValidateMediaTypeSize<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::GUID>>(formattype: Param0, pblock: *const u8, cbsize: u32) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFValidateMediaTypeSize(formattype: ::windows::runtime::GUID, pblock: *const u8, cbsize: u32) -> ::windows::runtime::HRESULT;
        }
        MFValidateMediaTypeSize(formattype.into_param().abi(), ::core::mem::transmute(pblock), ::core::mem::transmute(cbsize)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFVideo3DFormat(pub i32);
pub const MFVideo3DSampleFormat_BaseView: MFVideo3DFormat = MFVideo3DFormat(0i32);
pub const MFVideo3DSampleFormat_MultiView: MFVideo3DFormat = MFVideo3DFormat(1i32);
pub const MFVideo3DSampleFormat_Packed_LeftRight: MFVideo3DFormat = MFVideo3DFormat(2i32);
pub const MFVideo3DSampleFormat_Packed_TopBottom: MFVideo3DFormat = MFVideo3DFormat(3i32);
impl ::core::convert::From<i32> for MFVideo3DFormat {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFVideo3DFormat {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFVideo3DSampleFormat(pub i32);
pub const MFSampleExtension_3DVideo_MultiView: MFVideo3DSampleFormat = MFVideo3DSampleFormat(1i32);
pub const MFSampleExtension_3DVideo_Packed: MFVideo3DSampleFormat = MFVideo3DSampleFormat(0i32);
impl ::core::convert::From<i32> for MFVideo3DSampleFormat {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFVideo3DSampleFormat {
    type Abi = Self;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9", feature = "Win32_Graphics_Gdi"))]
impl ::core::clone::Clone for MFVideoAlphaBitmap {
    fn clone(&self) -> Self {
        unimplemented!()
    }
}
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9", feature = "Win32_Graphics_Gdi"))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D9`, `Win32_Graphics_Gdi`*"]
pub struct MFVideoAlphaBitmap {
    pub GetBitmapFromDC: super::super::Foundation::BOOL,
    pub bitmap: MFVideoAlphaBitmap_0,
    pub params: MFVideoAlphaBitmapParams,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9", feature = "Win32_Graphics_Gdi"))]
impl MFVideoAlphaBitmap {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9", feature = "Win32_Graphics_Gdi"))]
impl ::core::default::Default for MFVideoAlphaBitmap {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9", feature = "Win32_Graphics_Gdi"))]
impl ::core::cmp::PartialEq for MFVideoAlphaBitmap {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9", feature = "Win32_Graphics_Gdi"))]
impl ::core::cmp::Eq for MFVideoAlphaBitmap {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9", feature = "Win32_Graphics_Gdi"))]
unsafe impl ::windows::runtime::Abi for MFVideoAlphaBitmap {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9", feature = "Win32_Graphics_Gdi"))]
impl ::core::clone::Clone for MFVideoAlphaBitmap_0 {
    fn clone(&self) -> Self {
        unimplemented!()
    }
}
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9", feature = "Win32_Graphics_Gdi"))]
pub union MFVideoAlphaBitmap_0 {
    pub hdc: super::super::Graphics::Gdi::HDC,
    pub pDDS: ::windows::runtime::RawPtr,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9", feature = "Win32_Graphics_Gdi"))]
impl MFVideoAlphaBitmap_0 {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9", feature = "Win32_Graphics_Gdi"))]
impl ::core::default::Default for MFVideoAlphaBitmap_0 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9", feature = "Win32_Graphics_Gdi"))]
impl ::core::cmp::PartialEq for MFVideoAlphaBitmap_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9", feature = "Win32_Graphics_Gdi"))]
impl ::core::cmp::Eq for MFVideoAlphaBitmap_0 {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9", feature = "Win32_Graphics_Gdi"))]
unsafe impl ::windows::runtime::Abi for MFVideoAlphaBitmap_0 {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFVideoAlphaBitmapFlags(pub i32);
pub const MFVideoAlphaBitmap_EntireDDS: MFVideoAlphaBitmapFlags = MFVideoAlphaBitmapFlags(1i32);
pub const MFVideoAlphaBitmap_SrcColorKey: MFVideoAlphaBitmapFlags = MFVideoAlphaBitmapFlags(2i32);
pub const MFVideoAlphaBitmap_SrcRect: MFVideoAlphaBitmapFlags = MFVideoAlphaBitmapFlags(4i32);
pub const MFVideoAlphaBitmap_DestRect: MFVideoAlphaBitmapFlags = MFVideoAlphaBitmapFlags(8i32);
pub const MFVideoAlphaBitmap_FilterMode: MFVideoAlphaBitmapFlags = MFVideoAlphaBitmapFlags(16i32);
pub const MFVideoAlphaBitmap_Alpha: MFVideoAlphaBitmapFlags = MFVideoAlphaBitmapFlags(32i32);
pub const MFVideoAlphaBitmap_BitMask: MFVideoAlphaBitmapFlags = MFVideoAlphaBitmapFlags(63i32);
impl ::core::convert::From<i32> for MFVideoAlphaBitmapFlags {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFVideoAlphaBitmapFlags {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct MFVideoAlphaBitmapParams {
    pub dwFlags: u32,
    pub clrSrcKey: u32,
    pub rcSrc: super::super::Foundation::RECT,
    pub nrcDest: MFVideoNormalizedRect,
    pub fAlpha: f32,
    pub dwFilterMode: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl MFVideoAlphaBitmapParams {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for MFVideoAlphaBitmapParams {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for MFVideoAlphaBitmapParams {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFVideoAlphaBitmapParams").field("dwFlags", &self.dwFlags).field("clrSrcKey", &self.clrSrcKey).field("rcSrc", &self.rcSrc).field("nrcDest", &self.nrcDest).field("fAlpha", &self.fAlpha).field("dwFilterMode", &self.dwFilterMode).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for MFVideoAlphaBitmapParams {
    fn eq(&self, other: &Self) -> bool {
        self.dwFlags == other.dwFlags && self.clrSrcKey == other.clrSrcKey && self.rcSrc == other.rcSrc && self.nrcDest == other.nrcDest && self.fAlpha == other.fAlpha && self.dwFilterMode == other.dwFilterMode
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for MFVideoAlphaBitmapParams {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for MFVideoAlphaBitmapParams {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct MFVideoArea {
    pub OffsetX: MFOffset,
    pub OffsetY: MFOffset,
    pub Area: super::super::Foundation::SIZE,
}
#[cfg(feature = "Win32_Foundation")]
impl MFVideoArea {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for MFVideoArea {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for MFVideoArea {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFVideoArea").field("OffsetX", &self.OffsetX).field("OffsetY", &self.OffsetY).field("Area", &self.Area).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for MFVideoArea {
    fn eq(&self, other: &Self) -> bool {
        self.OffsetX == other.OffsetX && self.OffsetY == other.OffsetY && self.Area == other.Area
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for MFVideoArea {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for MFVideoArea {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFVideoAspectRatioMode(pub i32);
pub const MFVideoARMode_None: MFVideoAspectRatioMode = MFVideoAspectRatioMode(0i32);
pub const MFVideoARMode_PreservePicture: MFVideoAspectRatioMode = MFVideoAspectRatioMode(1i32);
pub const MFVideoARMode_PreservePixel: MFVideoAspectRatioMode = MFVideoAspectRatioMode(2i32);
pub const MFVideoARMode_NonLinearStretch: MFVideoAspectRatioMode = MFVideoAspectRatioMode(4i32);
pub const MFVideoARMode_Mask: MFVideoAspectRatioMode = MFVideoAspectRatioMode(7i32);
impl ::core::convert::From<i32> for MFVideoAspectRatioMode {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFVideoAspectRatioMode {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFVideoChromaSubsampling(pub i32);
pub const MFVideoChromaSubsampling_Unknown: MFVideoChromaSubsampling = MFVideoChromaSubsampling(0i32);
pub const MFVideoChromaSubsampling_ProgressiveChroma: MFVideoChromaSubsampling = MFVideoChromaSubsampling(8i32);
pub const MFVideoChromaSubsampling_Horizontally_Cosited: MFVideoChromaSubsampling = MFVideoChromaSubsampling(4i32);
pub const MFVideoChromaSubsampling_Vertically_Cosited: MFVideoChromaSubsampling = MFVideoChromaSubsampling(2i32);
pub const MFVideoChromaSubsampling_Vertically_AlignedChromaPlanes: MFVideoChromaSubsampling = MFVideoChromaSubsampling(1i32);
pub const MFVideoChromaSubsampling_MPEG2: MFVideoChromaSubsampling = MFVideoChromaSubsampling(5i32);
pub const MFVideoChromaSubsampling_MPEG1: MFVideoChromaSubsampling = MFVideoChromaSubsampling(1i32);
pub const MFVideoChromaSubsampling_DV_PAL: MFVideoChromaSubsampling = MFVideoChromaSubsampling(6i32);
pub const MFVideoChromaSubsampling_Cosited: MFVideoChromaSubsampling = MFVideoChromaSubsampling(7i32);
pub const MFVideoChromaSubsampling_Last: MFVideoChromaSubsampling = MFVideoChromaSubsampling(8i32);
pub const MFVideoChromaSubsampling_ForceDWORD: MFVideoChromaSubsampling = MFVideoChromaSubsampling(2147483647i32);
impl ::core::convert::From<i32> for MFVideoChromaSubsampling {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFVideoChromaSubsampling {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MFVideoCompressedInfo {
    pub AvgBitrate: i64,
    pub AvgBitErrorRate: i64,
    pub MaxKeyFrameSpacing: u32,
}
impl MFVideoCompressedInfo {}
impl ::core::default::Default for MFVideoCompressedInfo {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MFVideoCompressedInfo {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFVideoCompressedInfo").field("AvgBitrate", &self.AvgBitrate).field("AvgBitErrorRate", &self.AvgBitErrorRate).field("MaxKeyFrameSpacing", &self.MaxKeyFrameSpacing).finish()
    }
}
impl ::core::cmp::PartialEq for MFVideoCompressedInfo {
    fn eq(&self, other: &Self) -> bool {
        self.AvgBitrate == other.AvgBitrate && self.AvgBitErrorRate == other.AvgBitErrorRate && self.MaxKeyFrameSpacing == other.MaxKeyFrameSpacing
    }
}
impl ::core::cmp::Eq for MFVideoCompressedInfo {}
unsafe impl ::windows::runtime::Abi for MFVideoCompressedInfo {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFVideoDRMFlags(pub i32);
pub const MFVideoDRMFlag_None: MFVideoDRMFlags = MFVideoDRMFlags(0i32);
pub const MFVideoDRMFlag_AnalogProtected: MFVideoDRMFlags = MFVideoDRMFlags(1i32);
pub const MFVideoDRMFlag_DigitallyProtected: MFVideoDRMFlags = MFVideoDRMFlags(2i32);
impl ::core::convert::From<i32> for MFVideoDRMFlags {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFVideoDRMFlags {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFVideoDSPMode(pub i32);
pub const MFVideoDSPMode_Passthrough: MFVideoDSPMode = MFVideoDSPMode(1i32);
pub const MFVideoDSPMode_Stabilization: MFVideoDSPMode = MFVideoDSPMode(4i32);
impl ::core::convert::From<i32> for MFVideoDSPMode {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFVideoDSPMode {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFVideoFlags(pub i32);
pub const MFVideoFlag_PAD_TO_Mask: MFVideoFlags = MFVideoFlags(3i32);
pub const MFVideoFlag_PAD_TO_None: MFVideoFlags = MFVideoFlags(0i32);
pub const MFVideoFlag_PAD_TO_4x3: MFVideoFlags = MFVideoFlags(1i32);
pub const MFVideoFlag_PAD_TO_16x9: MFVideoFlags = MFVideoFlags(2i32);
pub const MFVideoFlag_SrcContentHintMask: MFVideoFlags = MFVideoFlags(28i32);
pub const MFVideoFlag_SrcContentHintNone: MFVideoFlags = MFVideoFlags(0i32);
pub const MFVideoFlag_SrcContentHint16x9: MFVideoFlags = MFVideoFlags(4i32);
pub const MFVideoFlag_SrcContentHint235_1: MFVideoFlags = MFVideoFlags(8i32);
pub const MFVideoFlag_AnalogProtected: MFVideoFlags = MFVideoFlags(32i32);
pub const MFVideoFlag_DigitallyProtected: MFVideoFlags = MFVideoFlags(64i32);
pub const MFVideoFlag_ProgressiveContent: MFVideoFlags = MFVideoFlags(128i32);
pub const MFVideoFlag_FieldRepeatCountMask: MFVideoFlags = MFVideoFlags(1792i32);
pub const MFVideoFlag_FieldRepeatCountShift: MFVideoFlags = MFVideoFlags(8i32);
pub const MFVideoFlag_ProgressiveSeqReset: MFVideoFlags = MFVideoFlags(2048i32);
pub const MFVideoFlag_PanScanEnabled: MFVideoFlags = MFVideoFlags(131072i32);
pub const MFVideoFlag_LowerFieldFirst: MFVideoFlags = MFVideoFlags(262144i32);
pub const MFVideoFlag_BottomUpLinearRep: MFVideoFlags = MFVideoFlags(524288i32);
pub const MFVideoFlags_DXVASurface: MFVideoFlags = MFVideoFlags(1048576i32);
pub const MFVideoFlags_RenderTargetSurface: MFVideoFlags = MFVideoFlags(4194304i32);
pub const MFVideoFlags_ForceQWORD: MFVideoFlags = MFVideoFlags(2147483647i32);
impl ::core::convert::From<i32> for MFVideoFlags {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFVideoFlags {
    type Abi = Self;
}
pub const MFVideoFormat_420O: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1328558644, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_A16B16G16R16F: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(113, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_A2R10G10B10: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(31, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_AI44: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(875841857, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_ARGB32: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(21, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_AV1: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(825251393, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_AYUV: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1448433985, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_Base: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(0, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_Base_HDCP: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3938695637, 48404, 16951, [143, 31, 186, 180, 40, 228, 147, 18]);
pub const MFVideoFormat_D16: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(80, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_DV25: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(892499556, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_DV50: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(808810084, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_DVH1: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(828929636, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_DVHD: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1684567652, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_DVSD: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1685288548, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_DVSL: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1819506276, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_H263: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(859189832, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_H264: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(875967048, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_H264_ES: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1061221616, 22050, 20472, [182, 216, 161, 122, 88, 75, 238, 94]);
pub const MFVideoFormat_H264_HDCP: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1561127389, 38935, 18906, [189, 253, 245, 245, 185, 143, 24, 166]);
pub const MFVideoFormat_H265: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(892744264, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_HEVC: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1129727304, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_HEVC_ES: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1398162760, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_HEVC_HDCP: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1023283174, 1476, 18396, [157, 112, 75, 219, 41, 89, 114, 15]);
pub const MFVideoFormat_I420: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(808596553, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_IYUV: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1448433993, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_L16: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(81, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_L8: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(50, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_M4S2: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(844313677, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_MJPG: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1196444237, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_MP43: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(859066445, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_MP4S: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1395937357, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_MP4V: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1446269005, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_MPEG2: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3765272614, 56134, 4559, [180, 209, 0, 128, 95, 108, 187, 234]);
pub const MFVideoFormat_MPG1: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(826757197, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_MSS1: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(827544397, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_MSS2: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(844321613, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_NV11: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(825316942, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_NV12: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(842094158, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_NV21: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(825382478, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_ORAW: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1463898703, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_P010: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(808530000, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_P016: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(909193296, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_P210: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(808530512, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_P216: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(909193808, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_RGB24: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(20, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_RGB32: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(22, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_RGB555: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(24, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_RGB565: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(23, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_RGB8: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(41, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_Theora: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1868916852, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_UYVY: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1498831189, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_VP10: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(808538198, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_VP80: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(808996950, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_VP90: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(809062486, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_WMV1: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(827739479, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_WMV2: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(844516695, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_WMV3: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(861293911, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_WVC1: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(826496599, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_Y210: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(808530521, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_Y216: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(909193817, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_Y410: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(808531033, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_Y416: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(909194329, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_Y41P: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1345401945, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_Y41T: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1412510809, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_Y42T: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1412576345, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_YUY2: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(844715353, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_YV12: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(842094169, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_YVU9: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(961893977, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_YVYU: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1431918169, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_v210: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(808530550, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_v216: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(909193846, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
pub const MFVideoFormat_v410: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(808531062, 0, 16, [128, 0, 0, 170, 0, 56, 155, 113]);
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct MFVideoInfo {
    pub dwWidth: u32,
    pub dwHeight: u32,
    pub PixelAspectRatio: MFRatio,
    pub SourceChromaSubsampling: MFVideoChromaSubsampling,
    pub InterlaceMode: MFVideoInterlaceMode,
    pub TransferFunction: MFVideoTransferFunction,
    pub ColorPrimaries: MFVideoPrimaries,
    pub TransferMatrix: MFVideoTransferMatrix,
    pub SourceLighting: MFVideoLighting,
    pub FramesPerSecond: MFRatio,
    pub NominalRange: MFNominalRange,
    pub GeometricAperture: MFVideoArea,
    pub MinimumDisplayAperture: MFVideoArea,
    pub PanScanAperture: MFVideoArea,
    pub VideoFlags: u64,
}
#[cfg(feature = "Win32_Foundation")]
impl MFVideoInfo {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for MFVideoInfo {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for MFVideoInfo {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFVideoInfo")
            .field("dwWidth", &self.dwWidth)
            .field("dwHeight", &self.dwHeight)
            .field("PixelAspectRatio", &self.PixelAspectRatio)
            .field("SourceChromaSubsampling", &self.SourceChromaSubsampling)
            .field("InterlaceMode", &self.InterlaceMode)
            .field("TransferFunction", &self.TransferFunction)
            .field("ColorPrimaries", &self.ColorPrimaries)
            .field("TransferMatrix", &self.TransferMatrix)
            .field("SourceLighting", &self.SourceLighting)
            .field("FramesPerSecond", &self.FramesPerSecond)
            .field("NominalRange", &self.NominalRange)
            .field("GeometricAperture", &self.GeometricAperture)
            .field("MinimumDisplayAperture", &self.MinimumDisplayAperture)
            .field("PanScanAperture", &self.PanScanAperture)
            .field("VideoFlags", &self.VideoFlags)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for MFVideoInfo {
    fn eq(&self, other: &Self) -> bool {
        self.dwWidth == other.dwWidth
            && self.dwHeight == other.dwHeight
            && self.PixelAspectRatio == other.PixelAspectRatio
            && self.SourceChromaSubsampling == other.SourceChromaSubsampling
            && self.InterlaceMode == other.InterlaceMode
            && self.TransferFunction == other.TransferFunction
            && self.ColorPrimaries == other.ColorPrimaries
            && self.TransferMatrix == other.TransferMatrix
            && self.SourceLighting == other.SourceLighting
            && self.FramesPerSecond == other.FramesPerSecond
            && self.NominalRange == other.NominalRange
            && self.GeometricAperture == other.GeometricAperture
            && self.MinimumDisplayAperture == other.MinimumDisplayAperture
            && self.PanScanAperture == other.PanScanAperture
            && self.VideoFlags == other.VideoFlags
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for MFVideoInfo {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for MFVideoInfo {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFVideoInterlaceMode(pub i32);
pub const MFVideoInterlace_Unknown: MFVideoInterlaceMode = MFVideoInterlaceMode(0i32);
pub const MFVideoInterlace_Progressive: MFVideoInterlaceMode = MFVideoInterlaceMode(2i32);
pub const MFVideoInterlace_FieldInterleavedUpperFirst: MFVideoInterlaceMode = MFVideoInterlaceMode(3i32);
pub const MFVideoInterlace_FieldInterleavedLowerFirst: MFVideoInterlaceMode = MFVideoInterlaceMode(4i32);
pub const MFVideoInterlace_FieldSingleUpper: MFVideoInterlaceMode = MFVideoInterlaceMode(5i32);
pub const MFVideoInterlace_FieldSingleLower: MFVideoInterlaceMode = MFVideoInterlaceMode(6i32);
pub const MFVideoInterlace_MixedInterlaceOrProgressive: MFVideoInterlaceMode = MFVideoInterlaceMode(7i32);
pub const MFVideoInterlace_Last: MFVideoInterlaceMode = MFVideoInterlaceMode(8i32);
pub const MFVideoInterlace_ForceDWORD: MFVideoInterlaceMode = MFVideoInterlaceMode(2147483647i32);
impl ::core::convert::From<i32> for MFVideoInterlaceMode {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFVideoInterlaceMode {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFVideoLighting(pub i32);
pub const MFVideoLighting_Unknown: MFVideoLighting = MFVideoLighting(0i32);
pub const MFVideoLighting_bright: MFVideoLighting = MFVideoLighting(1i32);
pub const MFVideoLighting_office: MFVideoLighting = MFVideoLighting(2i32);
pub const MFVideoLighting_dim: MFVideoLighting = MFVideoLighting(3i32);
pub const MFVideoLighting_dark: MFVideoLighting = MFVideoLighting(4i32);
pub const MFVideoLighting_Last: MFVideoLighting = MFVideoLighting(5i32);
pub const MFVideoLighting_ForceDWORD: MFVideoLighting = MFVideoLighting(2147483647i32);
impl ::core::convert::From<i32> for MFVideoLighting {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFVideoLighting {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFVideoMixPrefs(pub i32);
pub const MFVideoMixPrefs_ForceHalfInterlace: MFVideoMixPrefs = MFVideoMixPrefs(1i32);
pub const MFVideoMixPrefs_AllowDropToHalfInterlace: MFVideoMixPrefs = MFVideoMixPrefs(2i32);
pub const MFVideoMixPrefs_AllowDropToBob: MFVideoMixPrefs = MFVideoMixPrefs(4i32);
pub const MFVideoMixPrefs_ForceBob: MFVideoMixPrefs = MFVideoMixPrefs(8i32);
pub const MFVideoMixPrefs_EnableRotation: MFVideoMixPrefs = MFVideoMixPrefs(16i32);
pub const MFVideoMixPrefs_Mask: MFVideoMixPrefs = MFVideoMixPrefs(31i32);
impl ::core::convert::From<i32> for MFVideoMixPrefs {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFVideoMixPrefs {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MFVideoNormalizedRect {
    pub left: f32,
    pub top: f32,
    pub right: f32,
    pub bottom: f32,
}
impl MFVideoNormalizedRect {}
impl ::core::default::Default for MFVideoNormalizedRect {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MFVideoNormalizedRect {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MFVideoNormalizedRect").field("left", &self.left).field("top", &self.top).field("right", &self.right).field("bottom", &self.bottom).finish()
    }
}
impl ::core::cmp::PartialEq for MFVideoNormalizedRect {
    fn eq(&self, other: &Self) -> bool {
        self.left == other.left && self.top == other.top && self.right == other.right && self.bottom == other.bottom
    }
}
impl ::core::cmp::Eq for MFVideoNormalizedRect {}
unsafe impl ::windows::runtime::Abi for MFVideoNormalizedRect {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFVideoPadFlags(pub i32);
pub const MFVideoPadFlag_PAD_TO_None: MFVideoPadFlags = MFVideoPadFlags(0i32);
pub const MFVideoPadFlag_PAD_TO_4x3: MFVideoPadFlags = MFVideoPadFlags(1i32);
pub const MFVideoPadFlag_PAD_TO_16x9: MFVideoPadFlags = MFVideoPadFlags(2i32);
impl ::core::convert::From<i32> for MFVideoPadFlags {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFVideoPadFlags {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFVideoPrimaries(pub i32);
pub const MFVideoPrimaries_Unknown: MFVideoPrimaries = MFVideoPrimaries(0i32);
pub const MFVideoPrimaries_reserved: MFVideoPrimaries = MFVideoPrimaries(1i32);
pub const MFVideoPrimaries_BT709: MFVideoPrimaries = MFVideoPrimaries(2i32);
pub const MFVideoPrimaries_BT470_2_SysM: MFVideoPrimaries = MFVideoPrimaries(3i32);
pub const MFVideoPrimaries_BT470_2_SysBG: MFVideoPrimaries = MFVideoPrimaries(4i32);
pub const MFVideoPrimaries_SMPTE170M: MFVideoPrimaries = MFVideoPrimaries(5i32);
pub const MFVideoPrimaries_SMPTE240M: MFVideoPrimaries = MFVideoPrimaries(6i32);
pub const MFVideoPrimaries_EBU3213: MFVideoPrimaries = MFVideoPrimaries(7i32);
pub const MFVideoPrimaries_SMPTE_C: MFVideoPrimaries = MFVideoPrimaries(8i32);
pub const MFVideoPrimaries_BT2020: MFVideoPrimaries = MFVideoPrimaries(9i32);
pub const MFVideoPrimaries_XYZ: MFVideoPrimaries = MFVideoPrimaries(10i32);
pub const MFVideoPrimaries_DCI_P3: MFVideoPrimaries = MFVideoPrimaries(11i32);
pub const MFVideoPrimaries_ACES: MFVideoPrimaries = MFVideoPrimaries(12i32);
pub const MFVideoPrimaries_Last: MFVideoPrimaries = MFVideoPrimaries(13i32);
pub const MFVideoPrimaries_ForceDWORD: MFVideoPrimaries = MFVideoPrimaries(2147483647i32);
impl ::core::convert::From<i32> for MFVideoPrimaries {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFVideoPrimaries {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFVideoRenderPrefs(pub i32);
pub const MFVideoRenderPrefs_DoNotRenderBorder: MFVideoRenderPrefs = MFVideoRenderPrefs(1i32);
pub const MFVideoRenderPrefs_DoNotClipToDevice: MFVideoRenderPrefs = MFVideoRenderPrefs(2i32);
pub const MFVideoRenderPrefs_AllowOutputThrottling: MFVideoRenderPrefs = MFVideoRenderPrefs(4i32);
pub const MFVideoRenderPrefs_ForceOutputThrottling: MFVideoRenderPrefs = MFVideoRenderPrefs(8i32);
pub const MFVideoRenderPrefs_ForceBatching: MFVideoRenderPrefs = MFVideoRenderPrefs(16i32);
pub const MFVideoRenderPrefs_AllowBatching: MFVideoRenderPrefs = MFVideoRenderPrefs(32i32);
pub const MFVideoRenderPrefs_ForceScaling: MFVideoRenderPrefs = MFVideoRenderPrefs(64i32);
pub const MFVideoRenderPrefs_AllowScaling: MFVideoRenderPrefs = MFVideoRenderPrefs(128i32);
pub const MFVideoRenderPrefs_DoNotRepaintOnStop: MFVideoRenderPrefs = MFVideoRenderPrefs(256i32);
pub const MFVideoRenderPrefs_Mask: MFVideoRenderPrefs = MFVideoRenderPrefs(511i32);
impl ::core::convert::From<i32> for MFVideoRenderPrefs {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFVideoRenderPrefs {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFVideoRotationFormat(pub i32);
pub const MFVideoRotationFormat_0: MFVideoRotationFormat = MFVideoRotationFormat(0i32);
pub const MFVideoRotationFormat_90: MFVideoRotationFormat = MFVideoRotationFormat(90i32);
pub const MFVideoRotationFormat_180: MFVideoRotationFormat = MFVideoRotationFormat(180i32);
pub const MFVideoRotationFormat_270: MFVideoRotationFormat = MFVideoRotationFormat(270i32);
impl ::core::convert::From<i32> for MFVideoRotationFormat {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFVideoRotationFormat {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFVideoSphericalFormat(pub i32);
pub const MFVideoSphericalFormat_Unsupported: MFVideoSphericalFormat = MFVideoSphericalFormat(0i32);
pub const MFVideoSphericalFormat_Equirectangular: MFVideoSphericalFormat = MFVideoSphericalFormat(1i32);
pub const MFVideoSphericalFormat_CubeMap: MFVideoSphericalFormat = MFVideoSphericalFormat(2i32);
pub const MFVideoSphericalFormat_3DMesh: MFVideoSphericalFormat = MFVideoSphericalFormat(3i32);
impl ::core::convert::From<i32> for MFVideoSphericalFormat {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFVideoSphericalFormat {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFVideoSphericalProjectionMode(pub i32);
pub const MFVideoSphericalProjectionMode_Spherical: MFVideoSphericalProjectionMode = MFVideoSphericalProjectionMode(0i32);
pub const MFVideoSphericalProjectionMode_Flat: MFVideoSphericalProjectionMode = MFVideoSphericalProjectionMode(1i32);
impl ::core::convert::From<i32> for MFVideoSphericalProjectionMode {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFVideoSphericalProjectionMode {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFVideoSrcContentHintFlags(pub i32);
pub const MFVideoSrcContentHintFlag_None: MFVideoSrcContentHintFlags = MFVideoSrcContentHintFlags(0i32);
pub const MFVideoSrcContentHintFlag_16x9: MFVideoSrcContentHintFlags = MFVideoSrcContentHintFlags(1i32);
pub const MFVideoSrcContentHintFlag_235_1: MFVideoSrcContentHintFlags = MFVideoSrcContentHintFlags(2i32);
impl ::core::convert::From<i32> for MFVideoSrcContentHintFlags {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFVideoSrcContentHintFlags {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MFVideoSurfaceInfo {
    pub Format: u32,
    pub PaletteEntries: u32,
    pub Palette: [MFPaletteEntry; 1],
}
impl MFVideoSurfaceInfo {}
impl ::core::default::Default for MFVideoSurfaceInfo {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for MFVideoSurfaceInfo {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for MFVideoSurfaceInfo {}
unsafe impl ::windows::runtime::Abi for MFVideoSurfaceInfo {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFVideoTransferFunction(pub i32);
pub const MFVideoTransFunc_Unknown: MFVideoTransferFunction = MFVideoTransferFunction(0i32);
pub const MFVideoTransFunc_10: MFVideoTransferFunction = MFVideoTransferFunction(1i32);
pub const MFVideoTransFunc_18: MFVideoTransferFunction = MFVideoTransferFunction(2i32);
pub const MFVideoTransFunc_20: MFVideoTransferFunction = MFVideoTransferFunction(3i32);
pub const MFVideoTransFunc_22: MFVideoTransferFunction = MFVideoTransferFunction(4i32);
pub const MFVideoTransFunc_709: MFVideoTransferFunction = MFVideoTransferFunction(5i32);
pub const MFVideoTransFunc_240M: MFVideoTransferFunction = MFVideoTransferFunction(6i32);
pub const MFVideoTransFunc_sRGB: MFVideoTransferFunction = MFVideoTransferFunction(7i32);
pub const MFVideoTransFunc_28: MFVideoTransferFunction = MFVideoTransferFunction(8i32);
pub const MFVideoTransFunc_Log_100: MFVideoTransferFunction = MFVideoTransferFunction(9i32);
pub const MFVideoTransFunc_Log_316: MFVideoTransferFunction = MFVideoTransferFunction(10i32);
pub const MFVideoTransFunc_709_sym: MFVideoTransferFunction = MFVideoTransferFunction(11i32);
pub const MFVideoTransFunc_2020_const: MFVideoTransferFunction = MFVideoTransferFunction(12i32);
pub const MFVideoTransFunc_2020: MFVideoTransferFunction = MFVideoTransferFunction(13i32);
pub const MFVideoTransFunc_26: MFVideoTransferFunction = MFVideoTransferFunction(14i32);
pub const MFVideoTransFunc_2084: MFVideoTransferFunction = MFVideoTransferFunction(15i32);
pub const MFVideoTransFunc_HLG: MFVideoTransferFunction = MFVideoTransferFunction(16i32);
pub const MFVideoTransFunc_10_rel: MFVideoTransferFunction = MFVideoTransferFunction(17i32);
pub const MFVideoTransFunc_Last: MFVideoTransferFunction = MFVideoTransferFunction(18i32);
pub const MFVideoTransFunc_ForceDWORD: MFVideoTransferFunction = MFVideoTransferFunction(2147483647i32);
impl ::core::convert::From<i32> for MFVideoTransferFunction {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFVideoTransferFunction {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFVideoTransferMatrix(pub i32);
pub const MFVideoTransferMatrix_Unknown: MFVideoTransferMatrix = MFVideoTransferMatrix(0i32);
pub const MFVideoTransferMatrix_BT709: MFVideoTransferMatrix = MFVideoTransferMatrix(1i32);
pub const MFVideoTransferMatrix_BT601: MFVideoTransferMatrix = MFVideoTransferMatrix(2i32);
pub const MFVideoTransferMatrix_SMPTE240M: MFVideoTransferMatrix = MFVideoTransferMatrix(3i32);
pub const MFVideoTransferMatrix_BT2020_10: MFVideoTransferMatrix = MFVideoTransferMatrix(4i32);
pub const MFVideoTransferMatrix_BT2020_12: MFVideoTransferMatrix = MFVideoTransferMatrix(5i32);
pub const MFVideoTransferMatrix_Last: MFVideoTransferMatrix = MFVideoTransferMatrix(6i32);
pub const MFVideoTransferMatrix_ForceDWORD: MFVideoTransferMatrix = MFVideoTransferMatrix(2147483647i32);
impl ::core::convert::From<i32> for MFVideoTransferMatrix {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFVideoTransferMatrix {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MFWaveFormatExConvertFlags(pub i32);
pub const MFWaveFormatExConvertFlag_Normal: MFWaveFormatExConvertFlags = MFWaveFormatExConvertFlags(0i32);
pub const MFWaveFormatExConvertFlag_ForceExtensible: MFWaveFormatExConvertFlags = MFWaveFormatExConvertFlags(1i32);
impl ::core::convert::From<i32> for MFWaveFormatExConvertFlags {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MFWaveFormatExConvertFlags {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFWrapMediaType<'a, Param0: ::windows::runtime::IntoParam<'a, IMFMediaType>>(porig: Param0, majortype: *const ::windows::runtime::GUID, subtype: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<IMFMediaType> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFWrapMediaType(porig: ::windows::runtime::RawPtr, majortype: *const ::windows::runtime::GUID, subtype: *const ::windows::runtime::GUID, ppwrap: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMFMediaType as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        MFWrapMediaType(porig.into_param().abi(), ::core::mem::transmute(majortype), ::core::mem::transmute(subtype), &mut result__).from_abi::<IMFMediaType>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_1024_BYTE_ALIGNMENT: u32 = 1023u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_128_BYTE_ALIGNMENT: u32 = 127u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_16_BYTE_ALIGNMENT: u32 = 15u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_1_BYTE_ALIGNMENT: u32 = 0u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_2048_BYTE_ALIGNMENT: u32 = 2047u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_256_BYTE_ALIGNMENT: u32 = 255u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_2_BYTE_ALIGNMENT: u32 = 1u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_32_BYTE_ALIGNMENT: u32 = 31u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_4096_BYTE_ALIGNMENT: u32 = 4095u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_4_BYTE_ALIGNMENT: u32 = 3u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_512_BYTE_ALIGNMENT: u32 = 511u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_64_BYTE_ALIGNMENT: u32 = 63u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_8192_BYTE_ALIGNMENT: u32 = 8191u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_8_BYTE_ALIGNMENT: u32 = 7u32;
pub const MF_ACCESS_CONTROLLED_MEDIASOURCE_SERVICE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(21647409, 12037, 19562, [159, 156, 125, 13, 196, 237, 165, 244]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_ACTIVATE_CUSTOM_MIXER(pub i32);
pub const MF_ACTIVATE_CUSTOM_MIXER_ALLOWFAIL: MF_ACTIVATE_CUSTOM_MIXER = MF_ACTIVATE_CUSTOM_MIXER(1i32);
impl ::core::convert::From<i32> for MF_ACTIVATE_CUSTOM_MIXER {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_ACTIVATE_CUSTOM_MIXER {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_ACTIVATE_CUSTOM_PRESENTER(pub i32);
pub const MF_ACTIVATE_CUSTOM_PRESENTER_ALLOWFAIL: MF_ACTIVATE_CUSTOM_PRESENTER = MF_ACTIVATE_CUSTOM_PRESENTER(1i32);
impl ::core::convert::From<i32> for MF_ACTIVATE_CUSTOM_PRESENTER {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_ACTIVATE_CUSTOM_PRESENTER {
    type Abi = Self;
}
pub const MF_ACTIVATE_CUSTOM_VIDEO_MIXER_ACTIVATE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3125351265, 48720, 17694, [149, 171, 109, 74, 204, 199, 218, 216]);
pub const MF_ACTIVATE_CUSTOM_VIDEO_MIXER_CLSID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3125351264, 48720, 17694, [149, 171, 109, 74, 204, 199, 218, 216]);
pub const MF_ACTIVATE_CUSTOM_VIDEO_MIXER_FLAGS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3125351266, 48720, 17694, [149, 171, 109, 74, 204, 199, 218, 216]);
pub const MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_ACTIVATE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3125351269, 48720, 17694, [149, 171, 109, 74, 204, 199, 218, 216]);
pub const MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_CLSID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3125351268, 48720, 17694, [149, 171, 109, 74, 204, 199, 218, 216]);
pub const MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_FLAGS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3125351270, 48720, 17694, [149, 171, 109, 74, 204, 199, 218, 216]);
pub const MF_ACTIVATE_MFT_LOCKED: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3254126908, 32613, 20413, [158, 57, 95, 174, 195, 196, 251, 215]);
pub const MF_ACTIVATE_VIDEO_WINDOW: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2586688477, 62846, 16738, [130, 185, 104, 49, 55, 118, 130, 211]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_API_VERSION: u32 = 112u32;
pub const MF_ASFPROFILE_MAXPACKETSIZE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(576222759, 18398, 16744, [135, 245, 181, 170, 155, 18, 168, 240]);
pub const MF_ASFPROFILE_MINPACKETSIZE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(576222758, 18398, 16744, [135, 245, 181, 170, 155, 18, 168, 240]);
pub const MF_ASFSTREAMCONFIG_LEAKYBUCKET1: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3332069633, 59930, 19611, [182, 146, 226, 160, 210, 154, 138, 221]);
pub const MF_ASFSTREAMCONFIG_LEAKYBUCKET2: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3332069634, 59930, 19611, [182, 146, 226, 160, 210, 154, 138, 221]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_ATTRIBUTES_MATCH_TYPE(pub i32);
pub const MF_ATTRIBUTES_MATCH_OUR_ITEMS: MF_ATTRIBUTES_MATCH_TYPE = MF_ATTRIBUTES_MATCH_TYPE(0i32);
pub const MF_ATTRIBUTES_MATCH_THEIR_ITEMS: MF_ATTRIBUTES_MATCH_TYPE = MF_ATTRIBUTES_MATCH_TYPE(1i32);
pub const MF_ATTRIBUTES_MATCH_ALL_ITEMS: MF_ATTRIBUTES_MATCH_TYPE = MF_ATTRIBUTES_MATCH_TYPE(2i32);
pub const MF_ATTRIBUTES_MATCH_INTERSECTION: MF_ATTRIBUTES_MATCH_TYPE = MF_ATTRIBUTES_MATCH_TYPE(3i32);
pub const MF_ATTRIBUTES_MATCH_SMALLER: MF_ATTRIBUTES_MATCH_TYPE = MF_ATTRIBUTES_MATCH_TYPE(4i32);
impl ::core::convert::From<i32> for MF_ATTRIBUTES_MATCH_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_ATTRIBUTES_MATCH_TYPE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_ATTRIBUTE_SERIALIZE_OPTIONS(pub i32);
pub const MF_ATTRIBUTE_SERIALIZE_UNKNOWN_BYREF: MF_ATTRIBUTE_SERIALIZE_OPTIONS = MF_ATTRIBUTE_SERIALIZE_OPTIONS(1i32);
impl ::core::convert::From<i32> for MF_ATTRIBUTE_SERIALIZE_OPTIONS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_ATTRIBUTE_SERIALIZE_OPTIONS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_ATTRIBUTE_TYPE(pub i32);
pub const MF_ATTRIBUTE_UINT32: MF_ATTRIBUTE_TYPE = MF_ATTRIBUTE_TYPE(19i32);
pub const MF_ATTRIBUTE_UINT64: MF_ATTRIBUTE_TYPE = MF_ATTRIBUTE_TYPE(21i32);
pub const MF_ATTRIBUTE_DOUBLE: MF_ATTRIBUTE_TYPE = MF_ATTRIBUTE_TYPE(5i32);
pub const MF_ATTRIBUTE_GUID: MF_ATTRIBUTE_TYPE = MF_ATTRIBUTE_TYPE(72i32);
pub const MF_ATTRIBUTE_STRING: MF_ATTRIBUTE_TYPE = MF_ATTRIBUTE_TYPE(31i32);
pub const MF_ATTRIBUTE_BLOB: MF_ATTRIBUTE_TYPE = MF_ATTRIBUTE_TYPE(4113i32);
pub const MF_ATTRIBUTE_IUNKNOWN: MF_ATTRIBUTE_TYPE = MF_ATTRIBUTE_TYPE(13i32);
impl ::core::convert::From<i32> for MF_ATTRIBUTE_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_ATTRIBUTE_TYPE {
    type Abi = Self;
}
pub const MF_AUDIO_RENDERER_ATTRIBUTE_ENDPOINT_ID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2970267331, 61297, 19651, [184, 115, 5, 169, 160, 139, 159, 142]);
pub const MF_AUDIO_RENDERER_ATTRIBUTE_ENDPOINT_ROLE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1806058751, 10181, 19714, [152, 135, 194, 134, 25, 253, 185, 27]);
pub const MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3991188960, 63493, 19820, [153, 179, 219, 1, 191, 149, 223, 171]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS_CROSSPROCESS: u32 = 1u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS_DONT_ALLOW_FORMAT_CHANGES: u32 = 4u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS_NOPERSIST: u32 = 2u32;
pub const MF_AUDIO_RENDERER_ATTRIBUTE_SESSION_ID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3991188963, 63493, 19820, [153, 179, 219, 1, 191, 149, 223, 171]);
pub const MF_AUDIO_RENDERER_ATTRIBUTE_STREAM_CATEGORY: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2843149425, 37612, 19956, [148, 254, 129, 195, 111, 12, 58, 122]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_AUVRHP_ROOMMODEL(pub i32);
pub const VRHP_SMALLROOM: MF_AUVRHP_ROOMMODEL = MF_AUVRHP_ROOMMODEL(0i32);
pub const VRHP_MEDIUMROOM: MF_AUVRHP_ROOMMODEL = MF_AUVRHP_ROOMMODEL(1i32);
pub const VRHP_BIGROOM: MF_AUVRHP_ROOMMODEL = MF_AUVRHP_ROOMMODEL(2i32);
pub const VRHP_CUSTUMIZEDROOM: MF_AUVRHP_ROOMMODEL = MF_AUVRHP_ROOMMODEL(3i32);
impl ::core::convert::From<i32> for MF_AUVRHP_ROOMMODEL {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_AUVRHP_ROOMMODEL {
    type Abi = Self;
}
pub const MF_BD_MVC_PLANE_OFFSET_METADATA: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1655067876, 46956, 18689, [152, 35, 44, 182, 21, 212, 115, 24]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_BOOT_DRIVER_VERIFICATION_FAILED: u32 = 1048576u32;
pub const MF_BYTESTREAMHANDLER_ACCEPTS_SHARE_WRITE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2799826739, 12289, 18709, [129, 80, 21, 88, 162, 24, 14, 200]);
pub const MF_BYTESTREAM_CONTENT_TYPE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4231365257, 15542, 17932, [164, 36, 182, 104, 18, 96, 55, 90]);
pub const MF_BYTESTREAM_DLNA_PROFILE_ID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4231365261, 15542, 17932, [164, 36, 182, 104, 18, 96, 55, 90]);
pub const MF_BYTESTREAM_DURATION: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4231365258, 15542, 17932, [164, 36, 182, 104, 18, 96, 55, 90]);
pub const MF_BYTESTREAM_EFFECTIVE_URL: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2600075785, 35281, 17071, [132, 86, 29, 230, 181, 98, 214, 145]);
pub const MF_BYTESTREAM_IFO_FILE_URI: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4231365260, 15542, 17932, [164, 36, 182, 104, 18, 96, 55, 90]);
pub const MF_BYTESTREAM_LAST_MODIFIED_TIME: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4231365259, 15542, 17932, [164, 36, 182, 104, 18, 96, 55, 90]);
pub const MF_BYTESTREAM_ORIGIN_NAME: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4231365256, 15542, 17932, [164, 36, 182, 104, 18, 96, 55, 90]);
pub const MF_BYTESTREAM_SERVICE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2869059115, 5849, 16768, [161, 39, 186, 108, 112, 21, 97, 97]);
pub const MF_BYTESTREAM_TRANSCODED: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3066413698, 19913, 19897, [171, 72, 207, 59, 109, 139, 197, 224]);
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MF_BYTE_STREAM_CACHE_RANGE {
    pub qwStartOffset: u64,
    pub qwEndOffset: u64,
}
impl MF_BYTE_STREAM_CACHE_RANGE {}
impl ::core::default::Default for MF_BYTE_STREAM_CACHE_RANGE {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MF_BYTE_STREAM_CACHE_RANGE {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MF_BYTE_STREAM_CACHE_RANGE").field("qwStartOffset", &self.qwStartOffset).field("qwEndOffset", &self.qwEndOffset).finish()
    }
}
impl ::core::cmp::PartialEq for MF_BYTE_STREAM_CACHE_RANGE {
    fn eq(&self, other: &Self) -> bool {
        self.qwStartOffset == other.qwStartOffset && self.qwEndOffset == other.qwEndOffset
    }
}
impl ::core::cmp::Eq for MF_BYTE_STREAM_CACHE_RANGE {}
unsafe impl ::windows::runtime::Abi for MF_BYTE_STREAM_CACHE_RANGE {
    type Abi = Self;
}
pub const MF_CAPTURE_ENGINE_ALL_EFFECTS_REMOVED: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4260197665, 36568, 17178, [169, 107, 243, 226, 86, 94, 152, 28]);
pub const MF_CAPTURE_ENGINE_AUDIO_PROCESSING: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(284278366, 32273, 16651, [151, 61, 244, 182, 16, 144, 0, 254]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_CAPTURE_ENGINE_AUDIO_PROCESSING_MODE(pub i32);
pub const MF_CAPTURE_ENGINE_AUDIO_PROCESSING_DEFAULT: MF_CAPTURE_ENGINE_AUDIO_PROCESSING_MODE = MF_CAPTURE_ENGINE_AUDIO_PROCESSING_MODE(0i32);
pub const MF_CAPTURE_ENGINE_AUDIO_PROCESSING_RAW: MF_CAPTURE_ENGINE_AUDIO_PROCESSING_MODE = MF_CAPTURE_ENGINE_AUDIO_PROCESSING_MODE(1i32);
impl ::core::convert::From<i32> for MF_CAPTURE_ENGINE_AUDIO_PROCESSING_MODE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_CAPTURE_ENGINE_AUDIO_PROCESSING_MODE {
    type Abi = Self;
}
pub const MF_CAPTURE_ENGINE_CAMERA_STREAM_BLOCKED: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2753598487, 36153, 18163, [183, 89, 89, 18, 82, 143, 66, 7]);
pub const MF_CAPTURE_ENGINE_CAMERA_STREAM_UNBLOCKED: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2615799536, 52655, 18199, [133, 100, 131, 74, 174, 102, 65, 92]);
pub const MF_CAPTURE_ENGINE_D3D_MANAGER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1994546811, 54677, 17027, [150, 44, 197, 148, 175, 215, 141, 223]);
pub const MF_CAPTURE_ENGINE_DECODER_MFT_FIELDOFUSE_UNLOCK_Attribute: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(730518248, 31435, 17185, [166, 6, 50, 92, 66, 73, 244, 252]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_CAPTURE_ENGINE_DEVICE_TYPE(pub i32);
pub const MF_CAPTURE_ENGINE_DEVICE_TYPE_AUDIO: MF_CAPTURE_ENGINE_DEVICE_TYPE = MF_CAPTURE_ENGINE_DEVICE_TYPE(0i32);
pub const MF_CAPTURE_ENGINE_DEVICE_TYPE_VIDEO: MF_CAPTURE_ENGINE_DEVICE_TYPE = MF_CAPTURE_ENGINE_DEVICE_TYPE(1i32);
impl ::core::convert::From<i32> for MF_CAPTURE_ENGINE_DEVICE_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_CAPTURE_ENGINE_DEVICE_TYPE {
    type Abi = Self;
}
pub const MF_CAPTURE_ENGINE_DISABLE_DXVA: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4186015842, 6045, 17215, [163, 47, 116, 203, 207, 116, 70, 109]);
pub const MF_CAPTURE_ENGINE_DISABLE_HARDWARE_TRANSFORMS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3083086443, 12807, 17557, [180, 231, 129, 249, 195, 93, 89, 145]);
pub const MF_CAPTURE_ENGINE_EFFECT_ADDED: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2861418421, 41032, 19987, [142, 190, 242, 60, 70, 200, 48, 193]);
pub const MF_CAPTURE_ENGINE_EFFECT_REMOVED: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3337149191, 64265, 19016, [137, 198, 191, 146, 160, 66, 34, 201]);
pub const MF_CAPTURE_ENGINE_ENABLE_CAMERA_STREAMSTATE_NOTIFICATION: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1283493533, 43757, 18195, [144, 251, 203, 36, 6, 74, 184, 218]);
pub const MF_CAPTURE_ENGINE_ENCODER_MFT_FIELDOFUSE_UNLOCK_Attribute: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1422277120, 30933, 16943, [170, 62, 94, 153, 172, 100, 146, 105]);
pub const MF_CAPTURE_ENGINE_ERROR: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1186504646, 13260, 17305, [157, 173, 120, 77, 231, 125, 88, 124]);
pub const MF_CAPTURE_ENGINE_EVENT_GENERATOR_GUID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2885323477, 64621, 18705, [135, 224, 150, 25, 69, 248, 247, 206]);
pub const MF_CAPTURE_ENGINE_EVENT_STREAM_INDEX: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2187951940, 45519, 17131, [151, 83, 248, 109, 100, 156, 136, 101]);
pub const MF_CAPTURE_ENGINE_INITIALIZED: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(563712700, 53138, 17713, [161, 174, 150, 225, 232, 134, 200, 241]);
pub const MF_CAPTURE_ENGINE_MEDIASOURCE_CONFIG: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3161033170, 4033, 18145, [167, 79, 239, 211, 107, 199, 136, 222]);
pub const MF_CAPTURE_ENGINE_MEDIA_CATEGORY: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2386516949, 56255, 17136, [133, 66, 208, 122, 57, 113, 118, 42]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE(pub i32);
pub const MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_OTHER: MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE = MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE(0i32);
pub const MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_COMMUNICATIONS: MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE = MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE(1i32);
pub const MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_MEDIA: MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE = MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE(2i32);
pub const MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_GAMECHAT: MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE = MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE(3i32);
pub const MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_SPEECH: MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE = MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE(4i32);
pub const MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_FARFIELDSPEECH: MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE = MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE(5i32);
pub const MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_UNIFORMSPEECH: MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE = MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE(6i32);
pub const MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_VOICETYPING: MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE = MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE(7i32);
impl ::core::convert::From<i32> for MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE {
    type Abi = Self;
}
pub const MF_CAPTURE_ENGINE_OUTPUT_MEDIA_TYPE_SET: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3400194452, 33772, 17897, [163, 10, 31, 32, 170, 219, 152, 49]);
pub const MF_CAPTURE_ENGINE_PHOTO_TAKEN: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1011926085, 29444, 18667, [134, 93, 187, 161, 155, 163, 175, 92]);
pub const MF_CAPTURE_ENGINE_PREVIEW_STARTED: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2752962337, 63955, 19060, [153, 27, 184, 23, 41, 137, 82, 196]);
pub const MF_CAPTURE_ENGINE_PREVIEW_STOPPED: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(332731452, 7901, 20048, [162, 239, 53, 10, 71, 103, 128, 96]);
pub const MF_CAPTURE_ENGINE_RECORD_SINK_AUDIO_MAX_PROCESSED_SAMPLES: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2560024874, 63239, 17664, [182, 189, 219, 142, 184, 16, 181, 15]);
pub const MF_CAPTURE_ENGINE_RECORD_SINK_AUDIO_MAX_UNPROCESSED_SAMPLES: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(484290881, 42996, 19800, [152, 150, 77, 21, 165, 60, 78, 254]);
pub const MF_CAPTURE_ENGINE_RECORD_SINK_VIDEO_MAX_PROCESSED_SAMPLES: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3887375518, 14380, 19183, [169, 70, 174, 213, 73, 11, 113, 17]);
pub const MF_CAPTURE_ENGINE_RECORD_SINK_VIDEO_MAX_UNPROCESSED_SAMPLES: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3026712325, 30995, 18580, [157, 66, 162, 21, 254, 162, 61, 169]);
pub const MF_CAPTURE_ENGINE_RECORD_STARTED: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2888499835, 56825, 18592, [137, 190, 56, 171, 53, 239, 69, 192]);
pub const MF_CAPTURE_ENGINE_RECORD_STOPPED: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1441079306, 63887, 19469, [169, 236, 158, 178, 94, 211, 215, 115]);
pub const MF_CAPTURE_ENGINE_SELECTEDCAMERAPROFILE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(51776382, 7279, 19890, [173, 86, 167, 196, 48, 248, 35, 146]);
pub const MF_CAPTURE_ENGINE_SELECTEDCAMERAPROFILE_INDEX: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1021871635, 8724, 18115, [180, 23, 130, 248, 163, 19, 201, 195]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_CAPTURE_ENGINE_SINK_TYPE(pub i32);
pub const MF_CAPTURE_ENGINE_SINK_TYPE_RECORD: MF_CAPTURE_ENGINE_SINK_TYPE = MF_CAPTURE_ENGINE_SINK_TYPE(0i32);
pub const MF_CAPTURE_ENGINE_SINK_TYPE_PREVIEW: MF_CAPTURE_ENGINE_SINK_TYPE = MF_CAPTURE_ENGINE_SINK_TYPE(1i32);
pub const MF_CAPTURE_ENGINE_SINK_TYPE_PHOTO: MF_CAPTURE_ENGINE_SINK_TYPE = MF_CAPTURE_ENGINE_SINK_TYPE(2i32);
impl ::core::convert::From<i32> for MF_CAPTURE_ENGINE_SINK_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_CAPTURE_ENGINE_SINK_TYPE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_CAPTURE_ENGINE_SOURCE(pub u32);
pub const MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_VIDEO_PREVIEW: MF_CAPTURE_ENGINE_SOURCE = MF_CAPTURE_ENGINE_SOURCE(4294967290u32);
pub const MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_VIDEO_RECORD: MF_CAPTURE_ENGINE_SOURCE = MF_CAPTURE_ENGINE_SOURCE(4294967289u32);
pub const MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_PHOTO: MF_CAPTURE_ENGINE_SOURCE = MF_CAPTURE_ENGINE_SOURCE(4294967288u32);
pub const MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_AUDIO: MF_CAPTURE_ENGINE_SOURCE = MF_CAPTURE_ENGINE_SOURCE(4294967287u32);
pub const MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_METADATA: MF_CAPTURE_ENGINE_SOURCE = MF_CAPTURE_ENGINE_SOURCE(4294967286u32);
pub const MF_CAPTURE_ENGINE_MEDIASOURCE: MF_CAPTURE_ENGINE_SOURCE = MF_CAPTURE_ENGINE_SOURCE(4294967295u32);
impl ::core::convert::From<u32> for MF_CAPTURE_ENGINE_SOURCE {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_CAPTURE_ENGINE_SOURCE {
    type Abi = Self;
}
impl ::core::ops::BitOr for MF_CAPTURE_ENGINE_SOURCE {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::core::ops::BitAnd for MF_CAPTURE_ENGINE_SOURCE {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::core::ops::BitOrAssign for MF_CAPTURE_ENGINE_SOURCE {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::core::ops::BitAndAssign for MF_CAPTURE_ENGINE_SOURCE {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::core::ops::Not for MF_CAPTURE_ENGINE_SOURCE {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_CAPTURE_ENGINE_STREAM_CATEGORY(pub i32);
pub const MF_CAPTURE_ENGINE_STREAM_CATEGORY_VIDEO_PREVIEW: MF_CAPTURE_ENGINE_STREAM_CATEGORY = MF_CAPTURE_ENGINE_STREAM_CATEGORY(0i32);
pub const MF_CAPTURE_ENGINE_STREAM_CATEGORY_VIDEO_CAPTURE: MF_CAPTURE_ENGINE_STREAM_CATEGORY = MF_CAPTURE_ENGINE_STREAM_CATEGORY(1i32);
pub const MF_CAPTURE_ENGINE_STREAM_CATEGORY_PHOTO_INDEPENDENT: MF_CAPTURE_ENGINE_STREAM_CATEGORY = MF_CAPTURE_ENGINE_STREAM_CATEGORY(2i32);
pub const MF_CAPTURE_ENGINE_STREAM_CATEGORY_PHOTO_DEPENDENT: MF_CAPTURE_ENGINE_STREAM_CATEGORY = MF_CAPTURE_ENGINE_STREAM_CATEGORY(3i32);
pub const MF_CAPTURE_ENGINE_STREAM_CATEGORY_AUDIO: MF_CAPTURE_ENGINE_STREAM_CATEGORY = MF_CAPTURE_ENGINE_STREAM_CATEGORY(4i32);
pub const MF_CAPTURE_ENGINE_STREAM_CATEGORY_UNSUPPORTED: MF_CAPTURE_ENGINE_STREAM_CATEGORY = MF_CAPTURE_ENGINE_STREAM_CATEGORY(5i32);
pub const MF_CAPTURE_ENGINE_STREAM_CATEGORY_METADATA: MF_CAPTURE_ENGINE_STREAM_CATEGORY = MF_CAPTURE_ENGINE_STREAM_CATEGORY(6i32);
impl ::core::convert::From<i32> for MF_CAPTURE_ENGINE_STREAM_CATEGORY {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_CAPTURE_ENGINE_STREAM_CATEGORY {
    type Abi = Self;
}
pub const MF_CAPTURE_ENGINE_USE_AUDIO_DEVICE_ONLY: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(478181338, 33894, 19908, [139, 142, 39, 107, 63, 133, 146, 59]);
pub const MF_CAPTURE_ENGINE_USE_VIDEO_DEVICE_ONLY: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2114081137, 53042, 20270, [143, 25, 65, 5, 119, 183, 58, 102]);
pub const MF_CAPTURE_METADATA_DIGITALWINDOW: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(661615266, 22984, 20329, [151, 180, 6, 139, 140, 14, 192, 68]);
pub const MF_CAPTURE_METADATA_EXIF: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(781546936, 35889, 18946, [133, 117, 66, 177, 151, 183, 21, 146]);
pub const MF_CAPTURE_METADATA_EXPOSURE_COMPENSATION: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3516443253, 19298, 17221, [171, 243, 60, 49, 250, 18, 194, 153]);
pub const MF_CAPTURE_METADATA_EXPOSURE_TIME: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(381267609, 52612, 16483, [135, 157, 162, 140, 118, 51, 114, 158]);
pub const MF_CAPTURE_METADATA_FACEROICHARACTERIZATIONS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3106382248, 6383, 18131, [179, 175, 105, 55, 47, 148, 217, 178]);
pub const MF_CAPTURE_METADATA_FACEROIS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2253333926, 13471, 18097, [163, 14, 84, 204, 34, 146, 138, 71]);
pub const MF_CAPTURE_METADATA_FACEROITIMESTAMPS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3914158284, 15776, 17620, [187, 52, 131, 25, 138, 116, 24, 104]);
pub const MF_CAPTURE_METADATA_FIRST_SCANLINE_START_TIME_QPC: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1781287409, 57426, 18102, [178, 217, 115, 193, 85, 135, 9, 175]);
pub const MF_CAPTURE_METADATA_FLASH: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1246843403, 64310, 17516, [157, 242, 104, 23, 27, 154, 3, 137]);
pub const MF_CAPTURE_METADATA_FLASH_POWER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2618166601, 517, 18714, [188, 157, 45, 110, 31, 77, 86, 132]);
pub const MF_CAPTURE_METADATA_FOCUSSTATE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2826887508, 39295, 18013, [185, 31, 41, 213, 59, 152, 43, 136]);
pub const MF_CAPTURE_METADATA_FRAME_BACKGROUND_MASK: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(66145747, 30173, 17210, [168, 226, 30, 63, 95, 42, 80, 160]);
pub const MF_CAPTURE_METADATA_FRAME_ILLUMINATION: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1835569148, 25555, 18174, [186, 218, 91, 148, 125, 176, 208, 128]);
pub const MF_CAPTURE_METADATA_FRAME_RAWSTREAM: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2454849403, 9856, 18873, [174, 2, 177, 144, 117, 151, 59, 112]);
pub const MF_CAPTURE_METADATA_HISTOGRAM: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2234876978, 12022, 19369, [163, 251, 6, 216, 41, 116, 184, 149]);
pub const MF_CAPTURE_METADATA_ISO_GAINS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(92285641, 3613, 16839, [168, 200, 126, 115, 105, 248, 78, 30]);
pub const MF_CAPTURE_METADATA_ISO_SPEED: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3844646543, 45795, 17662, [139, 101, 7, 191, 75, 90, 19, 255]);
pub const MF_CAPTURE_METADATA_LAST_SCANLINE_END_TIME_QPC: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3704282827, 50388, 16397, [180, 24, 16, 232, 133, 37, 225, 246]);
pub const MF_CAPTURE_METADATA_LENS_POSITION: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3053227654, 4561, 20080, [129, 155, 114, 58, 137, 250, 69, 32]);
pub const MF_CAPTURE_METADATA_PHOTO_FRAME_FLASH: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(262002374, 24579, 17880, [189, 89, 241, 245, 62, 61, 4, 232]);
pub const MF_CAPTURE_METADATA_REQUESTED_FRAME_SETTING_ID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3140949721, 35425, 18340, [129, 151, 69, 156, 127, 241, 116, 213]);
pub const MF_CAPTURE_METADATA_SCANLINE_DIRECTION: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1687593914, 6407, 18918, [176, 195, 18, 55, 149, 243, 128, 169]);
pub const MF_CAPTURE_METADATA_SCANLINE_TIME_QPC_ACCURACY: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1289198673, 63333, 19209, [177, 225, 39, 209, 247, 235, 234, 9]);
pub const MF_CAPTURE_METADATA_SCENE_MODE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2630071629, 24275, 19374, [179, 136, 118, 112, 174, 245, 158, 19]);
pub const MF_CAPTURE_METADATA_SENSORFRAMERATE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3679532414, 40253, 18786, [176, 109, 7, 206, 101, 13, 154, 10]);
pub const MF_CAPTURE_METADATA_UVC_PAYLOADHEADER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4193815175, 57821, 17438, [149, 203, 66, 226, 26, 100, 241, 217]);
pub const MF_CAPTURE_METADATA_WHITEBALANCE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3342269815, 4025, 20014, [151, 162, 252, 212, 144, 115, 158, 233]);
pub const MF_CAPTURE_METADATA_WHITEBALANCE_GAINS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3881241743, 11723, 19580, [170, 206, 34, 236, 231, 204, 230, 71]);
pub const MF_CAPTURE_METADATA_ZOOMFACTOR: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3842706305, 58625, 17090, [171, 242, 133, 126, 203, 19, 250, 92]);
pub const MF_CAPTURE_SINK_PREPARED: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2080170583, 4785, 17417, [140, 52, 212, 69, 218, 171, 117, 120]);
pub const MF_CAPTURE_SOURCE_CURRENT_DEVICE_MEDIA_TYPE_SET: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3890699852, 924, 17424, [129, 91, 135, 65, 48, 123, 99, 170]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_COMPONENT_CERT_REVOKED: u32 = 32768u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_COMPONENT_HS_CERT_REVOKED: u32 = 131072u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_COMPONENT_INVALID_EKU: u32 = 16384u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_COMPONENT_INVALID_ROOT: u32 = 65536u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_COMPONENT_LS_CERT_REVOKED: u32 = 262144u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_COMPONENT_REVOKED: u32 = 8192u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_CONNECT_METHOD(pub i32);
pub const MF_CONNECT_DIRECT: MF_CONNECT_METHOD = MF_CONNECT_METHOD(0i32);
pub const MF_CONNECT_ALLOW_CONVERTER: MF_CONNECT_METHOD = MF_CONNECT_METHOD(1i32);
pub const MF_CONNECT_ALLOW_DECODER: MF_CONNECT_METHOD = MF_CONNECT_METHOD(3i32);
pub const MF_CONNECT_RESOLVE_INDEPENDENT_OUTPUTTYPES: MF_CONNECT_METHOD = MF_CONNECT_METHOD(4i32);
pub const MF_CONNECT_AS_OPTIONAL: MF_CONNECT_METHOD = MF_CONNECT_METHOD(65536i32);
pub const MF_CONNECT_AS_OPTIONAL_BRANCH: MF_CONNECT_METHOD = MF_CONNECT_METHOD(131072i32);
impl ::core::convert::From<i32> for MF_CONNECT_METHOD {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_CONNECT_METHOD {
    type Abi = Self;
}
pub const MF_CONTENTDECRYPTIONMODULE_SERVICE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(355601477, 65408, 18506, [157, 203, 13, 248, 148, 230, 154, 1]);
pub const MF_CONTENT_DECRYPTOR_SERVICE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1755785511, 64635, 17646, [133, 244, 124, 81, 189, 85, 166, 89]);
pub const MF_CONTENT_PROTECTION_DEVICE_SERVICE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4283974511, 30368, 16894, [181, 102, 16, 204, 83, 150, 46, 221]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_CROSS_ORIGIN_POLICY(pub i32);
pub const MF_CROSS_ORIGIN_POLICY_NONE: MF_CROSS_ORIGIN_POLICY = MF_CROSS_ORIGIN_POLICY(0i32);
pub const MF_CROSS_ORIGIN_POLICY_ANONYMOUS: MF_CROSS_ORIGIN_POLICY = MF_CROSS_ORIGIN_POLICY(1i32);
pub const MF_CROSS_ORIGIN_POLICY_USE_CREDENTIALS: MF_CROSS_ORIGIN_POLICY = MF_CROSS_ORIGIN_POLICY(2i32);
impl ::core::convert::From<i32> for MF_CROSS_ORIGIN_POLICY {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_CROSS_ORIGIN_POLICY {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_CUSTOM_DECODE_UNIT_TYPE(pub i32);
pub const MF_DECODE_UNIT_NAL: MF_CUSTOM_DECODE_UNIT_TYPE = MF_CUSTOM_DECODE_UNIT_TYPE(0i32);
pub const MF_DECODE_UNIT_SEI: MF_CUSTOM_DECODE_UNIT_TYPE = MF_CUSTOM_DECODE_UNIT_TYPE(1i32);
impl ::core::convert::From<i32> for MF_CUSTOM_DECODE_UNIT_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_CUSTOM_DECODE_UNIT_TYPE {
    type Abi = Self;
}
pub const MF_DECODER_FWD_CUSTOM_SEI_DECODE_ORDER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4047224380, 14036, 16650, [185, 133, 122, 149, 26, 30, 98, 148]);
pub const MF_DEVICEMFT_CONNECTED_FILTER_KSCONTROL: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1781288870, 53625, 16845, [149, 35, 130, 35, 113, 234, 64, 229]);
pub const MF_DEVICEMFT_CONNECTED_PIN_KSCONTROL: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3862106359, 45636, 20216, [154, 125, 36, 199, 78, 50, 235, 208]);
pub const MF_DEVICEMFT_EXTENSION_PLUGIN_CLSID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(138730414, 13562, 18592, [167, 131, 142, 105, 111, 177, 201, 168]);
pub const MF_DEVICEMFT_SENSORPROFILE_COLLECTION: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(921427012, 45356, 17435, [137, 244, 8, 178, 244, 26, 156, 252]);
pub const MF_DEVICESTREAM_ATTRIBUTE_FACEAUTH_CAPABILITY: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3413102890, 8776, 20033, [173, 70, 231, 139, 185, 10, 185, 252]);
pub const MF_DEVICESTREAM_ATTRIBUTE_FRAMESOURCE_TYPES: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(387211217, 6955, 16956, [128, 1, 43, 104, 51, 237, 53, 136]);
pub const MF_DEVICESTREAM_ATTRIBUTE_SECURE_CAPABILITY: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2484065830, 60014, 18052, [152, 64, 54, 189, 110, 201, 251, 239]);
pub const MF_DEVICESTREAM_EXTENSION_PLUGIN_CLSID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(76440920, 24772, 16755, [189, 91, 106, 60, 162, 137, 106, 238]);
pub const MF_DEVICESTREAM_EXTENSION_PLUGIN_CONNECTION_POINT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(939079516, 58980, 20132, [170, 228, 203, 109, 29, 172, 161, 244]);
pub const MF_DEVICESTREAM_FILTER_KSCONTROL: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1182285002, 15861, 18723, [169, 239, 54, 183, 34, 62, 221, 224]);
pub const MF_DEVICESTREAM_FRAMESERVER_HIDDEN: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4093793915, 19857, 16761, [150, 209, 116, 200, 72, 12, 32, 52]);
pub const MF_DEVICESTREAM_FRAMESERVER_SHARED: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(481523945, 45689, 16852, [175, 151, 52, 162, 67, 230, 131, 32]);
pub const MF_DEVICESTREAM_IMAGE_STREAM: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2818553957, 59314, 17328, [159, 111, 154, 242, 160, 229, 15, 192]);
pub const MF_DEVICESTREAM_INDEPENDENT_IMAGE_STREAM: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(65989758, 54789, 17782, [139, 41, 101, 128, 180, 144, 215, 211]);
pub const MF_DEVICESTREAM_MAX_FRAME_BUFFERS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(377802430, 12661, 18821, [136, 44, 14, 253, 62, 138, 193, 30]);
pub const MF_DEVICESTREAM_MULTIPLEXED_MANAGER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1856324272, 10271, 16945, [164, 100, 254, 47, 80, 34, 80, 28]);
pub const MF_DEVICESTREAM_PIN_KSCONTROL: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4013881767, 34802, 18634, [190, 2, 103, 72, 120, 145, 142, 152]);
pub const MF_DEVICESTREAM_REQUIRED_CAPABILITIES: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1837864318, 31990, 17396, [175, 86, 156, 14, 30, 79, 203, 225]);
pub const MF_DEVICESTREAM_REQUIRED_SDDL: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(857401437, 49363, 18874, [131, 186, 130, 161, 45, 99, 205, 214]);
pub const MF_DEVICESTREAM_SENSORSTREAM_ID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3814432740, 1625, 19629, [187, 81, 51, 22, 11, 231, 228, 19]);
pub const MF_DEVICESTREAM_SOURCE_ATTRIBUTES: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(797750807, 13851, 17231, [133, 234, 153, 160, 62, 28, 228, 224]);
pub const MF_DEVICESTREAM_STREAM_CATEGORY: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(691660728, 42542, 17785, [182, 116, 212, 7, 61, 250, 187, 186]);
pub const MF_DEVICESTREAM_STREAM_ID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(297619744, 53540, 17515, [136, 230, 23, 6, 2, 87, 255, 249]);
pub const MF_DEVICESTREAM_TAKEPHOTO_TRIGGER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(488115764, 21388, 20411, [167, 90, 133, 154, 247, 210, 97, 166]);
pub const MF_DEVICESTREAM_TRANSFORM_STREAM_ID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3862509495, 55983, 19785, [129, 95, 216, 38, 248, 173, 49, 231]);
pub const MF_DEVICE_THERMAL_STATE_CHANGED: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1892470959, 64671, 19947, [168, 117, 159, 236, 209, 108, 91, 212]);
pub const MF_DEVSOURCE_ATTRIBUTE_FRIENDLY_NAME: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1624302937, 21240, 20386, [187, 206, 172, 219, 52, 168, 236, 1]);
pub const MF_DEVSOURCE_ATTRIBUTE_MEDIA_TYPE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1453857226, 3192, 19940, [160, 167, 61, 218, 186, 15, 36, 212]);
pub const MF_DEVSOURCE_ATTRIBUTE_SOURCE_PASSWORD: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2700967446, 17113, 18911, [132, 192, 232, 44, 94, 171, 136, 116]);
pub const MF_DEVSOURCE_ATTRIBUTE_SOURCE_STREAM_URL: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2642100434, 13847, 16451, [147, 227, 141, 109, 169, 187, 52, 146]);
pub const MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3322594814, 9514, 18319, [160, 239, 188, 143, 165, 247, 202, 211]);
pub const MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ENDPOINT_ID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(819630680, 65209, 18343, [164, 83, 118, 58, 122, 142, 28, 95]);
pub const MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_GUID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(350067228, 31999, 16830, [177, 185, 186, 26, 198, 236, 181, 113]);
pub const MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ROLE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3164410254, 35943, 18968, [133, 212, 18, 211, 0, 64, 5, 82]);
pub const MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_SYMBOLIC_LINK: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2563918686, 22832, 17940, [181, 161, 246, 0, 249, 53, 90, 120]);
pub const MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_CATEGORY: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2012261993, 50109, 17673, [148, 29, 70, 126, 77, 36, 137, 158]);
pub const MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_GUID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2328057978, 19175, 17112, [153, 224, 10, 96, 19, 238, 249, 15]);
pub const MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_HW_SOURCE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3731900090, 21718, 17543, [162, 164, 236, 124, 13, 27, 209, 99]);
pub const MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_MAX_BUFFERS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2111420208, 20269, 16853, [143, 149, 12, 201, 169, 18, 186, 38]);
pub const MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_PROVIDER_DEVICE_ID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(912825666, 41068, 16558, [132, 207, 245, 160, 52, 6, 124, 196]);
pub const MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_SYMBOLIC_LINK: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1492167384, 8895, 20362, [187, 61, 210, 196, 151, 140, 110, 47]);
pub const MF_DEVSOURCE_ATTRIBUTE_SOURCE_USERNAME: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(97524445, 38047, 18155, [188, 142, 139, 13, 43, 50, 215, 157]);
pub const MF_DEVSOURCE_ATTRIBUTE_SOURCE_XADDRESS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3164651090, 49959, 17607, [155, 125, 127, 168, 217, 181, 188, 218]);
pub const MF_DISABLE_FRAME_CORRUPTION_INFO: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1887887724, 18885, 16897, [136, 42, 133, 56, 243, 140, 241, 58]);
pub const MF_DISABLE_LOCALLY_REGISTERED_PLUGINS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1722903977, 44500, 18400, [161, 107, 90, 241, 251, 72, 54, 52]);
pub const MF_DMFT_FRAME_BUFFER_INFO: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(963437001, 26537, 17740, [135, 151, 149, 164, 87, 153, 216, 4]);
pub const MF_ENABLE_3DVIDEO_OUTPUT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3182263242, 3679, 19216, [171, 22, 38, 222, 56, 27, 98, 147]);
pub const MF_EVENT_DO_THINNING: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(840869627, 56025, 18148, [179, 29, 210, 234, 231, 9, 14, 48]);
pub const MF_EVENT_MFT_CONTEXT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3083678193, 35230, 19265, [128, 201, 38, 168, 150, 211, 41, 119]);
pub const MF_EVENT_MFT_INPUT_STREAM_ID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4070321354, 31462, 17106, [178, 132, 191, 131, 124, 200, 116, 226]);
pub const MF_EVENT_OUTPUT_NODE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2198805131, 49248, 18141, [168, 1, 28, 149, 222, 201, 177, 7]);
pub const MF_EVENT_PRESENTATION_TIME_OFFSET: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1524176081, 39749, 19085, [162, 192, 129, 209, 229, 11, 251, 7]);
pub const MF_EVENT_SCRUBSAMPLE_TIME: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2596737715, 56504, 17621, [141, 12, 55, 69, 90, 39, 130, 227]);
pub const MF_EVENT_SESSIONCAPS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2120137936, 4536, 19134, [175, 173, 16, 246, 89, 154, 127, 66]);
pub const MF_EVENT_SESSIONCAPS_DELTA: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2120137937, 4536, 19134, [175, 173, 16, 246, 89, 154, 127, 66]);
pub const MF_EVENT_SOURCE_ACTUAL_START: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2831963561, 27441, 16799, [132, 93, 255, 179, 81, 162, 67, 75]);
pub const MF_EVENT_SOURCE_CHARACTERISTICS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1205568656, 35618, 20306, [175, 218, 156, 225, 178, 211, 207, 168]);
pub const MF_EVENT_SOURCE_CHARACTERISTICS_OLD: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1205568657, 35618, 20306, [175, 218, 156, 225, 178, 211, 207, 168]);
pub const MF_EVENT_SOURCE_FAKE_START: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2831963559, 27441, 16799, [132, 93, 255, 179, 81, 162, 67, 75]);
pub const MF_EVENT_SOURCE_PROJECTSTART: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2831963560, 27441, 16799, [132, 93, 255, 179, 81, 162, 67, 75]);
pub const MF_EVENT_SOURCE_TOPOLOGY_CANCELED: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3680695888, 39518, 18180, [172, 243, 86, 59, 198, 167, 51, 100]);
pub const MF_EVENT_START_PRESENTATION_TIME: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1524176080, 39749, 19085, [162, 192, 129, 209, 229, 11, 251, 7]);
pub const MF_EVENT_START_PRESENTATION_TIME_AT_OUTPUT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1524176082, 39749, 19085, [162, 192, 129, 209, 229, 11, 251, 7]);
pub const MF_EVENT_STREAM_METADATA_CONTENT_KEYIDS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1348682909, 52265, 20422, [167, 90, 210, 71, 179, 90, 248, 92]);
pub const MF_EVENT_STREAM_METADATA_KEYDATA: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3445204129, 19003, 19389, [134, 101, 114, 164, 15, 190, 167, 118]);
pub const MF_EVENT_STREAM_METADATA_SYSTEMID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(513994596, 47638, 18998, [135, 25, 254, 117, 96, 186, 50, 173]);
pub const MF_EVENT_TOPOLOGY_STATUS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(818217357, 39507, 17739, [173, 158, 109, 95, 143, 167, 196, 59]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_EVENT_TYPE(pub i32);
pub const MEUnknown: MF_EVENT_TYPE = MF_EVENT_TYPE(0i32);
pub const MEError: MF_EVENT_TYPE = MF_EVENT_TYPE(1i32);
pub const MEExtendedType: MF_EVENT_TYPE = MF_EVENT_TYPE(2i32);
pub const MENonFatalError: MF_EVENT_TYPE = MF_EVENT_TYPE(3i32);
pub const MEGenericV1Anchor: MF_EVENT_TYPE = MF_EVENT_TYPE(3i32);
pub const MESessionUnknown: MF_EVENT_TYPE = MF_EVENT_TYPE(100i32);
pub const MESessionTopologySet: MF_EVENT_TYPE = MF_EVENT_TYPE(101i32);
pub const MESessionTopologiesCleared: MF_EVENT_TYPE = MF_EVENT_TYPE(102i32);
pub const MESessionStarted: MF_EVENT_TYPE = MF_EVENT_TYPE(103i32);
pub const MESessionPaused: MF_EVENT_TYPE = MF_EVENT_TYPE(104i32);
pub const MESessionStopped: MF_EVENT_TYPE = MF_EVENT_TYPE(105i32);
pub const MESessionClosed: MF_EVENT_TYPE = MF_EVENT_TYPE(106i32);
pub const MESessionEnded: MF_EVENT_TYPE = MF_EVENT_TYPE(107i32);
pub const MESessionRateChanged: MF_EVENT_TYPE = MF_EVENT_TYPE(108i32);
pub const MESessionScrubSampleComplete: MF_EVENT_TYPE = MF_EVENT_TYPE(109i32);
pub const MESessionCapabilitiesChanged: MF_EVENT_TYPE = MF_EVENT_TYPE(110i32);
pub const MESessionTopologyStatus: MF_EVENT_TYPE = MF_EVENT_TYPE(111i32);
pub const MESessionNotifyPresentationTime: MF_EVENT_TYPE = MF_EVENT_TYPE(112i32);
pub const MENewPresentation: MF_EVENT_TYPE = MF_EVENT_TYPE(113i32);
pub const MELicenseAcquisitionStart: MF_EVENT_TYPE = MF_EVENT_TYPE(114i32);
pub const MELicenseAcquisitionCompleted: MF_EVENT_TYPE = MF_EVENT_TYPE(115i32);
pub const MEIndividualizationStart: MF_EVENT_TYPE = MF_EVENT_TYPE(116i32);
pub const MEIndividualizationCompleted: MF_EVENT_TYPE = MF_EVENT_TYPE(117i32);
pub const MEEnablerProgress: MF_EVENT_TYPE = MF_EVENT_TYPE(118i32);
pub const MEEnablerCompleted: MF_EVENT_TYPE = MF_EVENT_TYPE(119i32);
pub const MEPolicyError: MF_EVENT_TYPE = MF_EVENT_TYPE(120i32);
pub const MEPolicyReport: MF_EVENT_TYPE = MF_EVENT_TYPE(121i32);
pub const MEBufferingStarted: MF_EVENT_TYPE = MF_EVENT_TYPE(122i32);
pub const MEBufferingStopped: MF_EVENT_TYPE = MF_EVENT_TYPE(123i32);
pub const MEConnectStart: MF_EVENT_TYPE = MF_EVENT_TYPE(124i32);
pub const MEConnectEnd: MF_EVENT_TYPE = MF_EVENT_TYPE(125i32);
pub const MEReconnectStart: MF_EVENT_TYPE = MF_EVENT_TYPE(126i32);
pub const MEReconnectEnd: MF_EVENT_TYPE = MF_EVENT_TYPE(127i32);
pub const MERendererEvent: MF_EVENT_TYPE = MF_EVENT_TYPE(128i32);
pub const MESessionStreamSinkFormatChanged: MF_EVENT_TYPE = MF_EVENT_TYPE(129i32);
pub const MESessionV1Anchor: MF_EVENT_TYPE = MF_EVENT_TYPE(129i32);
pub const MESourceUnknown: MF_EVENT_TYPE = MF_EVENT_TYPE(200i32);
pub const MESourceStarted: MF_EVENT_TYPE = MF_EVENT_TYPE(201i32);
pub const MEStreamStarted: MF_EVENT_TYPE = MF_EVENT_TYPE(202i32);
pub const MESourceSeeked: MF_EVENT_TYPE = MF_EVENT_TYPE(203i32);
pub const MEStreamSeeked: MF_EVENT_TYPE = MF_EVENT_TYPE(204i32);
pub const MENewStream: MF_EVENT_TYPE = MF_EVENT_TYPE(205i32);
pub const MEUpdatedStream: MF_EVENT_TYPE = MF_EVENT_TYPE(206i32);
pub const MESourceStopped: MF_EVENT_TYPE = MF_EVENT_TYPE(207i32);
pub const MEStreamStopped: MF_EVENT_TYPE = MF_EVENT_TYPE(208i32);
pub const MESourcePaused: MF_EVENT_TYPE = MF_EVENT_TYPE(209i32);
pub const MEStreamPaused: MF_EVENT_TYPE = MF_EVENT_TYPE(210i32);
pub const MEEndOfPresentation: MF_EVENT_TYPE = MF_EVENT_TYPE(211i32);
pub const MEEndOfStream: MF_EVENT_TYPE = MF_EVENT_TYPE(212i32);
pub const MEMediaSample: MF_EVENT_TYPE = MF_EVENT_TYPE(213i32);
pub const MEStreamTick: MF_EVENT_TYPE = MF_EVENT_TYPE(214i32);
pub const MEStreamThinMode: MF_EVENT_TYPE = MF_EVENT_TYPE(215i32);
pub const MEStreamFormatChanged: MF_EVENT_TYPE = MF_EVENT_TYPE(216i32);
pub const MESourceRateChanged: MF_EVENT_TYPE = MF_EVENT_TYPE(217i32);
pub const MEEndOfPresentationSegment: MF_EVENT_TYPE = MF_EVENT_TYPE(218i32);
pub const MESourceCharacteristicsChanged: MF_EVENT_TYPE = MF_EVENT_TYPE(219i32);
pub const MESourceRateChangeRequested: MF_EVENT_TYPE = MF_EVENT_TYPE(220i32);
pub const MESourceMetadataChanged: MF_EVENT_TYPE = MF_EVENT_TYPE(221i32);
pub const MESequencerSourceTopologyUpdated: MF_EVENT_TYPE = MF_EVENT_TYPE(222i32);
pub const MESourceV1Anchor: MF_EVENT_TYPE = MF_EVENT_TYPE(222i32);
pub const MESinkUnknown: MF_EVENT_TYPE = MF_EVENT_TYPE(300i32);
pub const MEStreamSinkStarted: MF_EVENT_TYPE = MF_EVENT_TYPE(301i32);
pub const MEStreamSinkStopped: MF_EVENT_TYPE = MF_EVENT_TYPE(302i32);
pub const MEStreamSinkPaused: MF_EVENT_TYPE = MF_EVENT_TYPE(303i32);
pub const MEStreamSinkRateChanged: MF_EVENT_TYPE = MF_EVENT_TYPE(304i32);
pub const MEStreamSinkRequestSample: MF_EVENT_TYPE = MF_EVENT_TYPE(305i32);
pub const MEStreamSinkMarker: MF_EVENT_TYPE = MF_EVENT_TYPE(306i32);
pub const MEStreamSinkPrerolled: MF_EVENT_TYPE = MF_EVENT_TYPE(307i32);
pub const MEStreamSinkScrubSampleComplete: MF_EVENT_TYPE = MF_EVENT_TYPE(308i32);
pub const MEStreamSinkFormatChanged: MF_EVENT_TYPE = MF_EVENT_TYPE(309i32);
pub const MEStreamSinkDeviceChanged: MF_EVENT_TYPE = MF_EVENT_TYPE(310i32);
pub const MEQualityNotify: MF_EVENT_TYPE = MF_EVENT_TYPE(311i32);
pub const MESinkInvalidated: MF_EVENT_TYPE = MF_EVENT_TYPE(312i32);
pub const MEAudioSessionNameChanged: MF_EVENT_TYPE = MF_EVENT_TYPE(313i32);
pub const MEAudioSessionVolumeChanged: MF_EVENT_TYPE = MF_EVENT_TYPE(314i32);
pub const MEAudioSessionDeviceRemoved: MF_EVENT_TYPE = MF_EVENT_TYPE(315i32);
pub const MEAudioSessionServerShutdown: MF_EVENT_TYPE = MF_EVENT_TYPE(316i32);
pub const MEAudioSessionGroupingParamChanged: MF_EVENT_TYPE = MF_EVENT_TYPE(317i32);
pub const MEAudioSessionIconChanged: MF_EVENT_TYPE = MF_EVENT_TYPE(318i32);
pub const MEAudioSessionFormatChanged: MF_EVENT_TYPE = MF_EVENT_TYPE(319i32);
pub const MEAudioSessionDisconnected: MF_EVENT_TYPE = MF_EVENT_TYPE(320i32);
pub const MEAudioSessionExclusiveModeOverride: MF_EVENT_TYPE = MF_EVENT_TYPE(321i32);
pub const MESinkV1Anchor: MF_EVENT_TYPE = MF_EVENT_TYPE(321i32);
pub const MECaptureAudioSessionVolumeChanged: MF_EVENT_TYPE = MF_EVENT_TYPE(322i32);
pub const MECaptureAudioSessionDeviceRemoved: MF_EVENT_TYPE = MF_EVENT_TYPE(323i32);
pub const MECaptureAudioSessionFormatChanged: MF_EVENT_TYPE = MF_EVENT_TYPE(324i32);
pub const MECaptureAudioSessionDisconnected: MF_EVENT_TYPE = MF_EVENT_TYPE(325i32);
pub const MECaptureAudioSessionExclusiveModeOverride: MF_EVENT_TYPE = MF_EVENT_TYPE(326i32);
pub const MECaptureAudioSessionServerShutdown: MF_EVENT_TYPE = MF_EVENT_TYPE(327i32);
pub const MESinkV2Anchor: MF_EVENT_TYPE = MF_EVENT_TYPE(327i32);
pub const METrustUnknown: MF_EVENT_TYPE = MF_EVENT_TYPE(400i32);
pub const MEPolicyChanged: MF_EVENT_TYPE = MF_EVENT_TYPE(401i32);
pub const MEContentProtectionMessage: MF_EVENT_TYPE = MF_EVENT_TYPE(402i32);
pub const MEPolicySet: MF_EVENT_TYPE = MF_EVENT_TYPE(403i32);
pub const METrustV1Anchor: MF_EVENT_TYPE = MF_EVENT_TYPE(403i32);
pub const MEWMDRMLicenseBackupCompleted: MF_EVENT_TYPE = MF_EVENT_TYPE(500i32);
pub const MEWMDRMLicenseBackupProgress: MF_EVENT_TYPE = MF_EVENT_TYPE(501i32);
pub const MEWMDRMLicenseRestoreCompleted: MF_EVENT_TYPE = MF_EVENT_TYPE(502i32);
pub const MEWMDRMLicenseRestoreProgress: MF_EVENT_TYPE = MF_EVENT_TYPE(503i32);
pub const MEWMDRMLicenseAcquisitionCompleted: MF_EVENT_TYPE = MF_EVENT_TYPE(506i32);
pub const MEWMDRMIndividualizationCompleted: MF_EVENT_TYPE = MF_EVENT_TYPE(508i32);
pub const MEWMDRMIndividualizationProgress: MF_EVENT_TYPE = MF_EVENT_TYPE(513i32);
pub const MEWMDRMProximityCompleted: MF_EVENT_TYPE = MF_EVENT_TYPE(514i32);
pub const MEWMDRMLicenseStoreCleaned: MF_EVENT_TYPE = MF_EVENT_TYPE(515i32);
pub const MEWMDRMRevocationDownloadCompleted: MF_EVENT_TYPE = MF_EVENT_TYPE(516i32);
pub const MEWMDRMV1Anchor: MF_EVENT_TYPE = MF_EVENT_TYPE(516i32);
pub const METransformUnknown: MF_EVENT_TYPE = MF_EVENT_TYPE(600i32);
pub const METransformNeedInput: MF_EVENT_TYPE = MF_EVENT_TYPE(601i32);
pub const METransformHaveOutput: MF_EVENT_TYPE = MF_EVENT_TYPE(602i32);
pub const METransformDrainComplete: MF_EVENT_TYPE = MF_EVENT_TYPE(603i32);
pub const METransformMarker: MF_EVENT_TYPE = MF_EVENT_TYPE(604i32);
pub const METransformInputStreamStateChanged: MF_EVENT_TYPE = MF_EVENT_TYPE(605i32);
pub const MEByteStreamCharacteristicsChanged: MF_EVENT_TYPE = MF_EVENT_TYPE(700i32);
pub const MEVideoCaptureDeviceRemoved: MF_EVENT_TYPE = MF_EVENT_TYPE(800i32);
pub const MEVideoCaptureDevicePreempted: MF_EVENT_TYPE = MF_EVENT_TYPE(801i32);
pub const MEStreamSinkFormatInvalidated: MF_EVENT_TYPE = MF_EVENT_TYPE(802i32);
pub const MEEncodingParameters: MF_EVENT_TYPE = MF_EVENT_TYPE(803i32);
pub const MEContentProtectionMetadata: MF_EVENT_TYPE = MF_EVENT_TYPE(900i32);
pub const MEDeviceThermalStateChanged: MF_EVENT_TYPE = MF_EVENT_TYPE(950i32);
pub const MEReservedMax: MF_EVENT_TYPE = MF_EVENT_TYPE(10000i32);
impl ::core::convert::From<i32> for MF_EVENT_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_EVENT_TYPE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_ALLOCATOR_ALREADY_COMMITED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072846854i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_ALLOCATOR_NOT_COMMITED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072846855i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_ALLOCATOR_NOT_INITIALIZED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072846856i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_ALL_PROCESS_RESTART_REQUIRED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860820i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_ALREADY_INITIALIZED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072871856i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_ASF_DROPPED_PACKET: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072874847i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_ASF_FILESINK_BITRATE_UNKNOWN: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072870848i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_ASF_INDEXNOTLOADED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072874850i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_ASF_INVALIDDATA: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072874854i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_ASF_MISSINGDATA: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072874855i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_ASF_NOINDEX: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072874852i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_ASF_OPAQUEPACKET: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072874853i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_ASF_OUTOFRANGE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072874851i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_ASF_PARSINGINCOMPLETE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072874856i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_ASF_TOO_MANY_PAYLOADS: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072874849i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_ASF_UNSUPPORTED_STREAM_TYPE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072874848i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_ATTRIBUTENOTFOUND: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875802i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_AUDIO_BUFFER_SIZE_ERROR: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072869752i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_AUDIO_CLIENT_WRAPPER_SPOOF_ERROR: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072869751i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_AUDIO_PLAYBACK_DEVICE_INVALIDATED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072869754i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_AUDIO_PLAYBACK_DEVICE_IN_USE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072869755i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_AUDIO_RECORDING_DEVICE_INVALIDATED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072873823i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_AUDIO_RECORDING_DEVICE_IN_USE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072873824i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_AUDIO_SERVICE_NOT_RUNNING: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072869753i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_BACKUP_RESTRICTED_LICENSE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860850i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_BAD_OPL_STRUCTURE_FORMAT: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860803i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_BAD_STARTUP_VERSION: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875805i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_BANDWIDTH_OVERRUN: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072871855i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_BUFFERTOOSMALL: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875855i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_BYTESTREAM_NOT_SEEKABLE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875794i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_BYTESTREAM_UNKNOWN_LENGTH: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875781i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_CANNOT_CREATE_SINK: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875782i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_CANNOT_FIND_KEYFRAME_SAMPLE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072873827i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_CANNOT_INDEX_IN_PLACE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072871849i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_CANNOT_PARSE_BYTESTREAM: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875792i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_CAPTURE_ENGINE_ALL_EFFECTS_REMOVED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072845851i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_CAPTURE_ENGINE_INVALID_OP: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072845852i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_CAPTURE_NO_SAMPLES_IN_QUEUE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072845845i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_CAPTURE_PROPERTY_SET_DURING_PHOTO: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072845846i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_CAPTURE_SINK_MIRROR_ERROR: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072845854i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_CAPTURE_SINK_OUTPUT_NOT_SET: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072845855i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_CAPTURE_SINK_ROTATE_ERROR: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072845853i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_CAPTURE_SOURCE_DEVICE_EXTENDEDPROP_OP_IN_PROGRESS: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072845847i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_CAPTURE_SOURCE_NO_AUDIO_STREAM_PRESENT: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072845848i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_CAPTURE_SOURCE_NO_INDEPENDENT_PHOTO_STREAM_PRESENT: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072845850i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_CAPTURE_SOURCE_NO_VIDEO_STREAM_PRESENT: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072845849i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_CLOCK_AUDIO_DEVICE_POSITION_UNEXPECTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(891973i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_CLOCK_AUDIO_RENDER_POSITION_UNEXPECTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(891974i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_CLOCK_AUDIO_RENDER_TIME_UNEXPECTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(891975i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_CLOCK_INVALID_CONTINUITY_KEY: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072849856i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_CLOCK_NOT_SIMPLE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072849853i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_CLOCK_NO_TIME_SOURCE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072849855i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_CLOCK_STATE_ALREADY_SET: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072849854i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_CODE_EXPIRED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860834i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_COMPONENT_REVOKED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860847i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_CONTENT_PROTECTION_SYSTEM_NOT_ENABLED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860795i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_DEBUGGING_NOT_ALLOWED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860835i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_DISABLED_IN_SAFEMODE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875793i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_DRM_HARDWARE_INCONSISTENT: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860853i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_DRM_MIGRATION_NOT_SUPPORTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860793i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_DRM_UNSUPPORTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875776i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_DROPTIME_NOT_SUPPORTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072848854i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_DURATION_TOO_LONG: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875769i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_DXGI_DEVICE_NOT_INITIALIZED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-2147217408i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_DXGI_NEW_VIDEO_DEVICE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-2147217407i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_DXGI_VIDEO_DEVICE_LOCKED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-2147217406i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_END_OF_STREAM: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072873852i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_FLUSH_NEEDED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072871853i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_FORMAT_CHANGE_NOT_SUPPORTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875778i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_GRL_ABSENT: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860814i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_GRL_EXTENSIBLE_ENTRY_NOT_FOUND: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860831i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_GRL_INVALID_FORMAT: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860822i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_GRL_RENEWAL_NOT_FOUND: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860832i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_GRL_UNRECOGNIZED_FORMAT: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860821i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_GRL_VERSION_TOO_LOW: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860833i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_HARDWARE_DRM_UNSUPPORTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875770i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_HDCP_AUTHENTICATION_FAILURE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860792i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_HDCP_LINK_FAILURE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860791i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_HIGH_SECURITY_LEVEL_CONTENT_NOT_ALLOWED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860808i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_HW_ACCELERATED_THUMBNAIL_NOT_SUPPORTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072845844i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_HW_MFT_FAILED_START_STREAMING: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875772i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_HW_STREAM_NOT_CONNECTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072846851i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_INCOMPATIBLE_SAMPLE_PROTECTION: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860810i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_INDEX_NOT_COMMITTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072871851i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_INSUFFICIENT_BUFFER: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860816i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_INVALIDINDEX: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875841i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_INVALIDMEDIATYPE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875852i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_INVALIDNAME: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875844i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_INVALIDREQUEST: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875854i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_INVALIDSTREAMNUMBER: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875853i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_INVALIDTYPE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875843i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_INVALID_AKE_CHANNEL_PARAMETERS: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860796i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_INVALID_ASF_STREAMID: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072871847i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_INVALID_CODEC_MERIT: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875773i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_INVALID_FILE_FORMAT: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875842i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_INVALID_FORMAT: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072873844i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_INVALID_KEY: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875806i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_INVALID_POSITION: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875803i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_INVALID_PROFILE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072871852i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_INVALID_STATE_TRANSITION: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072873854i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_INVALID_STREAM_DATA: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875829i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_INVALID_STREAM_STATE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072846852i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_INVALID_TIMESTAMP: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875840i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_INVALID_WORKQUEUE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875777i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_ITA_ERROR_PARSING_SAP_PARAMETERS: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860805i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_ITA_OPL_DATA_NOT_INITIALIZED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860800i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_ITA_UNRECOGNIZED_ANALOG_VIDEO_OUTPUT: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860799i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_ITA_UNRECOGNIZED_ANALOG_VIDEO_PROTECTION_GUID: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860802i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_ITA_UNRECOGNIZED_DIGITAL_VIDEO_OUTPUT: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860798i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_ITA_UNSUPPORTED_ACTION: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860806i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_KERNEL_UNTRUSTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860830i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_LATE_SAMPLE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072871854i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_LICENSE_INCORRECT_RIGHTS: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860856i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_LICENSE_OUTOFDATE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860855i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_LICENSE_REQUIRED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860854i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_LICENSE_RESTORE_NEEDS_INDIVIDUALIZATION: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860849i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_LICENSE_RESTORE_NO_RIGHTS: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860851i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_MEDIAPROC_WRONGSTATE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875790i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_MEDIA_EXTENSION_APPSERVICE_CONNECTION_FAILED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072843856i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_MEDIA_EXTENSION_APPSERVICE_REQUEST_FAILED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072843855i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_MEDIA_EXTENSION_PACKAGE_INTEGRITY_CHECK_FAILED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072843854i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_MEDIA_EXTENSION_PACKAGE_LICENSE_INVALID: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072843853i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_MEDIA_SOURCE_NOT_STARTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072873839i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_MEDIA_SOURCE_NO_STREAMS_SELECTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072873828i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_MEDIA_SOURCE_WRONGSTATE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072873829i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_METADATA_TOO_LONG: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072870845i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_MISSING_ASF_LEAKYBUCKET: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072871848i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_MP3_BAD_CRC: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072873831i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_MP3_NOTFOUND: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072873850i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_MP3_NOTMP3: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072873848i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_MP3_NOTSUPPORTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072873847i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_MP3_OUTOFDATA: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072873849i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_MULTIPLE_BEGIN: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875815i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_MULTIPLE_SUBSCRIBERS: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875814i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NETWORK_RESOURCE_FAILURE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872856i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_BAD_CONTROL_DATA: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872838i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_BAD_REQUEST: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872833i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_BUSY: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872822i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_BWLEVEL_NOT_SUPPORTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872851i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_CACHESTREAM_NOT_FOUND: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872847i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_CACHE_NO_DATA: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872835i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_CANNOTCONNECT: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872825i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_CLIENT_CLOSE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872839i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_COMPANION_DRIVER_DISCONNECT: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872811i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_CONNECTION_FAILURE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872829i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_EOL: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872834i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_ERROR_FROM_PROXY: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872820i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_INCOMPATIBLE_PUSHSERVER: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872828i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_INCOMPATIBLE_SERVER: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872837i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_INTERNAL_SERVER_ERROR: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872832i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_INVALID_PRESENTATION_DESCRIPTOR: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872848i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_INVALID_PUSH_PUBLISHING_POINT: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872823i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_INVALID_PUSH_TEMPLATE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872824i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_MANUALSS_NOT_SUPPORTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872849i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_NOCONNECTION: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872830i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_PROTOCOL_DISABLED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872812i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_PROXY_ACCESSDENIED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872826i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_PROXY_TIMEOUT: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872819i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_READ: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872854i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_REDIRECT: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872843i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_REDIRECT_TO_PROXY: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872842i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_REQUIRE_ASYNC: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872852i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_REQUIRE_INPUT: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872844i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_REQUIRE_NETWORK: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872853i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_RESOURCE_GONE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872821i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_SERVER_ACCESSDENIED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872827i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_SERVER_UNAVAILABLE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872818i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_SESSION_INVALID: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872816i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_SESSION_NOT_FOUND: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872831i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_STREAMGROUPS_NOT_SUPPORTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872850i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_TIMEOUT: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872840i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_TOO_MANY_REDIRECTS: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872841i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_TOO_MUCH_DATA: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872817i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_UDP_BLOCKED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872814i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_UNSAFE_URL: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872836i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_UNSUPPORTED_CONFIGURATION: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872813i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NET_WRITE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872855i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NEW_VIDEO_DEVICE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072869851i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NON_PE_PROCESS: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860827i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NOTACCEPTING: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875851i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NOT_AVAILABLE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875818i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NOT_FOUND: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875819i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NOT_INITIALIZED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875850i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NOT_PROTECTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072873830i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NO_AUDIO_PLAYBACK_DEVICE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072869756i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NO_AUDIO_RECORDING_DEVICE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072873825i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NO_BITPUMP: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875786i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NO_CAPTURE_DEVICES_AVAILABLE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072845856i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NO_CLOCK: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875817i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NO_CONTENT_PROTECTION_MANAGER: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860852i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NO_DURATION: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072873846i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NO_EVENTS_AVAILABLE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072873856i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NO_INDEX: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072871850i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NO_MORE_DROP_MODES: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072848856i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NO_MORE_QUALITY_LEVELS: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072848855i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NO_MORE_TYPES: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875847i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NO_PMP_HOST: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860801i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NO_SAMPLE_DURATION: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875831i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NO_SAMPLE_TIMESTAMP: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875832i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NO_SOURCE_IN_CACHE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072864850i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_NO_VIDEO_SAMPLE_AVAILABLE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072869850i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_OFFLINE_MODE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072872815i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_OPERATION_CANCELLED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875795i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_OPERATION_IN_PROGRESS: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875771i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_OPERATION_UNSUPPORTED_AT_D3D_FEATURE_LEVEL: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875768i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_OPL_NOT_SUPPORTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860838i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_OUT_OF_RANGE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875774i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_PEAUTH_NOT_STARTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860811i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_PEAUTH_PUBLICKEY_REVOKED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860815i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_PEAUTH_SESSION_NOT_STARTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860817i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_PEAUTH_UNTRUSTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860829i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_PE_SESSIONS_MAXED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860809i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_PE_UNTRUSTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860812i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_PLATFORM_NOT_INITIALIZED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875856i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_POLICY_MGR_ACTION_OUTOFBOUNDS: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860804i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_POLICY_UNSUPPORTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860839i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_PROCESS_RESTART_REQUIRED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860819i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_PROPERTY_EMPTY: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875799i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_PROPERTY_NOT_ALLOWED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072873841i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_PROPERTY_NOT_EMPTY: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875798i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_PROPERTY_NOT_FOUND: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072873843i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_PROPERTY_READ_ONLY: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072873842i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_PROPERTY_TYPE_NOT_ALLOWED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875801i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_PROPERTY_TYPE_NOT_SUPPORTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875800i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_PROPERTY_VECTOR_NOT_ALLOWED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875797i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_PROPERTY_VECTOR_REQUIRED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875796i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_QM_INVALIDSTATE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072848852i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_QUALITYKNOB_WAIT_LONGER: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072848853i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_RATE_CHANGE_PREEMPTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875820i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_REBOOT_REQUIRED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860825i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_RESOLUTION_REQUIRES_PMP_CREATION_CALLBACK: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860797i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_REVERSE_UNSUPPORTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875822i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_RT_OUTOFMEMORY: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875785i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_RT_THROUGHPUT_NOT_AVAILABLE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875789i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_RT_TOO_MANY_CLASSES: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875788i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_RT_UNAVAILABLE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875825i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_RT_WORKQUEUE_CLASS_NOT_SPECIFIED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875784i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_RT_WOULDBLOCK: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875787i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_SAMPLEALLOCATOR_CANCELED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072870851i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_SAMPLEALLOCATOR_EMPTY: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072870850i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_SAMPLE_HAS_TOO_MANY_BUFFERS: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875809i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_SAMPLE_NOT_WRITABLE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875808i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_SEQUENCER_UNKNOWN_SEGMENT_ID: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072864852i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_SESSION_PAUSEWHILESTOPPED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875780i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_SHUTDOWN: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072873851i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_SIGNATURE_VERIFICATION_FAILED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860836i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_SINK_ALREADYSTOPPED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072870849i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_SINK_HEADERS_NOT_FOUND: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072870843i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_SINK_NO_SAMPLES_PROCESSED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072870844i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_SINK_NO_STREAMS: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072870847i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_SOURCERESOLVER_MUTUALLY_EXCLUSIVE_FLAGS: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875791i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_STATE_TRANSITION_PENDING: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875812i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_STREAMSINKS_FIXED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072870853i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_STREAMSINKS_OUT_OF_SYNC: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072870854i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_STREAMSINK_EXISTS: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072870852i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_STREAMSINK_REMOVED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072870856i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_STREAM_ERROR: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072846853i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TEST_SIGNED_COMPONENTS_NOT_ALLOWED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860807i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_THINNING_UNSUPPORTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875823i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TIMELINECONTROLLER_CANNOT_ATTACH: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072844854i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TIMELINECONTROLLER_NOT_ALLOWED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072844855i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TIMELINECONTROLLER_UNSUPPORTED_SOURCE_TYPE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072844856i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TIMER_ORPHANED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875813i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TOPOLOGY_VERIFICATION_FAILED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860837i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TOPO_CANNOT_CONNECT: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072868845i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TOPO_CANNOT_FIND_DECRYPTOR: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072868847i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TOPO_CODEC_NOT_FOUND: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072868846i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TOPO_INVALID_OPTIONAL_NODE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072868850i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TOPO_INVALID_TIME_ATTRIBUTES: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072868843i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TOPO_LOOPS_IN_TOPOLOGY: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072868842i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TOPO_MISSING_PRESENTATION_DESCRIPTOR: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072868841i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TOPO_MISSING_SOURCE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072868838i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TOPO_MISSING_STREAM_DESCRIPTOR: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072868840i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TOPO_SINK_ACTIVATES_UNSUPPORTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072868837i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TOPO_STREAM_DESCRIPTOR_NOT_SELECTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072868839i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TOPO_UNSUPPORTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072868844i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TRANSCODE_INVALID_PROFILE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072847853i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TRANSCODE_NO_CONTAINERTYPE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072847856i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TRANSCODE_NO_MATCHING_ENCODER: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072847854i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TRANSCODE_PROFILE_NO_MATCHING_STREAMS: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072847855i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TRANSFORM_ASYNC_LOCKED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072861833i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TRANSFORM_ASYNC_MFT_NOT_SUPPORTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072861830i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TRANSFORM_CANNOT_CHANGE_MEDIATYPE_WHILE_PROCESSING: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072861836i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TRANSFORM_CANNOT_INITIALIZE_ACM_DRIVER: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072861832i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TRANSFORM_CONFLICTS_WITH_OTHER_CURRENTLY_ENABLED_FEATURES: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072861840i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TRANSFORM_EXATTRIBUTE_NOT_SUPPORTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072861828i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TRANSFORM_INPUT_REMAINING: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072861854i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TRANSFORM_NEED_MORE_INPUT: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072861838i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_INPUT_MEDIATYPE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072861842i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_MEDIATYPE_COMBINATION: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072861841i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_OUTPUT_MEDIATYPE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072861843i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_SPKR_CONFIG: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072861837i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TRANSFORM_PROFILE_INVALID_OR_CORRUPT: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072861852i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TRANSFORM_PROFILE_MISSING: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072861853i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TRANSFORM_PROFILE_TRUNCATED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072861851i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TRANSFORM_PROPERTY_ARRAY_VALUE_WRONG_NUM_DIM: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072861847i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TRANSFORM_PROPERTY_NOT_WRITEABLE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072861848i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TRANSFORM_PROPERTY_PID_NOT_RECOGNIZED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072861850i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TRANSFORM_PROPERTY_VALUE_INCOMPATIBLE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072861844i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TRANSFORM_PROPERTY_VALUE_OUT_OF_RANGE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072861845i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TRANSFORM_PROPERTY_VALUE_SIZE_WRONG: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072861846i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TRANSFORM_PROPERTY_VARIANT_TYPE_WRONG: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072861849i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TRANSFORM_STREAM_CHANGE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072861855i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TRANSFORM_STREAM_INVALID_RESOLUTION: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072861831i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TRANSFORM_TYPE_NOT_SET: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072861856i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_TRUST_DISABLED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860846i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_UNAUTHORIZED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875775i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_UNEXPECTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875845i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_UNRECOVERABLE_ERROR_OCCURRED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875810i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_UNSUPPORTED_BYTESTREAM_TYPE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875836i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_UNSUPPORTED_CAPTION: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875804i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_UNSUPPORTED_CAPTURE_DEVICE_PRESENT: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072845843i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_UNSUPPORTED_CHARACTERISTICS: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072873826i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_UNSUPPORTED_CONTENT_PROTECTION_SYSTEM: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860794i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_UNSUPPORTED_D3D_TYPE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072861834i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_UNSUPPORTED_FORMAT: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072873832i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_UNSUPPORTED_MEDIATYPE_AT_D3D_FEATURE_LEVEL: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875767i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_UNSUPPORTED_RATE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875824i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_UNSUPPORTED_RATE_TRANSITION: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875821i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_UNSUPPORTED_REPRESENTATION: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875849i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_UNSUPPORTED_SCHEME: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875837i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_UNSUPPORTED_SERVICE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875846i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_UNSUPPORTED_STATE_TRANSITION: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875811i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_UNSUPPORTED_TIME_FORMAT: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072875835i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_USERMODE_UNTRUSTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860818i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_VIDEO_DEVICE_LOCKED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072869852i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_VIDEO_RECORDING_DEVICE_INVALIDATED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072873822i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_VIDEO_RECORDING_DEVICE_PREEMPTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072873821i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_VIDEO_REN_COPYPROT_FAILED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072869854i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_VIDEO_REN_NO_DEINTERLACE_HW: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072869855i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_VIDEO_REN_NO_PROCAMP_HW: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072869856i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_VIDEO_REN_SURFACE_NOT_SHARED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072869853i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_WMDRMOTA_ACTION_ALREADY_SET: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860844i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_WMDRMOTA_ACTION_MISMATCH: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860841i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_WMDRMOTA_DRM_ENCRYPTION_SCHEME_NOT_SUPPORTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860842i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_WMDRMOTA_DRM_HEADER_NOT_AVAILABLE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860843i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_WMDRMOTA_INVALID_POLICY: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860840i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_E_WMDRMOTA_NO_ACTION: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1072860845i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_FILE_ACCESSMODE(pub i32);
pub const MF_ACCESSMODE_READ: MF_FILE_ACCESSMODE = MF_FILE_ACCESSMODE(1i32);
pub const MF_ACCESSMODE_WRITE: MF_FILE_ACCESSMODE = MF_FILE_ACCESSMODE(2i32);
pub const MF_ACCESSMODE_READWRITE: MF_FILE_ACCESSMODE = MF_FILE_ACCESSMODE(3i32);
impl ::core::convert::From<i32> for MF_FILE_ACCESSMODE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_FILE_ACCESSMODE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_FILE_FLAGS(pub i32);
pub const MF_FILEFLAGS_NONE: MF_FILE_FLAGS = MF_FILE_FLAGS(0i32);
pub const MF_FILEFLAGS_NOBUFFERING: MF_FILE_FLAGS = MF_FILE_FLAGS(1i32);
pub const MF_FILEFLAGS_ALLOW_WRITE_SHARING: MF_FILE_FLAGS = MF_FILE_FLAGS(2i32);
impl ::core::convert::From<i32> for MF_FILE_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_FILE_FLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_FILE_OPENMODE(pub i32);
pub const MF_OPENMODE_FAIL_IF_NOT_EXIST: MF_FILE_OPENMODE = MF_FILE_OPENMODE(0i32);
pub const MF_OPENMODE_FAIL_IF_EXIST: MF_FILE_OPENMODE = MF_FILE_OPENMODE(1i32);
pub const MF_OPENMODE_RESET_IF_EXIST: MF_FILE_OPENMODE = MF_FILE_OPENMODE(2i32);
pub const MF_OPENMODE_APPEND_IF_EXIST: MF_FILE_OPENMODE = MF_FILE_OPENMODE(3i32);
pub const MF_OPENMODE_DELETE_IF_EXIST: MF_FILE_OPENMODE = MF_FILE_OPENMODE(4i32);
impl ::core::convert::From<i32> for MF_FILE_OPENMODE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_FILE_OPENMODE {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MF_FLOAT2 {
    pub x: f32,
    pub y: f32,
}
impl MF_FLOAT2 {}
impl ::core::default::Default for MF_FLOAT2 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MF_FLOAT2 {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MF_FLOAT2").field("x", &self.x).field("y", &self.y).finish()
    }
}
impl ::core::cmp::PartialEq for MF_FLOAT2 {
    fn eq(&self, other: &Self) -> bool {
        self.x == other.x && self.y == other.y
    }
}
impl ::core::cmp::Eq for MF_FLOAT2 {}
unsafe impl ::windows::runtime::Abi for MF_FLOAT2 {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MF_FLOAT3 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
impl MF_FLOAT3 {}
impl ::core::default::Default for MF_FLOAT3 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MF_FLOAT3 {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MF_FLOAT3").field("x", &self.x).field("y", &self.y).field("z", &self.z).finish()
    }
}
impl ::core::cmp::PartialEq for MF_FLOAT3 {
    fn eq(&self, other: &Self) -> bool {
        self.x == other.x && self.y == other.y && self.z == other.z
    }
}
impl ::core::cmp::Eq for MF_FLOAT3 {}
unsafe impl ::windows::runtime::Abi for MF_FLOAT3 {
    type Abi = Self;
}
pub const MF_FRAMESERVER_VCAMEVENT_EXTENDED_CUSTOM_EVENT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1851345052, 18387, 17511, [131, 239, 18, 211, 78, 135, 22, 101]);
pub const MF_FRAMESERVER_VCAMEVENT_EXTENDED_PIPELINE_SHUTDOWN: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1168644913, 17400, 20061, [140, 226, 34, 220, 224, 38, 153, 109]);
pub const MF_FRAMESERVER_VCAMEVENT_EXTENDED_SOURCE_INITIALIZE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3844886015, 58477, 19723, [188, 117, 221, 212, 200, 114, 63, 150]);
pub const MF_FRAMESERVER_VCAMEVENT_EXTENDED_SOURCE_START: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2985212297, 46166, 20298, [174, 64, 7, 156, 40, 226, 74, 248]);
pub const MF_FRAMESERVER_VCAMEVENT_EXTENDED_SOURCE_STOP: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3086908001, 65169, 16734, [134, 8, 211, 125, 237, 177, 165, 139]);
pub const MF_FRAMESERVER_VCAMEVENT_EXTENDED_SOURCE_UNINITIALIZE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2699799463, 42018, 20019, [132, 1, 179, 125, 40, 0, 170, 103]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_GRL_ABSENT: u32 = 4096u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_GRL_LOAD_FAILED: u32 = 16u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_HDCP_STATUS(pub i32);
pub const MF_HDCP_STATUS_ON: MF_HDCP_STATUS = MF_HDCP_STATUS(0i32);
pub const MF_HDCP_STATUS_OFF: MF_HDCP_STATUS = MF_HDCP_STATUS(1i32);
pub const MF_HDCP_STATUS_ON_WITH_TYPE_ENFORCEMENT: MF_HDCP_STATUS = MF_HDCP_STATUS(2i32);
impl ::core::convert::From<i32> for MF_HDCP_STATUS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_HDCP_STATUS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_HISTOGRAM_CHANNEL_B: u32 = 8u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_HISTOGRAM_CHANNEL_Cb: u32 = 16u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_HISTOGRAM_CHANNEL_Cr: u32 = 32u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_HISTOGRAM_CHANNEL_G: u32 = 4u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_HISTOGRAM_CHANNEL_R: u32 = 2u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_HISTOGRAM_CHANNEL_Y: u32 = 1u32;
pub const MF_INDEPENDENT_STILL_IMAGE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3927093057, 1808, 17097, [161, 39, 218, 163, 231, 132, 131, 165]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_INDEX_SIZE_ERR: u32 = 2154823681u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_INVALID_ACCESS_ERR: u32 = 2154823695u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_INVALID_GRL_SIGNATURE: u32 = 32u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_INVALID_PRESENTATION_TIME: u64 = 9223372036854775808u64;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_INVALID_STATE_ERR: u32 = 2154823691u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_I_MANUAL_PROXY: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(1074610802i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_KERNEL_MODE_COMPONENT_LOAD: u32 = 2u32;
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MF_LEAKY_BUCKET_PAIR {
    pub dwBitrate: u32,
    pub msBufferWindow: u32,
}
impl MF_LEAKY_BUCKET_PAIR {}
impl ::core::default::Default for MF_LEAKY_BUCKET_PAIR {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MF_LEAKY_BUCKET_PAIR {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MF_LEAKY_BUCKET_PAIR").field("dwBitrate", &self.dwBitrate).field("msBufferWindow", &self.msBufferWindow).finish()
    }
}
impl ::core::cmp::PartialEq for MF_LEAKY_BUCKET_PAIR {
    fn eq(&self, other: &Self) -> bool {
        self.dwBitrate == other.dwBitrate && self.msBufferWindow == other.msBufferWindow
    }
}
impl ::core::cmp::Eq for MF_LEAKY_BUCKET_PAIR {}
unsafe impl ::windows::runtime::Abi for MF_LEAKY_BUCKET_PAIR {
    type Abi = Self;
}
pub const MF_LOCAL_MFT_REGISTRATION_SERVICE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3723874204, 17670, 17834, [171, 240, 109, 93, 148, 221, 27, 74]);
pub const MF_LOCAL_PLUGIN_CONTROL_POLICY: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3642425477, 51309, 20353, [136, 34, 140, 104, 225, 215, 250, 4]);
pub const MF_LOW_LATENCY: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2619836698, 60794, 16609, [136, 232, 178, 39, 39, 160, 36, 238]);
pub const MF_LUMA_KEY_ENABLE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1936294415, 30430, 17354, [146, 132, 71, 184, 243, 126, 6, 73]);
pub const MF_LUMA_KEY_LOWER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2480388309, 2945, 18197, [174, 160, 135, 37, 135, 22, 33, 233]);
pub const MF_LUMA_KEY_UPPER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3500095931, 17922, 19505, [167, 6, 161, 33, 113, 165, 17, 10]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_MEDIAKEYSESSION_MESSAGETYPE(pub i32);
pub const MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_REQUEST: MF_MEDIAKEYSESSION_MESSAGETYPE = MF_MEDIAKEYSESSION_MESSAGETYPE(0i32);
pub const MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_RENEWAL: MF_MEDIAKEYSESSION_MESSAGETYPE = MF_MEDIAKEYSESSION_MESSAGETYPE(1i32);
pub const MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_RELEASE: MF_MEDIAKEYSESSION_MESSAGETYPE = MF_MEDIAKEYSESSION_MESSAGETYPE(2i32);
pub const MF_MEDIAKEYSESSION_MESSAGETYPE_INDIVIDUALIZATION_REQUEST: MF_MEDIAKEYSESSION_MESSAGETYPE = MF_MEDIAKEYSESSION_MESSAGETYPE(3i32);
impl ::core::convert::From<i32> for MF_MEDIAKEYSESSION_MESSAGETYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_MEDIAKEYSESSION_MESSAGETYPE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_MEDIAKEYSESSION_TYPE(pub i32);
pub const MF_MEDIAKEYSESSION_TYPE_TEMPORARY: MF_MEDIAKEYSESSION_TYPE = MF_MEDIAKEYSESSION_TYPE(0i32);
pub const MF_MEDIAKEYSESSION_TYPE_PERSISTENT_LICENSE: MF_MEDIAKEYSESSION_TYPE = MF_MEDIAKEYSESSION_TYPE(1i32);
pub const MF_MEDIAKEYSESSION_TYPE_PERSISTENT_RELEASE_MESSAGE: MF_MEDIAKEYSESSION_TYPE = MF_MEDIAKEYSESSION_TYPE(2i32);
pub const MF_MEDIAKEYSESSION_TYPE_PERSISTENT_USAGE_RECORD: MF_MEDIAKEYSESSION_TYPE = MF_MEDIAKEYSESSION_TYPE(3i32);
impl ::core::convert::From<i32> for MF_MEDIAKEYSESSION_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_MEDIAKEYSESSION_TYPE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_MEDIAKEYS_REQUIREMENT(pub i32);
pub const MF_MEDIAKEYS_REQUIREMENT_REQUIRED: MF_MEDIAKEYS_REQUIREMENT = MF_MEDIAKEYS_REQUIREMENT(1i32);
pub const MF_MEDIAKEYS_REQUIREMENT_OPTIONAL: MF_MEDIAKEYS_REQUIREMENT = MF_MEDIAKEYS_REQUIREMENT(2i32);
pub const MF_MEDIAKEYS_REQUIREMENT_NOT_ALLOWED: MF_MEDIAKEYS_REQUIREMENT = MF_MEDIAKEYS_REQUIREMENT(3i32);
impl ::core::convert::From<i32> for MF_MEDIAKEYS_REQUIREMENT {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_MEDIAKEYS_REQUIREMENT {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_MEDIAKEY_STATUS(pub i32);
pub const MF_MEDIAKEY_STATUS_USABLE: MF_MEDIAKEY_STATUS = MF_MEDIAKEY_STATUS(0i32);
pub const MF_MEDIAKEY_STATUS_EXPIRED: MF_MEDIAKEY_STATUS = MF_MEDIAKEY_STATUS(1i32);
pub const MF_MEDIAKEY_STATUS_OUTPUT_DOWNSCALED: MF_MEDIAKEY_STATUS = MF_MEDIAKEY_STATUS(2i32);
pub const MF_MEDIAKEY_STATUS_OUTPUT_NOT_ALLOWED: MF_MEDIAKEY_STATUS = MF_MEDIAKEY_STATUS(3i32);
pub const MF_MEDIAKEY_STATUS_STATUS_PENDING: MF_MEDIAKEY_STATUS = MF_MEDIAKEY_STATUS(4i32);
pub const MF_MEDIAKEY_STATUS_INTERNAL_ERROR: MF_MEDIAKEY_STATUS = MF_MEDIAKEY_STATUS(5i32);
pub const MF_MEDIAKEY_STATUS_RELEASED: MF_MEDIAKEY_STATUS = MF_MEDIAKEY_STATUS(6i32);
pub const MF_MEDIAKEY_STATUS_OUTPUT_RESTRICTED: MF_MEDIAKEY_STATUS = MF_MEDIAKEY_STATUS(7i32);
impl ::core::convert::From<i32> for MF_MEDIAKEY_STATUS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_MEDIAKEY_STATUS {
    type Abi = Self;
}
pub const MF_MEDIASINK_AUTOFINALIZE_SUPPORTED: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1220620734, 4954, 16843, [130, 144, 3, 101, 37, 9, 201, 153]);
pub const MF_MEDIASINK_ENABLE_AUTOFINALIZE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(872497765, 52094, 19678, [172, 124, 239, 253, 59, 60, 37, 48]);
pub const MF_MEDIASOURCE_EXPOSE_ALL_STREAMS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3891417272, 36825, 18953, [182, 193, 106, 49, 92, 124, 114, 14]);
pub const MF_MEDIASOURCE_SERVICE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4036596471, 40890, 19530, [163, 127, 140, 71, 180, 225, 223, 231]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_MEDIATYPE_EQUAL_FORMAT_DATA: u32 = 4u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_MEDIATYPE_EQUAL_FORMAT_TYPES: u32 = 2u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_MEDIATYPE_EQUAL_FORMAT_USER_DATA: u32 = 8u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_MEDIATYPE_EQUAL_MAJOR_TYPES: u32 = 1u32;
pub const MF_MEDIATYPE_MULTIPLEXED_MANAGER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(331845557, 62069, 20128, [187, 95, 2, 73, 131, 43, 13, 110]);
pub const MF_MEDIA_ENGINE_AUDIO_CATEGORY: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3369387293, 13582, 16882, [186, 70, 250, 235, 187, 8, 87, 246]);
pub const MF_MEDIA_ENGINE_AUDIO_ENDPOINT_ROLE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3536557009, 4458, 17650, [147, 133, 247, 208, 253, 162, 251, 70]);
pub const MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1308758754, 57743, 16865, [149, 229, 192, 231, 233, 35, 91, 195]);
pub const MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE_IE10: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(295992061, 25993, 16676, [179, 18, 97, 88, 236, 81, 127, 195]);
pub const MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE_IE11: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(485568863, 52799, 16437, [147, 145, 22, 20, 47, 119, 81, 137]);
pub const MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE_IE9: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(86781241, 16576, 16776, [171, 134, 248, 40, 39, 59, 117, 34]);
pub const MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE_IE_EDGE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2801001573, 15050, 17452, [163, 240, 173, 109, 218, 216, 57, 174]);
pub const MF_MEDIA_ENGINE_CALLBACK: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3322118584, 33700, 16888, [163, 208, 222, 5, 7, 104, 73, 169]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_MEDIA_ENGINE_CANPLAY(pub i32);
pub const MF_MEDIA_ENGINE_CANPLAY_NOT_SUPPORTED: MF_MEDIA_ENGINE_CANPLAY = MF_MEDIA_ENGINE_CANPLAY(0i32);
pub const MF_MEDIA_ENGINE_CANPLAY_MAYBE: MF_MEDIA_ENGINE_CANPLAY = MF_MEDIA_ENGINE_CANPLAY(1i32);
pub const MF_MEDIA_ENGINE_CANPLAY_PROBABLY: MF_MEDIA_ENGINE_CANPLAY = MF_MEDIA_ENGINE_CANPLAY(2i32);
impl ::core::convert::From<i32> for MF_MEDIA_ENGINE_CANPLAY {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_MEDIA_ENGINE_CANPLAY {
    type Abi = Self;
}
pub const MF_MEDIA_ENGINE_COMPATIBILITY_MODE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1056074452, 56404, 17886, [185, 175, 118, 200, 198, 107, 250, 142]);
pub const MF_MEDIA_ENGINE_COMPATIBILITY_MODE_WIN10: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1529208969, 27815, 16697, [162, 203, 252, 170, 179, 149, 82, 163]);
pub const MF_MEDIA_ENGINE_COMPATIBILITY_MODE_WWA_EDGE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(364023960, 40705, 20045, [182, 90, 192, 108, 108, 137, 218, 42]);
pub const MF_MEDIA_ENGINE_CONTENT_PROTECTION_FLAGS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3761570339, 23215, 19830, [167, 195, 6, 222, 112, 137, 77, 180]);
pub const MF_MEDIA_ENGINE_CONTENT_PROTECTION_MANAGER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4258717610, 48517, 19187, [158, 15, 160, 29, 83, 157, 135, 106]);
pub const MF_MEDIA_ENGINE_CONTINUE_ON_CODEC_ERROR: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3687692281, 18660, 17045, [183, 13, 213, 24, 35, 78, 235, 56]);
pub const MF_MEDIA_ENGINE_COREWINDOW: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4241155292, 2943, 16834, [159, 150, 70, 89, 148, 138, 205, 220]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_MEDIA_ENGINE_CREATEFLAGS(pub i32);
pub const MF_MEDIA_ENGINE_AUDIOONLY: MF_MEDIA_ENGINE_CREATEFLAGS = MF_MEDIA_ENGINE_CREATEFLAGS(1i32);
pub const MF_MEDIA_ENGINE_WAITFORSTABLE_STATE: MF_MEDIA_ENGINE_CREATEFLAGS = MF_MEDIA_ENGINE_CREATEFLAGS(2i32);
pub const MF_MEDIA_ENGINE_FORCEMUTE: MF_MEDIA_ENGINE_CREATEFLAGS = MF_MEDIA_ENGINE_CREATEFLAGS(4i32);
pub const MF_MEDIA_ENGINE_REAL_TIME_MODE: MF_MEDIA_ENGINE_CREATEFLAGS = MF_MEDIA_ENGINE_CREATEFLAGS(8i32);
pub const MF_MEDIA_ENGINE_DISABLE_LOCAL_PLUGINS: MF_MEDIA_ENGINE_CREATEFLAGS = MF_MEDIA_ENGINE_CREATEFLAGS(16i32);
pub const MF_MEDIA_ENGINE_CREATEFLAGS_MASK: MF_MEDIA_ENGINE_CREATEFLAGS = MF_MEDIA_ENGINE_CREATEFLAGS(31i32);
impl ::core::convert::From<i32> for MF_MEDIA_ENGINE_CREATEFLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_MEDIA_ENGINE_CREATEFLAGS {
    type Abi = Self;
}
pub const MF_MEDIA_ENGINE_DXGI_MANAGER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(106365658, 4244, 18541, [134, 23, 238, 124, 196, 238, 70, 72]);
pub const MF_MEDIA_ENGINE_EME_CALLBACK: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1229280167, 42113, 19639, [190, 197, 56, 9, 3, 81, 55, 49]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_MEDIA_ENGINE_ERR(pub i32);
pub const MF_MEDIA_ENGINE_ERR_NOERROR: MF_MEDIA_ENGINE_ERR = MF_MEDIA_ENGINE_ERR(0i32);
pub const MF_MEDIA_ENGINE_ERR_ABORTED: MF_MEDIA_ENGINE_ERR = MF_MEDIA_ENGINE_ERR(1i32);
pub const MF_MEDIA_ENGINE_ERR_NETWORK: MF_MEDIA_ENGINE_ERR = MF_MEDIA_ENGINE_ERR(2i32);
pub const MF_MEDIA_ENGINE_ERR_DECODE: MF_MEDIA_ENGINE_ERR = MF_MEDIA_ENGINE_ERR(3i32);
pub const MF_MEDIA_ENGINE_ERR_SRC_NOT_SUPPORTED: MF_MEDIA_ENGINE_ERR = MF_MEDIA_ENGINE_ERR(4i32);
pub const MF_MEDIA_ENGINE_ERR_ENCRYPTED: MF_MEDIA_ENGINE_ERR = MF_MEDIA_ENGINE_ERR(5i32);
impl ::core::convert::From<i32> for MF_MEDIA_ENGINE_ERR {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_MEDIA_ENGINE_ERR {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_MEDIA_ENGINE_EVENT(pub i32);
pub const MF_MEDIA_ENGINE_EVENT_LOADSTART: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(1i32);
pub const MF_MEDIA_ENGINE_EVENT_PROGRESS: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(2i32);
pub const MF_MEDIA_ENGINE_EVENT_SUSPEND: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(3i32);
pub const MF_MEDIA_ENGINE_EVENT_ABORT: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(4i32);
pub const MF_MEDIA_ENGINE_EVENT_ERROR: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(5i32);
pub const MF_MEDIA_ENGINE_EVENT_EMPTIED: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(6i32);
pub const MF_MEDIA_ENGINE_EVENT_STALLED: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(7i32);
pub const MF_MEDIA_ENGINE_EVENT_PLAY: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(8i32);
pub const MF_MEDIA_ENGINE_EVENT_PAUSE: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(9i32);
pub const MF_MEDIA_ENGINE_EVENT_LOADEDMETADATA: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(10i32);
pub const MF_MEDIA_ENGINE_EVENT_LOADEDDATA: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(11i32);
pub const MF_MEDIA_ENGINE_EVENT_WAITING: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(12i32);
pub const MF_MEDIA_ENGINE_EVENT_PLAYING: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(13i32);
pub const MF_MEDIA_ENGINE_EVENT_CANPLAY: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(14i32);
pub const MF_MEDIA_ENGINE_EVENT_CANPLAYTHROUGH: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(15i32);
pub const MF_MEDIA_ENGINE_EVENT_SEEKING: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(16i32);
pub const MF_MEDIA_ENGINE_EVENT_SEEKED: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(17i32);
pub const MF_MEDIA_ENGINE_EVENT_TIMEUPDATE: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(18i32);
pub const MF_MEDIA_ENGINE_EVENT_ENDED: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(19i32);
pub const MF_MEDIA_ENGINE_EVENT_RATECHANGE: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(20i32);
pub const MF_MEDIA_ENGINE_EVENT_DURATIONCHANGE: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(21i32);
pub const MF_MEDIA_ENGINE_EVENT_VOLUMECHANGE: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(22i32);
pub const MF_MEDIA_ENGINE_EVENT_FORMATCHANGE: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(1000i32);
pub const MF_MEDIA_ENGINE_EVENT_PURGEQUEUEDEVENTS: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(1001i32);
pub const MF_MEDIA_ENGINE_EVENT_TIMELINE_MARKER: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(1002i32);
pub const MF_MEDIA_ENGINE_EVENT_BALANCECHANGE: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(1003i32);
pub const MF_MEDIA_ENGINE_EVENT_DOWNLOADCOMPLETE: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(1004i32);
pub const MF_MEDIA_ENGINE_EVENT_BUFFERINGSTARTED: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(1005i32);
pub const MF_MEDIA_ENGINE_EVENT_BUFFERINGENDED: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(1006i32);
pub const MF_MEDIA_ENGINE_EVENT_FRAMESTEPCOMPLETED: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(1007i32);
pub const MF_MEDIA_ENGINE_EVENT_NOTIFYSTABLESTATE: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(1008i32);
pub const MF_MEDIA_ENGINE_EVENT_FIRSTFRAMEREADY: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(1009i32);
pub const MF_MEDIA_ENGINE_EVENT_TRACKSCHANGE: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(1010i32);
pub const MF_MEDIA_ENGINE_EVENT_OPMINFO: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(1011i32);
pub const MF_MEDIA_ENGINE_EVENT_RESOURCELOST: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(1012i32);
pub const MF_MEDIA_ENGINE_EVENT_DELAYLOADEVENT_CHANGED: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(1013i32);
pub const MF_MEDIA_ENGINE_EVENT_STREAMRENDERINGERROR: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(1014i32);
pub const MF_MEDIA_ENGINE_EVENT_SUPPORTEDRATES_CHANGED: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(1015i32);
pub const MF_MEDIA_ENGINE_EVENT_AUDIOENDPOINTCHANGE: MF_MEDIA_ENGINE_EVENT = MF_MEDIA_ENGINE_EVENT(1016i32);
impl ::core::convert::From<i32> for MF_MEDIA_ENGINE_EVENT {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_MEDIA_ENGINE_EVENT {
    type Abi = Self;
}
pub const MF_MEDIA_ENGINE_EXTENSION: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(822738246, 1549, 19298, [141, 207, 250, 255, 129, 19, 24, 210]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_MEDIA_ENGINE_EXTENSION_TYPE(pub i32);
pub const MF_MEDIA_ENGINE_EXTENSION_TYPE_MEDIASOURCE: MF_MEDIA_ENGINE_EXTENSION_TYPE = MF_MEDIA_ENGINE_EXTENSION_TYPE(0i32);
pub const MF_MEDIA_ENGINE_EXTENSION_TYPE_BYTESTREAM: MF_MEDIA_ENGINE_EXTENSION_TYPE = MF_MEDIA_ENGINE_EXTENSION_TYPE(1i32);
impl ::core::convert::From<i32> for MF_MEDIA_ENGINE_EXTENSION_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_MEDIA_ENGINE_EXTENSION_TYPE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAGS(pub i32);
pub const MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_PROTECTED: MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAGS = MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAGS(1i32);
pub const MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_REQUIRES_SURFACE_PROTECTION: MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAGS = MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAGS(2i32);
pub const MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_REQUIRES_ANTI_SCREEN_SCRAPE_PROTECTION: MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAGS = MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAGS(4i32);
impl ::core::convert::From<i32> for MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_MEDIA_ENGINE_KEYERR(pub i32);
pub const MF_MEDIAENGINE_KEYERR_UNKNOWN: MF_MEDIA_ENGINE_KEYERR = MF_MEDIA_ENGINE_KEYERR(1i32);
pub const MF_MEDIAENGINE_KEYERR_CLIENT: MF_MEDIA_ENGINE_KEYERR = MF_MEDIA_ENGINE_KEYERR(2i32);
pub const MF_MEDIAENGINE_KEYERR_SERVICE: MF_MEDIA_ENGINE_KEYERR = MF_MEDIA_ENGINE_KEYERR(3i32);
pub const MF_MEDIAENGINE_KEYERR_OUTPUT: MF_MEDIA_ENGINE_KEYERR = MF_MEDIA_ENGINE_KEYERR(4i32);
pub const MF_MEDIAENGINE_KEYERR_HARDWARECHANGE: MF_MEDIA_ENGINE_KEYERR = MF_MEDIA_ENGINE_KEYERR(5i32);
pub const MF_MEDIAENGINE_KEYERR_DOMAIN: MF_MEDIA_ENGINE_KEYERR = MF_MEDIA_ENGINE_KEYERR(6i32);
impl ::core::convert::From<i32> for MF_MEDIA_ENGINE_KEYERR {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_MEDIA_ENGINE_KEYERR {
    type Abi = Self;
}
pub const MF_MEDIA_ENGINE_MEDIA_PLAYER_MODE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1037929797, 23201, 16658, [130, 229, 54, 246, 162, 25, 126, 110]);
pub const MF_MEDIA_ENGINE_NEEDKEY_CALLBACK: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2124941379, 46820, 17196, [142, 164, 120, 72, 255, 228, 34, 14]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_MEDIA_ENGINE_NETWORK(pub i32);
pub const MF_MEDIA_ENGINE_NETWORK_EMPTY: MF_MEDIA_ENGINE_NETWORK = MF_MEDIA_ENGINE_NETWORK(0i32);
pub const MF_MEDIA_ENGINE_NETWORK_IDLE: MF_MEDIA_ENGINE_NETWORK = MF_MEDIA_ENGINE_NETWORK(1i32);
pub const MF_MEDIA_ENGINE_NETWORK_LOADING: MF_MEDIA_ENGINE_NETWORK = MF_MEDIA_ENGINE_NETWORK(2i32);
pub const MF_MEDIA_ENGINE_NETWORK_NO_SOURCE: MF_MEDIA_ENGINE_NETWORK = MF_MEDIA_ENGINE_NETWORK(3i32);
impl ::core::convert::From<i32> for MF_MEDIA_ENGINE_NETWORK {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_MEDIA_ENGINE_NETWORK {
    type Abi = Self;
}
pub const MF_MEDIA_ENGINE_OPM_HWND: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2696842983, 1394, 20268, [168, 1, 42, 21, 27, 211, 231, 38]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_MEDIA_ENGINE_OPM_STATUS(pub i32);
pub const MF_MEDIA_ENGINE_OPM_NOT_REQUESTED: MF_MEDIA_ENGINE_OPM_STATUS = MF_MEDIA_ENGINE_OPM_STATUS(0i32);
pub const MF_MEDIA_ENGINE_OPM_ESTABLISHED: MF_MEDIA_ENGINE_OPM_STATUS = MF_MEDIA_ENGINE_OPM_STATUS(1i32);
pub const MF_MEDIA_ENGINE_OPM_FAILED_VM: MF_MEDIA_ENGINE_OPM_STATUS = MF_MEDIA_ENGINE_OPM_STATUS(2i32);
pub const MF_MEDIA_ENGINE_OPM_FAILED_BDA: MF_MEDIA_ENGINE_OPM_STATUS = MF_MEDIA_ENGINE_OPM_STATUS(3i32);
pub const MF_MEDIA_ENGINE_OPM_FAILED_UNSIGNED_DRIVER: MF_MEDIA_ENGINE_OPM_STATUS = MF_MEDIA_ENGINE_OPM_STATUS(4i32);
pub const MF_MEDIA_ENGINE_OPM_FAILED: MF_MEDIA_ENGINE_OPM_STATUS = MF_MEDIA_ENGINE_OPM_STATUS(5i32);
impl ::core::convert::From<i32> for MF_MEDIA_ENGINE_OPM_STATUS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_MEDIA_ENGINE_OPM_STATUS {
    type Abi = Self;
}
pub const MF_MEDIA_ENGINE_PLAYBACK_HWND: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3649603483, 26569, 19858, [186, 167, 110, 173, 212, 70, 3, 157]);
pub const MF_MEDIA_ENGINE_PLAYBACK_VISUAL: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1844171375, 27321, 19838, [176, 238, 198, 26, 115, 255, 173, 21]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_MEDIA_ENGINE_PRELOAD(pub i32);
pub const MF_MEDIA_ENGINE_PRELOAD_MISSING: MF_MEDIA_ENGINE_PRELOAD = MF_MEDIA_ENGINE_PRELOAD(0i32);
pub const MF_MEDIA_ENGINE_PRELOAD_EMPTY: MF_MEDIA_ENGINE_PRELOAD = MF_MEDIA_ENGINE_PRELOAD(1i32);
pub const MF_MEDIA_ENGINE_PRELOAD_NONE: MF_MEDIA_ENGINE_PRELOAD = MF_MEDIA_ENGINE_PRELOAD(2i32);
pub const MF_MEDIA_ENGINE_PRELOAD_METADATA: MF_MEDIA_ENGINE_PRELOAD = MF_MEDIA_ENGINE_PRELOAD(3i32);
pub const MF_MEDIA_ENGINE_PRELOAD_AUTOMATIC: MF_MEDIA_ENGINE_PRELOAD = MF_MEDIA_ENGINE_PRELOAD(4i32);
impl ::core::convert::From<i32> for MF_MEDIA_ENGINE_PRELOAD {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_MEDIA_ENGINE_PRELOAD {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_MEDIA_ENGINE_PROTECTION_FLAGS(pub i32);
pub const MF_MEDIA_ENGINE_ENABLE_PROTECTED_CONTENT: MF_MEDIA_ENGINE_PROTECTION_FLAGS = MF_MEDIA_ENGINE_PROTECTION_FLAGS(1i32);
pub const MF_MEDIA_ENGINE_USE_PMP_FOR_ALL_CONTENT: MF_MEDIA_ENGINE_PROTECTION_FLAGS = MF_MEDIA_ENGINE_PROTECTION_FLAGS(2i32);
pub const MF_MEDIA_ENGINE_USE_UNPROTECTED_PMP: MF_MEDIA_ENGINE_PROTECTION_FLAGS = MF_MEDIA_ENGINE_PROTECTION_FLAGS(4i32);
impl ::core::convert::From<i32> for MF_MEDIA_ENGINE_PROTECTION_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_MEDIA_ENGINE_PROTECTION_FLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_MEDIA_ENGINE_READY(pub i32);
pub const MF_MEDIA_ENGINE_READY_HAVE_NOTHING: MF_MEDIA_ENGINE_READY = MF_MEDIA_ENGINE_READY(0i32);
pub const MF_MEDIA_ENGINE_READY_HAVE_METADATA: MF_MEDIA_ENGINE_READY = MF_MEDIA_ENGINE_READY(1i32);
pub const MF_MEDIA_ENGINE_READY_HAVE_CURRENT_DATA: MF_MEDIA_ENGINE_READY = MF_MEDIA_ENGINE_READY(2i32);
pub const MF_MEDIA_ENGINE_READY_HAVE_FUTURE_DATA: MF_MEDIA_ENGINE_READY = MF_MEDIA_ENGINE_READY(3i32);
pub const MF_MEDIA_ENGINE_READY_HAVE_ENOUGH_DATA: MF_MEDIA_ENGINE_READY = MF_MEDIA_ENGINE_READY(4i32);
impl ::core::convert::From<i32> for MF_MEDIA_ENGINE_READY {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_MEDIA_ENGINE_READY {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_MEDIA_ENGINE_S3D_PACKING_MODE(pub i32);
pub const MF_MEDIA_ENGINE_S3D_PACKING_MODE_NONE: MF_MEDIA_ENGINE_S3D_PACKING_MODE = MF_MEDIA_ENGINE_S3D_PACKING_MODE(0i32);
pub const MF_MEDIA_ENGINE_S3D_PACKING_MODE_SIDE_BY_SIDE: MF_MEDIA_ENGINE_S3D_PACKING_MODE = MF_MEDIA_ENGINE_S3D_PACKING_MODE(1i32);
pub const MF_MEDIA_ENGINE_S3D_PACKING_MODE_TOP_BOTTOM: MF_MEDIA_ENGINE_S3D_PACKING_MODE = MF_MEDIA_ENGINE_S3D_PACKING_MODE(2i32);
impl ::core::convert::From<i32> for MF_MEDIA_ENGINE_S3D_PACKING_MODE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_MEDIA_ENGINE_S3D_PACKING_MODE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_MEDIA_ENGINE_SEEK_MODE(pub i32);
pub const MF_MEDIA_ENGINE_SEEK_MODE_NORMAL: MF_MEDIA_ENGINE_SEEK_MODE = MF_MEDIA_ENGINE_SEEK_MODE(0i32);
pub const MF_MEDIA_ENGINE_SEEK_MODE_APPROXIMATE: MF_MEDIA_ENGINE_SEEK_MODE = MF_MEDIA_ENGINE_SEEK_MODE(1i32);
impl ::core::convert::From<i32> for MF_MEDIA_ENGINE_SEEK_MODE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_MEDIA_ENGINE_SEEK_MODE {
    type Abi = Self;
}
pub const MF_MEDIA_ENGINE_SOURCE_RESOLVER_CONFIG_STORE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(180405399, 46020, 18633, [156, 222, 187, 140, 162, 68, 44, 163]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_MEDIA_ENGINE_STATISTIC(pub i32);
pub const MF_MEDIA_ENGINE_STATISTIC_FRAMES_RENDERED: MF_MEDIA_ENGINE_STATISTIC = MF_MEDIA_ENGINE_STATISTIC(0i32);
pub const MF_MEDIA_ENGINE_STATISTIC_FRAMES_DROPPED: MF_MEDIA_ENGINE_STATISTIC = MF_MEDIA_ENGINE_STATISTIC(1i32);
pub const MF_MEDIA_ENGINE_STATISTIC_BYTES_DOWNLOADED: MF_MEDIA_ENGINE_STATISTIC = MF_MEDIA_ENGINE_STATISTIC(2i32);
pub const MF_MEDIA_ENGINE_STATISTIC_BUFFER_PROGRESS: MF_MEDIA_ENGINE_STATISTIC = MF_MEDIA_ENGINE_STATISTIC(3i32);
pub const MF_MEDIA_ENGINE_STATISTIC_FRAMES_PER_SECOND: MF_MEDIA_ENGINE_STATISTIC = MF_MEDIA_ENGINE_STATISTIC(4i32);
pub const MF_MEDIA_ENGINE_STATISTIC_PLAYBACK_JITTER: MF_MEDIA_ENGINE_STATISTIC = MF_MEDIA_ENGINE_STATISTIC(5i32);
pub const MF_MEDIA_ENGINE_STATISTIC_FRAMES_CORRUPTED: MF_MEDIA_ENGINE_STATISTIC = MF_MEDIA_ENGINE_STATISTIC(6i32);
pub const MF_MEDIA_ENGINE_STATISTIC_TOTAL_FRAME_DELAY: MF_MEDIA_ENGINE_STATISTIC = MF_MEDIA_ENGINE_STATISTIC(7i32);
impl ::core::convert::From<i32> for MF_MEDIA_ENGINE_STATISTIC {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_MEDIA_ENGINE_STATISTIC {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_MEDIA_ENGINE_STREAMTYPE_FAILED(pub i32);
pub const MF_MEDIA_ENGINE_STREAMTYPE_FAILED_UNKNOWN: MF_MEDIA_ENGINE_STREAMTYPE_FAILED = MF_MEDIA_ENGINE_STREAMTYPE_FAILED(0i32);
pub const MF_MEDIA_ENGINE_STREAMTYPE_FAILED_AUDIO: MF_MEDIA_ENGINE_STREAMTYPE_FAILED = MF_MEDIA_ENGINE_STREAMTYPE_FAILED(1i32);
pub const MF_MEDIA_ENGINE_STREAMTYPE_FAILED_VIDEO: MF_MEDIA_ENGINE_STREAMTYPE_FAILED = MF_MEDIA_ENGINE_STREAMTYPE_FAILED(2i32);
impl ::core::convert::From<i32> for MF_MEDIA_ENGINE_STREAMTYPE_FAILED {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_MEDIA_ENGINE_STREAMTYPE_FAILED {
    type Abi = Self;
}
pub const MF_MEDIA_ENGINE_STREAM_CONTAINS_ALPHA_CHANNEL: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1556066116, 53938, 19707, [128, 167, 212, 41, 199, 76, 120, 157]);
pub const MF_MEDIA_ENGINE_SYNCHRONOUS_CLOSE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3284328751, 32270, 20035, [185, 28, 220, 153, 44, 205, 250, 94]);
pub const MF_MEDIA_ENGINE_TELEMETRY_APPLICATION_ID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(511387451, 42980, 16426, [143, 81, 196, 142, 136, 162, 202, 188]);
pub const MF_MEDIA_ENGINE_TIMEDTEXT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2153686033, 37600, 20057, [155, 110, 92, 125, 121, 21, 230, 79]);
pub const MF_MEDIA_ENGINE_TRACK_ID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1706992402, 16451, 18453, [142, 171, 68, 220, 226, 239, 143, 42]);
pub const MF_MEDIA_ENGINE_VIDEO_OUTPUT_FORMAT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1348897084, 36089, 17084, [139, 138, 71, 34, 18, 229, 39, 38]);
pub const MF_MEDIA_PROTECTION_MANAGER_PROPERTIES: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(951943593, 44266, 19571, [137, 178, 85, 50, 192, 174, 202, 121]);
pub const MF_MEDIA_SHARING_ENGINE_DEVICE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3026306442, 31240, 19352, [153, 168, 112, 253, 95, 59, 173, 253]);
pub const MF_MEDIA_SHARING_ENGINE_DEVICE_NAME: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1998456273, 34351, 17049, [149, 172, 174, 129, 253, 20, 243, 231]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_MEDIA_SHARING_ENGINE_EVENT(pub i32);
pub const MF_MEDIA_SHARING_ENGINE_EVENT_DISCONNECT: MF_MEDIA_SHARING_ENGINE_EVENT = MF_MEDIA_SHARING_ENGINE_EVENT(2000i32);
impl ::core::convert::From<i32> for MF_MEDIA_SHARING_ENGINE_EVENT {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_MEDIA_SHARING_ENGINE_EVENT {
    type Abi = Self;
}
pub const MF_MEDIA_SHARING_ENGINE_INITIAL_SEEK_TIME: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1865717749, 54568, 19023, [141, 215, 219, 54, 101, 126, 196, 201]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_METADATAFACIALEXPRESSION_SMILE: u32 = 1u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_METADATATIMESTAMPS_DEVICE: u32 = 1u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_METADATATIMESTAMPS_PRESENTATION: u32 = 2u32;
pub const MF_METADATA_PROVIDER_SERVICE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3676389508, 22692, 19758, [184, 79, 111, 117, 91, 47, 122, 13]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_MINCRYPT_FAILURE: u32 = 268435456u32;
pub const MF_MP2DLNA_AUDIO_BIT_RATE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(756811534, 11103, 19123, [167, 230, 141, 148, 59, 168, 208, 10]);
pub const MF_MP2DLNA_ENCODE_QUALITY: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3039001047, 7494, 20406, [163, 23, 164, 165, 246, 9, 89, 248]);
pub const MF_MP2DLNA_STATISTICS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1977911459, 54701, 18584, [133, 224, 188, 206, 36, 167, 34, 215]);
pub const MF_MP2DLNA_USE_MMCSS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1425269486, 41634, 18813, [152, 52, 151, 58, 253, 229, 33, 235]);
pub const MF_MP2DLNA_VIDEO_BIT_RATE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3901049054, 29620, 17111, [156, 117, 173, 250, 10, 42, 110, 76]);
pub const MF_MPEG4SINK_MAX_CODED_SEQUENCES_PER_FRAGMENT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4229643222, 26925, 19685, [146, 153, 115, 138, 165, 70, 62, 154]);
pub const MF_MPEG4SINK_MINIMUM_PROPERTIES_SIZE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3701599570, 17678, 18978, [140, 98, 78, 212, 82, 247, 161, 135]);
pub const MF_MPEG4SINK_MIN_FRAGMENT_DURATION: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2735429388, 36605, 17896, [148, 254, 39, 200, 75, 91, 223, 246]);
pub const MF_MPEG4SINK_MOOV_BEFORE_MDAT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4134724524, 57830, 20240, [181, 236, 95, 59, 48, 130, 136, 22]);
pub const MF_MPEG4SINK_SPSPPS_PASSTHROUGH: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1442947380, 8197, 19154, [179, 125, 34, 166, 197, 84, 222, 178]);
pub const MF_MSE_ACTIVELIST_CALLBACK: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2493241871, 17737, 18133, [173, 127, 184, 70, 225, 171, 22, 82]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_MSE_APPEND_MODE(pub i32);
pub const MF_MSE_APPEND_MODE_SEGMENTS: MF_MSE_APPEND_MODE = MF_MSE_APPEND_MODE(0i32);
pub const MF_MSE_APPEND_MODE_SEQUENCE: MF_MSE_APPEND_MODE = MF_MSE_APPEND_MODE(1i32);
impl ::core::convert::From<i32> for MF_MSE_APPEND_MODE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_MSE_APPEND_MODE {
    type Abi = Self;
}
pub const MF_MSE_BUFFERLIST_CALLBACK: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1122396592, 54798, 19195, [168, 91, 216, 229, 254, 107, 218, 181]);
pub const MF_MSE_CALLBACK: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2422450112, 17093, 20477, [168, 168, 111, 207, 158, 163, 208, 12]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_MSE_ERROR(pub i32);
pub const MF_MSE_ERROR_NOERROR: MF_MSE_ERROR = MF_MSE_ERROR(0i32);
pub const MF_MSE_ERROR_NETWORK: MF_MSE_ERROR = MF_MSE_ERROR(1i32);
pub const MF_MSE_ERROR_DECODE: MF_MSE_ERROR = MF_MSE_ERROR(2i32);
pub const MF_MSE_ERROR_UNKNOWN_ERROR: MF_MSE_ERROR = MF_MSE_ERROR(3i32);
impl ::core::convert::From<i32> for MF_MSE_ERROR {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_MSE_ERROR {
    type Abi = Self;
}
pub const MF_MSE_OPUS_SUPPORT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1294093505, 36036, 18595, [167, 167, 228, 193, 108, 230, 56, 138]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_MSE_OPUS_SUPPORT_TYPE(pub i32);
pub const MF_MSE_OPUS_SUPPORT_ON: MF_MSE_OPUS_SUPPORT_TYPE = MF_MSE_OPUS_SUPPORT_TYPE(0i32);
pub const MF_MSE_OPUS_SUPPORT_OFF: MF_MSE_OPUS_SUPPORT_TYPE = MF_MSE_OPUS_SUPPORT_TYPE(1i32);
impl ::core::convert::From<i32> for MF_MSE_OPUS_SUPPORT_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_MSE_OPUS_SUPPORT_TYPE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_MSE_READY(pub i32);
pub const MF_MSE_READY_CLOSED: MF_MSE_READY = MF_MSE_READY(1i32);
pub const MF_MSE_READY_OPEN: MF_MSE_READY = MF_MSE_READY(2i32);
pub const MF_MSE_READY_ENDED: MF_MSE_READY = MF_MSE_READY(3i32);
impl ::core::convert::From<i32> for MF_MSE_READY {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_MSE_READY {
    type Abi = Self;
}
pub const MF_MSE_VP9_SUPPORT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2463597609, 55435, 20464, [131, 34, 128, 62, 250, 110, 150, 38]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_MSE_VP9_SUPPORT_TYPE(pub i32);
pub const MF_MSE_VP9_SUPPORT_DEFAULT: MF_MSE_VP9_SUPPORT_TYPE = MF_MSE_VP9_SUPPORT_TYPE(0i32);
pub const MF_MSE_VP9_SUPPORT_ON: MF_MSE_VP9_SUPPORT_TYPE = MF_MSE_VP9_SUPPORT_TYPE(1i32);
pub const MF_MSE_VP9_SUPPORT_OFF: MF_MSE_VP9_SUPPORT_TYPE = MF_MSE_VP9_SUPPORT_TYPE(2i32);
impl ::core::convert::From<i32> for MF_MSE_VP9_SUPPORT_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_MSE_VP9_SUPPORT_TYPE {
    type Abi = Self;
}
pub const MF_MT_AAC_AUDIO_PROFILE_LEVEL_INDICATION: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1983049958, 38200, 19809, [172, 218, 234, 41, 200, 193, 68, 86]);
pub const MF_MT_AAC_PAYLOAD_TYPE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3216686713, 29748, 19740, [148, 240, 114, 163, 185, 225, 113, 136]);
pub const MF_MT_ALL_SAMPLES_INDEPENDENT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3373741881, 24150, 17948, [183, 19, 70, 251, 153, 92, 185, 95]);
pub const MF_MT_ALPHA_MODE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1570085645, 19647, 19716, [145, 159, 63, 95, 127, 40, 66, 17]);
pub const MF_MT_AM_FORMAT_TYPE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1943078701, 6256, 16756, [160, 99, 41, 255, 79, 246, 193, 30]);
pub const MF_MT_ARBITRARY_FORMAT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1517662793, 3453, 18849, [161, 195, 224, 216, 127, 12, 173, 229]);
pub const MF_MT_ARBITRARY_HEADER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2657867509, 265, 20373, [132, 172, 147, 9, 21, 58, 25, 252]);
pub const MF_MT_AUDIO_AVG_BYTES_PER_SECOND: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(447444424, 53231, 17692, [171, 149, 172, 3, 75, 142, 23, 49]);
pub const MF_MT_AUDIO_BITS_PER_SAMPLE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4074681727, 16634, 18276, [170, 51, 237, 79, 45, 31, 246, 105]);
pub const MF_MT_AUDIO_BLOCK_ALIGNMENT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(841867824, 40683, 17341, [171, 122, 255, 65, 34, 81, 84, 29]);
pub const MF_MT_AUDIO_CHANNEL_MASK: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1442535269, 25674, 19631, [132, 121, 147, 137, 131, 187, 21, 136]);
pub const MF_MT_AUDIO_FLAC_MAX_BLOCK_SIZE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2340531630, 19290, 19776, [128, 34, 243, 141, 9, 202, 60, 92]);
pub const MF_MT_AUDIO_FLOAT_SAMPLES_PER_SECOND: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4214977098, 53173, 17177, [174, 254, 110, 66, 178, 64, 97, 50]);
pub const MF_MT_AUDIO_FOLDDOWN_MATRIX: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2640482940, 14014, 19698, [181, 196, 163, 146, 110, 62, 135, 17]);
pub const MF_MT_AUDIO_NUM_CHANNELS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(937724917, 25694, 19547, [137, 222, 173, 169, 226, 155, 105, 106]);
pub const MF_MT_AUDIO_PREFER_WAVEFORMATEX: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2835458746, 57399, 17802, [189, 246, 84, 91, 226, 7, 64, 66]);
pub const MF_MT_AUDIO_SAMPLES_PER_BLOCK: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2863749804, 57658, 18837, [146, 34, 80, 30, 161, 92, 104, 119]);
pub const MF_MT_AUDIO_SAMPLES_PER_SECOND: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1605298919, 656, 19505, [158, 138, 197, 52, 246, 141, 157, 186]);
pub const MF_MT_AUDIO_VALID_BITS_PER_SAMPLE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3653209450, 38192, 19324, [157, 223, 255, 111, 213, 139, 189, 6]);
pub const MF_MT_AUDIO_WMADRC_AVGREF: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2640482943, 14014, 19698, [181, 196, 163, 146, 110, 62, 135, 17]);
pub const MF_MT_AUDIO_WMADRC_AVGTARGET: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2640482944, 14014, 19698, [181, 196, 163, 146, 110, 62, 135, 17]);
pub const MF_MT_AUDIO_WMADRC_PEAKREF: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2640482941, 14014, 19698, [181, 196, 163, 146, 110, 62, 135, 17]);
pub const MF_MT_AUDIO_WMADRC_PEAKTARGET: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2640482942, 14014, 19698, [181, 196, 163, 146, 110, 62, 135, 17]);
pub const MF_MT_AVG_BITRATE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(540223012, 64269, 19870, [189, 13, 203, 246, 120, 108, 16, 46]);
pub const MF_MT_AVG_BIT_ERROR_RATE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2040310742, 13576, 19892, [163, 199, 86, 156, 213, 51, 222, 177]);
pub const MF_MT_COMPRESSED: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(989662446, 6386, 19365, [161, 16, 139, 234, 80, 46, 31, 146]);
pub const MF_MT_CONTAINER_RATE_SCALING: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2206695262, 1092, 20008, [132, 121, 109, 176, 152, 155, 140, 9]);
pub const MF_MT_CUSTOM_VIDEO_PRIMARIES: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1196651027, 36091, 18210, [170, 52, 251, 201, 226, 77, 119, 184]);
pub const MF_MT_DECODER_MAX_DPB_COUNT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1740510284, 34999, 19625, [150, 40, 200, 8, 213, 38, 34, 23]);
pub const MF_MT_DECODER_USE_MAX_RESOLUTION: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1280605220, 44954, 20280, [150, 173, 151, 135, 115, 207, 83, 231]);
pub const MF_MT_DEFAULT_STRIDE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1682656840, 7682, 17686, [176, 235, 192, 28, 169, 212, 154, 198]);
pub const MF_MT_DEPTH_MEASUREMENT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4250584201, 2327, 19382, [157, 84, 49, 34, 191, 112, 20, 75]);
pub const MF_MT_DEPTH_VALUE_UNIT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(564658421, 12681, 18327, [190, 186, 241, 60, 217, 163, 26, 94]);
pub const MF_MT_DRM_FLAGS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2272457507, 13658, 19655, [187, 120, 109, 97, 160, 72, 174, 130]);
pub const MF_MT_DV_AAUX_CTRL_PACK_0: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4147183694, 7633, 17685, [170, 190, 240, 192, 106, 165, 54, 172]);
pub const MF_MT_DV_AAUX_CTRL_PACK_1: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3441379085, 7940, 20448, [191, 185, 208, 122, 224, 56, 106, 216]);
pub const MF_MT_DV_AAUX_SRC_PACK_0: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2227002760, 4024, 19144, [190, 75, 168, 132, 139, 239, 152, 243]);
pub const MF_MT_DV_AAUX_SRC_PACK_1: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1913546052, 549, 16387, [166, 81, 1, 150, 86, 58, 149, 142]);
pub const MF_MT_DV_VAUX_CTRL_PACK: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(797237700, 3489, 18312, [147, 142, 13, 251, 251, 179, 75, 72]);
pub const MF_MT_DV_VAUX_SRC_PACK: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1094725021, 31575, 17350, [177, 41, 44, 185, 151, 241, 80, 9]);
pub const MF_MT_FIXED_SIZE_SAMPLES: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3102470063, 46872, 19972, [176, 169, 17, 103, 117, 227, 50, 27]);
pub const MF_MT_FORWARD_CUSTOM_NALU: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3979570941, 9295, 17037, [145, 83, 40, 243, 153, 69, 136, 144]);
pub const MF_MT_FORWARD_CUSTOM_SEI: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3799212785, 45366, 16849, [149, 148, 58, 126, 79, 235, 242, 209]);
pub const MF_MT_FRAME_RATE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3294208744, 15660, 20036, [177, 50, 254, 229, 21, 108, 123, 176]);
pub const MF_MT_FRAME_RATE_RANGE_MAX: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3812040001, 46287, 18949, [189, 78, 32, 184, 139, 178, 196, 214]);
pub const MF_MT_FRAME_RATE_RANGE_MIN: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3538376076, 56351, 16447, [154, 114, 210, 139, 177, 235, 59, 94]);
pub const MF_MT_FRAME_SIZE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(374522685, 54962, 16402, [184, 52, 114, 3, 8, 73, 163, 125]);
pub const MF_MT_GEOMETRIC_APERTURE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1718978371, 32351, 16397, [152, 10, 170, 133, 150, 200, 86, 150]);
pub const MF_MT_H264_CAPABILITIES: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3141260552, 18698, 4576, [153, 228, 19, 22, 223, 215, 32, 133]);
pub const MF_MT_H264_LAYOUT_PER_STREAM: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2246220210, 37091, 20456, [178, 245, 192, 103, 224, 191, 229, 122]);
pub const MF_MT_H264_MAX_CODEC_CONFIG_DELAY: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4120025478, 19525, 20411, [187, 73, 108, 197, 52, 208, 91, 155]);
pub const MF_MT_H264_MAX_MB_PER_SEC: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1160080688, 29205, 17782, [147, 54, 176, 241, 188, 213, 155, 178]);
pub const MF_MT_H264_RATE_CONTROL_MODES: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1884387288, 17867, 4576, [172, 125, 185, 28, 224, 215, 32, 133]);
pub const MF_MT_H264_RESOLUTION_SCALING: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3817161330, 63253, 18263, [186, 144, 27, 105, 108, 119, 52, 87]);
pub const MF_MT_H264_SIMULCAST_SUPPORT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2661471805, 21488, 18996, [185, 78, 157, 228, 154, 7, 140, 179]);
pub const MF_MT_H264_SUPPORTED_RATE_CONTROL_MODES: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1787479166, 20892, 20248, [155, 179, 126, 234, 174, 165, 89, 77]);
pub const MF_MT_H264_SUPPORTED_SLICE_MODES: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3367901495, 19812, 17737, [131, 67, 168, 8, 108, 11, 253, 165]);
pub const MF_MT_H264_SUPPORTED_SYNC_FRAME_TYPES: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2309303297, 62082, 18642, [181, 34, 34, 230, 174, 99, 49, 153]);
pub const MF_MT_H264_SUPPORTED_USAGES: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1622256024, 56321, 16590, [151, 54, 171, 168, 69, 162, 219, 220]);
pub const MF_MT_H264_SVC_CAPABILITIES: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4170791614, 55607, 19087, [187, 202, 105, 102, 254, 158, 17, 82]);
pub const MF_MT_H264_USAGE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(899474341, 44800, 18890, [162, 244, 42, 201, 76, 168, 43, 97]);
pub const MF_MT_IMAGE_LOSS_TOLERANT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3976604916, 58190, 18722, [190, 153, 147, 64, 50, 19, 61, 124]);
pub const MF_MT_INTERLACE_MODE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3799141304, 58998, 18438, [180, 178, 168, 214, 239, 180, 76, 205]);
pub const MF_MT_IN_BAND_PARAMETER_SET: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1977241744, 37131, 18947, [137, 108, 123, 137, 143, 238, 165, 175]);
pub const MF_MT_MAJOR_TYPE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1223401870, 63689, 18055, [191, 17, 10, 116, 201, 249, 106, 143]);
pub const MF_MT_MAX_FRAME_AVERAGE_LUMINANCE_LEVEL: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1490337623, 28498, 18227, [161, 149, 169, 226, 158, 207, 158, 39]);
pub const MF_MT_MAX_KEYFRAME_SPACING: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3245258027, 29601, 18287, [141, 98, 131, 157, 106, 2, 6, 82]);
pub const MF_MT_MAX_LUMINANCE_LEVEL: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1344614696, 49424, 19940, [152, 174, 70, 163, 36, 250, 230, 218]);
pub const MF_MT_MAX_MASTERING_LUMINANCE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3603347863, 10031, 19617, [141, 0, 128, 66, 17, 26, 15, 246]);
pub const MF_MT_MINIMUM_DISPLAY_APERTURE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3610806118, 6398, 18630, [161, 119, 238, 137, 72, 103, 200, 196]);
pub const MF_MT_MIN_MASTERING_LUMINANCE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2207925344, 20094, 19279, [174, 121, 204, 8, 144, 92, 123, 39]);
pub const MF_MT_MPEG2_CONTENT_PACKET: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2187154916, 20242, 16791, [158, 179, 89, 182, 228, 113, 15, 6]);
pub const MF_MT_MPEG2_FLAGS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(836999453, 63233, 19247, [180, 38, 138, 227, 189, 169, 224, 75]);
pub const MF_MT_MPEG2_HDCP: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(378477386, 16017, 17679, [174, 167, 228, 186, 234, 218, 229, 186]);
pub const MF_MT_MPEG2_LEVEL: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2532730228, 4549, 16405, [134, 102, 191, 245, 22, 67, 109, 167]);
pub const MF_MT_MPEG2_ONE_FRAME_PER_PACKET: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2443484853, 7456, 19266, [172, 232, 128, 66, 105, 191, 149, 237]);
pub const MF_MT_MPEG2_PROFILE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2910234635, 11612, 19979, [179, 117, 100, 229, 32, 19, 112, 54]);
pub const MF_MT_MPEG2_STANDARD: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2718628328, 37514, 19238, [170, 169, 240, 92, 116, 202, 196, 124]);
pub const MF_MT_MPEG2_TIMECODE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1378466320, 58013, 20352, [165, 156, 223, 79, 24, 2, 7, 210]);
pub const MF_MT_MPEG4_CURRENT_SAMPLE_ENTRY: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2594693461, 46666, 19485, [165, 0, 69, 93, 96, 11, 101, 96]);
pub const MF_MT_MPEG4_SAMPLE_DESCRIPTION: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(639540611, 38185, 19343, [161, 17, 139, 156, 149, 10, 129, 169]);
pub const MF_MT_MPEG4_TRACK_TYPE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1425311453, 37671, 20333, [128, 171, 111, 112, 158, 187, 76, 206]);
pub const MF_MT_MPEG_SEQUENCE_HEADER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1006857703, 15056, 19614, [146, 22, 238, 109, 106, 194, 28, 179]);
pub const MF_MT_MPEG_START_TIME_CODE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2448849029, 17203, 17024, [151, 205, 189, 90, 108, 3, 160, 110]);
pub const MF_MT_ORIGINAL_4CC: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3619569632, 11207, 18733, [184, 67, 97, 161, 145, 155, 112, 195]);
pub const MF_MT_ORIGINAL_WAVE_FORMAT_TAG: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2361116739, 40921, 18882, [136, 47, 167, 37, 134, 196, 8, 173]);
pub const MF_MT_OUTPUT_BUFFER_NUM: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2768622508, 63792, 17262, [142, 222, 147, 165, 9, 206, 35, 178]);
pub const MF_MT_PAD_CONTROL_FLAGS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1292792805, 33002, 17236, [169, 208, 17, 118, 206, 176, 40, 234]);
pub const MF_MT_PALETTE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1831354178, 38982, 17424, [175, 217, 101, 77, 80, 59, 26, 84]);
pub const MF_MT_PAN_SCAN_APERTURE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2036420062, 37255, 18683, [184, 199, 77, 82, 104, 157, 230, 73]);
pub const MF_MT_PAN_SCAN_ENABLED: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1266641859, 35603, 16562, [169, 147, 171, 246, 48, 184, 32, 78]);
pub const MF_MT_PIXEL_ASPECT_RATIO: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3325520414, 36106, 16423, [190, 69, 109, 154, 10, 211, 155, 182]);
pub const MF_MT_REALTIME_CONTENT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3138572834, 11227, 16990, [145, 236, 35, 8, 225, 137, 165, 143]);
pub const MF_MT_SAMPLE_SIZE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3671305080, 6544, 16523, [188, 226, 235, 166, 115, 218, 204, 16]);
pub const MF_MT_SECURE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3316434173, 772, 20175, [128, 159, 71, 188, 151, 255, 99, 189]);
pub const MF_MT_SOURCE_CONTENT_HINT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1756144588, 8912, 17638, [133, 248, 40, 22, 113, 151, 250, 56]);
pub const MF_MT_SPATIAL_AUDIO_DATA_PRESENT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1749219047, 54334, 20155, [156, 156, 201, 111, 65, 120, 72, 99]);
pub const MF_MT_SPATIAL_AUDIO_MAX_DYNAMIC_OBJECTS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3707478602, 9737, 16960, [167, 33, 63, 174, 167, 106, 77, 249]);
pub const MF_MT_SPATIAL_AUDIO_MAX_METADATA_ITEMS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(296386740, 57562, 18374, [128, 96, 150, 193, 37, 154, 229, 13]);
pub const MF_MT_SPATIAL_AUDIO_MIN_METADATA_ITEM_OFFSET_SPACING: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2213113545, 4484, 16766, [130, 84, 159, 38, 145, 88, 252, 6]);
pub const MF_MT_SPATIAL_AUDIO_OBJECT_METADATA_FORMAT_ID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(716643264, 25123, 19367, [173, 100, 123, 148, 180, 122, 231, 146]);
pub const MF_MT_SPATIAL_AUDIO_OBJECT_METADATA_LENGTH: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(155953342, 55075, 18591, [146, 250, 118, 103, 119, 179, 71, 38]);
pub const MF_MT_SUBTYPE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4158868634, 17128, 18196, [183, 75, 203, 41, 215, 44, 53, 229]);
pub const MF_MT_TIMESTAMP_CAN_BE_DTS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(613892629, 7035, 16868, [134, 37, 172, 70, 159, 45, 237, 170]);
pub const MF_MT_TRANSFER_FUNCTION: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1605434601, 48732, 18741, [168, 17, 236, 131, 143, 142, 237, 147]);
pub const MF_MT_USER_DATA: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3065804383, 19515, 16548, [189, 81, 37, 53, 182, 111, 224, 157]);
pub const MF_MT_VIDEO_3D: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3411970255, 31579, 18283, [133, 170, 28, 165, 174, 24, 117, 85]);
pub const MF_MT_VIDEO_3D_FIRST_IS_LEFT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3962143891, 2778, 20129, [164, 254, 203, 189, 54, 206, 147, 49]);
pub const MF_MT_VIDEO_3D_FORMAT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1393940640, 34757, 18071, [183, 147, 102, 6, 198, 124, 4, 155]);
pub const MF_MT_VIDEO_3D_LEFT_IS_BASE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1833663487, 22057, 17412, [148, 140, 198, 52, 244, 206, 38, 212]);
pub const MF_MT_VIDEO_3D_NUM_VIEWS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3137830538, 56511, 17131, [175, 96, 65, 141, 249, 138, 164, 149]);
pub const MF_MT_VIDEO_CHROMA_SITING: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1709122416, 51059, 19507, [170, 100, 132, 62, 6, 142, 251, 12]);
pub const MF_MT_VIDEO_H264_NO_FMOASO: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3980795094, 60575, 16746, [168, 163, 38, 215, 211, 16, 24, 215]);
pub const MF_MT_VIDEO_LEVEL: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2532730228, 4549, 16405, [134, 102, 191, 245, 22, 67, 109, 167]);
pub const MF_MT_VIDEO_LIGHTING: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1403015836, 35083, 16918, [139, 249, 89, 147, 103, 173, 109, 32]);
pub const MF_MT_VIDEO_NOMINAL_RANGE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3256585957, 47446, 16497, [141, 175, 50, 94, 223, 92, 171, 17]);
pub const MF_MT_VIDEO_NO_FRAME_ORDERING: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1062932591, 27586, 20195, [183, 237, 137, 2, 193, 143, 83, 81]);
pub const MF_MT_VIDEO_PRIMARIES: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3690718423, 1856, 20192, [129, 146, 133, 10, 176, 226, 25, 53]);
pub const MF_MT_VIDEO_PROFILE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2910234635, 11612, 19979, [179, 117, 100, 229, 32, 19, 112, 54]);
pub const MF_MT_VIDEO_RENDERER_EXTENSION_PROFILE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2218251449, 54344, 20429, [155, 107, 131, 155, 249, 108, 119, 152]);
pub const MF_MT_VIDEO_ROTATION: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3279963741, 8817, 17036, [155, 131, 236, 234, 59, 74, 133, 193]);
pub const MF_MT_WRAPPED_TYPE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1296005923, 53295, 20076, [155, 238, 228, 191, 44, 108, 105, 93]);
pub const MF_MT_YUV_MATRIX: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1042535504, 11381, 19749, [160, 14, 185, 22, 112, 209, 35, 39]);
pub const MF_NALU_LENGTH_INFORMATION: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(420630140, 44363, 18015, [187, 24, 32, 24, 98, 135, 182, 175]);
pub const MF_NALU_LENGTH_SET: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2811305299, 4772, 18789, [174, 112, 110, 173, 214, 255, 5, 81]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_NOT_FOUND_ERR: u32 = 2154823688u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_NOT_SUPPORTED_ERR: u32 = 2154823689u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_OBJECT_TYPE(pub i32);
pub const MF_OBJECT_MEDIASOURCE: MF_OBJECT_TYPE = MF_OBJECT_TYPE(0i32);
pub const MF_OBJECT_BYTESTREAM: MF_OBJECT_TYPE = MF_OBJECT_TYPE(1i32);
pub const MF_OBJECT_INVALID: MF_OBJECT_TYPE = MF_OBJECT_TYPE(2i32);
impl ::core::convert::From<i32> for MF_OBJECT_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_OBJECT_TYPE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_OPM_ACP_PROTECTION_LEVEL(pub i32);
pub const MF_OPM_ACP_OFF: MF_OPM_ACP_PROTECTION_LEVEL = MF_OPM_ACP_PROTECTION_LEVEL(0i32);
pub const MF_OPM_ACP_LEVEL_ONE: MF_OPM_ACP_PROTECTION_LEVEL = MF_OPM_ACP_PROTECTION_LEVEL(1i32);
pub const MF_OPM_ACP_LEVEL_TWO: MF_OPM_ACP_PROTECTION_LEVEL = MF_OPM_ACP_PROTECTION_LEVEL(2i32);
pub const MF_OPM_ACP_LEVEL_THREE: MF_OPM_ACP_PROTECTION_LEVEL = MF_OPM_ACP_PROTECTION_LEVEL(3i32);
pub const MF_OPM_ACP_FORCE_ULONG: MF_OPM_ACP_PROTECTION_LEVEL = MF_OPM_ACP_PROTECTION_LEVEL(2147483647i32);
impl ::core::convert::From<i32> for MF_OPM_ACP_PROTECTION_LEVEL {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_OPM_ACP_PROTECTION_LEVEL {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_OPM_CGMSA_PROTECTION_LEVEL(pub i32);
pub const MF_OPM_CGMSA_OFF: MF_OPM_CGMSA_PROTECTION_LEVEL = MF_OPM_CGMSA_PROTECTION_LEVEL(0i32);
pub const MF_OPM_CGMSA_COPY_FREELY: MF_OPM_CGMSA_PROTECTION_LEVEL = MF_OPM_CGMSA_PROTECTION_LEVEL(1i32);
pub const MF_OPM_CGMSA_COPY_NO_MORE: MF_OPM_CGMSA_PROTECTION_LEVEL = MF_OPM_CGMSA_PROTECTION_LEVEL(2i32);
pub const MF_OPM_CGMSA_COPY_ONE_GENERATION: MF_OPM_CGMSA_PROTECTION_LEVEL = MF_OPM_CGMSA_PROTECTION_LEVEL(3i32);
pub const MF_OPM_CGMSA_COPY_NEVER: MF_OPM_CGMSA_PROTECTION_LEVEL = MF_OPM_CGMSA_PROTECTION_LEVEL(4i32);
pub const MF_OPM_CGMSA_REDISTRIBUTION_CONTROL_REQUIRED: MF_OPM_CGMSA_PROTECTION_LEVEL = MF_OPM_CGMSA_PROTECTION_LEVEL(8i32);
impl ::core::convert::From<i32> for MF_OPM_CGMSA_PROTECTION_LEVEL {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_OPM_CGMSA_PROTECTION_LEVEL {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_PARSE_ERR: u32 = 2154823761u32;
pub const MF_PD_ADAPTIVE_STREAMING: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3926744471, 10745, 18571, [174, 107, 125, 107, 65, 54, 17, 43]);
pub const MF_PD_APP_CONTEXT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1821969714, 48014, 18298, [133, 152, 13, 93, 150, 252, 216, 138]);
pub const MF_PD_ASF_CODECLIST: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3837474057, 49549, 19953, [187, 153, 122, 54, 179, 204, 65, 25]);
pub const MF_PD_ASF_CONTENTENCRYPTIONEX_ENCRYPTION_DATA: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1649445861, 60639, 18724, [163, 89, 114, 186, 179, 57, 123, 157]);
pub const MF_PD_ASF_CONTENTENCRYPTION_KEYID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2233531966, 10110, 18154, [153, 228, 227, 10, 134, 219, 18, 190]);
pub const MF_PD_ASF_CONTENTENCRYPTION_LICENSE_URL: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2233531968, 10110, 18154, [153, 228, 227, 10, 134, 219, 18, 190]);
pub const MF_PD_ASF_CONTENTENCRYPTION_SECRET_DATA: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2233531967, 10110, 18154, [153, 228, 227, 10, 134, 219, 18, 190]);
pub const MF_PD_ASF_CONTENTENCRYPTION_TYPE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2233531965, 10110, 18154, [153, 228, 227, 10, 134, 219, 18, 190]);
pub const MF_PD_ASF_DATA_LENGTH: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3889542120, 7977, 17875, [136, 34, 62, 120, 250, 226, 114, 237]);
pub const MF_PD_ASF_DATA_START_OFFSET: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3889542119, 7977, 17875, [136, 34, 62, 120, 250, 226, 114, 237]);
pub const MF_PD_ASF_FILEPROPERTIES_CREATION_TIME: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1038502326, 55149, 20070, [158, 201, 120, 18, 15, 180, 199, 227]);
pub const MF_PD_ASF_FILEPROPERTIES_FILE_ID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1038502324, 55149, 20070, [158, 201, 120, 18, 15, 180, 199, 227]);
pub const MF_PD_ASF_FILEPROPERTIES_FLAGS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1038502331, 55149, 20070, [158, 201, 120, 18, 15, 180, 199, 227]);
pub const MF_PD_ASF_FILEPROPERTIES_MAX_BITRATE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1038502334, 55149, 20070, [158, 201, 120, 18, 15, 180, 199, 227]);
pub const MF_PD_ASF_FILEPROPERTIES_MAX_PACKET_SIZE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1038502333, 55149, 20070, [158, 201, 120, 18, 15, 180, 199, 227]);
pub const MF_PD_ASF_FILEPROPERTIES_MIN_PACKET_SIZE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1038502332, 55149, 20070, [158, 201, 120, 18, 15, 180, 199, 227]);
pub const MF_PD_ASF_FILEPROPERTIES_PACKETS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1038502327, 55149, 20070, [158, 201, 120, 18, 15, 180, 199, 227]);
pub const MF_PD_ASF_FILEPROPERTIES_PLAY_DURATION: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1038502328, 55149, 20070, [158, 201, 120, 18, 15, 180, 199, 227]);
pub const MF_PD_ASF_FILEPROPERTIES_PREROLL: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1038502330, 55149, 20070, [158, 201, 120, 18, 15, 180, 199, 227]);
pub const MF_PD_ASF_FILEPROPERTIES_SEND_DURATION: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1038502329, 55149, 20070, [158, 201, 120, 18, 15, 180, 199, 227]);
pub const MF_PD_ASF_INFO_HAS_AUDIO: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2162565781, 8854, 19012, [179, 28, 209, 3, 198, 254, 210, 60]);
pub const MF_PD_ASF_INFO_HAS_NON_AUDIO_VIDEO: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2162565783, 8854, 19012, [179, 28, 209, 3, 198, 254, 210, 60]);
pub const MF_PD_ASF_INFO_HAS_VIDEO: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2162565782, 8854, 19012, [179, 28, 209, 3, 198, 254, 210, 60]);
pub const MF_PD_ASF_LANGLIST: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4064142396, 39287, 17933, [166, 236, 50, 147, 127, 22, 15, 125]);
pub const MF_PD_ASF_LANGLIST_LEGACYORDER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4064142397, 39287, 17933, [166, 236, 50, 147, 127, 22, 15, 125]);
pub const MF_PD_ASF_MARKER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1362375438, 33702, 18270, [169, 213, 79, 184, 117, 251, 46, 49]);
pub const MF_PD_ASF_METADATA_IS_VBR: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1606849658, 61280, 17501, [180, 73, 68, 46, 204, 120, 180, 193]);
pub const MF_PD_ASF_METADATA_LEAKY_BUCKET_PAIRS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1606849661, 61280, 17501, [180, 73, 68, 46, 204, 120, 180, 193]);
pub const MF_PD_ASF_METADATA_V8_BUFFERAVERAGE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1606849660, 61280, 17501, [180, 73, 68, 46, 204, 120, 180, 193]);
pub const MF_PD_ASF_METADATA_V8_VBRPEAK: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1606849659, 61280, 17501, [180, 73, 68, 46, 204, 120, 180, 193]);
pub const MF_PD_ASF_SCRIPT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3801927895, 54786, 18723, [167, 254, 115, 253, 151, 236, 198, 80]);
pub const MF_PD_AUDIO_ENCODING_BITRATE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1821969717, 48014, 18298, [133, 152, 13, 93, 150, 252, 216, 138]);
pub const MF_PD_AUDIO_ISVARIABLEBITRATE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(855797472, 58247, 17794, [174, 10, 52, 162, 173, 59, 170, 24]);
pub const MF_PD_DURATION: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1821969715, 48014, 18298, [133, 152, 13, 93, 150, 252, 216, 138]);
pub const MF_PD_LAST_MODIFIED_TIME: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1821969720, 48014, 18298, [133, 152, 13, 93, 150, 252, 216, 138]);
pub const MF_PD_MIME_TYPE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1821969719, 48014, 18298, [133, 152, 13, 93, 150, 252, 216, 138]);
pub const MF_PD_PLAYBACK_BOUNDARY_TIME: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1821969723, 48014, 18298, [133, 152, 13, 93, 150, 252, 216, 138]);
pub const MF_PD_PLAYBACK_ELEMENT_ID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1821969721, 48014, 18298, [133, 152, 13, 93, 150, 252, 216, 138]);
pub const MF_PD_PMPHOST_CONTEXT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1821969713, 48014, 18298, [133, 152, 13, 93, 150, 252, 216, 138]);
pub const MF_PD_PREFERRED_LANGUAGE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1821969722, 48014, 18298, [133, 152, 13, 93, 150, 252, 216, 138]);
pub const MF_PD_SAMI_STYLELIST: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3770104959, 18541, 18510, [152, 114, 77, 229, 25, 42, 123, 248]);
pub const MF_PD_TOTAL_FILE_SIZE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1821969716, 48014, 18298, [133, 152, 13, 93, 150, 252, 216, 138]);
pub const MF_PD_VIDEO_ENCODING_BITRATE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1821969718, 48014, 18298, [133, 152, 13, 93, 150, 252, 216, 138]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_PLUGIN_CONTROL_POLICY(pub i32);
pub const MF_PLUGIN_CONTROL_POLICY_USE_ALL_PLUGINS: MF_PLUGIN_CONTROL_POLICY = MF_PLUGIN_CONTROL_POLICY(0i32);
pub const MF_PLUGIN_CONTROL_POLICY_USE_APPROVED_PLUGINS: MF_PLUGIN_CONTROL_POLICY = MF_PLUGIN_CONTROL_POLICY(1i32);
pub const MF_PLUGIN_CONTROL_POLICY_USE_WEB_PLUGINS: MF_PLUGIN_CONTROL_POLICY = MF_PLUGIN_CONTROL_POLICY(2i32);
pub const MF_PLUGIN_CONTROL_POLICY_USE_WEB_PLUGINS_EDGEMODE: MF_PLUGIN_CONTROL_POLICY = MF_PLUGIN_CONTROL_POLICY(3i32);
impl ::core::convert::From<i32> for MF_PLUGIN_CONTROL_POLICY {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_PLUGIN_CONTROL_POLICY {
    type Abi = Self;
}
pub const MF_PMP_SERVER_CONTEXT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(788580624, 53967, 17016, [139, 106, 208, 119, 250, 195, 162, 95]);
pub const MF_POLICY_ID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2975908429, 49241, 18673, [169, 1, 158, 226, 152, 169, 168, 195]);
pub const MF_PREFERRED_SOURCE_URI: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1606964360, 17258, 19896, [144, 175, 77, 180, 2, 174, 92, 87]);
pub const MF_PROGRESSIVE_CODING_CONTENT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2399276778, 5384, 18207, [157, 166, 80, 125, 124, 250, 64, 219]);
pub const MF_PROPERTY_HANDLER_SERVICE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2751122946, 12984, 16861, [144, 231, 95, 239, 124, 137, 145, 181]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_Plugin_Type(pub i32);
pub const MF_Plugin_Type_MFT: MF_Plugin_Type = MF_Plugin_Type(0i32);
pub const MF_Plugin_Type_MediaSource: MF_Plugin_Type = MF_Plugin_Type(1i32);
pub const MF_Plugin_Type_MFT_MatchOutputType: MF_Plugin_Type = MF_Plugin_Type(2i32);
pub const MF_Plugin_Type_Other: MF_Plugin_Type = MF_Plugin_Type(-1i32);
impl ::core::convert::From<i32> for MF_Plugin_Type {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_Plugin_Type {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_QUALITY_ADVISE_FLAGS(pub i32);
pub const MF_QUALITY_CANNOT_KEEP_UP: MF_QUALITY_ADVISE_FLAGS = MF_QUALITY_ADVISE_FLAGS(1i32);
impl ::core::convert::From<i32> for MF_QUALITY_ADVISE_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_QUALITY_ADVISE_FLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_QUALITY_DROP_MODE(pub i32);
pub const MF_DROP_MODE_NONE: MF_QUALITY_DROP_MODE = MF_QUALITY_DROP_MODE(0i32);
pub const MF_DROP_MODE_1: MF_QUALITY_DROP_MODE = MF_QUALITY_DROP_MODE(1i32);
pub const MF_DROP_MODE_2: MF_QUALITY_DROP_MODE = MF_QUALITY_DROP_MODE(2i32);
pub const MF_DROP_MODE_3: MF_QUALITY_DROP_MODE = MF_QUALITY_DROP_MODE(3i32);
pub const MF_DROP_MODE_4: MF_QUALITY_DROP_MODE = MF_QUALITY_DROP_MODE(4i32);
pub const MF_DROP_MODE_5: MF_QUALITY_DROP_MODE = MF_QUALITY_DROP_MODE(5i32);
pub const MF_NUM_DROP_MODES: MF_QUALITY_DROP_MODE = MF_QUALITY_DROP_MODE(6i32);
impl ::core::convert::From<i32> for MF_QUALITY_DROP_MODE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_QUALITY_DROP_MODE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_QUALITY_LEVEL(pub i32);
pub const MF_QUALITY_NORMAL: MF_QUALITY_LEVEL = MF_QUALITY_LEVEL(0i32);
pub const MF_QUALITY_NORMAL_MINUS_1: MF_QUALITY_LEVEL = MF_QUALITY_LEVEL(1i32);
pub const MF_QUALITY_NORMAL_MINUS_2: MF_QUALITY_LEVEL = MF_QUALITY_LEVEL(2i32);
pub const MF_QUALITY_NORMAL_MINUS_3: MF_QUALITY_LEVEL = MF_QUALITY_LEVEL(3i32);
pub const MF_QUALITY_NORMAL_MINUS_4: MF_QUALITY_LEVEL = MF_QUALITY_LEVEL(4i32);
pub const MF_QUALITY_NORMAL_MINUS_5: MF_QUALITY_LEVEL = MF_QUALITY_LEVEL(5i32);
pub const MF_NUM_QUALITY_LEVELS: MF_QUALITY_LEVEL = MF_QUALITY_LEVEL(6i32);
impl ::core::convert::From<i32> for MF_QUALITY_LEVEL {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_QUALITY_LEVEL {
    type Abi = Self;
}
pub const MF_QUALITY_NOTIFY_PROCESSING_LATENCY: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4139010808, 24653, 18174, [169, 93, 69, 71, 155, 16, 201, 188]);
pub const MF_QUALITY_NOTIFY_SAMPLE_LAG: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(819024390, 60714, 18272, [190, 23, 235, 74, 159, 18, 41, 92]);
pub const MF_QUALITY_SERVICES: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3085090321, 12182, 17984, [181, 44, 40, 35, 101, 189, 241, 108]);
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MF_QUATERNION {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
impl MF_QUATERNION {}
impl ::core::default::Default for MF_QUATERNION {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MF_QUATERNION {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MF_QUATERNION").field("x", &self.x).field("y", &self.y).field("z", &self.z).field("w", &self.w).finish()
    }
}
impl ::core::cmp::PartialEq for MF_QUATERNION {
    fn eq(&self, other: &Self) -> bool {
        self.x == other.x && self.y == other.y && self.z == other.z && self.w == other.w
    }
}
impl ::core::cmp::Eq for MF_QUATERNION {}
unsafe impl ::windows::runtime::Abi for MF_QUATERNION {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_QUOTA_EXCEEDED_ERR: u32 = 2154823702u32;
pub const MF_RATE_CONTROL_SERVICE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2255463063, 47106, 19448, [157, 201, 94, 59, 106, 159, 83, 201]);
pub const MF_READWRITE_D3D_OPTIONAL: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(560232921, 12401, 17098, [187, 108, 76, 34, 16, 46, 29, 24]);
pub const MF_READWRITE_DISABLE_CONVERTERS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2564141157, 4980, 18503, [141, 93, 49, 82, 15, 238, 113, 86]);
pub const MF_READWRITE_ENABLE_AUTOFINALIZE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3715932457, 36049, 19909, [157, 222, 206, 22, 134, 117, 222, 97]);
pub const MF_READWRITE_ENABLE_HARDWARE_TRANSFORMS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2788469020, 33323, 16825, [164, 148, 77, 228, 100, 54, 18, 176]);
pub const MF_READWRITE_MMCSS_CLASS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(959988480, 53483, 16561, [135, 160, 51, 24, 135, 27, 90, 83]);
pub const MF_READWRITE_MMCSS_CLASS_AUDIO: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1124616154, 2192, 19214, [147, 140, 5, 67, 50, 197, 71, 225]);
pub const MF_READWRITE_MMCSS_PRIORITY: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1135417806, 62271, 19369, [165, 128, 228, 205, 18, 242, 209, 68]);
pub const MF_READWRITE_MMCSS_PRIORITY_AUDIO: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(658356357, 11746, 19890, [166, 167, 253, 182, 111, 180, 11, 97]);
pub const MF_REMOTE_PROXY: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(788580622, 53967, 17016, [139, 106, 208, 119, 250, 195, 162, 95]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_RESOLUTION_FLAGS(pub u32);
pub const MF_RESOLUTION_MEDIASOURCE: MF_RESOLUTION_FLAGS = MF_RESOLUTION_FLAGS(1u32);
pub const MF_RESOLUTION_BYTESTREAM: MF_RESOLUTION_FLAGS = MF_RESOLUTION_FLAGS(2u32);
pub const MF_RESOLUTION_CONTENT_DOES_NOT_HAVE_TO_MATCH_EXTENSION_OR_MIME_TYPE: MF_RESOLUTION_FLAGS = MF_RESOLUTION_FLAGS(16u32);
pub const MF_RESOLUTION_KEEP_BYTE_STREAM_ALIVE_ON_FAIL: MF_RESOLUTION_FLAGS = MF_RESOLUTION_FLAGS(32u32);
pub const MF_RESOLUTION_DISABLE_LOCAL_PLUGINS: MF_RESOLUTION_FLAGS = MF_RESOLUTION_FLAGS(64u32);
pub const MF_RESOLUTION_PLUGIN_CONTROL_POLICY_APPROVED_ONLY: MF_RESOLUTION_FLAGS = MF_RESOLUTION_FLAGS(128u32);
pub const MF_RESOLUTION_PLUGIN_CONTROL_POLICY_WEB_ONLY: MF_RESOLUTION_FLAGS = MF_RESOLUTION_FLAGS(256u32);
pub const MF_RESOLUTION_PLUGIN_CONTROL_POLICY_WEB_ONLY_EDGEMODE: MF_RESOLUTION_FLAGS = MF_RESOLUTION_FLAGS(512u32);
pub const MF_RESOLUTION_ENABLE_STORE_PLUGINS: MF_RESOLUTION_FLAGS = MF_RESOLUTION_FLAGS(1024u32);
pub const MF_RESOLUTION_READ: MF_RESOLUTION_FLAGS = MF_RESOLUTION_FLAGS(65536u32);
pub const MF_RESOLUTION_WRITE: MF_RESOLUTION_FLAGS = MF_RESOLUTION_FLAGS(131072u32);
impl ::core::convert::From<u32> for MF_RESOLUTION_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_RESOLUTION_FLAGS {
    type Abi = Self;
}
impl ::core::ops::BitOr for MF_RESOLUTION_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::core::ops::BitAnd for MF_RESOLUTION_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::core::ops::BitOrAssign for MF_RESOLUTION_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::core::ops::BitAndAssign for MF_RESOLUTION_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::core::ops::Not for MF_RESOLUTION_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
pub const MF_SAMI_SERVICE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1235786471, 46297, 20210, [170, 92, 246, 90, 62, 5, 174, 78]);
pub const MF_SAMPLEGRABBERSINK_IGNORE_CLOCK: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(251503296, 11113, 20014, [171, 141, 70, 220, 191, 247, 210, 93]);
pub const MF_SAMPLEGRABBERSINK_SAMPLE_TIME_OFFSET: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1659098998, 33024, 19971, [166, 232, 189, 56, 87, 172, 156, 71]);
pub const MF_SA_AUDIO_ENDPOINT_AWARE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3224901377, 32860, 17074, [172, 141, 226, 180, 191, 33, 244, 248]);
pub const MF_SA_BUFFERS_PER_SAMPLE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2268877169, 7741, 20005, [152, 141, 180, 51, 206, 4, 25, 131]);
pub const MF_SA_D3D11_ALLOCATE_DISPLAYABLE_RESOURCES: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4009414253, 11945, 19167, [187, 223, 123, 188, 72, 42, 27, 109]);
pub const MF_SA_D3D11_ALLOW_DYNAMIC_YUV_TEXTURE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3456554143, 1555, 19357, [134, 166, 216, 196, 249, 193, 0, 117]);
pub const MF_SA_D3D11_AWARE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(543903688, 64761, 19537, [175, 227, 151, 100, 54, 158, 51, 160]);
pub const MF_SA_D3D11_BINDFLAGS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3939473325, 1628, 17416, [190, 227, 253, 203, 253, 18, 139, 226]);
pub const MF_SA_D3D11_HW_PROTECTED: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(982231513, 37578, 17159, [163, 145, 105, 153, 219, 243, 182, 206]);
pub const MF_SA_D3D11_SHARED: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2072982211, 28054, 19337, [146, 3, 221, 56, 182, 20, 20, 243]);
pub const MF_SA_D3D11_SHARED_WITHOUT_MUTEX: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(970708045, 11844, 18737, [164, 200, 53, 45, 61, 196, 33, 21]);
pub const MF_SA_D3D11_USAGE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3898598466, 11427, 18542, [169, 199, 16, 157, 218, 96, 152, 128]);
pub const MF_SA_D3D_AWARE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3936574505, 30558, 18574, [155, 97, 179, 40, 62, 73, 88, 59]);
pub const MF_SA_MINIMUM_OUTPUT_SAMPLE_COUNT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2232894933, 50134, 18285, [149, 39, 73, 142, 242, 209, 13, 24]);
pub const MF_SA_MINIMUM_OUTPUT_SAMPLE_COUNT_PROGRESSIVE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(257237925, 7346, 18373, [165, 80, 46, 235, 132, 180, 209, 74]);
pub const MF_SA_REQUIRED_SAMPLE_COUNT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(411053153, 12875, 18770, [171, 208, 23, 111, 245, 198, 150, 255]);
pub const MF_SA_REQUIRED_SAMPLE_COUNT_PROGRESSIVE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2977093006, 64119, 20040, [141, 42, 29, 242, 216, 80, 234, 194]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_SDK_VERSION: u32 = 2u32;
pub const MF_SD_AMBISONICS_SAMPLE3D_DESCRIPTION: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4145401662, 43364, 19519, [148, 174, 157, 107, 167, 38, 70, 65]);
pub const MF_SD_ASF_EXTSTRMPROP_AVG_BUFFERSIZE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1224254756, 12381, 16941, [133, 36, 37, 2, 221, 163, 54, 128]);
pub const MF_SD_ASF_EXTSTRMPROP_AVG_DATA_BITRATE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1224254755, 12381, 16941, [133, 36, 37, 2, 221, 163, 54, 128]);
pub const MF_SD_ASF_EXTSTRMPROP_LANGUAGE_ID_INDEX: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1224254754, 12381, 16941, [133, 36, 37, 2, 221, 163, 54, 128]);
pub const MF_SD_ASF_EXTSTRMPROP_MAX_BUFFERSIZE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1224254758, 12381, 16941, [133, 36, 37, 2, 221, 163, 54, 128]);
pub const MF_SD_ASF_EXTSTRMPROP_MAX_DATA_BITRATE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1224254757, 12381, 16941, [133, 36, 37, 2, 221, 163, 54, 128]);
pub const MF_SD_ASF_METADATA_DEVICE_CONFORMANCE_TEMPLATE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(610177693, 50254, 20350, [187, 60, 119, 212, 223, 210, 127, 138]);
pub const MF_SD_ASF_STREAMBITRATES_BITRATE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2833351405, 45000, 17360, [176, 209, 246, 91, 173, 157, 165, 88]);
pub const MF_SD_AUDIO_ENCODER_DELAY: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2391097900, 29662, 16447, [154, 53, 85, 10, 214, 232, 185, 81]);
pub const MF_SD_AUDIO_ENCODER_PADDING: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1385987884, 44107, 20031, [191, 195, 9, 2, 25, 73, 130, 203]);
pub const MF_SD_LANGUAGE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(11477376, 48578, 16956, [171, 202, 245, 3, 89, 59, 193, 33]);
pub const MF_SD_MEDIASOURCE_STATUS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(420702091, 64527, 17626, [143, 67, 27, 163, 181, 38, 244, 174]);
pub const MF_SD_MUTUALLY_EXCLUSIVE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(37681052, 14477, 18559, [172, 23, 105, 108, 214, 227, 198, 245]);
pub const MF_SD_PROTECTED: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(11477377, 48578, 16956, [171, 202, 245, 3, 89, 59, 193, 33]);
pub const MF_SD_SAMI_LANGUAGE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(922532234, 27856, 17611, [172, 185, 168, 245, 96, 13, 208, 187]);
pub const MF_SD_STREAM_NAME: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1327171997, 54036, 16869, [167, 129, 127, 239, 170, 76, 80, 31]);
pub const MF_SD_VIDEO_SPHERICAL: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2770183241, 16348, 18316, [188, 181, 48, 190, 118, 89, 95, 85]);
pub const MF_SD_VIDEO_SPHERICAL_FORMAT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1250935815, 28321, 18120, [181, 103, 105, 113, 212, 161, 57, 195]);
pub const MF_SD_VIDEO_SPHERICAL_INITIAL_VIEWDIRECTION: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(298998345, 47970, 18047, [157, 177, 193, 113, 101, 113, 108, 73]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_SERVICE_LOOKUP_TYPE(pub i32);
pub const MF_SERVICE_LOOKUP_UPSTREAM: MF_SERVICE_LOOKUP_TYPE = MF_SERVICE_LOOKUP_TYPE(0i32);
pub const MF_SERVICE_LOOKUP_UPSTREAM_DIRECT: MF_SERVICE_LOOKUP_TYPE = MF_SERVICE_LOOKUP_TYPE(1i32);
pub const MF_SERVICE_LOOKUP_DOWNSTREAM: MF_SERVICE_LOOKUP_TYPE = MF_SERVICE_LOOKUP_TYPE(2i32);
pub const MF_SERVICE_LOOKUP_DOWNSTREAM_DIRECT: MF_SERVICE_LOOKUP_TYPE = MF_SERVICE_LOOKUP_TYPE(3i32);
pub const MF_SERVICE_LOOKUP_ALL: MF_SERVICE_LOOKUP_TYPE = MF_SERVICE_LOOKUP_TYPE(4i32);
pub const MF_SERVICE_LOOKUP_GLOBAL: MF_SERVICE_LOOKUP_TYPE = MF_SERVICE_LOOKUP_TYPE(5i32);
impl ::core::convert::From<i32> for MF_SERVICE_LOOKUP_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_SERVICE_LOOKUP_TYPE {
    type Abi = Self;
}
pub const MF_SESSION_APPROX_EVENT_OCCURRENCE_TIME: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(420381999, 25144, 17105, [181, 175, 105, 234, 51, 142, 248, 80]);
pub const MF_SESSION_CONTENT_PROTECTION_MANAGER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(511956098, 7964, 17777, [132, 5, 136, 244, 178, 24, 31, 116]);
pub const MF_SESSION_GLOBAL_TIME: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(511956098, 7964, 17777, [132, 5, 136, 244, 178, 24, 31, 114]);
pub const MF_SESSION_QUALITY_MANAGER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(511956098, 7964, 17777, [132, 5, 136, 244, 178, 24, 31, 115]);
pub const MF_SESSION_REMOTE_SOURCE_MODE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4093853428, 39859, 17272, [148, 31, 133, 160, 133, 107, 194, 68]);
pub const MF_SESSION_SERVER_CONTEXT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2951066257, 20730, 18152, [185, 190, 12, 12, 60, 228, 179, 165]);
pub const MF_SESSION_TOPOLOADER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(511956098, 7964, 17777, [132, 5, 136, 244, 178, 24, 31, 113]);
pub const MF_SHARING_ENGINE_CALLBACK: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1474043541, 53842, 17402, [155, 188, 24, 0, 112, 238, 254, 109]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_SHARING_ENGINE_EVENT(pub i32);
pub const MF_SHARING_ENGINE_EVENT_DISCONNECT: MF_SHARING_ENGINE_EVENT = MF_SHARING_ENGINE_EVENT(2000i32);
pub const MF_SHARING_ENGINE_EVENT_LOCALRENDERINGSTARTED: MF_SHARING_ENGINE_EVENT = MF_SHARING_ENGINE_EVENT(2001i32);
pub const MF_SHARING_ENGINE_EVENT_LOCALRENDERINGENDED: MF_SHARING_ENGINE_EVENT = MF_SHARING_ENGINE_EVENT(2002i32);
pub const MF_SHARING_ENGINE_EVENT_STOPPED: MF_SHARING_ENGINE_EVENT = MF_SHARING_ENGINE_EVENT(2003i32);
pub const MF_SHARING_ENGINE_EVENT_ERROR: MF_SHARING_ENGINE_EVENT = MF_SHARING_ENGINE_EVENT(2501i32);
impl ::core::convert::From<i32> for MF_SHARING_ENGINE_EVENT {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_SHARING_ENGINE_EVENT {
    type Abi = Self;
}
pub const MF_SHARING_ENGINE_SHAREDRENDERER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4020520608, 29671, 16462, [138, 226, 254, 246, 10, 245, 163, 43]);
pub const MF_SHUTDOWN_RENDERER_ON_ENGINE_SHUTDOWN: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3239237965, 27548, 18680, [182, 249, 121, 80, 255, 154, 183, 30]);
pub const MF_SINK_VIDEO_DISPLAY_ASPECT_RATIO_DENOMINATOR: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1856105367, 8160, 20240, [166, 228, 31, 79, 102, 21, 100, 224]);
pub const MF_SINK_VIDEO_DISPLAY_ASPECT_RATIO_NUMERATOR: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3505601314, 46986, 18553, [180, 85, 240, 62, 243, 250, 130, 205]);
pub const MF_SINK_VIDEO_NATIVE_HEIGHT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4039796485, 18700, 17384, [148, 28, 192, 179, 32, 107, 154, 101]);
pub const MF_SINK_VIDEO_NATIVE_WIDTH: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3872827143, 5381, 18247, [155, 16, 114, 210, 209, 88, 203, 58]);
pub const MF_SINK_VIDEO_PTS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(560119271, 16926, 19344, [155, 51, 229, 143, 191, 29, 88, 182]);
pub const MF_SINK_WRITER_ASYNC_CALLBACK: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1221269566, 31499, 18164, [130, 46, 94, 29, 45, 218, 67, 84]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_SINK_WRITER_CONSTANTS(pub u32);
pub const MF_SINK_WRITER_INVALID_STREAM_INDEX: MF_SINK_WRITER_CONSTANTS = MF_SINK_WRITER_CONSTANTS(4294967295u32);
pub const MF_SINK_WRITER_ALL_STREAMS: MF_SINK_WRITER_CONSTANTS = MF_SINK_WRITER_CONSTANTS(4294967294u32);
pub const MF_SINK_WRITER_MEDIASINK: MF_SINK_WRITER_CONSTANTS = MF_SINK_WRITER_CONSTANTS(4294967295u32);
impl ::core::convert::From<u32> for MF_SINK_WRITER_CONSTANTS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_SINK_WRITER_CONSTANTS {
    type Abi = Self;
}
impl ::core::ops::BitOr for MF_SINK_WRITER_CONSTANTS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::core::ops::BitAnd for MF_SINK_WRITER_CONSTANTS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::core::ops::BitOrAssign for MF_SINK_WRITER_CONSTANTS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::core::ops::BitAndAssign for MF_SINK_WRITER_CONSTANTS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::core::ops::Not for MF_SINK_WRITER_CONSTANTS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
pub const MF_SINK_WRITER_D3D_MANAGER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3967954338, 57833, 19241, [160, 216, 86, 60, 113, 159, 82, 105]);
pub const MF_SINK_WRITER_DISABLE_THROTTLING: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(146294232, 11124, 19198, [157, 83, 190, 22, 210, 213, 174, 79]);
pub const MF_SINK_WRITER_ENCODER_CONFIG: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2912013572, 42956, 19143, [153, 182, 165, 123, 154, 74, 124, 112]);
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MF_SINK_WRITER_STATISTICS {
    pub cb: u32,
    pub llLastTimestampReceived: i64,
    pub llLastTimestampEncoded: i64,
    pub llLastTimestampProcessed: i64,
    pub llLastStreamTickReceived: i64,
    pub llLastSinkSampleRequest: i64,
    pub qwNumSamplesReceived: u64,
    pub qwNumSamplesEncoded: u64,
    pub qwNumSamplesProcessed: u64,
    pub qwNumStreamTicksReceived: u64,
    pub dwByteCountQueued: u32,
    pub qwByteCountProcessed: u64,
    pub dwNumOutstandingSinkSampleRequests: u32,
    pub dwAverageSampleRateReceived: u32,
    pub dwAverageSampleRateEncoded: u32,
    pub dwAverageSampleRateProcessed: u32,
}
impl MF_SINK_WRITER_STATISTICS {}
impl ::core::default::Default for MF_SINK_WRITER_STATISTICS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MF_SINK_WRITER_STATISTICS {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MF_SINK_WRITER_STATISTICS")
            .field("cb", &self.cb)
            .field("llLastTimestampReceived", &self.llLastTimestampReceived)
            .field("llLastTimestampEncoded", &self.llLastTimestampEncoded)
            .field("llLastTimestampProcessed", &self.llLastTimestampProcessed)
            .field("llLastStreamTickReceived", &self.llLastStreamTickReceived)
            .field("llLastSinkSampleRequest", &self.llLastSinkSampleRequest)
            .field("qwNumSamplesReceived", &self.qwNumSamplesReceived)
            .field("qwNumSamplesEncoded", &self.qwNumSamplesEncoded)
            .field("qwNumSamplesProcessed", &self.qwNumSamplesProcessed)
            .field("qwNumStreamTicksReceived", &self.qwNumStreamTicksReceived)
            .field("dwByteCountQueued", &self.dwByteCountQueued)
            .field("qwByteCountProcessed", &self.qwByteCountProcessed)
            .field("dwNumOutstandingSinkSampleRequests", &self.dwNumOutstandingSinkSampleRequests)
            .field("dwAverageSampleRateReceived", &self.dwAverageSampleRateReceived)
            .field("dwAverageSampleRateEncoded", &self.dwAverageSampleRateEncoded)
            .field("dwAverageSampleRateProcessed", &self.dwAverageSampleRateProcessed)
            .finish()
    }
}
impl ::core::cmp::PartialEq for MF_SINK_WRITER_STATISTICS {
    fn eq(&self, other: &Self) -> bool {
        self.cb == other.cb
            && self.llLastTimestampReceived == other.llLastTimestampReceived
            && self.llLastTimestampEncoded == other.llLastTimestampEncoded
            && self.llLastTimestampProcessed == other.llLastTimestampProcessed
            && self.llLastStreamTickReceived == other.llLastStreamTickReceived
            && self.llLastSinkSampleRequest == other.llLastSinkSampleRequest
            && self.qwNumSamplesReceived == other.qwNumSamplesReceived
            && self.qwNumSamplesEncoded == other.qwNumSamplesEncoded
            && self.qwNumSamplesProcessed == other.qwNumSamplesProcessed
            && self.qwNumStreamTicksReceived == other.qwNumStreamTicksReceived
            && self.dwByteCountQueued == other.dwByteCountQueued
            && self.qwByteCountProcessed == other.qwByteCountProcessed
            && self.dwNumOutstandingSinkSampleRequests == other.dwNumOutstandingSinkSampleRequests
            && self.dwAverageSampleRateReceived == other.dwAverageSampleRateReceived
            && self.dwAverageSampleRateEncoded == other.dwAverageSampleRateEncoded
            && self.dwAverageSampleRateProcessed == other.dwAverageSampleRateProcessed
    }
}
impl ::core::cmp::Eq for MF_SINK_WRITER_STATISTICS {}
unsafe impl ::windows::runtime::Abi for MF_SINK_WRITER_STATISTICS {
    type Abi = Self;
}
pub const MF_SOURCE_PRESENTATION_PROVIDER_SERVICE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3758271196, 62639, 20197, [152, 71, 5, 62, 223, 132, 4, 38]);
pub const MF_SOURCE_READER_ASYNC_CALLBACK: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(507362988, 47939, 19509, [181, 7, 205, 100, 68, 100, 201, 101]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_SOURCE_READER_CONSTANTS(pub i32);
pub const MF_SOURCE_READER_INVALID_STREAM_INDEX: MF_SOURCE_READER_CONSTANTS = MF_SOURCE_READER_CONSTANTS(-1i32);
pub const MF_SOURCE_READER_ALL_STREAMS: MF_SOURCE_READER_CONSTANTS = MF_SOURCE_READER_CONSTANTS(-2i32);
pub const MF_SOURCE_READER_ANY_STREAM: MF_SOURCE_READER_CONSTANTS = MF_SOURCE_READER_CONSTANTS(-2i32);
pub const MF_SOURCE_READER_FIRST_AUDIO_STREAM: MF_SOURCE_READER_CONSTANTS = MF_SOURCE_READER_CONSTANTS(-3i32);
pub const MF_SOURCE_READER_FIRST_VIDEO_STREAM: MF_SOURCE_READER_CONSTANTS = MF_SOURCE_READER_CONSTANTS(-4i32);
pub const MF_SOURCE_READER_MEDIASOURCE: MF_SOURCE_READER_CONSTANTS = MF_SOURCE_READER_CONSTANTS(-1i32);
impl ::core::convert::From<i32> for MF_SOURCE_READER_CONSTANTS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_SOURCE_READER_CONSTANTS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_SOURCE_READER_CONTROL_FLAG(pub i32);
pub const MF_SOURCE_READER_CONTROLF_DRAIN: MF_SOURCE_READER_CONTROL_FLAG = MF_SOURCE_READER_CONTROL_FLAG(1i32);
impl ::core::convert::From<i32> for MF_SOURCE_READER_CONTROL_FLAG {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_SOURCE_READER_CONTROL_FLAG {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_SOURCE_READER_CURRENT_TYPE_CONSTANTS(pub i32);
pub const MF_SOURCE_READER_CURRENT_TYPE_INDEX: MF_SOURCE_READER_CURRENT_TYPE_CONSTANTS = MF_SOURCE_READER_CURRENT_TYPE_CONSTANTS(-1i32);
impl ::core::convert::From<i32> for MF_SOURCE_READER_CURRENT_TYPE_CONSTANTS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_SOURCE_READER_CURRENT_TYPE_CONSTANTS {
    type Abi = Self;
}
pub const MF_SOURCE_READER_D3D11_BIND_FLAGS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(871569787, 63290, 19988, [141, 133, 14, 76, 67, 104, 120, 141]);
pub const MF_SOURCE_READER_D3D_MANAGER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3967954338, 57833, 19241, [160, 216, 86, 60, 113, 159, 82, 105]);
pub const MF_SOURCE_READER_DISABLE_CAMERA_PLUGINS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2637391325, 1423, 19707, [159, 151, 179, 20, 204, 153, 200, 173]);
pub const MF_SOURCE_READER_DISABLE_DXVA: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2856676605, 14659, 18974, [167, 125, 24, 56, 192, 234, 46, 53]);
pub const MF_SOURCE_READER_DISCONNECT_MEDIASOURCE_ON_SHUTDOWN: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1454797157, 8606, 17773, [162, 46, 45, 48, 4, 199, 254, 86]);
pub const MF_SOURCE_READER_ENABLE_ADVANCED_VIDEO_PROCESSING: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(260168236, 46391, 18034, [168, 178, 166, 129, 177, 115, 7, 163]);
pub const MF_SOURCE_READER_ENABLE_TRANSCODE_ONLY_TRANSFORMS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3755274248, 46589, 20088, [174, 68, 98, 161, 230, 123, 190, 39]);
pub const MF_SOURCE_READER_ENABLE_VIDEO_PROCESSING: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4214837053, 52465, 17134, [187, 179, 249, 184, 69, 213, 104, 29]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_SOURCE_READER_FLAG(pub i32);
pub const MF_SOURCE_READERF_ERROR: MF_SOURCE_READER_FLAG = MF_SOURCE_READER_FLAG(1i32);
pub const MF_SOURCE_READERF_ENDOFSTREAM: MF_SOURCE_READER_FLAG = MF_SOURCE_READER_FLAG(2i32);
pub const MF_SOURCE_READERF_NEWSTREAM: MF_SOURCE_READER_FLAG = MF_SOURCE_READER_FLAG(4i32);
pub const MF_SOURCE_READERF_NATIVEMEDIATYPECHANGED: MF_SOURCE_READER_FLAG = MF_SOURCE_READER_FLAG(16i32);
pub const MF_SOURCE_READERF_CURRENTMEDIATYPECHANGED: MF_SOURCE_READER_FLAG = MF_SOURCE_READER_FLAG(32i32);
pub const MF_SOURCE_READERF_STREAMTICK: MF_SOURCE_READER_FLAG = MF_SOURCE_READER_FLAG(256i32);
pub const MF_SOURCE_READERF_ALLEFFECTSREMOVED: MF_SOURCE_READER_FLAG = MF_SOURCE_READER_FLAG(512i32);
impl ::core::convert::From<i32> for MF_SOURCE_READER_FLAG {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_SOURCE_READER_FLAG {
    type Abi = Self;
}
pub const MF_SOURCE_READER_MEDIASOURCE_CHARACTERISTICS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1831073224, 50647, 19099, [153, 113, 93, 17, 248, 188, 168, 128]);
pub const MF_SOURCE_READER_MEDIASOURCE_CONFIG: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2424679403, 852, 18681, [171, 181, 32, 13, 248, 56, 198, 142]);
pub const MF_SOURCE_STREAM_SUPPORTS_HW_CONNECTION: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2743227306, 25364, 17149, [163, 206, 187, 39, 182, 133, 153, 70]);
pub const MF_STF_VERSION_DATE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(832660949, 57191, 16533, [142, 68, 136, 104, 252, 32, 219, 253]);
pub const MF_STF_VERSION_INFO: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1735441721, 61314, 17646, [164, 155, 147, 75, 235, 36, 174, 247]);
pub const MF_STREAM_SINK_SUPPORTS_HW_CONNECTION: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2605079743, 1431, 20382, [159, 60, 185, 126, 238, 249, 3, 89]);
pub const MF_STREAM_SINK_SUPPORTS_ROTATION: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3018416768, 48389, 16805, [151, 173, 138, 127, 238, 36, 185, 18]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_STREAM_STATE(pub i32);
pub const MF_STREAM_STATE_STOPPED: MF_STREAM_STATE = MF_STREAM_STATE(0i32);
pub const MF_STREAM_STATE_PAUSED: MF_STREAM_STATE = MF_STREAM_STATE(1i32);
pub const MF_STREAM_STATE_RUNNING: MF_STREAM_STATE = MF_STREAM_STATE(2i32);
impl ::core::convert::From<i32> for MF_STREAM_STATE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_STREAM_STATE {
    type Abi = Self;
}
pub const MF_ST_MEDIASOURCE_COLLECTION: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1634593138, 33709, 18768, [129, 112, 99, 13, 25, 203, 227, 7]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_SYNTAX_ERR: u32 = 2154823692u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_S_ACTIVATE_REPLACED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(866045i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_S_ASF_PARSEINPROGRESS: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(1074608792i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_S_CLOCK_STOPPED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(891972i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_S_MULTIPLE_BEGIN: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(866008i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_S_PE_TRUSTED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(881011i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_S_PROTECTION_NOT_REQUIRED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(880976i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_S_SEQUENCER_CONTEXT_CANCELED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(876973i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_S_SEQUENCER_SEGMENT_AT_END_OF_STREAM: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(876975i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_S_SINK_NOT_FINALIZED: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(870978i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_S_TRANSFORM_DO_NOT_PROPAGATE_EVENT: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(879989i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_S_VIDEO_DISABLED_WITH_UNKNOWN_SOFTWARE_OUTPUT: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(881001i32 as _);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_S_WAIT_FOR_POLICY_SET: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(881000i32 as _);
pub const MF_SampleProtectionSalt: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1409539822, 47598, 17295, [170, 131, 56, 4, 153, 126, 86, 157]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_TEST_SIGNED_COMPONENT_LOADING: u32 = 16777216u32;
pub const MF_TIMECODE_SERVICE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2698314407, 3763, 18565, [177, 185, 159, 235, 13, 8, 52, 84]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_TIMED_TEXT_ALIGNMENT(pub i32);
pub const MF_TIMED_TEXT_ALIGNMENT_START: MF_TIMED_TEXT_ALIGNMENT = MF_TIMED_TEXT_ALIGNMENT(0i32);
pub const MF_TIMED_TEXT_ALIGNMENT_END: MF_TIMED_TEXT_ALIGNMENT = MF_TIMED_TEXT_ALIGNMENT(1i32);
pub const MF_TIMED_TEXT_ALIGNMENT_CENTER: MF_TIMED_TEXT_ALIGNMENT = MF_TIMED_TEXT_ALIGNMENT(2i32);
impl ::core::convert::From<i32> for MF_TIMED_TEXT_ALIGNMENT {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_TIMED_TEXT_ALIGNMENT {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_TIMED_TEXT_BOUTEN_POSITION(pub i32);
pub const MF_TIMED_TEXT_BOUTEN_POSITION_BEFORE: MF_TIMED_TEXT_BOUTEN_POSITION = MF_TIMED_TEXT_BOUTEN_POSITION(0i32);
pub const MF_TIMED_TEXT_BOUTEN_POSITION_AFTER: MF_TIMED_TEXT_BOUTEN_POSITION = MF_TIMED_TEXT_BOUTEN_POSITION(1i32);
pub const MF_TIMED_TEXT_BOUTEN_POSITION_OUTSIDE: MF_TIMED_TEXT_BOUTEN_POSITION = MF_TIMED_TEXT_BOUTEN_POSITION(2i32);
impl ::core::convert::From<i32> for MF_TIMED_TEXT_BOUTEN_POSITION {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_TIMED_TEXT_BOUTEN_POSITION {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_TIMED_TEXT_BOUTEN_TYPE(pub i32);
pub const MF_TIMED_TEXT_BOUTEN_TYPE_NONE: MF_TIMED_TEXT_BOUTEN_TYPE = MF_TIMED_TEXT_BOUTEN_TYPE(0i32);
pub const MF_TIMED_TEXT_BOUTEN_TYPE_AUTO: MF_TIMED_TEXT_BOUTEN_TYPE = MF_TIMED_TEXT_BOUTEN_TYPE(1i32);
pub const MF_TIMED_TEXT_BOUTEN_TYPE_FILLEDCIRCLE: MF_TIMED_TEXT_BOUTEN_TYPE = MF_TIMED_TEXT_BOUTEN_TYPE(2i32);
pub const MF_TIMED_TEXT_BOUTEN_TYPE_OPENCIRCLE: MF_TIMED_TEXT_BOUTEN_TYPE = MF_TIMED_TEXT_BOUTEN_TYPE(3i32);
pub const MF_TIMED_TEXT_BOUTEN_TYPE_FILLEDDOT: MF_TIMED_TEXT_BOUTEN_TYPE = MF_TIMED_TEXT_BOUTEN_TYPE(4i32);
pub const MF_TIMED_TEXT_BOUTEN_TYPE_OPENDOT: MF_TIMED_TEXT_BOUTEN_TYPE = MF_TIMED_TEXT_BOUTEN_TYPE(5i32);
pub const MF_TIMED_TEXT_BOUTEN_TYPE_FILLEDSESAME: MF_TIMED_TEXT_BOUTEN_TYPE = MF_TIMED_TEXT_BOUTEN_TYPE(6i32);
pub const MF_TIMED_TEXT_BOUTEN_TYPE_OPENSESAME: MF_TIMED_TEXT_BOUTEN_TYPE = MF_TIMED_TEXT_BOUTEN_TYPE(7i32);
impl ::core::convert::From<i32> for MF_TIMED_TEXT_BOUTEN_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_TIMED_TEXT_BOUTEN_TYPE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_TIMED_TEXT_CUE_EVENT(pub i32);
pub const MF_TIMED_TEXT_CUE_EVENT_ACTIVE: MF_TIMED_TEXT_CUE_EVENT = MF_TIMED_TEXT_CUE_EVENT(0i32);
pub const MF_TIMED_TEXT_CUE_EVENT_INACTIVE: MF_TIMED_TEXT_CUE_EVENT = MF_TIMED_TEXT_CUE_EVENT(1i32);
pub const MF_TIMED_TEXT_CUE_EVENT_CLEAR: MF_TIMED_TEXT_CUE_EVENT = MF_TIMED_TEXT_CUE_EVENT(2i32);
impl ::core::convert::From<i32> for MF_TIMED_TEXT_CUE_EVENT {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_TIMED_TEXT_CUE_EVENT {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_TIMED_TEXT_DECORATION(pub i32);
pub const MF_TIMED_TEXT_DECORATION_NONE: MF_TIMED_TEXT_DECORATION = MF_TIMED_TEXT_DECORATION(0i32);
pub const MF_TIMED_TEXT_DECORATION_UNDERLINE: MF_TIMED_TEXT_DECORATION = MF_TIMED_TEXT_DECORATION(1i32);
pub const MF_TIMED_TEXT_DECORATION_LINE_THROUGH: MF_TIMED_TEXT_DECORATION = MF_TIMED_TEXT_DECORATION(2i32);
pub const MF_TIMED_TEXT_DECORATION_OVERLINE: MF_TIMED_TEXT_DECORATION = MF_TIMED_TEXT_DECORATION(4i32);
impl ::core::convert::From<i32> for MF_TIMED_TEXT_DECORATION {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_TIMED_TEXT_DECORATION {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_TIMED_TEXT_DISPLAY_ALIGNMENT(pub i32);
pub const MF_TIMED_TEXT_DISPLAY_ALIGNMENT_BEFORE: MF_TIMED_TEXT_DISPLAY_ALIGNMENT = MF_TIMED_TEXT_DISPLAY_ALIGNMENT(0i32);
pub const MF_TIMED_TEXT_DISPLAY_ALIGNMENT_AFTER: MF_TIMED_TEXT_DISPLAY_ALIGNMENT = MF_TIMED_TEXT_DISPLAY_ALIGNMENT(1i32);
pub const MF_TIMED_TEXT_DISPLAY_ALIGNMENT_CENTER: MF_TIMED_TEXT_DISPLAY_ALIGNMENT = MF_TIMED_TEXT_DISPLAY_ALIGNMENT(2i32);
impl ::core::convert::From<i32> for MF_TIMED_TEXT_DISPLAY_ALIGNMENT {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_TIMED_TEXT_DISPLAY_ALIGNMENT {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_TIMED_TEXT_ERROR_CODE(pub i32);
pub const MF_TIMED_TEXT_ERROR_CODE_NOERROR: MF_TIMED_TEXT_ERROR_CODE = MF_TIMED_TEXT_ERROR_CODE(0i32);
pub const MF_TIMED_TEXT_ERROR_CODE_FATAL: MF_TIMED_TEXT_ERROR_CODE = MF_TIMED_TEXT_ERROR_CODE(1i32);
pub const MF_TIMED_TEXT_ERROR_CODE_DATA_FORMAT: MF_TIMED_TEXT_ERROR_CODE = MF_TIMED_TEXT_ERROR_CODE(2i32);
pub const MF_TIMED_TEXT_ERROR_CODE_NETWORK: MF_TIMED_TEXT_ERROR_CODE = MF_TIMED_TEXT_ERROR_CODE(3i32);
pub const MF_TIMED_TEXT_ERROR_CODE_INTERNAL: MF_TIMED_TEXT_ERROR_CODE = MF_TIMED_TEXT_ERROR_CODE(4i32);
impl ::core::convert::From<i32> for MF_TIMED_TEXT_ERROR_CODE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_TIMED_TEXT_ERROR_CODE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_TIMED_TEXT_FONT_STYLE(pub i32);
pub const MF_TIMED_TEXT_FONT_STYLE_NORMAL: MF_TIMED_TEXT_FONT_STYLE = MF_TIMED_TEXT_FONT_STYLE(0i32);
pub const MF_TIMED_TEXT_FONT_STYLE_OBLIQUE: MF_TIMED_TEXT_FONT_STYLE = MF_TIMED_TEXT_FONT_STYLE(1i32);
pub const MF_TIMED_TEXT_FONT_STYLE_ITALIC: MF_TIMED_TEXT_FONT_STYLE = MF_TIMED_TEXT_FONT_STYLE(2i32);
impl ::core::convert::From<i32> for MF_TIMED_TEXT_FONT_STYLE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_TIMED_TEXT_FONT_STYLE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_TIMED_TEXT_RUBY_ALIGN(pub i32);
pub const MF_TIMED_TEXT_RUBY_ALIGN_CENTER: MF_TIMED_TEXT_RUBY_ALIGN = MF_TIMED_TEXT_RUBY_ALIGN(0i32);
pub const MF_TIMED_TEXT_RUBY_ALIGN_START: MF_TIMED_TEXT_RUBY_ALIGN = MF_TIMED_TEXT_RUBY_ALIGN(1i32);
pub const MF_TIMED_TEXT_RUBY_ALIGN_END: MF_TIMED_TEXT_RUBY_ALIGN = MF_TIMED_TEXT_RUBY_ALIGN(2i32);
pub const MF_TIMED_TEXT_RUBY_ALIGN_SPACEAROUND: MF_TIMED_TEXT_RUBY_ALIGN = MF_TIMED_TEXT_RUBY_ALIGN(3i32);
pub const MF_TIMED_TEXT_RUBY_ALIGN_SPACEBETWEEN: MF_TIMED_TEXT_RUBY_ALIGN = MF_TIMED_TEXT_RUBY_ALIGN(4i32);
pub const MF_TIMED_TEXT_RUBY_ALIGN_WITHBASE: MF_TIMED_TEXT_RUBY_ALIGN = MF_TIMED_TEXT_RUBY_ALIGN(5i32);
impl ::core::convert::From<i32> for MF_TIMED_TEXT_RUBY_ALIGN {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_TIMED_TEXT_RUBY_ALIGN {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_TIMED_TEXT_RUBY_POSITION(pub i32);
pub const MF_TIMED_TEXT_RUBY_POSITION_BEFORE: MF_TIMED_TEXT_RUBY_POSITION = MF_TIMED_TEXT_RUBY_POSITION(0i32);
pub const MF_TIMED_TEXT_RUBY_POSITION_AFTER: MF_TIMED_TEXT_RUBY_POSITION = MF_TIMED_TEXT_RUBY_POSITION(1i32);
pub const MF_TIMED_TEXT_RUBY_POSITION_OUTSIDE: MF_TIMED_TEXT_RUBY_POSITION = MF_TIMED_TEXT_RUBY_POSITION(2i32);
impl ::core::convert::From<i32> for MF_TIMED_TEXT_RUBY_POSITION {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_TIMED_TEXT_RUBY_POSITION {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_TIMED_TEXT_RUBY_RESERVE(pub i32);
pub const MF_TIMED_TEXT_RUBY_RESERVE_NONE: MF_TIMED_TEXT_RUBY_RESERVE = MF_TIMED_TEXT_RUBY_RESERVE(0i32);
pub const MF_TIMED_TEXT_RUBY_RESERVE_BEFORE: MF_TIMED_TEXT_RUBY_RESERVE = MF_TIMED_TEXT_RUBY_RESERVE(1i32);
pub const MF_TIMED_TEXT_RUBY_RESERVE_AFTER: MF_TIMED_TEXT_RUBY_RESERVE = MF_TIMED_TEXT_RUBY_RESERVE(2i32);
pub const MF_TIMED_TEXT_RUBY_RESERVE_BOTH: MF_TIMED_TEXT_RUBY_RESERVE = MF_TIMED_TEXT_RUBY_RESERVE(3i32);
pub const MF_TIMED_TEXT_RUBY_RESERVE_OUTSIDE: MF_TIMED_TEXT_RUBY_RESERVE = MF_TIMED_TEXT_RUBY_RESERVE(4i32);
impl ::core::convert::From<i32> for MF_TIMED_TEXT_RUBY_RESERVE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_TIMED_TEXT_RUBY_RESERVE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_TIMED_TEXT_SCROLL_MODE(pub i32);
pub const MF_TIMED_TEXT_SCROLL_MODE_POP_ON: MF_TIMED_TEXT_SCROLL_MODE = MF_TIMED_TEXT_SCROLL_MODE(0i32);
pub const MF_TIMED_TEXT_SCROLL_MODE_ROLL_UP: MF_TIMED_TEXT_SCROLL_MODE = MF_TIMED_TEXT_SCROLL_MODE(1i32);
impl ::core::convert::From<i32> for MF_TIMED_TEXT_SCROLL_MODE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_TIMED_TEXT_SCROLL_MODE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_TIMED_TEXT_TRACK_KIND(pub i32);
pub const MF_TIMED_TEXT_TRACK_KIND_UNKNOWN: MF_TIMED_TEXT_TRACK_KIND = MF_TIMED_TEXT_TRACK_KIND(0i32);
pub const MF_TIMED_TEXT_TRACK_KIND_SUBTITLES: MF_TIMED_TEXT_TRACK_KIND = MF_TIMED_TEXT_TRACK_KIND(1i32);
pub const MF_TIMED_TEXT_TRACK_KIND_CAPTIONS: MF_TIMED_TEXT_TRACK_KIND = MF_TIMED_TEXT_TRACK_KIND(2i32);
pub const MF_TIMED_TEXT_TRACK_KIND_METADATA: MF_TIMED_TEXT_TRACK_KIND = MF_TIMED_TEXT_TRACK_KIND(3i32);
impl ::core::convert::From<i32> for MF_TIMED_TEXT_TRACK_KIND {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_TIMED_TEXT_TRACK_KIND {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_TIMED_TEXT_TRACK_READY_STATE(pub i32);
pub const MF_TIMED_TEXT_TRACK_READY_STATE_NONE: MF_TIMED_TEXT_TRACK_READY_STATE = MF_TIMED_TEXT_TRACK_READY_STATE(0i32);
pub const MF_TIMED_TEXT_TRACK_READY_STATE_LOADING: MF_TIMED_TEXT_TRACK_READY_STATE = MF_TIMED_TEXT_TRACK_READY_STATE(1i32);
pub const MF_TIMED_TEXT_TRACK_READY_STATE_LOADED: MF_TIMED_TEXT_TRACK_READY_STATE = MF_TIMED_TEXT_TRACK_READY_STATE(2i32);
pub const MF_TIMED_TEXT_TRACK_READY_STATE_ERROR: MF_TIMED_TEXT_TRACK_READY_STATE = MF_TIMED_TEXT_TRACK_READY_STATE(3i32);
impl ::core::convert::From<i32> for MF_TIMED_TEXT_TRACK_READY_STATE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_TIMED_TEXT_TRACK_READY_STATE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_TIMED_TEXT_UNIT_TYPE(pub i32);
pub const MF_TIMED_TEXT_UNIT_TYPE_PIXELS: MF_TIMED_TEXT_UNIT_TYPE = MF_TIMED_TEXT_UNIT_TYPE(0i32);
pub const MF_TIMED_TEXT_UNIT_TYPE_PERCENTAGE: MF_TIMED_TEXT_UNIT_TYPE = MF_TIMED_TEXT_UNIT_TYPE(1i32);
impl ::core::convert::From<i32> for MF_TIMED_TEXT_UNIT_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_TIMED_TEXT_UNIT_TYPE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_TIMED_TEXT_WRITING_MODE(pub i32);
pub const MF_TIMED_TEXT_WRITING_MODE_LRTB: MF_TIMED_TEXT_WRITING_MODE = MF_TIMED_TEXT_WRITING_MODE(0i32);
pub const MF_TIMED_TEXT_WRITING_MODE_RLTB: MF_TIMED_TEXT_WRITING_MODE = MF_TIMED_TEXT_WRITING_MODE(1i32);
pub const MF_TIMED_TEXT_WRITING_MODE_TBRL: MF_TIMED_TEXT_WRITING_MODE = MF_TIMED_TEXT_WRITING_MODE(2i32);
pub const MF_TIMED_TEXT_WRITING_MODE_TBLR: MF_TIMED_TEXT_WRITING_MODE = MF_TIMED_TEXT_WRITING_MODE(3i32);
pub const MF_TIMED_TEXT_WRITING_MODE_LR: MF_TIMED_TEXT_WRITING_MODE = MF_TIMED_TEXT_WRITING_MODE(4i32);
pub const MF_TIMED_TEXT_WRITING_MODE_RL: MF_TIMED_TEXT_WRITING_MODE = MF_TIMED_TEXT_WRITING_MODE(5i32);
pub const MF_TIMED_TEXT_WRITING_MODE_TB: MF_TIMED_TEXT_WRITING_MODE = MF_TIMED_TEXT_WRITING_MODE(6i32);
impl ::core::convert::From<i32> for MF_TIMED_TEXT_WRITING_MODE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_TIMED_TEXT_WRITING_MODE {
    type Abi = Self;
}
pub const MF_TIME_FORMAT_ENTRY_RELATIVE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1134162296, 18131, 17668, [175, 218, 32, 211, 46, 155, 163, 96]);
pub const MF_TIME_FORMAT_SEGMENT_OFFSET: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3367550583, 34460, 17181, [129, 46, 22, 150, 147, 246, 90, 57]);
pub const MF_TOPOLOGY_DXVA_MODE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(512570614, 62891, 20003, [187, 136, 135, 74, 163, 161, 167, 77]);
pub const MF_TOPOLOGY_DYNAMIC_CHANGE_NOT_ALLOWED: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3576272139, 54404, 17703, [169, 205, 177, 144, 149, 50, 181, 176]);
pub const MF_TOPOLOGY_ENABLE_XVP_FOR_PLAYBACK: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(426210079, 52600, 17148, [176, 38, 9, 146, 165, 110, 86, 147]);
pub const MF_TOPOLOGY_ENUMERATE_SOURCE_TYPES: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1648935789, 23819, 20288, [160, 187, 176, 179, 5, 247, 118, 152]);
pub const MF_TOPOLOGY_HARDWARE_MODE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3537068797, 20047, 16785, [165, 121, 198, 24, 182, 103, 6, 175]);
pub const MF_TOPOLOGY_NO_MARKIN_MARKOUT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2127820804, 34491, 19263, [183, 228, 124, 180, 58, 253, 75, 128]);
pub const MF_TOPOLOGY_PLAYBACK_FRAMERATE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3244585850, 49841, 17747, [131, 187, 90, 82, 96, 114, 68, 143]);
pub const MF_TOPOLOGY_PLAYBACK_MAX_DIMS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1461047065, 22376, 17578, [173, 110, 135, 33, 241, 176, 249, 187]);
pub const MF_TOPOLOGY_PROJECTSTART: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2127820802, 34491, 19263, [183, 228, 124, 180, 58, 253, 75, 128]);
pub const MF_TOPOLOGY_PROJECTSTOP: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2127820803, 34491, 19263, [183, 228, 124, 180, 58, 253, 75, 128]);
pub const MF_TOPOLOGY_RESOLUTION_STATUS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1229700318, 45105, 20024, [151, 196, 213, 66, 45, 214, 24, 220]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_TOPOLOGY_RESOLUTION_STATUS_FLAGS(pub i32);
pub const MF_TOPOLOGY_RESOLUTION_SUCCEEDED: MF_TOPOLOGY_RESOLUTION_STATUS_FLAGS = MF_TOPOLOGY_RESOLUTION_STATUS_FLAGS(0i32);
pub const MF_OPTIONAL_NODE_REJECTED_MEDIA_TYPE: MF_TOPOLOGY_RESOLUTION_STATUS_FLAGS = MF_TOPOLOGY_RESOLUTION_STATUS_FLAGS(1i32);
pub const MF_OPTIONAL_NODE_REJECTED_PROTECTED_PROCESS: MF_TOPOLOGY_RESOLUTION_STATUS_FLAGS = MF_TOPOLOGY_RESOLUTION_STATUS_FLAGS(2i32);
impl ::core::convert::From<i32> for MF_TOPOLOGY_RESOLUTION_STATUS_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_TOPOLOGY_RESOLUTION_STATUS_FLAGS {
    type Abi = Self;
}
pub const MF_TOPOLOGY_START_TIME_ON_PRESENTATION_SWITCH: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3368816959, 31057, 17736, [170, 214, 158, 214, 32, 46, 98, 179]);
pub const MF_TOPOLOGY_STATIC_PLAYBACK_OPTIMIZATIONS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3094129730, 16806, 19321, [137, 122, 26, 176, 229, 43, 74, 27]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_TOPOLOGY_TYPE(pub i32);
pub const MF_TOPOLOGY_OUTPUT_NODE: MF_TOPOLOGY_TYPE = MF_TOPOLOGY_TYPE(0i32);
pub const MF_TOPOLOGY_SOURCESTREAM_NODE: MF_TOPOLOGY_TYPE = MF_TOPOLOGY_TYPE(1i32);
pub const MF_TOPOLOGY_TRANSFORM_NODE: MF_TOPOLOGY_TYPE = MF_TOPOLOGY_TYPE(2i32);
pub const MF_TOPOLOGY_TEE_NODE: MF_TOPOLOGY_TYPE = MF_TOPOLOGY_TYPE(3i32);
pub const MF_TOPOLOGY_MAX: MF_TOPOLOGY_TYPE = MF_TOPOLOGY_TYPE(-1i32);
impl ::core::convert::From<i32> for MF_TOPOLOGY_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_TOPOLOGY_TYPE {
    type Abi = Self;
}
pub const MF_TOPONODE_ATTRIBUTE_EDITOR_SERVICE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1701146138, 1919, 17522, [131, 239, 49, 111, 17, 213, 8, 122]);
pub const MF_TOPONODE_CONNECT_METHOD: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1229700337, 45105, 20024, [151, 196, 213, 66, 45, 214, 24, 220]);
pub const MF_TOPONODE_D3DAWARE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1229700333, 45105, 20024, [151, 196, 213, 66, 45, 214, 24, 220]);
pub const MF_TOPONODE_DECODER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1229700354, 45105, 20024, [151, 196, 213, 66, 45, 214, 24, 220]);
pub const MF_TOPONODE_DECRYPTOR: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1229700346, 45105, 20024, [151, 196, 213, 66, 45, 214, 24, 220]);
pub const MF_TOPONODE_DISABLE_PREROLL: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(345190302, 36999, 19380, [132, 18, 81, 103, 20, 92, 190, 4]);
pub const MF_TOPONODE_DISCARDABLE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1229700347, 45105, 20024, [151, 196, 213, 66, 45, 214, 24, 220]);
pub const MF_TOPONODE_DRAIN: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1229700329, 45105, 20024, [151, 196, 213, 66, 45, 214, 24, 220]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_TOPONODE_DRAIN_MODE(pub i32);
pub const MF_TOPONODE_DRAIN_DEFAULT: MF_TOPONODE_DRAIN_MODE = MF_TOPONODE_DRAIN_MODE(0i32);
pub const MF_TOPONODE_DRAIN_ALWAYS: MF_TOPONODE_DRAIN_MODE = MF_TOPONODE_DRAIN_MODE(1i32);
pub const MF_TOPONODE_DRAIN_NEVER: MF_TOPONODE_DRAIN_MODE = MF_TOPONODE_DRAIN_MODE(2i32);
impl ::core::convert::From<i32> for MF_TOPONODE_DRAIN_MODE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_TOPONODE_DRAIN_MODE {
    type Abi = Self;
}
pub const MF_TOPONODE_ERRORCODE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1229700334, 45105, 20024, [151, 196, 213, 66, 45, 214, 24, 220]);
pub const MF_TOPONODE_ERROR_MAJORTYPE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1229700349, 45105, 20024, [151, 196, 213, 66, 45, 214, 24, 220]);
pub const MF_TOPONODE_ERROR_SUBTYPE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1229700350, 45105, 20024, [151, 196, 213, 66, 45, 214, 24, 220]);
pub const MF_TOPONODE_FLUSH: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1229700328, 45105, 20024, [151, 196, 213, 66, 45, 214, 24, 220]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_TOPONODE_FLUSH_MODE(pub i32);
pub const MF_TOPONODE_FLUSH_ALWAYS: MF_TOPONODE_FLUSH_MODE = MF_TOPONODE_FLUSH_MODE(0i32);
pub const MF_TOPONODE_FLUSH_SEEK: MF_TOPONODE_FLUSH_MODE = MF_TOPONODE_FLUSH_MODE(1i32);
pub const MF_TOPONODE_FLUSH_NEVER: MF_TOPONODE_FLUSH_MODE = MF_TOPONODE_FLUSH_MODE(2i32);
impl ::core::convert::From<i32> for MF_TOPONODE_FLUSH_MODE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_TOPONODE_FLUSH_MODE {
    type Abi = Self;
}
pub const MF_TOPONODE_LOCKED: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1229700343, 45105, 20024, [151, 196, 213, 66, 45, 214, 24, 220]);
pub const MF_TOPONODE_MARKIN_HERE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1229700352, 45105, 20024, [151, 196, 213, 66, 45, 214, 24, 220]);
pub const MF_TOPONODE_MARKOUT_HERE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1229700353, 45105, 20024, [151, 196, 213, 66, 45, 214, 24, 220]);
pub const MF_TOPONODE_MEDIASTART: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2203867370, 57461, 19399, [188, 186, 77, 224, 0, 223, 154, 230]);
pub const MF_TOPONODE_MEDIASTOP: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2203867371, 57461, 19399, [188, 186, 77, 224, 0, 223, 154, 230]);
pub const MF_TOPONODE_NOSHUTDOWN_ON_REMOVE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(345190300, 36999, 19380, [132, 18, 81, 103, 20, 92, 190, 4]);
pub const MF_TOPONODE_PRESENTATION_DESCRIPTOR: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2203867373, 57461, 19399, [188, 186, 77, 224, 0, 223, 154, 230]);
pub const MF_TOPONODE_PRIMARYOUTPUT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1661267865, 5810, 20158, [157, 103, 228, 197, 57, 179, 162, 89]);
pub const MF_TOPONODE_RATELESS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(345190301, 36999, 19380, [132, 18, 81, 103, 20, 92, 190, 4]);
pub const MF_TOPONODE_SEQUENCE_ELEMENTID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2203867375, 57461, 19399, [188, 186, 77, 224, 0, 223, 154, 230]);
pub const MF_TOPONODE_SOURCE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2203867372, 57461, 19399, [188, 186, 77, 224, 0, 223, 154, 230]);
pub const MF_TOPONODE_STREAMID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(345190299, 36999, 19380, [132, 18, 81, 103, 20, 92, 190, 4]);
pub const MF_TOPONODE_STREAM_DESCRIPTOR: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2203867374, 57461, 19399, [188, 186, 77, 224, 0, 223, 154, 230]);
pub const MF_TOPONODE_TRANSFORM_OBJECTID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2296168649, 10558, 20107, [154, 235, 10, 214, 76, 192, 22, 176]);
pub const MF_TOPONODE_WORKQUEUE_ID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1229700344, 45105, 20024, [151, 196, 213, 66, 45, 214, 24, 220]);
pub const MF_TOPONODE_WORKQUEUE_ITEM_PRIORITY: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2717882814, 24215, 19027, [180, 148, 86, 140, 100, 44, 15, 243]);
pub const MF_TOPONODE_WORKQUEUE_MMCSS_CLASS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1229700345, 45105, 20024, [151, 196, 213, 66, 45, 214, 24, 220]);
pub const MF_TOPONODE_WORKQUEUE_MMCSS_PRIORITY: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1342306368, 10262, 18676, [147, 100, 173, 30, 246, 97, 161, 35]);
pub const MF_TOPONODE_WORKQUEUE_MMCSS_TASKID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1229700351, 45105, 20024, [151, 196, 213, 66, 45, 214, 24, 220]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_TOPOSTATUS(pub i32);
pub const MF_TOPOSTATUS_INVALID: MF_TOPOSTATUS = MF_TOPOSTATUS(0i32);
pub const MF_TOPOSTATUS_READY: MF_TOPOSTATUS = MF_TOPOSTATUS(100i32);
pub const MF_TOPOSTATUS_STARTED_SOURCE: MF_TOPOSTATUS = MF_TOPOSTATUS(200i32);
pub const MF_TOPOSTATUS_DYNAMIC_CHANGED: MF_TOPOSTATUS = MF_TOPOSTATUS(210i32);
pub const MF_TOPOSTATUS_SINK_SWITCHED: MF_TOPOSTATUS = MF_TOPOSTATUS(300i32);
pub const MF_TOPOSTATUS_ENDED: MF_TOPOSTATUS = MF_TOPOSTATUS(400i32);
impl ::core::convert::From<i32> for MF_TOPOSTATUS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_TOPOSTATUS {
    type Abi = Self;
}
pub const MF_TRANSCODE_ADJUST_PROFILE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2620899867, 1551, 18556, [166, 144, 128, 215, 245, 13, 28, 114]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_TRANSCODE_ADJUST_PROFILE_FLAGS(pub i32);
pub const MF_TRANSCODE_ADJUST_PROFILE_DEFAULT: MF_TRANSCODE_ADJUST_PROFILE_FLAGS = MF_TRANSCODE_ADJUST_PROFILE_FLAGS(0i32);
pub const MF_TRANSCODE_ADJUST_PROFILE_USE_SOURCE_ATTRIBUTES: MF_TRANSCODE_ADJUST_PROFILE_FLAGS = MF_TRANSCODE_ADJUST_PROFILE_FLAGS(1i32);
impl ::core::convert::From<i32> for MF_TRANSCODE_ADJUST_PROFILE_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_TRANSCODE_ADJUST_PROFILE_FLAGS {
    type Abi = Self;
}
pub const MF_TRANSCODE_CONTAINERTYPE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(353366591, 19132, 18315, [172, 79, 225, 145, 111, 186, 28, 202]);
pub const MF_TRANSCODE_DONOT_INSERT_ENCODER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4099581902, 43812, 16402, [161, 27, 220, 130, 32, 32, 20, 16]);
pub const MF_TRANSCODE_ENCODINGPROFILE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1766291580, 62728, 20137, [177, 233, 161, 254, 58, 73, 251, 201]);
pub const MF_TRANSCODE_QUALITYVSSPEED: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2553490936, 973, 18283, [137, 250, 63, 158, 68, 45, 236, 159]);
#[derive(:: core :: clone :: Clone)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MF_TRANSCODE_SINK_INFO {
    pub dwVideoStreamID: u32,
    pub pVideoMediaType: ::core::option::Option<IMFMediaType>,
    pub dwAudioStreamID: u32,
    pub pAudioMediaType: ::core::option::Option<IMFMediaType>,
}
impl MF_TRANSCODE_SINK_INFO {}
impl ::core::default::Default for MF_TRANSCODE_SINK_INFO {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MF_TRANSCODE_SINK_INFO {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MF_TRANSCODE_SINK_INFO").field("dwVideoStreamID", &self.dwVideoStreamID).field("pVideoMediaType", &self.pVideoMediaType).field("dwAudioStreamID", &self.dwAudioStreamID).field("pAudioMediaType", &self.pAudioMediaType).finish()
    }
}
impl ::core::cmp::PartialEq for MF_TRANSCODE_SINK_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.dwVideoStreamID == other.dwVideoStreamID && self.pVideoMediaType == other.pVideoMediaType && self.dwAudioStreamID == other.dwAudioStreamID && self.pAudioMediaType == other.pAudioMediaType
    }
}
impl ::core::cmp::Eq for MF_TRANSCODE_SINK_INFO {}
unsafe impl ::windows::runtime::Abi for MF_TRANSCODE_SINK_INFO {
    type Abi = ::core::mem::ManuallyDrop<Self>;
}
pub const MF_TRANSCODE_SKIP_METADATA_TRANSFER: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1313106415, 46449, 18777, [143, 131, 61, 207, 186, 51, 163, 147]);
pub const MF_TRANSCODE_TOPOLOGYMODE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1044248080, 14666, 16562, [157, 234, 59, 171, 101, 11, 235, 242]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_TRANSCODE_TOPOLOGYMODE_FLAGS(pub i32);
pub const MF_TRANSCODE_TOPOLOGYMODE_SOFTWARE_ONLY: MF_TRANSCODE_TOPOLOGYMODE_FLAGS = MF_TRANSCODE_TOPOLOGYMODE_FLAGS(0i32);
pub const MF_TRANSCODE_TOPOLOGYMODE_HARDWARE_ALLOWED: MF_TRANSCODE_TOPOLOGYMODE_FLAGS = MF_TRANSCODE_TOPOLOGYMODE_FLAGS(1i32);
impl ::core::convert::From<i32> for MF_TRANSCODE_TOPOLOGYMODE_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_TRANSCODE_TOPOLOGYMODE_FLAGS {
    type Abi = Self;
}
pub const MF_TRANSFORM_ASYNC: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4162480538, 25754, 18813, [140, 115, 41, 248, 254, 214, 173, 122]);
pub const MF_TRANSFORM_ASYNC_UNLOCK: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3848695147, 13346, 20150, [164, 33, 218, 125, 177, 248, 226, 7]);
pub const MF_TRANSFORM_CATEGORY_Attribute: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3467360841, 20589, 18263, [166, 255, 102, 193, 132, 152, 126, 78]);
pub const MF_TRANSFORM_FLAGS_Attribute: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2472131454, 25205, 18116, [160, 37, 28, 1, 228, 95, 26, 134]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_TYPE_ERR: u32 = 2154840069u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_UNKNOWN_DURATION: u32 = 0u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_URL_TRUST_STATUS(pub i32);
pub const MF_LICENSE_URL_UNTRUSTED: MF_URL_TRUST_STATUS = MF_URL_TRUST_STATUS(0i32);
pub const MF_LICENSE_URL_TRUSTED: MF_URL_TRUST_STATUS = MF_URL_TRUST_STATUS(1i32);
pub const MF_LICENSE_URL_TAMPERED: MF_URL_TRUST_STATUS = MF_URL_TRUST_STATUS(2i32);
impl ::core::convert::From<i32> for MF_URL_TRUST_STATUS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_URL_TRUST_STATUS {
    type Abi = Self;
}
pub const MF_USER_DATA_PAYLOAD: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3520370781, 56466, 17786, [179, 160, 101, 26, 51, 163, 16, 71]);
pub const MF_USER_EXTENDED_ATTRIBUTES: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3224025798, 65202, 17729, [146, 47, 146, 11, 67, 112, 39, 34]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const MF_USER_MODE_COMPONENT_LOAD: u32 = 1u32;
pub const MF_VIDEODSP_MODE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(383197424, 30348, 4574, [138, 57, 8, 0, 32, 12, 154, 102]);
pub const MF_VIDEO_MAX_MB_PER_SEC: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3824345603, 54341, 19340, [146, 17, 174, 57, 13, 59, 160, 23]);
pub const MF_VIDEO_PROCESSOR_ALGORITHM: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1242177055, 10028, 20406, [158, 177, 219, 51, 12, 188, 151, 202]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_VIDEO_PROCESSOR_ALGORITHM_TYPE(pub i32);
pub const MF_VIDEO_PROCESSOR_ALGORITHM_DEFAULT: MF_VIDEO_PROCESSOR_ALGORITHM_TYPE = MF_VIDEO_PROCESSOR_ALGORITHM_TYPE(0i32);
pub const MF_VIDEO_PROCESSOR_ALGORITHM_MRF_CRF_444: MF_VIDEO_PROCESSOR_ALGORITHM_TYPE = MF_VIDEO_PROCESSOR_ALGORITHM_TYPE(1i32);
impl ::core::convert::From<i32> for MF_VIDEO_PROCESSOR_ALGORITHM_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_VIDEO_PROCESSOR_ALGORITHM_TYPE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_VIDEO_PROCESSOR_MIRROR(pub i32);
pub const MIRROR_NONE: MF_VIDEO_PROCESSOR_MIRROR = MF_VIDEO_PROCESSOR_MIRROR(0i32);
pub const MIRROR_HORIZONTAL: MF_VIDEO_PROCESSOR_MIRROR = MF_VIDEO_PROCESSOR_MIRROR(1i32);
pub const MIRROR_VERTICAL: MF_VIDEO_PROCESSOR_MIRROR = MF_VIDEO_PROCESSOR_MIRROR(2i32);
impl ::core::convert::From<i32> for MF_VIDEO_PROCESSOR_MIRROR {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_VIDEO_PROCESSOR_MIRROR {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MF_VIDEO_PROCESSOR_ROTATION(pub i32);
pub const ROTATION_NONE: MF_VIDEO_PROCESSOR_ROTATION = MF_VIDEO_PROCESSOR_ROTATION(0i32);
pub const ROTATION_NORMAL: MF_VIDEO_PROCESSOR_ROTATION = MF_VIDEO_PROCESSOR_ROTATION(1i32);
impl ::core::convert::From<i32> for MF_VIDEO_PROCESSOR_ROTATION {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MF_VIDEO_PROCESSOR_ROTATION {
    type Abi = Self;
}
pub const MF_VIDEO_RENDERER_EFFECT_APP_SERVICE_NAME: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3322227328, 28060, 16547, [157, 184, 240, 39, 162, 92, 154, 185]);
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MF_VIDEO_SPHERICAL_VIEWDIRECTION {
    pub iHeading: i32,
    pub iPitch: i32,
    pub iRoll: i32,
}
impl MF_VIDEO_SPHERICAL_VIEWDIRECTION {}
impl ::core::default::Default for MF_VIDEO_SPHERICAL_VIEWDIRECTION {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MF_VIDEO_SPHERICAL_VIEWDIRECTION {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MF_VIDEO_SPHERICAL_VIEWDIRECTION").field("iHeading", &self.iHeading).field("iPitch", &self.iPitch).field("iRoll", &self.iRoll).finish()
    }
}
impl ::core::cmp::PartialEq for MF_VIDEO_SPHERICAL_VIEWDIRECTION {
    fn eq(&self, other: &Self) -> bool {
        self.iHeading == other.iHeading && self.iPitch == other.iPitch && self.iRoll == other.iRoll
    }
}
impl ::core::cmp::Eq for MF_VIDEO_SPHERICAL_VIEWDIRECTION {}
unsafe impl ::windows::runtime::Abi for MF_VIDEO_SPHERICAL_VIEWDIRECTION {
    type Abi = Self;
}
pub const MF_VIRTUALCAMERA_CONFIGURATION_APP_PACKAGE_FAMILY_NAME: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1703591505, 32836, 17966, [151, 234, 230, 118, 253, 114, 5, 95]);
pub const MF_WORKQUEUE_SERVICES: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2386023561, 16864, 16698, [144, 104, 40, 124, 136, 109, 141, 218]);
pub const MF_WRAPPED_BUFFER_SERVICE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2874425458, 49769, 20156, [165, 82, 28, 59, 50, 190, 213, 202]);
pub const MF_WRAPPED_OBJECT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(723004492, 54956, 18932, [137, 21, 247, 24, 135, 219, 112, 205]);
pub const MF_WRAPPED_SAMPLE_SERVICE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(838151154, 53310, 16456, [128, 208, 156, 16, 70, 216, 124, 97]);
pub const MF_WVC1_PROG_SINGLE_SLICE_CONTENT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1743529305, 3887, 17440, [164, 221, 47, 142, 231, 165, 115, 139]);
pub const MF_XVP_CALLER_ALLOCATES_OUTPUT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(77777596, 3243, 16561, [161, 185, 117, 188, 54, 88, 240, 0]);
pub const MF_XVP_DISABLE_FRC: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(738916889, 31383, 19802, [158, 232, 22, 212, 252, 81, 141, 140]);
pub const MF_XVP_SAMPLE_LOCK_TIMEOUT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2857229097, 20788, 17251, [172, 114, 131, 236, 75, 193, 4, 38]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn MFllMulDiv(a: i64, b: i64, c: i64, d: i64) -> i64 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MFllMulDiv(a: i64, b: i64, c: i64, d: i64) -> i64;
        }
        ::core::mem::transmute(MFllMulDiv(::core::mem::transmute(a), ::core::mem::transmute(b), ::core::mem::transmute(c), ::core::mem::transmute(d)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct MIC_ARRAY_MODE(pub i32);
pub const MICARRAY_SINGLE_CHAN: MIC_ARRAY_MODE = MIC_ARRAY_MODE(0i32);
pub const MICARRAY_SIMPLE_SUM: MIC_ARRAY_MODE = MIC_ARRAY_MODE(256i32);
pub const MICARRAY_SINGLE_BEAM: MIC_ARRAY_MODE = MIC_ARRAY_MODE(512i32);
pub const MICARRAY_FIXED_BEAM: MIC_ARRAY_MODE = MIC_ARRAY_MODE(1024i32);
pub const MICARRAY_EXTERN_BEAM: MIC_ARRAY_MODE = MIC_ARRAY_MODE(2048i32);
impl ::core::convert::From<i32> for MIC_ARRAY_MODE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MIC_ARRAY_MODE {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct MOVEREGION_INFO {
    pub FrameNumber: u32,
    pub NumMoveRegions: u32,
    pub MoveRegions: [MOVE_RECT; 1],
}
#[cfg(feature = "Win32_Foundation")]
impl MOVEREGION_INFO {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for MOVEREGION_INFO {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for MOVEREGION_INFO {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MOVEREGION_INFO").field("FrameNumber", &self.FrameNumber).field("NumMoveRegions", &self.NumMoveRegions).field("MoveRegions", &self.MoveRegions).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for MOVEREGION_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.FrameNumber == other.FrameNumber && self.NumMoveRegions == other.NumMoveRegions && self.MoveRegions == other.MoveRegions
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for MOVEREGION_INFO {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for MOVEREGION_INFO {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct MOVE_RECT {
    pub SourcePoint: super::super::Foundation::POINT,
    pub DestRect: super::super::Foundation::RECT,
}
#[cfg(feature = "Win32_Foundation")]
impl MOVE_RECT {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for MOVE_RECT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for MOVE_RECT {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MOVE_RECT").field("SourcePoint", &self.SourcePoint).field("DestRect", &self.DestRect).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for MOVE_RECT {
    fn eq(&self, other: &Self) -> bool {
        self.SourcePoint == other.SourcePoint && self.DestRect == other.DestRect
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for MOVE_RECT {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for MOVE_RECT {
    type Abi = Self;
}
pub const MP3ACMCodecWrapper: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(286274593, 13644, 19658, [167, 163, 26, 255, 154, 91, 103, 1]);
pub const MR_AUDIO_POLICY_SERVICE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2434783031, 26485, 19120, [166, 20, 41, 120, 98, 253, 172, 136]);
pub const MR_BUFFER_SERVICE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2774672524, 39622, 20476, [159, 186, 58, 248, 248, 173, 26, 77]);
pub const MR_CAPTURE_POLICY_VOLUME_SERVICE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(604179149, 4218, 16997, [151, 92, 65, 78, 51, 230, 95, 42]);
pub const MR_POLICY_VOLUME_SERVICE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(448438956, 40251, 18374, [171, 72, 197, 149, 6, 222, 120, 77]);
pub const MR_STREAM_VOLUME_SERVICE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4172675631, 13039, 18165, [177, 114, 19, 33, 33, 47, 178, 196]);
pub const MR_VIDEO_ACCELERATION_SERVICE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4025438581, 23677, 19682, [187, 189, 52, 255, 139, 202, 101, 84]);
pub const MR_VIDEO_MIXER_SERVICE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(121426684, 27892, 16567, [136, 89, 232, 149, 82, 200, 65, 248]);
pub const MR_VIDEO_RENDER_SERVICE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(278046828, 43802, 17818, [163, 54, 131, 31, 188, 77, 17, 255]);
pub const MSAMRNBDecoder: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(642781614, 21633, 20343, [162, 149, 171, 182, 255, 232, 214, 62]);
pub const MSAMRNBEncoder: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(799967998, 1187, 16954, [168, 20, 133, 219, 69, 71, 18, 176]);
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct MT_ARBITRARY_HEADER {
    pub majortype: ::windows::runtime::GUID,
    pub subtype: ::windows::runtime::GUID,
    pub bFixedSizeSamples: super::super::Foundation::BOOL,
    pub bTemporalCompression: super::super::Foundation::BOOL,
    pub lSampleSize: u32,
    pub formattype: ::windows::runtime::GUID,
}
#[cfg(feature = "Win32_Foundation")]
impl MT_ARBITRARY_HEADER {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for MT_ARBITRARY_HEADER {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for MT_ARBITRARY_HEADER {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MT_ARBITRARY_HEADER")
            .field("majortype", &self.majortype)
            .field("subtype", &self.subtype)
            .field("bFixedSizeSamples", &self.bFixedSizeSamples)
            .field("bTemporalCompression", &self.bTemporalCompression)
            .field("lSampleSize", &self.lSampleSize)
            .field("formattype", &self.formattype)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for MT_ARBITRARY_HEADER {
    fn eq(&self, other: &Self) -> bool {
        self.majortype == other.majortype && self.subtype == other.subtype && self.bFixedSizeSamples == other.bFixedSizeSamples && self.bTemporalCompression == other.bTemporalCompression && self.lSampleSize == other.lSampleSize && self.formattype == other.formattype
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for MT_ARBITRARY_HEADER {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for MT_ARBITRARY_HEADER {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct MT_CUSTOM_VIDEO_PRIMARIES {
    pub fRx: f32,
    pub fRy: f32,
    pub fGx: f32,
    pub fGy: f32,
    pub fBx: f32,
    pub fBy: f32,
    pub fWx: f32,
    pub fWy: f32,
}
impl MT_CUSTOM_VIDEO_PRIMARIES {}
impl ::core::default::Default for MT_CUSTOM_VIDEO_PRIMARIES {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for MT_CUSTOM_VIDEO_PRIMARIES {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("MT_CUSTOM_VIDEO_PRIMARIES").field("fRx", &self.fRx).field("fRy", &self.fRy).field("fGx", &self.fGx).field("fGy", &self.fGy).field("fBx", &self.fBx).field("fBy", &self.fBy).field("fWx", &self.fWx).field("fWy", &self.fWy).finish()
    }
}
impl ::core::cmp::PartialEq for MT_CUSTOM_VIDEO_PRIMARIES {
    fn eq(&self, other: &Self) -> bool {
        self.fRx == other.fRx && self.fRy == other.fRy && self.fGx == other.fGx && self.fGy == other.fGy && self.fBx == other.fBx && self.fBy == other.fBy && self.fWx == other.fWx && self.fWy == other.fWy
    }
}
impl ::core::cmp::Eq for MT_CUSTOM_VIDEO_PRIMARIES {}
unsafe impl ::windows::runtime::Abi for MT_CUSTOM_VIDEO_PRIMARIES {
    type Abi = Self;
}
pub const MULawCodecWrapper: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2461425792, 24109, 17566, [144, 196, 196, 31, 38, 142, 85, 20]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn OPMGetVideoOutputForTarget(padapterluid: *const super::super::Foundation::LUID, vidpntarget: u32, vos: OPM_VIDEO_OUTPUT_SEMANTICS) -> ::windows::runtime::Result<IOPMVideoOutput> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn OPMGetVideoOutputForTarget(padapterluid: *const super::super::Foundation::LUID, vidpntarget: u32, vos: OPM_VIDEO_OUTPUT_SEMANTICS, ppopmvideooutput: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IOPMVideoOutput as ::windows::runtime::Abi>::Abi = ::core::mem::zeroed();
        OPMGetVideoOutputForTarget(::core::mem::transmute(padapterluid), ::core::mem::transmute(vidpntarget), ::core::mem::transmute(vos), &mut result__).from_abi::<IOPMVideoOutput>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Gdi`*"]
#[cfg(feature = "Win32_Graphics_Gdi")]
#[inline]
pub unsafe fn OPMGetVideoOutputsFromHMONITOR<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Gdi::HMONITOR>>(hmonitor: Param0, vos: OPM_VIDEO_OUTPUT_SEMANTICS, pulnumvideooutputs: *mut u32, pppopmvideooutputarray: *mut *mut ::core::option::Option<IOPMVideoOutput>) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn OPMGetVideoOutputsFromHMONITOR(hmonitor: super::super::Graphics::Gdi::HMONITOR, vos: OPM_VIDEO_OUTPUT_SEMANTICS, pulnumvideooutputs: *mut u32, pppopmvideooutputarray: *mut *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        OPMGetVideoOutputsFromHMONITOR(hmonitor.into_param().abi(), ::core::mem::transmute(vos), ::core::mem::transmute(pulnumvideooutputs), ::core::mem::transmute(pppopmvideooutputarray)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
#[cfg(feature = "Win32_Graphics_Direct3D9")]
#[inline]
pub unsafe fn OPMGetVideoOutputsFromIDirect3DDevice9Object<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Direct3D9::IDirect3DDevice9>>(pdirect3ddevice9: Param0, vos: OPM_VIDEO_OUTPUT_SEMANTICS, pulnumvideooutputs: *mut u32, pppopmvideooutputarray: *mut *mut ::core::option::Option<IOPMVideoOutput>) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn OPMGetVideoOutputsFromIDirect3DDevice9Object(pdirect3ddevice9: ::windows::runtime::RawPtr, vos: OPM_VIDEO_OUTPUT_SEMANTICS, pulnumvideooutputs: *mut u32, pppopmvideooutputarray: *mut *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        OPMGetVideoOutputsFromIDirect3DDevice9Object(pdirect3ddevice9.into_param().abi(), ::core::mem::transmute(vos), ::core::mem::transmute(pulnumvideooutputs), ::core::mem::transmute(pppopmvideooutputarray)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn OPMXboxEnableHDCP(hdcptype: OPM_HDCP_TYPE) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn OPMXboxEnableHDCP(hdcptype: OPM_HDCP_TYPE) -> ::windows::runtime::HRESULT;
        }
        OPMXboxEnableHDCP(::core::mem::transmute(hdcptype)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn OPMXboxGetHDCPStatus(phdcpstatus: *mut OPM_HDCP_STATUS) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn OPMXboxGetHDCPStatus(phdcpstatus: *mut OPM_HDCP_STATUS) -> ::windows::runtime::HRESULT;
        }
        OPMXboxGetHDCPStatus(::core::mem::transmute(phdcpstatus)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[inline]
pub unsafe fn OPMXboxGetHDCPStatusAndType(phdcpstatus: *mut OPM_HDCP_STATUS, phdcptype: *mut OPM_HDCP_TYPE) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn OPMXboxGetHDCPStatusAndType(phdcpstatus: *mut OPM_HDCP_STATUS, phdcptype: *mut OPM_HDCP_TYPE) -> ::windows::runtime::HRESULT;
        }
        OPMXboxGetHDCPStatusAndType(::core::mem::transmute(phdcpstatus), ::core::mem::transmute(phdcptype)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct OPM_ACP_AND_CGMSA_SIGNALING {
    pub rnRandomNumber: OPM_RANDOM_NUMBER,
    pub ulStatusFlags: u32,
    pub ulAvailableTVProtectionStandards: u32,
    pub ulActiveTVProtectionStandard: u32,
    pub ulReserved: u32,
    pub ulAspectRatioValidMask1: u32,
    pub ulAspectRatioData1: u32,
    pub ulAspectRatioValidMask2: u32,
    pub ulAspectRatioData2: u32,
    pub ulAspectRatioValidMask3: u32,
    pub ulAspectRatioData3: u32,
    pub ulReserved2: [u32; 4],
    pub ulReserved3: [u32; 4],
}
impl OPM_ACP_AND_CGMSA_SIGNALING {}
impl ::core::default::Default for OPM_ACP_AND_CGMSA_SIGNALING {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for OPM_ACP_AND_CGMSA_SIGNALING {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for OPM_ACP_AND_CGMSA_SIGNALING {}
unsafe impl ::windows::runtime::Abi for OPM_ACP_AND_CGMSA_SIGNALING {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct OPM_ACP_PROTECTION_LEVEL(pub i32);
pub const OPM_ACP_OFF: OPM_ACP_PROTECTION_LEVEL = OPM_ACP_PROTECTION_LEVEL(0i32);
pub const OPM_ACP_LEVEL_ONE: OPM_ACP_PROTECTION_LEVEL = OPM_ACP_PROTECTION_LEVEL(1i32);
pub const OPM_ACP_LEVEL_TWO: OPM_ACP_PROTECTION_LEVEL = OPM_ACP_PROTECTION_LEVEL(2i32);
pub const OPM_ACP_LEVEL_THREE: OPM_ACP_PROTECTION_LEVEL = OPM_ACP_PROTECTION_LEVEL(3i32);
pub const OPM_ACP_FORCE_ULONG: OPM_ACP_PROTECTION_LEVEL = OPM_ACP_PROTECTION_LEVEL(2147483647i32);
impl ::core::convert::From<i32> for OPM_ACP_PROTECTION_LEVEL {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OPM_ACP_PROTECTION_LEVEL {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C, packed(1))]
#[cfg(feature = "Win32_Graphics_Direct3D9")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
pub struct OPM_ACTUAL_OUTPUT_FORMAT {
    pub rnRandomNumber: OPM_RANDOM_NUMBER,
    pub ulStatusFlags: u32,
    pub ulDisplayWidth: u32,
    pub ulDisplayHeight: u32,
    pub dsfSampleInterleaveFormat: DXVA2_SampleFormat,
    pub d3dFormat: super::super::Graphics::Direct3D9::D3DFORMAT,
    pub ulFrequencyNumerator: u32,
    pub ulFrequencyDenominator: u32,
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl OPM_ACTUAL_OUTPUT_FORMAT {}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::default::Default for OPM_ACTUAL_OUTPUT_FORMAT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::cmp::PartialEq for OPM_ACTUAL_OUTPUT_FORMAT {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::core::cmp::Eq for OPM_ACTUAL_OUTPUT_FORMAT {}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
unsafe impl ::windows::runtime::Abi for OPM_ACTUAL_OUTPUT_FORMAT {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct OPM_BUS_TYPE(pub i32);
pub const OPM_BUS_TYPE_OTHER: OPM_BUS_TYPE = OPM_BUS_TYPE(0i32);
pub const OPM_BUS_TYPE_PCI: OPM_BUS_TYPE = OPM_BUS_TYPE(1i32);
pub const OPM_BUS_TYPE_PCIX: OPM_BUS_TYPE = OPM_BUS_TYPE(2i32);
pub const OPM_BUS_TYPE_PCIEXPRESS: OPM_BUS_TYPE = OPM_BUS_TYPE(3i32);
pub const OPM_BUS_TYPE_AGP: OPM_BUS_TYPE = OPM_BUS_TYPE(4i32);
pub const OPM_BUS_IMPLEMENTATION_MODIFIER_INSIDE_OF_CHIPSET: OPM_BUS_TYPE = OPM_BUS_TYPE(65536i32);
pub const OPM_BUS_IMPLEMENTATION_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP: OPM_BUS_TYPE = OPM_BUS_TYPE(131072i32);
pub const OPM_BUS_IMPLEMENTATION_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET: OPM_BUS_TYPE = OPM_BUS_TYPE(196608i32);
pub const OPM_BUS_IMPLEMENTATION_MODIFIER_DAUGHTER_BOARD_CONNECTOR: OPM_BUS_TYPE = OPM_BUS_TYPE(262144i32);
pub const OPM_BUS_IMPLEMENTATION_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE: OPM_BUS_TYPE = OPM_BUS_TYPE(327680i32);
pub const OPM_BUS_IMPLEMENTATION_MODIFIER_NON_STANDARD: OPM_BUS_TYPE = OPM_BUS_TYPE(-2147483648i32);
pub const OPM_COPP_COMPATIBLE_BUS_TYPE_INTEGRATED: OPM_BUS_TYPE = OPM_BUS_TYPE(-2147483648i32);
impl ::core::convert::From<i32> for OPM_BUS_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OPM_BUS_TYPE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct OPM_CGMSA(pub i32);
pub const OPM_CGMSA_OFF: OPM_CGMSA = OPM_CGMSA(0i32);
pub const OPM_CGMSA_COPY_FREELY: OPM_CGMSA = OPM_CGMSA(1i32);
pub const OPM_CGMSA_COPY_NO_MORE: OPM_CGMSA = OPM_CGMSA(2i32);
pub const OPM_CGMSA_COPY_ONE_GENERATION: OPM_CGMSA = OPM_CGMSA(3i32);
pub const OPM_CGMSA_COPY_NEVER: OPM_CGMSA = OPM_CGMSA(4i32);
pub const OPM_CGMSA_REDISTRIBUTION_CONTROL_REQUIRED: OPM_CGMSA = OPM_CGMSA(8i32);
impl ::core::convert::From<i32> for OPM_CGMSA {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OPM_CGMSA {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct OPM_CONFIGURE_PARAMETERS {
    pub omac: OPM_OMAC,
    pub guidSetting: ::windows::runtime::GUID,
    pub ulSequenceNumber: u32,
    pub cbParametersSize: u32,
    pub abParameters: [u8; 4056],
}
impl OPM_CONFIGURE_PARAMETERS {}
impl ::core::default::Default for OPM_CONFIGURE_PARAMETERS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for OPM_CONFIGURE_PARAMETERS {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for OPM_CONFIGURE_PARAMETERS {}
unsafe impl ::windows::runtime::Abi for OPM_CONFIGURE_PARAMETERS {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct OPM_CONNECTED_HDCP_DEVICE_INFORMATION {
    pub rnRandomNumber: OPM_RANDOM_NUMBER,
    pub ulStatusFlags: u32,
    pub ulHDCPFlags: u32,
    pub ksvB: OPM_HDCP_KEY_SELECTION_VECTOR,
    pub Reserved: [u8; 11],
    pub Reserved2: [u8; 16],
    pub Reserved3: [u8; 16],
}
impl OPM_CONNECTED_HDCP_DEVICE_INFORMATION {}
impl ::core::default::Default for OPM_CONNECTED_HDCP_DEVICE_INFORMATION {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for OPM_CONNECTED_HDCP_DEVICE_INFORMATION {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for OPM_CONNECTED_HDCP_DEVICE_INFORMATION {}
unsafe impl ::windows::runtime::Abi for OPM_CONNECTED_HDCP_DEVICE_INFORMATION {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS {
    pub rnRandomNumber: OPM_RANDOM_NUMBER,
    pub guidInformation: ::windows::runtime::GUID,
    pub ulSequenceNumber: u32,
    pub cbParametersSize: u32,
    pub abParameters: [u8; 4056],
}
impl OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS {}
impl ::core::default::Default for OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS {}
unsafe impl ::windows::runtime::Abi for OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct OPM_DPCP_PROTECTION_LEVEL(pub i32);
pub const OPM_DPCP_OFF: OPM_DPCP_PROTECTION_LEVEL = OPM_DPCP_PROTECTION_LEVEL(0i32);
pub const OPM_DPCP_ON: OPM_DPCP_PROTECTION_LEVEL = OPM_DPCP_PROTECTION_LEVEL(1i32);
pub const OPM_DPCP_FORCE_ULONG: OPM_DPCP_PROTECTION_LEVEL = OPM_DPCP_PROTECTION_LEVEL(2147483647i32);
impl ::core::convert::From<i32> for OPM_DPCP_PROTECTION_LEVEL {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OPM_DPCP_PROTECTION_LEVEL {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct OPM_DVI_CHARACTERISTIC(pub i32);
pub const OPM_DVI_CHARACTERISTIC_1_0: OPM_DVI_CHARACTERISTIC = OPM_DVI_CHARACTERISTIC(1i32);
pub const OPM_DVI_CHARACTERISTIC_1_1_OR_ABOVE: OPM_DVI_CHARACTERISTIC = OPM_DVI_CHARACTERISTIC(2i32);
impl ::core::convert::From<i32> for OPM_DVI_CHARACTERISTIC {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OPM_DVI_CHARACTERISTIC {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct OPM_ENCRYPTED_INITIALIZATION_PARAMETERS {
    pub abEncryptedInitializationParameters: [u8; 256],
}
impl OPM_ENCRYPTED_INITIALIZATION_PARAMETERS {}
impl ::core::default::Default for OPM_ENCRYPTED_INITIALIZATION_PARAMETERS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for OPM_ENCRYPTED_INITIALIZATION_PARAMETERS {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("OPM_ENCRYPTED_INITIALIZATION_PARAMETERS").field("abEncryptedInitializationParameters", &self.abEncryptedInitializationParameters).finish()
    }
}
impl ::core::cmp::PartialEq for OPM_ENCRYPTED_INITIALIZATION_PARAMETERS {
    fn eq(&self, other: &Self) -> bool {
        self.abEncryptedInitializationParameters == other.abEncryptedInitializationParameters
    }
}
impl ::core::cmp::Eq for OPM_ENCRYPTED_INITIALIZATION_PARAMETERS {}
unsafe impl ::windows::runtime::Abi for OPM_ENCRYPTED_INITIALIZATION_PARAMETERS {
    type Abi = Self;
}
pub const OPM_GET_ACP_AND_CGMSA_SIGNALING: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1714005393, 15225, 19699, [146, 74, 17, 232, 231, 129, 22, 113]);
pub const OPM_GET_ACTUAL_OUTPUT_FORMAT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3619625891, 44307, 20366, [175, 152, 13, 203, 60, 162, 4, 204]);
pub const OPM_GET_ACTUAL_PROTECTION_LEVEL: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(425140490, 30566, 17706, [185, 154, 210, 122, 237, 84, 240, 58]);
pub const OPM_GET_ADAPTER_BUS_TYPE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3337934451, 24948, 16772, [142, 53, 246, 219, 82, 0, 188, 186]);
pub const OPM_GET_CODEC_INFO: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1329022097, 36703, 17477, [157, 186, 149, 88, 143, 107, 88, 180]);
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct OPM_GET_CODEC_INFO_INFORMATION {
    pub rnRandomNumber: OPM_RANDOM_NUMBER,
    pub Merit: u32,
}
impl OPM_GET_CODEC_INFO_INFORMATION {}
impl ::core::default::Default for OPM_GET_CODEC_INFO_INFORMATION {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for OPM_GET_CODEC_INFO_INFORMATION {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for OPM_GET_CODEC_INFO_INFORMATION {}
unsafe impl ::windows::runtime::Abi for OPM_GET_CODEC_INFO_INFORMATION {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct OPM_GET_CODEC_INFO_PARAMETERS {
    pub cbVerifier: u32,
    pub Verifier: [u8; 4052],
}
impl OPM_GET_CODEC_INFO_PARAMETERS {}
impl ::core::default::Default for OPM_GET_CODEC_INFO_PARAMETERS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for OPM_GET_CODEC_INFO_PARAMETERS {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for OPM_GET_CODEC_INFO_PARAMETERS {}
unsafe impl ::windows::runtime::Abi for OPM_GET_CODEC_INFO_PARAMETERS {
    type Abi = Self;
}
pub const OPM_GET_CONNECTED_HDCP_DEVICE_INFORMATION: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(230006132, 43410, 18734, [160, 189, 194, 63, 218, 86, 78, 0]);
pub const OPM_GET_CONNECTOR_TYPE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2177941461, 27390, 18626, [153, 192, 149, 160, 143, 151, 197, 218]);
pub const OPM_GET_CURRENT_HDCP_SRM_VERSION: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2579877631, 24349, 18553, [129, 193, 197, 36, 67, 201, 72, 43]);
pub const OPM_GET_DVI_CHARACTERISTICS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2758849467, 24023, 16754, [131, 156, 61, 55, 118, 224, 235, 245]);
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct OPM_GET_INFO_PARAMETERS {
    pub omac: OPM_OMAC,
    pub rnRandomNumber: OPM_RANDOM_NUMBER,
    pub guidInformation: ::windows::runtime::GUID,
    pub ulSequenceNumber: u32,
    pub cbParametersSize: u32,
    pub abParameters: [u8; 4056],
}
impl OPM_GET_INFO_PARAMETERS {}
impl ::core::default::Default for OPM_GET_INFO_PARAMETERS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for OPM_GET_INFO_PARAMETERS {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for OPM_GET_INFO_PARAMETERS {}
unsafe impl ::windows::runtime::Abi for OPM_GET_INFO_PARAMETERS {
    type Abi = Self;
}
pub const OPM_GET_OUTPUT_HARDWARE_PROTECTION_SUPPORT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(991073673, 11000, 20208, [150, 162, 112, 74, 132, 90, 33, 142]);
pub const OPM_GET_OUTPUT_ID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1925934579, 9295, 16590, [176, 158, 32, 80, 106, 246, 48, 47]);
pub const OPM_GET_SUPPORTED_PROTECTION_TYPES: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(955426817, 39532, 18619, [145, 7, 182, 105, 110, 111, 23, 151]);
pub const OPM_GET_VIRTUAL_PROTECTION_LEVEL: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2986825815, 16090, 19805, [136, 219, 116, 143, 140, 26, 5, 73]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct OPM_HDCP_FLAGS(pub u32);
pub const OPM_HDCP_FLAG_NONE: OPM_HDCP_FLAGS = OPM_HDCP_FLAGS(0u32);
pub const OPM_HDCP_FLAG_REPEATER: OPM_HDCP_FLAGS = OPM_HDCP_FLAGS(1u32);
impl ::core::convert::From<u32> for OPM_HDCP_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OPM_HDCP_FLAGS {
    type Abi = Self;
}
impl ::core::ops::BitOr for OPM_HDCP_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::core::ops::BitAnd for OPM_HDCP_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::core::ops::BitOrAssign for OPM_HDCP_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::core::ops::BitAndAssign for OPM_HDCP_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::core::ops::Not for OPM_HDCP_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct OPM_HDCP_KEY_SELECTION_VECTOR {
    pub abKeySelectionVector: [u8; 5],
}
impl OPM_HDCP_KEY_SELECTION_VECTOR {}
impl ::core::default::Default for OPM_HDCP_KEY_SELECTION_VECTOR {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for OPM_HDCP_KEY_SELECTION_VECTOR {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("OPM_HDCP_KEY_SELECTION_VECTOR").field("abKeySelectionVector", &self.abKeySelectionVector).finish()
    }
}
impl ::core::cmp::PartialEq for OPM_HDCP_KEY_SELECTION_VECTOR {
    fn eq(&self, other: &Self) -> bool {
        self.abKeySelectionVector == other.abKeySelectionVector
    }
}
impl ::core::cmp::Eq for OPM_HDCP_KEY_SELECTION_VECTOR {}
unsafe impl ::windows::runtime::Abi for OPM_HDCP_KEY_SELECTION_VECTOR {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct OPM_HDCP_PROTECTION_LEVEL(pub i32);
pub const OPM_HDCP_OFF: OPM_HDCP_PROTECTION_LEVEL = OPM_HDCP_PROTECTION_LEVEL(0i32);
pub const OPM_HDCP_ON: OPM_HDCP_PROTECTION_LEVEL = OPM_HDCP_PROTECTION_LEVEL(1i32);
pub const OPM_HDCP_FORCE_ULONG: OPM_HDCP_PROTECTION_LEVEL = OPM_HDCP_PROTECTION_LEVEL(2147483647i32);
impl ::core::convert::From<i32> for OPM_HDCP_PROTECTION_LEVEL {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OPM_HDCP_PROTECTION_LEVEL {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct OPM_HDCP_STATUS(pub i32);
pub const OPM_HDCP_STATUS_ON: OPM_HDCP_STATUS = OPM_HDCP_STATUS(0i32);
pub const OPM_HDCP_STATUS_OFF: OPM_HDCP_STATUS = OPM_HDCP_STATUS(1i32);
impl ::core::convert::From<i32> for OPM_HDCP_STATUS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OPM_HDCP_STATUS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct OPM_HDCP_TYPE(pub i32);
pub const OPM_HDCP_TYPE_0: OPM_HDCP_TYPE = OPM_HDCP_TYPE(0i32);
pub const OPM_HDCP_TYPE_1: OPM_HDCP_TYPE = OPM_HDCP_TYPE(1i32);
impl ::core::convert::From<i32> for OPM_HDCP_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OPM_HDCP_TYPE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct OPM_IMAGE_ASPECT_RATIO_EN300294(pub i32);
pub const OPM_ASPECT_RATIO_EN300294_FULL_FORMAT_4_BY_3: OPM_IMAGE_ASPECT_RATIO_EN300294 = OPM_IMAGE_ASPECT_RATIO_EN300294(0i32);
pub const OPM_ASPECT_RATIO_EN300294_BOX_14_BY_9_CENTER: OPM_IMAGE_ASPECT_RATIO_EN300294 = OPM_IMAGE_ASPECT_RATIO_EN300294(1i32);
pub const OPM_ASPECT_RATIO_EN300294_BOX_14_BY_9_TOP: OPM_IMAGE_ASPECT_RATIO_EN300294 = OPM_IMAGE_ASPECT_RATIO_EN300294(2i32);
pub const OPM_ASPECT_RATIO_EN300294_BOX_16_BY_9_CENTER: OPM_IMAGE_ASPECT_RATIO_EN300294 = OPM_IMAGE_ASPECT_RATIO_EN300294(3i32);
pub const OPM_ASPECT_RATIO_EN300294_BOX_16_BY_9_TOP: OPM_IMAGE_ASPECT_RATIO_EN300294 = OPM_IMAGE_ASPECT_RATIO_EN300294(4i32);
pub const OPM_ASPECT_RATIO_EN300294_BOX_GT_16_BY_9_CENTER: OPM_IMAGE_ASPECT_RATIO_EN300294 = OPM_IMAGE_ASPECT_RATIO_EN300294(5i32);
pub const OPM_ASPECT_RATIO_EN300294_FULL_FORMAT_4_BY_3_PROTECTED_CENTER: OPM_IMAGE_ASPECT_RATIO_EN300294 = OPM_IMAGE_ASPECT_RATIO_EN300294(6i32);
pub const OPM_ASPECT_RATIO_EN300294_FULL_FORMAT_16_BY_9_ANAMORPHIC: OPM_IMAGE_ASPECT_RATIO_EN300294 = OPM_IMAGE_ASPECT_RATIO_EN300294(7i32);
pub const OPM_ASPECT_RATIO_FORCE_ULONG: OPM_IMAGE_ASPECT_RATIO_EN300294 = OPM_IMAGE_ASPECT_RATIO_EN300294(2147483647i32);
impl ::core::convert::From<i32> for OPM_IMAGE_ASPECT_RATIO_EN300294 {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OPM_IMAGE_ASPECT_RATIO_EN300294 {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct OPM_OMAC {
    pub abOMAC: [u8; 16],
}
impl OPM_OMAC {}
impl ::core::default::Default for OPM_OMAC {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for OPM_OMAC {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("OPM_OMAC").field("abOMAC", &self.abOMAC).finish()
    }
}
impl ::core::cmp::PartialEq for OPM_OMAC {
    fn eq(&self, other: &Self) -> bool {
        self.abOMAC == other.abOMAC
    }
}
impl ::core::cmp::Eq for OPM_OMAC {}
unsafe impl ::windows::runtime::Abi for OPM_OMAC {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct OPM_OUTPUT_HARDWARE_PROTECTION(pub i32);
pub const OPM_OUTPUT_HARDWARE_PROTECTION_NOT_SUPPORTED: OPM_OUTPUT_HARDWARE_PROTECTION = OPM_OUTPUT_HARDWARE_PROTECTION(0i32);
pub const OPM_OUTPUT_HARDWARE_PROTECTION_SUPPORTED: OPM_OUTPUT_HARDWARE_PROTECTION = OPM_OUTPUT_HARDWARE_PROTECTION(1i32);
impl ::core::convert::From<i32> for OPM_OUTPUT_HARDWARE_PROTECTION {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OPM_OUTPUT_HARDWARE_PROTECTION {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct OPM_OUTPUT_ID_DATA {
    pub rnRandomNumber: OPM_RANDOM_NUMBER,
    pub ulStatusFlags: u32,
    pub OutputId: u64,
}
impl OPM_OUTPUT_ID_DATA {}
impl ::core::default::Default for OPM_OUTPUT_ID_DATA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for OPM_OUTPUT_ID_DATA {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for OPM_OUTPUT_ID_DATA {}
unsafe impl ::windows::runtime::Abi for OPM_OUTPUT_ID_DATA {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct OPM_PROTECTION_STANDARD_TYPE(pub u32);
pub const OPM_PROTECTION_STANDARD_OTHER: OPM_PROTECTION_STANDARD_TYPE = OPM_PROTECTION_STANDARD_TYPE(2147483648u32);
pub const OPM_PROTECTION_STANDARD_NONE: OPM_PROTECTION_STANDARD_TYPE = OPM_PROTECTION_STANDARD_TYPE(0u32);
pub const OPM_PROTECTION_STANDARD_IEC61880_525I: OPM_PROTECTION_STANDARD_TYPE = OPM_PROTECTION_STANDARD_TYPE(1u32);
pub const OPM_PROTECTION_STANDARD_IEC61880_2_525I: OPM_PROTECTION_STANDARD_TYPE = OPM_PROTECTION_STANDARD_TYPE(2u32);
pub const OPM_PROTECTION_STANDARD_IEC62375_625P: OPM_PROTECTION_STANDARD_TYPE = OPM_PROTECTION_STANDARD_TYPE(4u32);
pub const OPM_PROTECTION_STANDARD_EIA608B_525: OPM_PROTECTION_STANDARD_TYPE = OPM_PROTECTION_STANDARD_TYPE(8u32);
pub const OPM_PROTECTION_STANDARD_EN300294_625I: OPM_PROTECTION_STANDARD_TYPE = OPM_PROTECTION_STANDARD_TYPE(16u32);
pub const OPM_PROTECTION_STANDARD_CEA805A_TYPEA_525P: OPM_PROTECTION_STANDARD_TYPE = OPM_PROTECTION_STANDARD_TYPE(32u32);
pub const OPM_PROTECTION_STANDARD_CEA805A_TYPEA_750P: OPM_PROTECTION_STANDARD_TYPE = OPM_PROTECTION_STANDARD_TYPE(64u32);
pub const OPM_PROTECTION_STANDARD_CEA805A_TYPEA_1125I: OPM_PROTECTION_STANDARD_TYPE = OPM_PROTECTION_STANDARD_TYPE(128u32);
pub const OPM_PROTECTION_STANDARD_CEA805A_TYPEB_525P: OPM_PROTECTION_STANDARD_TYPE = OPM_PROTECTION_STANDARD_TYPE(256u32);
pub const OPM_PROTECTION_STANDARD_CEA805A_TYPEB_750P: OPM_PROTECTION_STANDARD_TYPE = OPM_PROTECTION_STANDARD_TYPE(512u32);
pub const OPM_PROTECTION_STANDARD_CEA805A_TYPEB_1125I: OPM_PROTECTION_STANDARD_TYPE = OPM_PROTECTION_STANDARD_TYPE(1024u32);
pub const OPM_PROTECTION_STANDARD_ARIBTRB15_525I: OPM_PROTECTION_STANDARD_TYPE = OPM_PROTECTION_STANDARD_TYPE(2048u32);
pub const OPM_PROTECTION_STANDARD_ARIBTRB15_525P: OPM_PROTECTION_STANDARD_TYPE = OPM_PROTECTION_STANDARD_TYPE(4096u32);
pub const OPM_PROTECTION_STANDARD_ARIBTRB15_750P: OPM_PROTECTION_STANDARD_TYPE = OPM_PROTECTION_STANDARD_TYPE(8192u32);
pub const OPM_PROTECTION_STANDARD_ARIBTRB15_1125I: OPM_PROTECTION_STANDARD_TYPE = OPM_PROTECTION_STANDARD_TYPE(16384u32);
impl ::core::convert::From<u32> for OPM_PROTECTION_STANDARD_TYPE {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OPM_PROTECTION_STANDARD_TYPE {
    type Abi = Self;
}
impl ::core::ops::BitOr for OPM_PROTECTION_STANDARD_TYPE {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::core::ops::BitAnd for OPM_PROTECTION_STANDARD_TYPE {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::core::ops::BitOrAssign for OPM_PROTECTION_STANDARD_TYPE {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::core::ops::BitAndAssign for OPM_PROTECTION_STANDARD_TYPE {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::core::ops::Not for OPM_PROTECTION_STANDARD_TYPE {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct OPM_PROTECTION_TYPE(pub i32);
pub const OPM_PROTECTION_TYPE_OTHER: OPM_PROTECTION_TYPE = OPM_PROTECTION_TYPE(-2147483648i32);
pub const OPM_PROTECTION_TYPE_NONE: OPM_PROTECTION_TYPE = OPM_PROTECTION_TYPE(0i32);
pub const OPM_PROTECTION_TYPE_COPP_COMPATIBLE_HDCP: OPM_PROTECTION_TYPE = OPM_PROTECTION_TYPE(1i32);
pub const OPM_PROTECTION_TYPE_ACP: OPM_PROTECTION_TYPE = OPM_PROTECTION_TYPE(2i32);
pub const OPM_PROTECTION_TYPE_CGMSA: OPM_PROTECTION_TYPE = OPM_PROTECTION_TYPE(4i32);
pub const OPM_PROTECTION_TYPE_HDCP: OPM_PROTECTION_TYPE = OPM_PROTECTION_TYPE(8i32);
pub const OPM_PROTECTION_TYPE_DPCP: OPM_PROTECTION_TYPE = OPM_PROTECTION_TYPE(16i32);
pub const OPM_PROTECTION_TYPE_TYPE_ENFORCEMENT_HDCP: OPM_PROTECTION_TYPE = OPM_PROTECTION_TYPE(32i32);
impl ::core::convert::From<i32> for OPM_PROTECTION_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OPM_PROTECTION_TYPE {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct OPM_RANDOM_NUMBER {
    pub abRandomNumber: [u8; 16],
}
impl OPM_RANDOM_NUMBER {}
impl ::core::default::Default for OPM_RANDOM_NUMBER {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for OPM_RANDOM_NUMBER {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("OPM_RANDOM_NUMBER").field("abRandomNumber", &self.abRandomNumber).finish()
    }
}
impl ::core::cmp::PartialEq for OPM_RANDOM_NUMBER {
    fn eq(&self, other: &Self) -> bool {
        self.abRandomNumber == other.abRandomNumber
    }
}
impl ::core::cmp::Eq for OPM_RANDOM_NUMBER {}
unsafe impl ::windows::runtime::Abi for OPM_RANDOM_NUMBER {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct OPM_REQUESTED_INFORMATION {
    pub omac: OPM_OMAC,
    pub cbRequestedInformationSize: u32,
    pub abRequestedInformation: [u8; 4076],
}
impl OPM_REQUESTED_INFORMATION {}
impl ::core::default::Default for OPM_REQUESTED_INFORMATION {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for OPM_REQUESTED_INFORMATION {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for OPM_REQUESTED_INFORMATION {}
unsafe impl ::windows::runtime::Abi for OPM_REQUESTED_INFORMATION {
    type Abi = Self;
}
pub const OPM_SET_ACP_AND_CGMSA_SIGNALING: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(161886629, 54916, 19552, [142, 77, 211, 187, 15, 11, 227, 238]);
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS {
    pub ulNewTVProtectionStandard: u32,
    pub ulAspectRatioChangeMask1: u32,
    pub ulAspectRatioData1: u32,
    pub ulAspectRatioChangeMask2: u32,
    pub ulAspectRatioData2: u32,
    pub ulAspectRatioChangeMask3: u32,
    pub ulAspectRatioData3: u32,
    pub ulReserved: [u32; 4],
    pub ulReserved2: [u32; 4],
    pub ulReserved3: u32,
}
impl OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS {}
impl ::core::default::Default for OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS {}
unsafe impl ::windows::runtime::Abi for OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS {
    type Abi = Self;
}
pub const OPM_SET_HDCP_SRM: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2338256337, 49933, 17663, [132, 165, 234, 113, 220, 231, 143, 19]);
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct OPM_SET_HDCP_SRM_PARAMETERS {
    pub ulSRMVersion: u32,
}
impl OPM_SET_HDCP_SRM_PARAMETERS {}
impl ::core::default::Default for OPM_SET_HDCP_SRM_PARAMETERS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for OPM_SET_HDCP_SRM_PARAMETERS {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for OPM_SET_HDCP_SRM_PARAMETERS {}
unsafe impl ::windows::runtime::Abi for OPM_SET_HDCP_SRM_PARAMETERS {
    type Abi = Self;
}
pub const OPM_SET_PROTECTION_LEVEL: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2612605564, 20149, 18215, [159, 0, 180, 43, 9, 25, 192, 218]);
pub const OPM_SET_PROTECTION_LEVEL_ACCORDING_TO_CSS_DVD: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(969814846, 19648, 17582, [191, 204, 218, 80, 181, 248, 46, 114]);
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct OPM_SET_PROTECTION_LEVEL_PARAMETERS {
    pub ulProtectionType: u32,
    pub ulProtectionLevel: u32,
    pub Reserved: u32,
    pub Reserved2: u32,
}
impl OPM_SET_PROTECTION_LEVEL_PARAMETERS {}
impl ::core::default::Default for OPM_SET_PROTECTION_LEVEL_PARAMETERS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for OPM_SET_PROTECTION_LEVEL_PARAMETERS {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for OPM_SET_PROTECTION_LEVEL_PARAMETERS {}
unsafe impl ::windows::runtime::Abi for OPM_SET_PROTECTION_LEVEL_PARAMETERS {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct OPM_STANDARD_INFORMATION {
    pub rnRandomNumber: OPM_RANDOM_NUMBER,
    pub ulStatusFlags: u32,
    pub ulInformation: u32,
    pub ulReserved: u32,
    pub ulReserved2: u32,
}
impl OPM_STANDARD_INFORMATION {}
impl ::core::default::Default for OPM_STANDARD_INFORMATION {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::cmp::PartialEq for OPM_STANDARD_INFORMATION {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::core::cmp::Eq for OPM_STANDARD_INFORMATION {}
unsafe impl ::windows::runtime::Abi for OPM_STANDARD_INFORMATION {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct OPM_STATUS(pub i32);
pub const OPM_STATUS_NORMAL: OPM_STATUS = OPM_STATUS(0i32);
pub const OPM_STATUS_LINK_LOST: OPM_STATUS = OPM_STATUS(1i32);
pub const OPM_STATUS_RENEGOTIATION_REQUIRED: OPM_STATUS = OPM_STATUS(2i32);
pub const OPM_STATUS_TAMPERING_DETECTED: OPM_STATUS = OPM_STATUS(4i32);
pub const OPM_STATUS_REVOKED_HDCP_DEVICE_ATTACHED: OPM_STATUS = OPM_STATUS(8i32);
impl ::core::convert::From<i32> for OPM_STATUS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OPM_STATUS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct OPM_TYPE(pub i32);
pub const OPM_OMAC_SIZE: OPM_TYPE = OPM_TYPE(16i32);
pub const OPM_128_BIT_RANDOM_NUMBER_SIZE: OPM_TYPE = OPM_TYPE(16i32);
pub const OPM_ENCRYPTED_INITIALIZATION_PARAMETERS_SIZE: OPM_TYPE = OPM_TYPE(256i32);
pub const OPM_CONFIGURE_SETTING_DATA_SIZE: OPM_TYPE = OPM_TYPE(4056i32);
pub const OPM_GET_INFORMATION_PARAMETERS_SIZE: OPM_TYPE = OPM_TYPE(4056i32);
pub const OPM_REQUESTED_INFORMATION_SIZE: OPM_TYPE = OPM_TYPE(4076i32);
pub const OPM_HDCP_KEY_SELECTION_VECTOR_SIZE: OPM_TYPE = OPM_TYPE(5i32);
pub const OPM_PROTECTION_TYPE_SIZE: OPM_TYPE = OPM_TYPE(4i32);
pub const OPM_BUS_TYPE_MASK: OPM_TYPE = OPM_TYPE(65535i32);
pub const OPM_BUS_IMPLEMENTATION_MODIFIER_MASK: OPM_TYPE = OPM_TYPE(32767i32);
impl ::core::convert::From<i32> for OPM_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OPM_TYPE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct OPM_TYPE_ENFORCEMENT_HDCP_PROTECTION_LEVEL(pub i32);
pub const OPM_TYPE_ENFORCEMENT_HDCP_OFF: OPM_TYPE_ENFORCEMENT_HDCP_PROTECTION_LEVEL = OPM_TYPE_ENFORCEMENT_HDCP_PROTECTION_LEVEL(0i32);
pub const OPM_TYPE_ENFORCEMENT_HDCP_ON_WITH_NO_TYPE_RESTRICTION: OPM_TYPE_ENFORCEMENT_HDCP_PROTECTION_LEVEL = OPM_TYPE_ENFORCEMENT_HDCP_PROTECTION_LEVEL(1i32);
pub const OPM_TYPE_ENFORCEMENT_HDCP_ON_WITH_TYPE1_RESTRICTION: OPM_TYPE_ENFORCEMENT_HDCP_PROTECTION_LEVEL = OPM_TYPE_ENFORCEMENT_HDCP_PROTECTION_LEVEL(2i32);
pub const OPM_TYPE_ENFORCEMENT_HDCP_FORCE_ULONG: OPM_TYPE_ENFORCEMENT_HDCP_PROTECTION_LEVEL = OPM_TYPE_ENFORCEMENT_HDCP_PROTECTION_LEVEL(2147483647i32);
impl ::core::convert::From<i32> for OPM_TYPE_ENFORCEMENT_HDCP_PROTECTION_LEVEL {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OPM_TYPE_ENFORCEMENT_HDCP_PROTECTION_LEVEL {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct OPM_VIDEO_OUTPUT_SEMANTICS(pub i32);
pub const OPM_VOS_COPP_SEMANTICS: OPM_VIDEO_OUTPUT_SEMANTICS = OPM_VIDEO_OUTPUT_SEMANTICS(0i32);
pub const OPM_VOS_OPM_SEMANTICS: OPM_VIDEO_OUTPUT_SEMANTICS = OPM_VIDEO_OUTPUT_SEMANTICS(1i32);
pub const OPM_VOS_OPM_INDIRECT_DISPLAY: OPM_VIDEO_OUTPUT_SEMANTICS = OPM_VIDEO_OUTPUT_SEMANTICS(2i32);
impl ::core::convert::From<i32> for OPM_VIDEO_OUTPUT_SEMANTICS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OPM_VIDEO_OUTPUT_SEMANTICS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D9`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
pub type PDXVAHDSW_CreateDevice = unsafe extern "system" fn(pd3ddevice: ::windows::runtime::RawPtr, phdevice: *mut super::super::Foundation::HANDLE) -> ::windows::runtime::HRESULT;
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
pub type PDXVAHDSW_CreateVideoProcessor = unsafe extern "system" fn(hdevice: super::super::Foundation::HANDLE, pvpguid: *const ::windows::runtime::GUID, phvideoprocessor: *mut super::super::Foundation::HANDLE) -> ::windows::runtime::HRESULT;
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
pub type PDXVAHDSW_DestroyDevice = unsafe extern "system" fn(hdevice: super::super::Foundation::HANDLE) -> ::windows::runtime::HRESULT;
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
pub type PDXVAHDSW_DestroyVideoProcessor = unsafe extern "system" fn(hvideoprocessor: super::super::Foundation::HANDLE) -> ::windows::runtime::HRESULT;
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
pub type PDXVAHDSW_GetVideoProcessBltStatePrivate = unsafe extern "system" fn(hvideoprocessor: super::super::Foundation::HANDLE, pdata: *mut DXVAHD_BLT_STATE_PRIVATE_DATA) -> ::windows::runtime::HRESULT;
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
pub type PDXVAHDSW_GetVideoProcessStreamStatePrivate = unsafe extern "system" fn(hvideoprocessor: super::super::Foundation::HANDLE, streamnumber: u32, pdata: *mut DXVAHD_STREAM_STATE_PRIVATE_DATA) -> ::windows::runtime::HRESULT;
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
pub type PDXVAHDSW_GetVideoProcessorCaps = unsafe extern "system" fn(hdevice: super::super::Foundation::HANDLE, pcontentdesc: *const DXVAHD_CONTENT_DESC, usage: DXVAHD_DEVICE_USAGE, count: u32, pcaps: *mut DXVAHD_VPCAPS) -> ::windows::runtime::HRESULT;
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
pub type PDXVAHDSW_GetVideoProcessorCustomRates = unsafe extern "system" fn(hdevice: super::super::Foundation::HANDLE, pvpguid: *const ::windows::runtime::GUID, count: u32, prates: *mut DXVAHD_CUSTOM_RATE_DATA) -> ::windows::runtime::HRESULT;
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D9`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
pub type PDXVAHDSW_GetVideoProcessorDeviceCaps = unsafe extern "system" fn(hdevice: super::super::Foundation::HANDLE, pcontentdesc: *const DXVAHD_CONTENT_DESC, usage: DXVAHD_DEVICE_USAGE, pcaps: *mut DXVAHD_VPDEVCAPS) -> ::windows::runtime::HRESULT;
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
pub type PDXVAHDSW_GetVideoProcessorFilterRange = unsafe extern "system" fn(hdevice: super::super::Foundation::HANDLE, filter: DXVAHD_FILTER, prange: *mut DXVAHD_FILTER_RANGE_DATA) -> ::windows::runtime::HRESULT;
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D9`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
pub type PDXVAHDSW_GetVideoProcessorInputFormats = unsafe extern "system" fn(hdevice: super::super::Foundation::HANDLE, pcontentdesc: *const DXVAHD_CONTENT_DESC, usage: DXVAHD_DEVICE_USAGE, count: u32, pformats: *mut super::super::Graphics::Direct3D9::D3DFORMAT) -> ::windows::runtime::HRESULT;
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D9`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
pub type PDXVAHDSW_GetVideoProcessorOutputFormats = unsafe extern "system" fn(hdevice: super::super::Foundation::HANDLE, pcontentdesc: *const DXVAHD_CONTENT_DESC, usage: DXVAHD_DEVICE_USAGE, count: u32, pformats: *mut super::super::Graphics::Direct3D9::D3DFORMAT) -> ::windows::runtime::HRESULT;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub type PDXVAHDSW_Plugin = unsafe extern "system" fn(size: u32, pcallbacks: *mut ::core::ffi::c_void) -> ::windows::runtime::HRESULT;
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D9`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
pub type PDXVAHDSW_ProposeVideoPrivateFormat = unsafe extern "system" fn(hdevice: super::super::Foundation::HANDLE, pformat: *mut super::super::Graphics::Direct3D9::D3DFORMAT) -> ::windows::runtime::HRESULT;
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
pub type PDXVAHDSW_SetVideoProcessBltState = unsafe extern "system" fn(hvideoprocessor: super::super::Foundation::HANDLE, state: DXVAHD_BLT_STATE, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::HRESULT;
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
#[cfg(feature = "Win32_Foundation")]
pub type PDXVAHDSW_SetVideoProcessStreamState = unsafe extern "system" fn(hvideoprocessor: super::super::Foundation::HANDLE, streamnumber: u32, state: DXVAHD_STREAM_STATE, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows::runtime::HRESULT;
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`, `Win32_Graphics_Direct3D9`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
pub type PDXVAHDSW_VideoProcessBltHD = unsafe extern "system" fn(hvideoprocessor: super::super::Foundation::HANDLE, poutputsurface: ::windows::runtime::RawPtr, outputframe: u32, streamcount: u32, pstreams: *const ::core::mem::ManuallyDrop<DXVAHD_STREAM_DATA>) -> ::windows::runtime::HRESULT;
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Graphics_Direct3D9`*"]
#[cfg(feature = "Win32_Graphics_Direct3D9")]
pub type PDXVAHD_CreateDevice = unsafe extern "system" fn(pd3ddevice: ::windows::runtime::RawPtr, pcontentdesc: *const DXVAHD_CONTENT_DESC, usage: DXVAHD_DEVICE_USAGE, pplugin: ::windows::runtime::RawPtr, ppdevice: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct PLAYTO_SOURCE_CREATEFLAGS(pub i32);
pub const PLAYTO_SOURCE_NONE: PLAYTO_SOURCE_CREATEFLAGS = PLAYTO_SOURCE_CREATEFLAGS(0i32);
pub const PLAYTO_SOURCE_IMAGE: PLAYTO_SOURCE_CREATEFLAGS = PLAYTO_SOURCE_CREATEFLAGS(1i32);
pub const PLAYTO_SOURCE_AUDIO: PLAYTO_SOURCE_CREATEFLAGS = PLAYTO_SOURCE_CREATEFLAGS(2i32);
pub const PLAYTO_SOURCE_VIDEO: PLAYTO_SOURCE_CREATEFLAGS = PLAYTO_SOURCE_CREATEFLAGS(4i32);
pub const PLAYTO_SOURCE_PROTECTED: PLAYTO_SOURCE_CREATEFLAGS = PLAYTO_SOURCE_CREATEFLAGS(8i32);
impl ::core::convert::From<i32> for PLAYTO_SOURCE_CREATEFLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for PLAYTO_SOURCE_CREATEFLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct PM_CONNECTOR_TYPE(pub i32);
pub const OPM_CONNECTOR_TYPE_OTHER: PM_CONNECTOR_TYPE = PM_CONNECTOR_TYPE(-1i32);
pub const OPM_CONNECTOR_TYPE_VGA: PM_CONNECTOR_TYPE = PM_CONNECTOR_TYPE(0i32);
pub const OPM_CONNECTOR_TYPE_SVIDEO: PM_CONNECTOR_TYPE = PM_CONNECTOR_TYPE(1i32);
pub const OPM_CONNECTOR_TYPE_COMPOSITE_VIDEO: PM_CONNECTOR_TYPE = PM_CONNECTOR_TYPE(2i32);
pub const OPM_CONNECTOR_TYPE_COMPONENT_VIDEO: PM_CONNECTOR_TYPE = PM_CONNECTOR_TYPE(3i32);
pub const OPM_CONNECTOR_TYPE_DVI: PM_CONNECTOR_TYPE = PM_CONNECTOR_TYPE(4i32);
pub const OPM_CONNECTOR_TYPE_HDMI: PM_CONNECTOR_TYPE = PM_CONNECTOR_TYPE(5i32);
pub const OPM_CONNECTOR_TYPE_LVDS: PM_CONNECTOR_TYPE = PM_CONNECTOR_TYPE(6i32);
pub const OPM_CONNECTOR_TYPE_D_JPN: PM_CONNECTOR_TYPE = PM_CONNECTOR_TYPE(8i32);
pub const OPM_CONNECTOR_TYPE_SDI: PM_CONNECTOR_TYPE = PM_CONNECTOR_TYPE(9i32);
pub const OPM_CONNECTOR_TYPE_DISPLAYPORT_EXTERNAL: PM_CONNECTOR_TYPE = PM_CONNECTOR_TYPE(10i32);
pub const OPM_CONNECTOR_TYPE_DISPLAYPORT_EMBEDDED: PM_CONNECTOR_TYPE = PM_CONNECTOR_TYPE(11i32);
pub const OPM_CONNECTOR_TYPE_UDI_EXTERNAL: PM_CONNECTOR_TYPE = PM_CONNECTOR_TYPE(12i32);
pub const OPM_CONNECTOR_TYPE_UDI_EMBEDDED: PM_CONNECTOR_TYPE = PM_CONNECTOR_TYPE(13i32);
pub const OPM_CONNECTOR_TYPE_RESERVED: PM_CONNECTOR_TYPE = PM_CONNECTOR_TYPE(14i32);
pub const OPM_CONNECTOR_TYPE_MIRACAST: PM_CONNECTOR_TYPE = PM_CONNECTOR_TYPE(15i32);
pub const OPM_CONNECTOR_TYPE_TRANSPORT_AGNOSTIC_DIGITAL_MODE_A: PM_CONNECTOR_TYPE = PM_CONNECTOR_TYPE(16i32);
pub const OPM_CONNECTOR_TYPE_TRANSPORT_AGNOSTIC_DIGITAL_MODE_B: PM_CONNECTOR_TYPE = PM_CONNECTOR_TYPE(17i32);
pub const OPM_COPP_COMPATIBLE_CONNECTOR_TYPE_INTERNAL: PM_CONNECTOR_TYPE = PM_CONNECTOR_TYPE(-2147483648i32);
impl ::core::convert::From<i32> for PM_CONNECTOR_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for PM_CONNECTOR_TYPE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const PRESENTATION_CURRENT_POSITION: u64 = 9223372036854775807u64;
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_Media_MediaFoundation`, `Win32_Foundation`*"]
pub struct ROI_AREA {
    pub rect: super::super::Foundation::RECT,
    pub QPDelta: i32,
}
#[cfg(feature = "Win32_Foundation")]
impl ROI_AREA {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for ROI_AREA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for ROI_AREA {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("ROI_AREA").field("rect", &self.rect).field("QPDelta", &self.QPDelta).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for ROI_AREA {
    fn eq(&self, other: &Self) -> bool {
        self.rect == other.rect && self.QPDelta == other.QPDelta
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for ROI_AREA {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for ROI_AREA {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct SAMPLE_PROTECTION_VERSION(pub i32);
pub const SAMPLE_PROTECTION_VERSION_NO: SAMPLE_PROTECTION_VERSION = SAMPLE_PROTECTION_VERSION(0i32);
pub const SAMPLE_PROTECTION_VERSION_BASIC_LOKI: SAMPLE_PROTECTION_VERSION = SAMPLE_PROTECTION_VERSION(1i32);
pub const SAMPLE_PROTECTION_VERSION_SCATTER: SAMPLE_PROTECTION_VERSION = SAMPLE_PROTECTION_VERSION(2i32);
pub const SAMPLE_PROTECTION_VERSION_RC4: SAMPLE_PROTECTION_VERSION = SAMPLE_PROTECTION_VERSION(3i32);
pub const SAMPLE_PROTECTION_VERSION_AES128CTR: SAMPLE_PROTECTION_VERSION = SAMPLE_PROTECTION_VERSION(4i32);
impl ::core::convert::From<i32> for SAMPLE_PROTECTION_VERSION {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for SAMPLE_PROTECTION_VERSION {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct SEEK_ORIGIN(pub i32);
pub const _msoBegin: SEEK_ORIGIN = SEEK_ORIGIN(0i32);
pub const _msoCurrent: SEEK_ORIGIN = SEEK_ORIGIN(1i32);
impl ::core::convert::From<i32> for SEEK_ORIGIN {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for SEEK_ORIGIN {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct SENSORPROFILEID {
    pub Type: ::windows::runtime::GUID,
    pub Index: u32,
    pub Unused: u32,
}
impl SENSORPROFILEID {}
impl ::core::default::Default for SENSORPROFILEID {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for SENSORPROFILEID {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("SENSORPROFILEID").field("Type", &self.Type).field("Index", &self.Index).field("Unused", &self.Unused).finish()
    }
}
impl ::core::cmp::PartialEq for SENSORPROFILEID {
    fn eq(&self, other: &Self) -> bool {
        self.Type == other.Type && self.Index == other.Index && self.Unused == other.Unused
    }
}
impl ::core::cmp::Eq for SENSORPROFILEID {}
unsafe impl ::windows::runtime::Abi for SENSORPROFILEID {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const SHA_HASH_LEN: u32 = 20u32;
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct STREAM_MEDIUM {
    pub gidMedium: ::windows::runtime::GUID,
    pub unMediumInstance: u32,
}
impl STREAM_MEDIUM {}
impl ::core::default::Default for STREAM_MEDIUM {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for STREAM_MEDIUM {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("STREAM_MEDIUM").field("gidMedium", &self.gidMedium).field("unMediumInstance", &self.unMediumInstance).finish()
    }
}
impl ::core::cmp::PartialEq for STREAM_MEDIUM {
    fn eq(&self, other: &Self) -> bool {
        self.gidMedium == other.gidMedium && self.unMediumInstance == other.unMediumInstance
    }
}
impl ::core::cmp::Eq for STREAM_MEDIUM {}
unsafe impl ::windows::runtime::Abi for STREAM_MEDIUM {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const SYSFXUI_DONOTSHOW_BASSBOOST: u32 = 8u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const SYSFXUI_DONOTSHOW_BASSMANAGEMENT: u32 = 4u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const SYSFXUI_DONOTSHOW_CHANNELPHANTOMING: u32 = 128u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const SYSFXUI_DONOTSHOW_HEADPHONEVIRTUALIZATION: u32 = 16u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const SYSFXUI_DONOTSHOW_LOUDNESSEQUALIZATION: u32 = 1u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const SYSFXUI_DONOTSHOW_ROOMCORRECTION: u32 = 2u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const SYSFXUI_DONOTSHOW_SPEAKERFILLING: u32 = 64u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const SYSFXUI_DONOTSHOW_VIRTUALSURROUND: u32 = 32u32;
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct TOC_DESCRIPTOR {
    pub guidID: ::windows::runtime::GUID,
    pub wStreamNumber: u16,
    pub guidType: ::windows::runtime::GUID,
    pub wLanguageIndex: u16,
}
impl TOC_DESCRIPTOR {}
impl ::core::default::Default for TOC_DESCRIPTOR {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for TOC_DESCRIPTOR {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("TOC_DESCRIPTOR").field("guidID", &self.guidID).field("wStreamNumber", &self.wStreamNumber).field("guidType", &self.guidType).field("wLanguageIndex", &self.wLanguageIndex).finish()
    }
}
impl ::core::cmp::PartialEq for TOC_DESCRIPTOR {
    fn eq(&self, other: &Self) -> bool {
        self.guidID == other.guidID && self.wStreamNumber == other.wStreamNumber && self.guidType == other.guidType && self.wLanguageIndex == other.wLanguageIndex
    }
}
impl ::core::cmp::Eq for TOC_DESCRIPTOR {}
unsafe impl ::windows::runtime::Abi for TOC_DESCRIPTOR {
    type Abi = Self;
}
#[derive(:: core :: clone :: Clone, :: core :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub struct TOC_ENTRY_DESCRIPTOR {
    pub qwStartTime: u64,
    pub qwEndTime: u64,
    pub qwStartPacketOffset: u64,
    pub qwEndPacketOffset: u64,
    pub qwRepresentativeFrameTime: u64,
}
impl TOC_ENTRY_DESCRIPTOR {}
impl ::core::default::Default for TOC_ENTRY_DESCRIPTOR {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl ::core::fmt::Debug for TOC_ENTRY_DESCRIPTOR {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.debug_struct("TOC_ENTRY_DESCRIPTOR")
            .field("qwStartTime", &self.qwStartTime)
            .field("qwEndTime", &self.qwEndTime)
            .field("qwStartPacketOffset", &self.qwStartPacketOffset)
            .field("qwEndPacketOffset", &self.qwEndPacketOffset)
            .field("qwRepresentativeFrameTime", &self.qwRepresentativeFrameTime)
            .finish()
    }
}
impl ::core::cmp::PartialEq for TOC_ENTRY_DESCRIPTOR {
    fn eq(&self, other: &Self) -> bool {
        self.qwStartTime == other.qwStartTime && self.qwEndTime == other.qwEndTime && self.qwStartPacketOffset == other.qwStartPacketOffset && self.qwEndPacketOffset == other.qwEndPacketOffset && self.qwRepresentativeFrameTime == other.qwRepresentativeFrameTime
    }
}
impl ::core::cmp::Eq for TOC_ENTRY_DESCRIPTOR {}
unsafe impl ::windows::runtime::Abi for TOC_ENTRY_DESCRIPTOR {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const TOC_ENTRY_MAX_TITLE_SIZE: u32 = 65535u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const TOC_MAX_DESCRIPTION_SIZE: u32 = 65535u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct TOC_POS_TYPE(pub i32);
pub const TOC_POS_INHEADER: TOC_POS_TYPE = TOC_POS_TYPE(0i32);
pub const TOC_POS_TOPLEVELOBJECT: TOC_POS_TYPE = TOC_POS_TYPE(1i32);
impl ::core::convert::From<i32> for TOC_POS_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for TOC_POS_TYPE {
    type Abi = Self;
}
pub const VIDEO_ZOOM_RECT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2057967160, 7039, 19603, [189, 137, 91, 156, 159, 182, 252, 240]);
pub const VorbisDecoderMFT: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(437882610, 24805, 20136, [144, 216, 218, 31, 40, 50, 194, 136]);
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const WMAAECMA_E_NO_ACTIVE_RENDER_STREAM: u32 = 2278293514u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct WMT_PROP_DATATYPE(pub i32);
pub const WMT_PROP_TYPE_DWORD: WMT_PROP_DATATYPE = WMT_PROP_DATATYPE(0i32);
pub const WMT_PROP_TYPE_STRING: WMT_PROP_DATATYPE = WMT_PROP_DATATYPE(1i32);
pub const WMT_PROP_TYPE_BINARY: WMT_PROP_DATATYPE = WMT_PROP_DATATYPE(2i32);
pub const WMT_PROP_TYPE_BOOL: WMT_PROP_DATATYPE = WMT_PROP_DATATYPE(3i32);
pub const WMT_PROP_TYPE_QWORD: WMT_PROP_DATATYPE = WMT_PROP_DATATYPE(4i32);
pub const WMT_PROP_TYPE_WORD: WMT_PROP_DATATYPE = WMT_PROP_DATATYPE(5i32);
pub const WMT_PROP_TYPE_GUID: WMT_PROP_DATATYPE = WMT_PROP_DATATYPE(6i32);
impl ::core::convert::From<i32> for WMT_PROP_DATATYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for WMT_PROP_DATATYPE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct WMV_DYNAMIC_FLAGS(pub i32);
pub const WMV_DYNAMIC_BITRATE: WMV_DYNAMIC_FLAGS = WMV_DYNAMIC_FLAGS(1i32);
pub const WMV_DYNAMIC_RESOLUTION: WMV_DYNAMIC_FLAGS = WMV_DYNAMIC_FLAGS(2i32);
pub const WMV_DYNAMIC_COMPLEXITY: WMV_DYNAMIC_FLAGS = WMV_DYNAMIC_FLAGS(4i32);
impl ::core::convert::From<i32> for WMV_DYNAMIC_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for WMV_DYNAMIC_FLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const WM_CODEC_ONEPASS_CBR: u32 = 1u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const WM_CODEC_ONEPASS_VBR: u32 = 2u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const WM_CODEC_TWOPASS_CBR: u32 = 4u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const WM_CODEC_TWOPASS_VBR_PEAKCONSTRAINED: u32 = 16u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const WM_CODEC_TWOPASS_VBR_UNCONSTRAINED: u32 = 8u32;
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct _DMO_INPLACE_PROCESS_FLAGS(pub i32);
pub const DMO_INPLACE_NORMAL: _DMO_INPLACE_PROCESS_FLAGS = _DMO_INPLACE_PROCESS_FLAGS(0i32);
pub const DMO_INPLACE_ZERO: _DMO_INPLACE_PROCESS_FLAGS = _DMO_INPLACE_PROCESS_FLAGS(1i32);
impl ::core::convert::From<i32> for _DMO_INPLACE_PROCESS_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for _DMO_INPLACE_PROCESS_FLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct _DMO_INPUT_DATA_BUFFER_FLAGS(pub i32);
pub const DMO_INPUT_DATA_BUFFERF_SYNCPOINT: _DMO_INPUT_DATA_BUFFER_FLAGS = _DMO_INPUT_DATA_BUFFER_FLAGS(1i32);
pub const DMO_INPUT_DATA_BUFFERF_TIME: _DMO_INPUT_DATA_BUFFER_FLAGS = _DMO_INPUT_DATA_BUFFER_FLAGS(2i32);
pub const DMO_INPUT_DATA_BUFFERF_TIMELENGTH: _DMO_INPUT_DATA_BUFFER_FLAGS = _DMO_INPUT_DATA_BUFFER_FLAGS(4i32);
pub const DMO_INPUT_DATA_BUFFERF_DISCONTINUITY: _DMO_INPUT_DATA_BUFFER_FLAGS = _DMO_INPUT_DATA_BUFFER_FLAGS(8i32);
impl ::core::convert::From<i32> for _DMO_INPUT_DATA_BUFFER_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for _DMO_INPUT_DATA_BUFFER_FLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct _DMO_INPUT_STATUS_FLAGS(pub i32);
pub const DMO_INPUT_STATUSF_ACCEPT_DATA: _DMO_INPUT_STATUS_FLAGS = _DMO_INPUT_STATUS_FLAGS(1i32);
impl ::core::convert::From<i32> for _DMO_INPUT_STATUS_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for _DMO_INPUT_STATUS_FLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct _DMO_INPUT_STREAM_INFO_FLAGS(pub i32);
pub const DMO_INPUT_STREAMF_WHOLE_SAMPLES: _DMO_INPUT_STREAM_INFO_FLAGS = _DMO_INPUT_STREAM_INFO_FLAGS(1i32);
pub const DMO_INPUT_STREAMF_SINGLE_SAMPLE_PER_BUFFER: _DMO_INPUT_STREAM_INFO_FLAGS = _DMO_INPUT_STREAM_INFO_FLAGS(2i32);
pub const DMO_INPUT_STREAMF_FIXED_SAMPLE_SIZE: _DMO_INPUT_STREAM_INFO_FLAGS = _DMO_INPUT_STREAM_INFO_FLAGS(4i32);
pub const DMO_INPUT_STREAMF_HOLDS_BUFFERS: _DMO_INPUT_STREAM_INFO_FLAGS = _DMO_INPUT_STREAM_INFO_FLAGS(8i32);
impl ::core::convert::From<i32> for _DMO_INPUT_STREAM_INFO_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for _DMO_INPUT_STREAM_INFO_FLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct _DMO_OUTPUT_DATA_BUFFER_FLAGS(pub i32);
pub const DMO_OUTPUT_DATA_BUFFERF_SYNCPOINT: _DMO_OUTPUT_DATA_BUFFER_FLAGS = _DMO_OUTPUT_DATA_BUFFER_FLAGS(1i32);
pub const DMO_OUTPUT_DATA_BUFFERF_TIME: _DMO_OUTPUT_DATA_BUFFER_FLAGS = _DMO_OUTPUT_DATA_BUFFER_FLAGS(2i32);
pub const DMO_OUTPUT_DATA_BUFFERF_TIMELENGTH: _DMO_OUTPUT_DATA_BUFFER_FLAGS = _DMO_OUTPUT_DATA_BUFFER_FLAGS(4i32);
pub const DMO_OUTPUT_DATA_BUFFERF_DISCONTINUITY: _DMO_OUTPUT_DATA_BUFFER_FLAGS = _DMO_OUTPUT_DATA_BUFFER_FLAGS(8i32);
pub const DMO_OUTPUT_DATA_BUFFERF_INCOMPLETE: _DMO_OUTPUT_DATA_BUFFER_FLAGS = _DMO_OUTPUT_DATA_BUFFER_FLAGS(16777216i32);
impl ::core::convert::From<i32> for _DMO_OUTPUT_DATA_BUFFER_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for _DMO_OUTPUT_DATA_BUFFER_FLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct _DMO_OUTPUT_STREAM_INFO_FLAGS(pub i32);
pub const DMO_OUTPUT_STREAMF_WHOLE_SAMPLES: _DMO_OUTPUT_STREAM_INFO_FLAGS = _DMO_OUTPUT_STREAM_INFO_FLAGS(1i32);
pub const DMO_OUTPUT_STREAMF_SINGLE_SAMPLE_PER_BUFFER: _DMO_OUTPUT_STREAM_INFO_FLAGS = _DMO_OUTPUT_STREAM_INFO_FLAGS(2i32);
pub const DMO_OUTPUT_STREAMF_FIXED_SAMPLE_SIZE: _DMO_OUTPUT_STREAM_INFO_FLAGS = _DMO_OUTPUT_STREAM_INFO_FLAGS(4i32);
pub const DMO_OUTPUT_STREAMF_DISCARDABLE: _DMO_OUTPUT_STREAM_INFO_FLAGS = _DMO_OUTPUT_STREAM_INFO_FLAGS(8i32);
pub const DMO_OUTPUT_STREAMF_OPTIONAL: _DMO_OUTPUT_STREAM_INFO_FLAGS = _DMO_OUTPUT_STREAM_INFO_FLAGS(16i32);
impl ::core::convert::From<i32> for _DMO_OUTPUT_STREAM_INFO_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for _DMO_OUTPUT_STREAM_INFO_FLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct _DMO_PROCESS_OUTPUT_FLAGS(pub i32);
pub const DMO_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER: _DMO_PROCESS_OUTPUT_FLAGS = _DMO_PROCESS_OUTPUT_FLAGS(1i32);
impl ::core::convert::From<i32> for _DMO_PROCESS_OUTPUT_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for _DMO_PROCESS_OUTPUT_FLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct _DMO_QUALITY_STATUS_FLAGS(pub i32);
pub const DMO_QUALITY_STATUS_ENABLED: _DMO_QUALITY_STATUS_FLAGS = _DMO_QUALITY_STATUS_FLAGS(1i32);
impl ::core::convert::From<i32> for _DMO_QUALITY_STATUS_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for _DMO_QUALITY_STATUS_FLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct _DMO_SET_TYPE_FLAGS(pub i32);
pub const DMO_SET_TYPEF_TEST_ONLY: _DMO_SET_TYPE_FLAGS = _DMO_SET_TYPE_FLAGS(1i32);
pub const DMO_SET_TYPEF_CLEAR: _DMO_SET_TYPE_FLAGS = _DMO_SET_TYPE_FLAGS(2i32);
impl ::core::convert::From<i32> for _DMO_SET_TYPE_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for _DMO_SET_TYPE_FLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct _DMO_VIDEO_OUTPUT_STREAM_FLAGS(pub i32);
pub const DMO_VOSF_NEEDS_PREVIOUS_SAMPLE: _DMO_VIDEO_OUTPUT_STREAM_FLAGS = _DMO_VIDEO_OUTPUT_STREAM_FLAGS(1i32);
impl ::core::convert::From<i32> for _DMO_VIDEO_OUTPUT_STREAM_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for _DMO_VIDEO_OUTPUT_STREAM_FLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct _MFP_CREDENTIAL_FLAGS(pub i32);
pub const MFP_CREDENTIAL_PROMPT: _MFP_CREDENTIAL_FLAGS = _MFP_CREDENTIAL_FLAGS(1i32);
pub const MFP_CREDENTIAL_SAVE: _MFP_CREDENTIAL_FLAGS = _MFP_CREDENTIAL_FLAGS(2i32);
pub const MFP_CREDENTIAL_DO_NOT_CACHE: _MFP_CREDENTIAL_FLAGS = _MFP_CREDENTIAL_FLAGS(4i32);
pub const MFP_CREDENTIAL_CLEAR_TEXT: _MFP_CREDENTIAL_FLAGS = _MFP_CREDENTIAL_FLAGS(8i32);
pub const MFP_CREDENTIAL_PROXY: _MFP_CREDENTIAL_FLAGS = _MFP_CREDENTIAL_FLAGS(16i32);
pub const MFP_CREDENTIAL_LOGGED_ON_USER: _MFP_CREDENTIAL_FLAGS = _MFP_CREDENTIAL_FLAGS(32i32);
impl ::core::convert::From<i32> for _MFP_CREDENTIAL_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for _MFP_CREDENTIAL_FLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct _MFP_MEDIAITEM_CHARACTERISTICS(pub i32);
pub const MFP_MEDIAITEM_IS_LIVE: _MFP_MEDIAITEM_CHARACTERISTICS = _MFP_MEDIAITEM_CHARACTERISTICS(1i32);
pub const MFP_MEDIAITEM_CAN_SEEK: _MFP_MEDIAITEM_CHARACTERISTICS = _MFP_MEDIAITEM_CHARACTERISTICS(2i32);
pub const MFP_MEDIAITEM_CAN_PAUSE: _MFP_MEDIAITEM_CHARACTERISTICS = _MFP_MEDIAITEM_CHARACTERISTICS(4i32);
pub const MFP_MEDIAITEM_HAS_SLOW_SEEK: _MFP_MEDIAITEM_CHARACTERISTICS = _MFP_MEDIAITEM_CHARACTERISTICS(8i32);
impl ::core::convert::From<i32> for _MFP_MEDIAITEM_CHARACTERISTICS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for _MFP_MEDIAITEM_CHARACTERISTICS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct _MFT_ENUM_FLAG(pub i32);
pub const MFT_ENUM_FLAG_SYNCMFT: _MFT_ENUM_FLAG = _MFT_ENUM_FLAG(1i32);
pub const MFT_ENUM_FLAG_ASYNCMFT: _MFT_ENUM_FLAG = _MFT_ENUM_FLAG(2i32);
pub const MFT_ENUM_FLAG_HARDWARE: _MFT_ENUM_FLAG = _MFT_ENUM_FLAG(4i32);
pub const MFT_ENUM_FLAG_FIELDOFUSE: _MFT_ENUM_FLAG = _MFT_ENUM_FLAG(8i32);
pub const MFT_ENUM_FLAG_LOCALMFT: _MFT_ENUM_FLAG = _MFT_ENUM_FLAG(16i32);
pub const MFT_ENUM_FLAG_TRANSCODE_ONLY: _MFT_ENUM_FLAG = _MFT_ENUM_FLAG(32i32);
pub const MFT_ENUM_FLAG_SORTANDFILTER: _MFT_ENUM_FLAG = _MFT_ENUM_FLAG(64i32);
pub const MFT_ENUM_FLAG_SORTANDFILTER_APPROVED_ONLY: _MFT_ENUM_FLAG = _MFT_ENUM_FLAG(192i32);
pub const MFT_ENUM_FLAG_SORTANDFILTER_WEB_ONLY: _MFT_ENUM_FLAG = _MFT_ENUM_FLAG(320i32);
pub const MFT_ENUM_FLAG_SORTANDFILTER_WEB_ONLY_EDGEMODE: _MFT_ENUM_FLAG = _MFT_ENUM_FLAG(576i32);
pub const MFT_ENUM_FLAG_UNTRUSTED_STOREMFT: _MFT_ENUM_FLAG = _MFT_ENUM_FLAG(1024i32);
pub const MFT_ENUM_FLAG_ALL: _MFT_ENUM_FLAG = _MFT_ENUM_FLAG(63i32);
impl ::core::convert::From<i32> for _MFT_ENUM_FLAG {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for _MFT_ENUM_FLAG {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct _MFT_INPUT_DATA_BUFFER_FLAGS(pub i32);
pub const MFT_INPUT_DATA_BUFFER_PLACEHOLDER: _MFT_INPUT_DATA_BUFFER_FLAGS = _MFT_INPUT_DATA_BUFFER_FLAGS(-1i32);
impl ::core::convert::From<i32> for _MFT_INPUT_DATA_BUFFER_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for _MFT_INPUT_DATA_BUFFER_FLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct _MFT_INPUT_STATUS_FLAGS(pub i32);
pub const MFT_INPUT_STATUS_ACCEPT_DATA: _MFT_INPUT_STATUS_FLAGS = _MFT_INPUT_STATUS_FLAGS(1i32);
impl ::core::convert::From<i32> for _MFT_INPUT_STATUS_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for _MFT_INPUT_STATUS_FLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct _MFT_INPUT_STREAM_INFO_FLAGS(pub i32);
pub const MFT_INPUT_STREAM_WHOLE_SAMPLES: _MFT_INPUT_STREAM_INFO_FLAGS = _MFT_INPUT_STREAM_INFO_FLAGS(1i32);
pub const MFT_INPUT_STREAM_SINGLE_SAMPLE_PER_BUFFER: _MFT_INPUT_STREAM_INFO_FLAGS = _MFT_INPUT_STREAM_INFO_FLAGS(2i32);
pub const MFT_INPUT_STREAM_FIXED_SAMPLE_SIZE: _MFT_INPUT_STREAM_INFO_FLAGS = _MFT_INPUT_STREAM_INFO_FLAGS(4i32);
pub const MFT_INPUT_STREAM_HOLDS_BUFFERS: _MFT_INPUT_STREAM_INFO_FLAGS = _MFT_INPUT_STREAM_INFO_FLAGS(8i32);
pub const MFT_INPUT_STREAM_DOES_NOT_ADDREF: _MFT_INPUT_STREAM_INFO_FLAGS = _MFT_INPUT_STREAM_INFO_FLAGS(256i32);
pub const MFT_INPUT_STREAM_REMOVABLE: _MFT_INPUT_STREAM_INFO_FLAGS = _MFT_INPUT_STREAM_INFO_FLAGS(512i32);
pub const MFT_INPUT_STREAM_OPTIONAL: _MFT_INPUT_STREAM_INFO_FLAGS = _MFT_INPUT_STREAM_INFO_FLAGS(1024i32);
pub const MFT_INPUT_STREAM_PROCESSES_IN_PLACE: _MFT_INPUT_STREAM_INFO_FLAGS = _MFT_INPUT_STREAM_INFO_FLAGS(2048i32);
impl ::core::convert::From<i32> for _MFT_INPUT_STREAM_INFO_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for _MFT_INPUT_STREAM_INFO_FLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct _MFT_OUTPUT_DATA_BUFFER_FLAGS(pub i32);
pub const MFT_OUTPUT_DATA_BUFFER_INCOMPLETE: _MFT_OUTPUT_DATA_BUFFER_FLAGS = _MFT_OUTPUT_DATA_BUFFER_FLAGS(16777216i32);
pub const MFT_OUTPUT_DATA_BUFFER_FORMAT_CHANGE: _MFT_OUTPUT_DATA_BUFFER_FLAGS = _MFT_OUTPUT_DATA_BUFFER_FLAGS(256i32);
pub const MFT_OUTPUT_DATA_BUFFER_STREAM_END: _MFT_OUTPUT_DATA_BUFFER_FLAGS = _MFT_OUTPUT_DATA_BUFFER_FLAGS(512i32);
pub const MFT_OUTPUT_DATA_BUFFER_NO_SAMPLE: _MFT_OUTPUT_DATA_BUFFER_FLAGS = _MFT_OUTPUT_DATA_BUFFER_FLAGS(768i32);
impl ::core::convert::From<i32> for _MFT_OUTPUT_DATA_BUFFER_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for _MFT_OUTPUT_DATA_BUFFER_FLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct _MFT_OUTPUT_STATUS_FLAGS(pub i32);
pub const MFT_OUTPUT_STATUS_SAMPLE_READY: _MFT_OUTPUT_STATUS_FLAGS = _MFT_OUTPUT_STATUS_FLAGS(1i32);
impl ::core::convert::From<i32> for _MFT_OUTPUT_STATUS_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for _MFT_OUTPUT_STATUS_FLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct _MFT_OUTPUT_STREAM_INFO_FLAGS(pub i32);
pub const MFT_OUTPUT_STREAM_WHOLE_SAMPLES: _MFT_OUTPUT_STREAM_INFO_FLAGS = _MFT_OUTPUT_STREAM_INFO_FLAGS(1i32);
pub const MFT_OUTPUT_STREAM_SINGLE_SAMPLE_PER_BUFFER: _MFT_OUTPUT_STREAM_INFO_FLAGS = _MFT_OUTPUT_STREAM_INFO_FLAGS(2i32);
pub const MFT_OUTPUT_STREAM_FIXED_SAMPLE_SIZE: _MFT_OUTPUT_STREAM_INFO_FLAGS = _MFT_OUTPUT_STREAM_INFO_FLAGS(4i32);
pub const MFT_OUTPUT_STREAM_DISCARDABLE: _MFT_OUTPUT_STREAM_INFO_FLAGS = _MFT_OUTPUT_STREAM_INFO_FLAGS(8i32);
pub const MFT_OUTPUT_STREAM_OPTIONAL: _MFT_OUTPUT_STREAM_INFO_FLAGS = _MFT_OUTPUT_STREAM_INFO_FLAGS(16i32);
pub const MFT_OUTPUT_STREAM_PROVIDES_SAMPLES: _MFT_OUTPUT_STREAM_INFO_FLAGS = _MFT_OUTPUT_STREAM_INFO_FLAGS(256i32);
pub const MFT_OUTPUT_STREAM_CAN_PROVIDE_SAMPLES: _MFT_OUTPUT_STREAM_INFO_FLAGS = _MFT_OUTPUT_STREAM_INFO_FLAGS(512i32);
pub const MFT_OUTPUT_STREAM_LAZY_READ: _MFT_OUTPUT_STREAM_INFO_FLAGS = _MFT_OUTPUT_STREAM_INFO_FLAGS(1024i32);
pub const MFT_OUTPUT_STREAM_REMOVABLE: _MFT_OUTPUT_STREAM_INFO_FLAGS = _MFT_OUTPUT_STREAM_INFO_FLAGS(2048i32);
impl ::core::convert::From<i32> for _MFT_OUTPUT_STREAM_INFO_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for _MFT_OUTPUT_STREAM_INFO_FLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct _MFT_PROCESS_OUTPUT_FLAGS(pub i32);
pub const MFT_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER: _MFT_PROCESS_OUTPUT_FLAGS = _MFT_PROCESS_OUTPUT_FLAGS(1i32);
pub const MFT_PROCESS_OUTPUT_REGENERATE_LAST_OUTPUT: _MFT_PROCESS_OUTPUT_FLAGS = _MFT_PROCESS_OUTPUT_FLAGS(2i32);
impl ::core::convert::From<i32> for _MFT_PROCESS_OUTPUT_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for _MFT_PROCESS_OUTPUT_FLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct _MFT_PROCESS_OUTPUT_STATUS(pub i32);
pub const MFT_PROCESS_OUTPUT_STATUS_NEW_STREAMS: _MFT_PROCESS_OUTPUT_STATUS = _MFT_PROCESS_OUTPUT_STATUS(256i32);
impl ::core::convert::From<i32> for _MFT_PROCESS_OUTPUT_STATUS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for _MFT_PROCESS_OUTPUT_STATUS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct _MFT_SET_TYPE_FLAGS(pub i32);
pub const MFT_SET_TYPE_TEST_ONLY: _MFT_SET_TYPE_FLAGS = _MFT_SET_TYPE_FLAGS(1i32);
impl ::core::convert::From<i32> for _MFT_SET_TYPE_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for _MFT_SET_TYPE_FLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct __MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0001(pub i32);
pub const MFVirtualCameraType_SoftwareCameraSource: __MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0001 = __MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0001(0i32);
impl ::core::convert::From<i32> for __MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0001 {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for __MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0001 {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct __MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0002(pub i32);
pub const MFVirtualCameraLifetime_Session: __MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0002 = __MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0002(0i32);
pub const MFVirtualCameraLifetime_System: __MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0002 = __MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0002(1i32);
impl ::core::convert::From<i32> for __MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0002 {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for __MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0002 {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct __MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0003(pub i32);
pub const MFVirtualCameraAccess_CurrentUser: __MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0003 = __MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0003(0i32);
pub const MFVirtualCameraAccess_AllUsers: __MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0003 = __MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0003(1i32);
impl ::core::convert::From<i32> for __MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0003 {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for __MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0003 {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVAudioChannelConfig(pub i32);
pub const eAVAudioChannelConfig_FRONT_LEFT: eAVAudioChannelConfig = eAVAudioChannelConfig(1i32);
pub const eAVAudioChannelConfig_FRONT_RIGHT: eAVAudioChannelConfig = eAVAudioChannelConfig(2i32);
pub const eAVAudioChannelConfig_FRONT_CENTER: eAVAudioChannelConfig = eAVAudioChannelConfig(4i32);
pub const eAVAudioChannelConfig_LOW_FREQUENCY: eAVAudioChannelConfig = eAVAudioChannelConfig(8i32);
pub const eAVAudioChannelConfig_BACK_LEFT: eAVAudioChannelConfig = eAVAudioChannelConfig(16i32);
pub const eAVAudioChannelConfig_BACK_RIGHT: eAVAudioChannelConfig = eAVAudioChannelConfig(32i32);
pub const eAVAudioChannelConfig_FRONT_LEFT_OF_CENTER: eAVAudioChannelConfig = eAVAudioChannelConfig(64i32);
pub const eAVAudioChannelConfig_FRONT_RIGHT_OF_CENTER: eAVAudioChannelConfig = eAVAudioChannelConfig(128i32);
pub const eAVAudioChannelConfig_BACK_CENTER: eAVAudioChannelConfig = eAVAudioChannelConfig(256i32);
pub const eAVAudioChannelConfig_SIDE_LEFT: eAVAudioChannelConfig = eAVAudioChannelConfig(512i32);
pub const eAVAudioChannelConfig_SIDE_RIGHT: eAVAudioChannelConfig = eAVAudioChannelConfig(1024i32);
pub const eAVAudioChannelConfig_TOP_CENTER: eAVAudioChannelConfig = eAVAudioChannelConfig(2048i32);
pub const eAVAudioChannelConfig_TOP_FRONT_LEFT: eAVAudioChannelConfig = eAVAudioChannelConfig(4096i32);
pub const eAVAudioChannelConfig_TOP_FRONT_CENTER: eAVAudioChannelConfig = eAVAudioChannelConfig(8192i32);
pub const eAVAudioChannelConfig_TOP_FRONT_RIGHT: eAVAudioChannelConfig = eAVAudioChannelConfig(16384i32);
pub const eAVAudioChannelConfig_TOP_BACK_LEFT: eAVAudioChannelConfig = eAVAudioChannelConfig(32768i32);
pub const eAVAudioChannelConfig_TOP_BACK_CENTER: eAVAudioChannelConfig = eAVAudioChannelConfig(65536i32);
pub const eAVAudioChannelConfig_TOP_BACK_RIGHT: eAVAudioChannelConfig = eAVAudioChannelConfig(131072i32);
impl ::core::convert::From<i32> for eAVAudioChannelConfig {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVAudioChannelConfig {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVDDSurroundMode(pub i32);
pub const eAVDDSurroundMode_NotIndicated: eAVDDSurroundMode = eAVDDSurroundMode(0i32);
pub const eAVDDSurroundMode_No: eAVDDSurroundMode = eAVDDSurroundMode(1i32);
pub const eAVDDSurroundMode_Yes: eAVDDSurroundMode = eAVDDSurroundMode(2i32);
impl ::core::convert::From<i32> for eAVDDSurroundMode {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVDDSurroundMode {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVDSPLoudnessEqualization(pub i32);
pub const eAVDSPLoudnessEqualization_OFF: eAVDSPLoudnessEqualization = eAVDSPLoudnessEqualization(0i32);
pub const eAVDSPLoudnessEqualization_ON: eAVDSPLoudnessEqualization = eAVDSPLoudnessEqualization(1i32);
pub const eAVDSPLoudnessEqualization_AUTO: eAVDSPLoudnessEqualization = eAVDSPLoudnessEqualization(2i32);
impl ::core::convert::From<i32> for eAVDSPLoudnessEqualization {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVDSPLoudnessEqualization {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVDSPSpeakerFill(pub i32);
pub const eAVDSPSpeakerFill_OFF: eAVDSPSpeakerFill = eAVDSPSpeakerFill(0i32);
pub const eAVDSPSpeakerFill_ON: eAVDSPSpeakerFill = eAVDSPSpeakerFill(1i32);
pub const eAVDSPSpeakerFill_AUTO: eAVDSPSpeakerFill = eAVDSPSpeakerFill(2i32);
impl ::core::convert::From<i32> for eAVDSPSpeakerFill {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVDSPSpeakerFill {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVDecAACDownmixMode(pub i32);
pub const eAVDecAACUseISODownmix: eAVDecAACDownmixMode = eAVDecAACDownmixMode(0i32);
pub const eAVDecAACUseARIBDownmix: eAVDecAACDownmixMode = eAVDecAACDownmixMode(1i32);
impl ::core::convert::From<i32> for eAVDecAACDownmixMode {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVDecAACDownmixMode {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVDecAudioDualMono(pub i32);
pub const eAVDecAudioDualMono_IsNotDualMono: eAVDecAudioDualMono = eAVDecAudioDualMono(0i32);
pub const eAVDecAudioDualMono_IsDualMono: eAVDecAudioDualMono = eAVDecAudioDualMono(1i32);
pub const eAVDecAudioDualMono_UnSpecified: eAVDecAudioDualMono = eAVDecAudioDualMono(2i32);
impl ::core::convert::From<i32> for eAVDecAudioDualMono {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVDecAudioDualMono {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVDecAudioDualMonoReproMode(pub i32);
pub const eAVDecAudioDualMonoReproMode_STEREO: eAVDecAudioDualMonoReproMode = eAVDecAudioDualMonoReproMode(0i32);
pub const eAVDecAudioDualMonoReproMode_LEFT_MONO: eAVDecAudioDualMonoReproMode = eAVDecAudioDualMonoReproMode(1i32);
pub const eAVDecAudioDualMonoReproMode_RIGHT_MONO: eAVDecAudioDualMonoReproMode = eAVDecAudioDualMonoReproMode(2i32);
pub const eAVDecAudioDualMonoReproMode_MIX_MONO: eAVDecAudioDualMonoReproMode = eAVDecAudioDualMonoReproMode(3i32);
impl ::core::convert::From<i32> for eAVDecAudioDualMonoReproMode {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVDecAudioDualMonoReproMode {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVDecDDMatrixDecodingMode(pub i32);
pub const eAVDecDDMatrixDecodingMode_OFF: eAVDecDDMatrixDecodingMode = eAVDecDDMatrixDecodingMode(0i32);
pub const eAVDecDDMatrixDecodingMode_ON: eAVDecDDMatrixDecodingMode = eAVDecDDMatrixDecodingMode(1i32);
pub const eAVDecDDMatrixDecodingMode_AUTO: eAVDecDDMatrixDecodingMode = eAVDecDDMatrixDecodingMode(2i32);
impl ::core::convert::From<i32> for eAVDecDDMatrixDecodingMode {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVDecDDMatrixDecodingMode {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVDecDDOperationalMode(pub i32);
pub const eAVDecDDOperationalMode_NONE: eAVDecDDOperationalMode = eAVDecDDOperationalMode(0i32);
pub const eAVDecDDOperationalMode_LINE: eAVDecDDOperationalMode = eAVDecDDOperationalMode(1i32);
pub const eAVDecDDOperationalMode_RF: eAVDecDDOperationalMode = eAVDecDDOperationalMode(2i32);
pub const eAVDecDDOperationalMode_CUSTOM0: eAVDecDDOperationalMode = eAVDecDDOperationalMode(3i32);
pub const eAVDecDDOperationalMode_CUSTOM1: eAVDecDDOperationalMode = eAVDecDDOperationalMode(4i32);
pub const eAVDecDDOperationalMode_PORTABLE8: eAVDecDDOperationalMode = eAVDecDDOperationalMode(5i32);
pub const eAVDecDDOperationalMode_PORTABLE11: eAVDecDDOperationalMode = eAVDecDDOperationalMode(6i32);
pub const eAVDecDDOperationalMode_PORTABLE14: eAVDecDDOperationalMode = eAVDecDDOperationalMode(7i32);
impl ::core::convert::From<i32> for eAVDecDDOperationalMode {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVDecDDOperationalMode {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVDecDDStereoDownMixMode(pub i32);
pub const eAVDecDDStereoDownMixMode_Auto: eAVDecDDStereoDownMixMode = eAVDecDDStereoDownMixMode(0i32);
pub const eAVDecDDStereoDownMixMode_LtRt: eAVDecDDStereoDownMixMode = eAVDecDDStereoDownMixMode(1i32);
pub const eAVDecDDStereoDownMixMode_LoRo: eAVDecDDStereoDownMixMode = eAVDecDDStereoDownMixMode(2i32);
impl ::core::convert::From<i32> for eAVDecDDStereoDownMixMode {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVDecDDStereoDownMixMode {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVDecHEAACDynamicRangeControl(pub i32);
pub const eAVDecHEAACDynamicRangeControl_OFF: eAVDecHEAACDynamicRangeControl = eAVDecHEAACDynamicRangeControl(0i32);
pub const eAVDecHEAACDynamicRangeControl_ON: eAVDecHEAACDynamicRangeControl = eAVDecHEAACDynamicRangeControl(1i32);
impl ::core::convert::From<i32> for eAVDecHEAACDynamicRangeControl {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVDecHEAACDynamicRangeControl {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVDecVideoCodecType(pub i32);
pub const eAVDecVideoCodecType_NOTPLAYING: eAVDecVideoCodecType = eAVDecVideoCodecType(0i32);
pub const eAVDecVideoCodecType_MPEG2: eAVDecVideoCodecType = eAVDecVideoCodecType(1i32);
pub const eAVDecVideoCodecType_H264: eAVDecVideoCodecType = eAVDecVideoCodecType(2i32);
impl ::core::convert::From<i32> for eAVDecVideoCodecType {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVDecVideoCodecType {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVDecVideoDXVABusEncryption(pub i32);
pub const eAVDecVideoDXVABusEncryption_NONE: eAVDecVideoDXVABusEncryption = eAVDecVideoDXVABusEncryption(0i32);
pub const eAVDecVideoDXVABusEncryption_PRIVATE: eAVDecVideoDXVABusEncryption = eAVDecVideoDXVABusEncryption(1i32);
pub const eAVDecVideoDXVABusEncryption_AES: eAVDecVideoDXVABusEncryption = eAVDecVideoDXVABusEncryption(2i32);
impl ::core::convert::From<i32> for eAVDecVideoDXVABusEncryption {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVDecVideoDXVABusEncryption {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVDecVideoDXVAMode(pub i32);
pub const eAVDecVideoDXVAMode_NOTPLAYING: eAVDecVideoDXVAMode = eAVDecVideoDXVAMode(0i32);
pub const eAVDecVideoDXVAMode_SW: eAVDecVideoDXVAMode = eAVDecVideoDXVAMode(1i32);
pub const eAVDecVideoDXVAMode_MC: eAVDecVideoDXVAMode = eAVDecVideoDXVAMode(2i32);
pub const eAVDecVideoDXVAMode_IDCT: eAVDecVideoDXVAMode = eAVDecVideoDXVAMode(3i32);
pub const eAVDecVideoDXVAMode_VLD: eAVDecVideoDXVAMode = eAVDecVideoDXVAMode(4i32);
impl ::core::convert::From<i32> for eAVDecVideoDXVAMode {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVDecVideoDXVAMode {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVDecVideoH264ErrorConcealment(pub i32);
pub const eErrorConcealmentTypeDrop: eAVDecVideoH264ErrorConcealment = eAVDecVideoH264ErrorConcealment(0i32);
pub const eErrorConcealmentTypeBasic: eAVDecVideoH264ErrorConcealment = eAVDecVideoH264ErrorConcealment(1i32);
pub const eErrorConcealmentTypeAdvanced: eAVDecVideoH264ErrorConcealment = eAVDecVideoH264ErrorConcealment(2i32);
pub const eErrorConcealmentTypeDXVASetBlack: eAVDecVideoH264ErrorConcealment = eAVDecVideoH264ErrorConcealment(3i32);
impl ::core::convert::From<i32> for eAVDecVideoH264ErrorConcealment {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVDecVideoH264ErrorConcealment {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVDecVideoInputScanType(pub i32);
pub const eAVDecVideoInputScan_Unknown: eAVDecVideoInputScanType = eAVDecVideoInputScanType(0i32);
pub const eAVDecVideoInputScan_Progressive: eAVDecVideoInputScanType = eAVDecVideoInputScanType(1i32);
pub const eAVDecVideoInputScan_Interlaced_UpperFieldFirst: eAVDecVideoInputScanType = eAVDecVideoInputScanType(2i32);
pub const eAVDecVideoInputScan_Interlaced_LowerFieldFirst: eAVDecVideoInputScanType = eAVDecVideoInputScanType(3i32);
impl ::core::convert::From<i32> for eAVDecVideoInputScanType {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVDecVideoInputScanType {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVDecVideoMPEG2ErrorConcealment(pub i32);
pub const eErrorConcealmentOff: eAVDecVideoMPEG2ErrorConcealment = eAVDecVideoMPEG2ErrorConcealment(0i32);
pub const eErrorConcealmentOn: eAVDecVideoMPEG2ErrorConcealment = eAVDecVideoMPEG2ErrorConcealment(1i32);
impl ::core::convert::From<i32> for eAVDecVideoMPEG2ErrorConcealment {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVDecVideoMPEG2ErrorConcealment {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVDecVideoSWPowerLevel(pub i32);
pub const eAVDecVideoSWPowerLevel_BatteryLife: eAVDecVideoSWPowerLevel = eAVDecVideoSWPowerLevel(0i32);
pub const eAVDecVideoSWPowerLevel_Balanced: eAVDecVideoSWPowerLevel = eAVDecVideoSWPowerLevel(50i32);
pub const eAVDecVideoSWPowerLevel_VideoQuality: eAVDecVideoSWPowerLevel = eAVDecVideoSWPowerLevel(100i32);
impl ::core::convert::From<i32> for eAVDecVideoSWPowerLevel {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVDecVideoSWPowerLevel {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVDecVideoSoftwareDeinterlaceMode(pub i32);
pub const eAVDecVideoSoftwareDeinterlaceMode_NoDeinterlacing: eAVDecVideoSoftwareDeinterlaceMode = eAVDecVideoSoftwareDeinterlaceMode(0i32);
pub const eAVDecVideoSoftwareDeinterlaceMode_ProgressiveDeinterlacing: eAVDecVideoSoftwareDeinterlaceMode = eAVDecVideoSoftwareDeinterlaceMode(1i32);
pub const eAVDecVideoSoftwareDeinterlaceMode_BOBDeinterlacing: eAVDecVideoSoftwareDeinterlaceMode = eAVDecVideoSoftwareDeinterlaceMode(2i32);
pub const eAVDecVideoSoftwareDeinterlaceMode_SmartBOBDeinterlacing: eAVDecVideoSoftwareDeinterlaceMode = eAVDecVideoSoftwareDeinterlaceMode(3i32);
impl ::core::convert::From<i32> for eAVDecVideoSoftwareDeinterlaceMode {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVDecVideoSoftwareDeinterlaceMode {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncAdaptiveMode(pub i32);
pub const eAVEncAdaptiveMode_None: eAVEncAdaptiveMode = eAVEncAdaptiveMode(0i32);
pub const eAVEncAdaptiveMode_Resolution: eAVEncAdaptiveMode = eAVEncAdaptiveMode(1i32);
pub const eAVEncAdaptiveMode_FrameRate: eAVEncAdaptiveMode = eAVEncAdaptiveMode(2i32);
impl ::core::convert::From<i32> for eAVEncAdaptiveMode {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncAdaptiveMode {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncAudioDualMono(pub i32);
pub const eAVEncAudioDualMono_SameAsInput: eAVEncAudioDualMono = eAVEncAudioDualMono(0i32);
pub const eAVEncAudioDualMono_Off: eAVEncAudioDualMono = eAVEncAudioDualMono(1i32);
pub const eAVEncAudioDualMono_On: eAVEncAudioDualMono = eAVEncAudioDualMono(2i32);
impl ::core::convert::From<i32> for eAVEncAudioDualMono {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncAudioDualMono {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncAudioInputContent(pub i32);
pub const AVEncAudioInputContent_Unknown: eAVEncAudioInputContent = eAVEncAudioInputContent(0i32);
pub const AVEncAudioInputContent_Voice: eAVEncAudioInputContent = eAVEncAudioInputContent(1i32);
pub const AVEncAudioInputContent_Music: eAVEncAudioInputContent = eAVEncAudioInputContent(2i32);
impl ::core::convert::From<i32> for eAVEncAudioInputContent {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncAudioInputContent {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncChromaEncodeMode(pub i32);
pub const eAVEncChromaEncodeMode_420: eAVEncChromaEncodeMode = eAVEncChromaEncodeMode(0i32);
pub const eAVEncChromaEncodeMode_444: eAVEncChromaEncodeMode = eAVEncChromaEncodeMode(1i32);
pub const eAVEncChromaEncodeMode_444_v2: eAVEncChromaEncodeMode = eAVEncChromaEncodeMode(2i32);
impl ::core::convert::From<i32> for eAVEncChromaEncodeMode {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncChromaEncodeMode {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncCommonRateControlMode(pub i32);
pub const eAVEncCommonRateControlMode_CBR: eAVEncCommonRateControlMode = eAVEncCommonRateControlMode(0i32);
pub const eAVEncCommonRateControlMode_PeakConstrainedVBR: eAVEncCommonRateControlMode = eAVEncCommonRateControlMode(1i32);
pub const eAVEncCommonRateControlMode_UnconstrainedVBR: eAVEncCommonRateControlMode = eAVEncCommonRateControlMode(2i32);
pub const eAVEncCommonRateControlMode_Quality: eAVEncCommonRateControlMode = eAVEncCommonRateControlMode(3i32);
pub const eAVEncCommonRateControlMode_LowDelayVBR: eAVEncCommonRateControlMode = eAVEncCommonRateControlMode(4i32);
pub const eAVEncCommonRateControlMode_GlobalVBR: eAVEncCommonRateControlMode = eAVEncCommonRateControlMode(5i32);
pub const eAVEncCommonRateControlMode_GlobalLowDelayVBR: eAVEncCommonRateControlMode = eAVEncCommonRateControlMode(6i32);
impl ::core::convert::From<i32> for eAVEncCommonRateControlMode {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncCommonRateControlMode {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncCommonStreamEndHandling(pub i32);
pub const eAVEncCommonStreamEndHandling_DiscardPartial: eAVEncCommonStreamEndHandling = eAVEncCommonStreamEndHandling(0i32);
pub const eAVEncCommonStreamEndHandling_EnsureComplete: eAVEncCommonStreamEndHandling = eAVEncCommonStreamEndHandling(1i32);
impl ::core::convert::From<i32> for eAVEncCommonStreamEndHandling {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncCommonStreamEndHandling {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncDDAtoDConverterType(pub i32);
pub const eAVEncDDAtoDConverterType_Standard: eAVEncDDAtoDConverterType = eAVEncDDAtoDConverterType(0i32);
pub const eAVEncDDAtoDConverterType_HDCD: eAVEncDDAtoDConverterType = eAVEncDDAtoDConverterType(1i32);
impl ::core::convert::From<i32> for eAVEncDDAtoDConverterType {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncDDAtoDConverterType {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncDDDynamicRangeCompressionControl(pub i32);
pub const eAVEncDDDynamicRangeCompressionControl_None: eAVEncDDDynamicRangeCompressionControl = eAVEncDDDynamicRangeCompressionControl(0i32);
pub const eAVEncDDDynamicRangeCompressionControl_FilmStandard: eAVEncDDDynamicRangeCompressionControl = eAVEncDDDynamicRangeCompressionControl(1i32);
pub const eAVEncDDDynamicRangeCompressionControl_FilmLight: eAVEncDDDynamicRangeCompressionControl = eAVEncDDDynamicRangeCompressionControl(2i32);
pub const eAVEncDDDynamicRangeCompressionControl_MusicStandard: eAVEncDDDynamicRangeCompressionControl = eAVEncDDDynamicRangeCompressionControl(3i32);
pub const eAVEncDDDynamicRangeCompressionControl_MusicLight: eAVEncDDDynamicRangeCompressionControl = eAVEncDDDynamicRangeCompressionControl(4i32);
pub const eAVEncDDDynamicRangeCompressionControl_Speech: eAVEncDDDynamicRangeCompressionControl = eAVEncDDDynamicRangeCompressionControl(5i32);
impl ::core::convert::From<i32> for eAVEncDDDynamicRangeCompressionControl {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncDDDynamicRangeCompressionControl {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncDDHeadphoneMode(pub i32);
pub const eAVEncDDHeadphoneMode_NotIndicated: eAVEncDDHeadphoneMode = eAVEncDDHeadphoneMode(0i32);
pub const eAVEncDDHeadphoneMode_NotEncoded: eAVEncDDHeadphoneMode = eAVEncDDHeadphoneMode(1i32);
pub const eAVEncDDHeadphoneMode_Encoded: eAVEncDDHeadphoneMode = eAVEncDDHeadphoneMode(2i32);
impl ::core::convert::From<i32> for eAVEncDDHeadphoneMode {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncDDHeadphoneMode {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncDDPreferredStereoDownMixMode(pub i32);
pub const eAVEncDDPreferredStereoDownMixMode_LtRt: eAVEncDDPreferredStereoDownMixMode = eAVEncDDPreferredStereoDownMixMode(0i32);
pub const eAVEncDDPreferredStereoDownMixMode_LoRo: eAVEncDDPreferredStereoDownMixMode = eAVEncDDPreferredStereoDownMixMode(1i32);
impl ::core::convert::From<i32> for eAVEncDDPreferredStereoDownMixMode {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncDDPreferredStereoDownMixMode {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncDDProductionRoomType(pub i32);
pub const eAVEncDDProductionRoomType_NotIndicated: eAVEncDDProductionRoomType = eAVEncDDProductionRoomType(0i32);
pub const eAVEncDDProductionRoomType_Large: eAVEncDDProductionRoomType = eAVEncDDProductionRoomType(1i32);
pub const eAVEncDDProductionRoomType_Small: eAVEncDDProductionRoomType = eAVEncDDProductionRoomType(2i32);
impl ::core::convert::From<i32> for eAVEncDDProductionRoomType {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncDDProductionRoomType {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncDDService(pub i32);
pub const eAVEncDDService_CM: eAVEncDDService = eAVEncDDService(0i32);
pub const eAVEncDDService_ME: eAVEncDDService = eAVEncDDService(1i32);
pub const eAVEncDDService_VI: eAVEncDDService = eAVEncDDService(2i32);
pub const eAVEncDDService_HI: eAVEncDDService = eAVEncDDService(3i32);
pub const eAVEncDDService_D: eAVEncDDService = eAVEncDDService(4i32);
pub const eAVEncDDService_C: eAVEncDDService = eAVEncDDService(5i32);
pub const eAVEncDDService_E: eAVEncDDService = eAVEncDDService(6i32);
pub const eAVEncDDService_VO: eAVEncDDService = eAVEncDDService(7i32);
impl ::core::convert::From<i32> for eAVEncDDService {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncDDService {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncDDSurroundExMode(pub i32);
pub const eAVEncDDSurroundExMode_NotIndicated: eAVEncDDSurroundExMode = eAVEncDDSurroundExMode(0i32);
pub const eAVEncDDSurroundExMode_No: eAVEncDDSurroundExMode = eAVEncDDSurroundExMode(1i32);
pub const eAVEncDDSurroundExMode_Yes: eAVEncDDSurroundExMode = eAVEncDDSurroundExMode(2i32);
impl ::core::convert::From<i32> for eAVEncDDSurroundExMode {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncDDSurroundExMode {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncH263PictureType(pub i32);
pub const eAVEncH263PictureType_I: eAVEncH263PictureType = eAVEncH263PictureType(0i32);
pub const eAVEncH263PictureType_P: eAVEncH263PictureType = eAVEncH263PictureType(1i32);
pub const eAVEncH263PictureType_B: eAVEncH263PictureType = eAVEncH263PictureType(2i32);
impl ::core::convert::From<i32> for eAVEncH263PictureType {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncH263PictureType {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncH263VLevel(pub i32);
pub const eAVEncH263VLevel1: eAVEncH263VLevel = eAVEncH263VLevel(10i32);
pub const eAVEncH263VLevel2: eAVEncH263VLevel = eAVEncH263VLevel(20i32);
pub const eAVEncH263VLevel3: eAVEncH263VLevel = eAVEncH263VLevel(30i32);
pub const eAVEncH263VLevel4: eAVEncH263VLevel = eAVEncH263VLevel(40i32);
pub const eAVEncH263VLevel4_5: eAVEncH263VLevel = eAVEncH263VLevel(45i32);
pub const eAVEncH263VLevel5: eAVEncH263VLevel = eAVEncH263VLevel(50i32);
pub const eAVEncH263VLevel6: eAVEncH263VLevel = eAVEncH263VLevel(60i32);
pub const eAVEncH263VLevel7: eAVEncH263VLevel = eAVEncH263VLevel(70i32);
impl ::core::convert::From<i32> for eAVEncH263VLevel {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncH263VLevel {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncH263VProfile(pub i32);
pub const eAVEncH263VProfile_Base: eAVEncH263VProfile = eAVEncH263VProfile(0i32);
pub const eAVEncH263VProfile_CompatibilityV2: eAVEncH263VProfile = eAVEncH263VProfile(1i32);
pub const eAVEncH263VProfile_CompatibilityV1: eAVEncH263VProfile = eAVEncH263VProfile(2i32);
pub const eAVEncH263VProfile_WirelessV2: eAVEncH263VProfile = eAVEncH263VProfile(3i32);
pub const eAVEncH263VProfile_WirelessV3: eAVEncH263VProfile = eAVEncH263VProfile(4i32);
pub const eAVEncH263VProfile_HighCompression: eAVEncH263VProfile = eAVEncH263VProfile(5i32);
pub const eAVEncH263VProfile_Internet: eAVEncH263VProfile = eAVEncH263VProfile(6i32);
pub const eAVEncH263VProfile_Interlace: eAVEncH263VProfile = eAVEncH263VProfile(7i32);
pub const eAVEncH263VProfile_HighLatency: eAVEncH263VProfile = eAVEncH263VProfile(8i32);
impl ::core::convert::From<i32> for eAVEncH263VProfile {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncH263VProfile {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncH264PictureType(pub i32);
pub const eAVEncH264PictureType_IDR: eAVEncH264PictureType = eAVEncH264PictureType(0i32);
pub const eAVEncH264PictureType_P: eAVEncH264PictureType = eAVEncH264PictureType(1i32);
pub const eAVEncH264PictureType_B: eAVEncH264PictureType = eAVEncH264PictureType(2i32);
impl ::core::convert::From<i32> for eAVEncH264PictureType {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncH264PictureType {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncH264VLevel(pub i32);
pub const eAVEncH264VLevel1: eAVEncH264VLevel = eAVEncH264VLevel(10i32);
pub const eAVEncH264VLevel1_b: eAVEncH264VLevel = eAVEncH264VLevel(11i32);
pub const eAVEncH264VLevel1_1: eAVEncH264VLevel = eAVEncH264VLevel(11i32);
pub const eAVEncH264VLevel1_2: eAVEncH264VLevel = eAVEncH264VLevel(12i32);
pub const eAVEncH264VLevel1_3: eAVEncH264VLevel = eAVEncH264VLevel(13i32);
pub const eAVEncH264VLevel2: eAVEncH264VLevel = eAVEncH264VLevel(20i32);
pub const eAVEncH264VLevel2_1: eAVEncH264VLevel = eAVEncH264VLevel(21i32);
pub const eAVEncH264VLevel2_2: eAVEncH264VLevel = eAVEncH264VLevel(22i32);
pub const eAVEncH264VLevel3: eAVEncH264VLevel = eAVEncH264VLevel(30i32);
pub const eAVEncH264VLevel3_1: eAVEncH264VLevel = eAVEncH264VLevel(31i32);
pub const eAVEncH264VLevel3_2: eAVEncH264VLevel = eAVEncH264VLevel(32i32);
pub const eAVEncH264VLevel4: eAVEncH264VLevel = eAVEncH264VLevel(40i32);
pub const eAVEncH264VLevel4_1: eAVEncH264VLevel = eAVEncH264VLevel(41i32);
pub const eAVEncH264VLevel4_2: eAVEncH264VLevel = eAVEncH264VLevel(42i32);
pub const eAVEncH264VLevel5: eAVEncH264VLevel = eAVEncH264VLevel(50i32);
pub const eAVEncH264VLevel5_1: eAVEncH264VLevel = eAVEncH264VLevel(51i32);
pub const eAVEncH264VLevel5_2: eAVEncH264VLevel = eAVEncH264VLevel(52i32);
impl ::core::convert::From<i32> for eAVEncH264VLevel {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncH264VLevel {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncH264VProfile(pub i32);
pub const eAVEncH264VProfile_unknown: eAVEncH264VProfile = eAVEncH264VProfile(0i32);
pub const eAVEncH264VProfile_Simple: eAVEncH264VProfile = eAVEncH264VProfile(66i32);
pub const eAVEncH264VProfile_Base: eAVEncH264VProfile = eAVEncH264VProfile(66i32);
pub const eAVEncH264VProfile_Main: eAVEncH264VProfile = eAVEncH264VProfile(77i32);
pub const eAVEncH264VProfile_High: eAVEncH264VProfile = eAVEncH264VProfile(100i32);
pub const eAVEncH264VProfile_422: eAVEncH264VProfile = eAVEncH264VProfile(122i32);
pub const eAVEncH264VProfile_High10: eAVEncH264VProfile = eAVEncH264VProfile(110i32);
pub const eAVEncH264VProfile_444: eAVEncH264VProfile = eAVEncH264VProfile(244i32);
pub const eAVEncH264VProfile_Extended: eAVEncH264VProfile = eAVEncH264VProfile(88i32);
pub const eAVEncH264VProfile_ScalableBase: eAVEncH264VProfile = eAVEncH264VProfile(83i32);
pub const eAVEncH264VProfile_ScalableHigh: eAVEncH264VProfile = eAVEncH264VProfile(86i32);
pub const eAVEncH264VProfile_MultiviewHigh: eAVEncH264VProfile = eAVEncH264VProfile(118i32);
pub const eAVEncH264VProfile_StereoHigh: eAVEncH264VProfile = eAVEncH264VProfile(128i32);
pub const eAVEncH264VProfile_ConstrainedBase: eAVEncH264VProfile = eAVEncH264VProfile(256i32);
pub const eAVEncH264VProfile_UCConstrainedHigh: eAVEncH264VProfile = eAVEncH264VProfile(257i32);
pub const eAVEncH264VProfile_UCScalableConstrainedBase: eAVEncH264VProfile = eAVEncH264VProfile(258i32);
pub const eAVEncH264VProfile_UCScalableConstrainedHigh: eAVEncH264VProfile = eAVEncH264VProfile(259i32);
impl ::core::convert::From<i32> for eAVEncH264VProfile {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncH264VProfile {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncH265VLevel(pub i32);
pub const eAVEncH265VLevel1: eAVEncH265VLevel = eAVEncH265VLevel(30i32);
pub const eAVEncH265VLevel2: eAVEncH265VLevel = eAVEncH265VLevel(60i32);
pub const eAVEncH265VLevel2_1: eAVEncH265VLevel = eAVEncH265VLevel(63i32);
pub const eAVEncH265VLevel3: eAVEncH265VLevel = eAVEncH265VLevel(90i32);
pub const eAVEncH265VLevel3_1: eAVEncH265VLevel = eAVEncH265VLevel(93i32);
pub const eAVEncH265VLevel4: eAVEncH265VLevel = eAVEncH265VLevel(120i32);
pub const eAVEncH265VLevel4_1: eAVEncH265VLevel = eAVEncH265VLevel(123i32);
pub const eAVEncH265VLevel5: eAVEncH265VLevel = eAVEncH265VLevel(150i32);
pub const eAVEncH265VLevel5_1: eAVEncH265VLevel = eAVEncH265VLevel(153i32);
pub const eAVEncH265VLevel5_2: eAVEncH265VLevel = eAVEncH265VLevel(156i32);
pub const eAVEncH265VLevel6: eAVEncH265VLevel = eAVEncH265VLevel(180i32);
pub const eAVEncH265VLevel6_1: eAVEncH265VLevel = eAVEncH265VLevel(183i32);
pub const eAVEncH265VLevel6_2: eAVEncH265VLevel = eAVEncH265VLevel(186i32);
impl ::core::convert::From<i32> for eAVEncH265VLevel {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncH265VLevel {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncH265VProfile(pub i32);
pub const eAVEncH265VProfile_unknown: eAVEncH265VProfile = eAVEncH265VProfile(0i32);
pub const eAVEncH265VProfile_Main_420_8: eAVEncH265VProfile = eAVEncH265VProfile(1i32);
pub const eAVEncH265VProfile_Main_420_10: eAVEncH265VProfile = eAVEncH265VProfile(2i32);
pub const eAVEncH265VProfile_Main_420_12: eAVEncH265VProfile = eAVEncH265VProfile(3i32);
pub const eAVEncH265VProfile_Main_422_10: eAVEncH265VProfile = eAVEncH265VProfile(4i32);
pub const eAVEncH265VProfile_Main_422_12: eAVEncH265VProfile = eAVEncH265VProfile(5i32);
pub const eAVEncH265VProfile_Main_444_8: eAVEncH265VProfile = eAVEncH265VProfile(6i32);
pub const eAVEncH265VProfile_Main_444_10: eAVEncH265VProfile = eAVEncH265VProfile(7i32);
pub const eAVEncH265VProfile_Main_444_12: eAVEncH265VProfile = eAVEncH265VProfile(8i32);
pub const eAVEncH265VProfile_Monochrome_12: eAVEncH265VProfile = eAVEncH265VProfile(9i32);
pub const eAVEncH265VProfile_Monochrome_16: eAVEncH265VProfile = eAVEncH265VProfile(10i32);
pub const eAVEncH265VProfile_MainIntra_420_8: eAVEncH265VProfile = eAVEncH265VProfile(11i32);
pub const eAVEncH265VProfile_MainIntra_420_10: eAVEncH265VProfile = eAVEncH265VProfile(12i32);
pub const eAVEncH265VProfile_MainIntra_420_12: eAVEncH265VProfile = eAVEncH265VProfile(13i32);
pub const eAVEncH265VProfile_MainIntra_422_10: eAVEncH265VProfile = eAVEncH265VProfile(14i32);
pub const eAVEncH265VProfile_MainIntra_422_12: eAVEncH265VProfile = eAVEncH265VProfile(15i32);
pub const eAVEncH265VProfile_MainIntra_444_8: eAVEncH265VProfile = eAVEncH265VProfile(16i32);
pub const eAVEncH265VProfile_MainIntra_444_10: eAVEncH265VProfile = eAVEncH265VProfile(17i32);
pub const eAVEncH265VProfile_MainIntra_444_12: eAVEncH265VProfile = eAVEncH265VProfile(18i32);
pub const eAVEncH265VProfile_MainIntra_444_16: eAVEncH265VProfile = eAVEncH265VProfile(19i32);
pub const eAVEncH265VProfile_MainStill_420_8: eAVEncH265VProfile = eAVEncH265VProfile(20i32);
pub const eAVEncH265VProfile_MainStill_444_8: eAVEncH265VProfile = eAVEncH265VProfile(21i32);
pub const eAVEncH265VProfile_MainStill_444_16: eAVEncH265VProfile = eAVEncH265VProfile(22i32);
impl ::core::convert::From<i32> for eAVEncH265VProfile {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncH265VProfile {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncInputVideoSystem(pub i32);
pub const eAVEncInputVideoSystem_Unspecified: eAVEncInputVideoSystem = eAVEncInputVideoSystem(0i32);
pub const eAVEncInputVideoSystem_PAL: eAVEncInputVideoSystem = eAVEncInputVideoSystem(1i32);
pub const eAVEncInputVideoSystem_NTSC: eAVEncInputVideoSystem = eAVEncInputVideoSystem(2i32);
pub const eAVEncInputVideoSystem_SECAM: eAVEncInputVideoSystem = eAVEncInputVideoSystem(3i32);
pub const eAVEncInputVideoSystem_MAC: eAVEncInputVideoSystem = eAVEncInputVideoSystem(4i32);
pub const eAVEncInputVideoSystem_HDV: eAVEncInputVideoSystem = eAVEncInputVideoSystem(5i32);
pub const eAVEncInputVideoSystem_Component: eAVEncInputVideoSystem = eAVEncInputVideoSystem(6i32);
impl ::core::convert::From<i32> for eAVEncInputVideoSystem {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncInputVideoSystem {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncMPACodingMode(pub i32);
pub const eAVEncMPACodingMode_Mono: eAVEncMPACodingMode = eAVEncMPACodingMode(0i32);
pub const eAVEncMPACodingMode_Stereo: eAVEncMPACodingMode = eAVEncMPACodingMode(1i32);
pub const eAVEncMPACodingMode_DualChannel: eAVEncMPACodingMode = eAVEncMPACodingMode(2i32);
pub const eAVEncMPACodingMode_JointStereo: eAVEncMPACodingMode = eAVEncMPACodingMode(3i32);
pub const eAVEncMPACodingMode_Surround: eAVEncMPACodingMode = eAVEncMPACodingMode(4i32);
impl ::core::convert::From<i32> for eAVEncMPACodingMode {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncMPACodingMode {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncMPAEmphasisType(pub i32);
pub const eAVEncMPAEmphasisType_None: eAVEncMPAEmphasisType = eAVEncMPAEmphasisType(0i32);
pub const eAVEncMPAEmphasisType_50_15: eAVEncMPAEmphasisType = eAVEncMPAEmphasisType(1i32);
pub const eAVEncMPAEmphasisType_Reserved: eAVEncMPAEmphasisType = eAVEncMPAEmphasisType(2i32);
pub const eAVEncMPAEmphasisType_CCITT_J17: eAVEncMPAEmphasisType = eAVEncMPAEmphasisType(3i32);
impl ::core::convert::From<i32> for eAVEncMPAEmphasisType {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncMPAEmphasisType {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncMPALayer(pub i32);
pub const eAVEncMPALayer_1: eAVEncMPALayer = eAVEncMPALayer(1i32);
pub const eAVEncMPALayer_2: eAVEncMPALayer = eAVEncMPALayer(2i32);
pub const eAVEncMPALayer_3: eAVEncMPALayer = eAVEncMPALayer(3i32);
impl ::core::convert::From<i32> for eAVEncMPALayer {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncMPALayer {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncMPVFrameFieldMode(pub i32);
pub const eAVEncMPVFrameFieldMode_FieldMode: eAVEncMPVFrameFieldMode = eAVEncMPVFrameFieldMode(0i32);
pub const eAVEncMPVFrameFieldMode_FrameMode: eAVEncMPVFrameFieldMode = eAVEncMPVFrameFieldMode(1i32);
impl ::core::convert::From<i32> for eAVEncMPVFrameFieldMode {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncMPVFrameFieldMode {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncMPVIntraVLCTable(pub i32);
pub const eAVEncMPVIntraVLCTable_Auto: eAVEncMPVIntraVLCTable = eAVEncMPVIntraVLCTable(0i32);
pub const eAVEncMPVIntraVLCTable_MPEG1: eAVEncMPVIntraVLCTable = eAVEncMPVIntraVLCTable(1i32);
pub const eAVEncMPVIntraVLCTable_Alternate: eAVEncMPVIntraVLCTable = eAVEncMPVIntraVLCTable(2i32);
impl ::core::convert::From<i32> for eAVEncMPVIntraVLCTable {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncMPVIntraVLCTable {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncMPVLevel(pub i32);
pub const eAVEncMPVLevel_Low: eAVEncMPVLevel = eAVEncMPVLevel(1i32);
pub const eAVEncMPVLevel_Main: eAVEncMPVLevel = eAVEncMPVLevel(2i32);
pub const eAVEncMPVLevel_High1440: eAVEncMPVLevel = eAVEncMPVLevel(3i32);
pub const eAVEncMPVLevel_High: eAVEncMPVLevel = eAVEncMPVLevel(4i32);
impl ::core::convert::From<i32> for eAVEncMPVLevel {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncMPVLevel {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncMPVProfile(pub i32);
pub const eAVEncMPVProfile_unknown: eAVEncMPVProfile = eAVEncMPVProfile(0i32);
pub const eAVEncMPVProfile_Simple: eAVEncMPVProfile = eAVEncMPVProfile(1i32);
pub const eAVEncMPVProfile_Main: eAVEncMPVProfile = eAVEncMPVProfile(2i32);
pub const eAVEncMPVProfile_High: eAVEncMPVProfile = eAVEncMPVProfile(3i32);
pub const eAVEncMPVProfile_422: eAVEncMPVProfile = eAVEncMPVProfile(4i32);
impl ::core::convert::From<i32> for eAVEncMPVProfile {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncMPVProfile {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncMPVQScaleType(pub i32);
pub const eAVEncMPVQScaleType_Auto: eAVEncMPVQScaleType = eAVEncMPVQScaleType(0i32);
pub const eAVEncMPVQScaleType_Linear: eAVEncMPVQScaleType = eAVEncMPVQScaleType(1i32);
pub const eAVEncMPVQScaleType_NonLinear: eAVEncMPVQScaleType = eAVEncMPVQScaleType(2i32);
impl ::core::convert::From<i32> for eAVEncMPVQScaleType {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncMPVQScaleType {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncMPVScanPattern(pub i32);
pub const eAVEncMPVScanPattern_Auto: eAVEncMPVScanPattern = eAVEncMPVScanPattern(0i32);
pub const eAVEncMPVScanPattern_ZigZagScan: eAVEncMPVScanPattern = eAVEncMPVScanPattern(1i32);
pub const eAVEncMPVScanPattern_AlternateScan: eAVEncMPVScanPattern = eAVEncMPVScanPattern(2i32);
impl ::core::convert::From<i32> for eAVEncMPVScanPattern {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncMPVScanPattern {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncMPVSceneDetection(pub i32);
pub const eAVEncMPVSceneDetection_None: eAVEncMPVSceneDetection = eAVEncMPVSceneDetection(0i32);
pub const eAVEncMPVSceneDetection_InsertIPicture: eAVEncMPVSceneDetection = eAVEncMPVSceneDetection(1i32);
pub const eAVEncMPVSceneDetection_StartNewGOP: eAVEncMPVSceneDetection = eAVEncMPVSceneDetection(2i32);
pub const eAVEncMPVSceneDetection_StartNewLocatableGOP: eAVEncMPVSceneDetection = eAVEncMPVSceneDetection(3i32);
impl ::core::convert::From<i32> for eAVEncMPVSceneDetection {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncMPVSceneDetection {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncMuxOutput(pub i32);
pub const eAVEncMuxOutputAuto: eAVEncMuxOutput = eAVEncMuxOutput(0i32);
pub const eAVEncMuxOutputPS: eAVEncMuxOutput = eAVEncMuxOutput(1i32);
pub const eAVEncMuxOutputTS: eAVEncMuxOutput = eAVEncMuxOutput(2i32);
impl ::core::convert::From<i32> for eAVEncMuxOutput {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncMuxOutput {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncVP9VProfile(pub i32);
pub const eAVEncVP9VProfile_unknown: eAVEncVP9VProfile = eAVEncVP9VProfile(0i32);
pub const eAVEncVP9VProfile_420_8: eAVEncVP9VProfile = eAVEncVP9VProfile(1i32);
pub const eAVEncVP9VProfile_420_10: eAVEncVP9VProfile = eAVEncVP9VProfile(2i32);
pub const eAVEncVP9VProfile_420_12: eAVEncVP9VProfile = eAVEncVP9VProfile(3i32);
impl ::core::convert::From<i32> for eAVEncVP9VProfile {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncVP9VProfile {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncVideoChromaResolution(pub i32);
pub const eAVEncVideoChromaResolution_SameAsSource: eAVEncVideoChromaResolution = eAVEncVideoChromaResolution(0i32);
pub const eAVEncVideoChromaResolution_444: eAVEncVideoChromaResolution = eAVEncVideoChromaResolution(1i32);
pub const eAVEncVideoChromaResolution_422: eAVEncVideoChromaResolution = eAVEncVideoChromaResolution(2i32);
pub const eAVEncVideoChromaResolution_420: eAVEncVideoChromaResolution = eAVEncVideoChromaResolution(3i32);
pub const eAVEncVideoChromaResolution_411: eAVEncVideoChromaResolution = eAVEncVideoChromaResolution(4i32);
impl ::core::convert::From<i32> for eAVEncVideoChromaResolution {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncVideoChromaResolution {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncVideoChromaSubsampling(pub i32);
pub const eAVEncVideoChromaSubsamplingFormat_SameAsSource: eAVEncVideoChromaSubsampling = eAVEncVideoChromaSubsampling(0i32);
pub const eAVEncVideoChromaSubsamplingFormat_ProgressiveChroma: eAVEncVideoChromaSubsampling = eAVEncVideoChromaSubsampling(8i32);
pub const eAVEncVideoChromaSubsamplingFormat_Horizontally_Cosited: eAVEncVideoChromaSubsampling = eAVEncVideoChromaSubsampling(4i32);
pub const eAVEncVideoChromaSubsamplingFormat_Vertically_Cosited: eAVEncVideoChromaSubsampling = eAVEncVideoChromaSubsampling(2i32);
pub const eAVEncVideoChromaSubsamplingFormat_Vertically_AlignedChromaPlanes: eAVEncVideoChromaSubsampling = eAVEncVideoChromaSubsampling(1i32);
impl ::core::convert::From<i32> for eAVEncVideoChromaSubsampling {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncVideoChromaSubsampling {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncVideoColorLighting(pub i32);
pub const eAVEncVideoColorLighting_SameAsSource: eAVEncVideoColorLighting = eAVEncVideoColorLighting(0i32);
pub const eAVEncVideoColorLighting_Unknown: eAVEncVideoColorLighting = eAVEncVideoColorLighting(1i32);
pub const eAVEncVideoColorLighting_Bright: eAVEncVideoColorLighting = eAVEncVideoColorLighting(2i32);
pub const eAVEncVideoColorLighting_Office: eAVEncVideoColorLighting = eAVEncVideoColorLighting(3i32);
pub const eAVEncVideoColorLighting_Dim: eAVEncVideoColorLighting = eAVEncVideoColorLighting(4i32);
pub const eAVEncVideoColorLighting_Dark: eAVEncVideoColorLighting = eAVEncVideoColorLighting(5i32);
impl ::core::convert::From<i32> for eAVEncVideoColorLighting {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncVideoColorLighting {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncVideoColorNominalRange(pub i32);
pub const eAVEncVideoColorNominalRange_SameAsSource: eAVEncVideoColorNominalRange = eAVEncVideoColorNominalRange(0i32);
pub const eAVEncVideoColorNominalRange_0_255: eAVEncVideoColorNominalRange = eAVEncVideoColorNominalRange(1i32);
pub const eAVEncVideoColorNominalRange_16_235: eAVEncVideoColorNominalRange = eAVEncVideoColorNominalRange(2i32);
pub const eAVEncVideoColorNominalRange_48_208: eAVEncVideoColorNominalRange = eAVEncVideoColorNominalRange(3i32);
impl ::core::convert::From<i32> for eAVEncVideoColorNominalRange {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncVideoColorNominalRange {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncVideoColorPrimaries(pub i32);
pub const eAVEncVideoColorPrimaries_SameAsSource: eAVEncVideoColorPrimaries = eAVEncVideoColorPrimaries(0i32);
pub const eAVEncVideoColorPrimaries_Reserved: eAVEncVideoColorPrimaries = eAVEncVideoColorPrimaries(1i32);
pub const eAVEncVideoColorPrimaries_BT709: eAVEncVideoColorPrimaries = eAVEncVideoColorPrimaries(2i32);
pub const eAVEncVideoColorPrimaries_BT470_2_SysM: eAVEncVideoColorPrimaries = eAVEncVideoColorPrimaries(3i32);
pub const eAVEncVideoColorPrimaries_BT470_2_SysBG: eAVEncVideoColorPrimaries = eAVEncVideoColorPrimaries(4i32);
pub const eAVEncVideoColorPrimaries_SMPTE170M: eAVEncVideoColorPrimaries = eAVEncVideoColorPrimaries(5i32);
pub const eAVEncVideoColorPrimaries_SMPTE240M: eAVEncVideoColorPrimaries = eAVEncVideoColorPrimaries(6i32);
pub const eAVEncVideoColorPrimaries_EBU3231: eAVEncVideoColorPrimaries = eAVEncVideoColorPrimaries(7i32);
pub const eAVEncVideoColorPrimaries_SMPTE_C: eAVEncVideoColorPrimaries = eAVEncVideoColorPrimaries(8i32);
impl ::core::convert::From<i32> for eAVEncVideoColorPrimaries {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncVideoColorPrimaries {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncVideoColorTransferFunction(pub i32);
pub const eAVEncVideoColorTransferFunction_SameAsSource: eAVEncVideoColorTransferFunction = eAVEncVideoColorTransferFunction(0i32);
pub const eAVEncVideoColorTransferFunction_10: eAVEncVideoColorTransferFunction = eAVEncVideoColorTransferFunction(1i32);
pub const eAVEncVideoColorTransferFunction_18: eAVEncVideoColorTransferFunction = eAVEncVideoColorTransferFunction(2i32);
pub const eAVEncVideoColorTransferFunction_20: eAVEncVideoColorTransferFunction = eAVEncVideoColorTransferFunction(3i32);
pub const eAVEncVideoColorTransferFunction_22: eAVEncVideoColorTransferFunction = eAVEncVideoColorTransferFunction(4i32);
pub const eAVEncVideoColorTransferFunction_22_709: eAVEncVideoColorTransferFunction = eAVEncVideoColorTransferFunction(5i32);
pub const eAVEncVideoColorTransferFunction_22_240M: eAVEncVideoColorTransferFunction = eAVEncVideoColorTransferFunction(6i32);
pub const eAVEncVideoColorTransferFunction_22_8bit_sRGB: eAVEncVideoColorTransferFunction = eAVEncVideoColorTransferFunction(7i32);
pub const eAVEncVideoColorTransferFunction_28: eAVEncVideoColorTransferFunction = eAVEncVideoColorTransferFunction(8i32);
impl ::core::convert::From<i32> for eAVEncVideoColorTransferFunction {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncVideoColorTransferFunction {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncVideoColorTransferMatrix(pub i32);
pub const eAVEncVideoColorTransferMatrix_SameAsSource: eAVEncVideoColorTransferMatrix = eAVEncVideoColorTransferMatrix(0i32);
pub const eAVEncVideoColorTransferMatrix_BT709: eAVEncVideoColorTransferMatrix = eAVEncVideoColorTransferMatrix(1i32);
pub const eAVEncVideoColorTransferMatrix_BT601: eAVEncVideoColorTransferMatrix = eAVEncVideoColorTransferMatrix(2i32);
pub const eAVEncVideoColorTransferMatrix_SMPTE240M: eAVEncVideoColorTransferMatrix = eAVEncVideoColorTransferMatrix(3i32);
impl ::core::convert::From<i32> for eAVEncVideoColorTransferMatrix {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncVideoColorTransferMatrix {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncVideoContentType(pub i32);
pub const eAVEncVideoContentType_Unknown: eAVEncVideoContentType = eAVEncVideoContentType(0i32);
pub const eAVEncVideoContentType_FixedCameraAngle: eAVEncVideoContentType = eAVEncVideoContentType(1i32);
impl ::core::convert::From<i32> for eAVEncVideoContentType {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncVideoContentType {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncVideoFilmContent(pub i32);
pub const eAVEncVideoFilmContent_VideoOnly: eAVEncVideoFilmContent = eAVEncVideoFilmContent(0i32);
pub const eAVEncVideoFilmContent_FilmOnly: eAVEncVideoFilmContent = eAVEncVideoFilmContent(1i32);
pub const eAVEncVideoFilmContent_Mixed: eAVEncVideoFilmContent = eAVEncVideoFilmContent(2i32);
impl ::core::convert::From<i32> for eAVEncVideoFilmContent {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncVideoFilmContent {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncVideoOutputFrameRateConversion(pub i32);
pub const eAVEncVideoOutputFrameRateConversion_Disable: eAVEncVideoOutputFrameRateConversion = eAVEncVideoOutputFrameRateConversion(0i32);
pub const eAVEncVideoOutputFrameRateConversion_Enable: eAVEncVideoOutputFrameRateConversion = eAVEncVideoOutputFrameRateConversion(1i32);
pub const eAVEncVideoOutputFrameRateConversion_Alias: eAVEncVideoOutputFrameRateConversion = eAVEncVideoOutputFrameRateConversion(2i32);
impl ::core::convert::From<i32> for eAVEncVideoOutputFrameRateConversion {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncVideoOutputFrameRateConversion {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncVideoOutputScanType(pub i32);
pub const eAVEncVideoOutputScan_Progressive: eAVEncVideoOutputScanType = eAVEncVideoOutputScanType(0i32);
pub const eAVEncVideoOutputScan_Interlaced: eAVEncVideoOutputScanType = eAVEncVideoOutputScanType(1i32);
pub const eAVEncVideoOutputScan_SameAsInput: eAVEncVideoOutputScanType = eAVEncVideoOutputScanType(2i32);
pub const eAVEncVideoOutputScan_Automatic: eAVEncVideoOutputScanType = eAVEncVideoOutputScanType(3i32);
impl ::core::convert::From<i32> for eAVEncVideoOutputScanType {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncVideoOutputScanType {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVEncVideoSourceScanType(pub i32);
pub const eAVEncVideoSourceScan_Automatic: eAVEncVideoSourceScanType = eAVEncVideoSourceScanType(0i32);
pub const eAVEncVideoSourceScan_Interlaced: eAVEncVideoSourceScanType = eAVEncVideoSourceScanType(1i32);
pub const eAVEncVideoSourceScan_Progressive: eAVEncVideoSourceScanType = eAVEncVideoSourceScanType(2i32);
impl ::core::convert::From<i32> for eAVEncVideoSourceScanType {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVEncVideoSourceScanType {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVFastDecodeMode(pub i32);
pub const eVideoDecodeCompliant: eAVFastDecodeMode = eAVFastDecodeMode(0i32);
pub const eVideoDecodeOptimalLF: eAVFastDecodeMode = eAVFastDecodeMode(1i32);
pub const eVideoDecodeDisableLF: eAVFastDecodeMode = eAVFastDecodeMode(2i32);
pub const eVideoDecodeFastest: eAVFastDecodeMode = eAVFastDecodeMode(32i32);
impl ::core::convert::From<i32> for eAVFastDecodeMode {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVFastDecodeMode {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eAVScenarioInfo(pub i32);
pub const eAVScenarioInfo_Unknown: eAVScenarioInfo = eAVScenarioInfo(0i32);
pub const eAVScenarioInfo_DisplayRemoting: eAVScenarioInfo = eAVScenarioInfo(1i32);
pub const eAVScenarioInfo_VideoConference: eAVScenarioInfo = eAVScenarioInfo(2i32);
pub const eAVScenarioInfo_Archive: eAVScenarioInfo = eAVScenarioInfo(3i32);
pub const eAVScenarioInfo_LiveStreaming: eAVScenarioInfo = eAVScenarioInfo(4i32);
pub const eAVScenarioInfo_CameraRecord: eAVScenarioInfo = eAVScenarioInfo(5i32);
pub const eAVScenarioInfo_DisplayRemotingWithFeatureMap: eAVScenarioInfo = eAVScenarioInfo(6i32);
impl ::core::convert::From<i32> for eAVScenarioInfo {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eAVScenarioInfo {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq, :: core :: marker :: Copy, :: core :: clone :: Clone, :: core :: default :: Default, :: core :: fmt :: Debug)]
#[repr(transparent)]
pub struct eVideoEncoderDisplayContentType(pub i32);
pub const eVideoEncoderDisplayContent_Unknown: eVideoEncoderDisplayContentType = eVideoEncoderDisplayContentType(0i32);
pub const eVideoEncoderDisplayContent_FullScreenVideo: eVideoEncoderDisplayContentType = eVideoEncoderDisplayContentType(1i32);
impl ::core::convert::From<i32> for eVideoEncoderDisplayContentType {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for eVideoEncoderDisplayContentType {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const g_wszSpeechFormatCaps: &'static str = "SpeechFormatCap";
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const g_wszWMCPAudioVBRQuality: &'static str = "_VBRQUALITY";
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const g_wszWMCPAudioVBRSupported: &'static str = "_VBRENABLED";
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const g_wszWMCPCodecName: &'static str = "_CODECNAME";
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const g_wszWMCPDefaultCrisp: &'static str = "_DEFAULTCRISP";
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const g_wszWMCPMaxPasses: &'static str = "_PASSESRECOMMENDED";
#[doc = "*Required features: `Win32_Media_MediaFoundation`*"]
pub const g_wszWMCPSupportedVBRModes: &'static str = "_SUPPORTEDVBRMODES";
